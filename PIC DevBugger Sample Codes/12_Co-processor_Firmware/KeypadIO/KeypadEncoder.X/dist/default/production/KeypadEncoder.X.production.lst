

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 16 14:40:27 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,inline
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F2550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	idataCOMRAM
    56  000358                     __pidataCOMRAM:
    57                           	opt stack 0
    58                           
    59                           ;initializer for _UART
    60  000358  16                 	db	low _uart
    61  000359  00                 	db	high _uart
    62                           
    63                           ;initializer for _dataEnd
    64  00035A  F0                 	db	240
    65                           
    66                           ;initializer for _KPDState
    67  00035B  01                 	db	1
    68                           
    69                           ;initializer for Keypad@dataEnd
    70  00035C  F0                 	db	240
    71  0000                     _SPBRG	set	4015
    72  0000                     _TXSTAbits	set	4012
    73  0000                     _LATAbits	set	3977
    74  0000                     _PORTAbits	set	3968
    75  0000                     _PORTBbits	set	3969
    76  0000                     _RCREG	set	4014
    77  0000                     _RCSTAbits	set	4011
    78  0000                     _TXREG	set	4013
    79  0000                     _INTCONbits	set	4082
    80  0000                     _RCONbits	set	4048
    81  0000                     _ADCON0bits	set	4034
    82  0000                     _ADCON1	set	4033
    83  0000                     _LATC	set	3979
    84  0000                     _LATB	set	3978
    85  0000                     _LATA	set	3977
    86  0000                     _TRISC	set	3988
    87  0000                     _TRISB	set	3987
    88  0000                     _TRISA	set	3986
    89  0000                     _OSCCONbits	set	4051
    90  0000                     _TRISC7	set	31911
    91  0000                     _TRISC6	set	31910
    92  0000                     _TRMT	set	32097
    93  0000                     _RCIE	set	31981
    94  0000                     _RCIF	set	31989
    95  0000                     _TXIE	set	31980
    96  0000                     _TXIF	set	31988
    97  0000                     _ADIE	set	31982
    98  0000                     _PEIE	set	32662
    99                           
   100                           ; #config settings
   101  0000                     
   102                           	psect	cinit
   103  0002E2                     __pcinit:
   104                           	opt stack 0
   105  0002E2                     start_initialization:
   106                           	opt stack 0
   107  0002E2                     __initialization:
   108                           	opt stack 0
   109                           
   110                           ; Initialize objects allocated to COMRAM (5 bytes)
   111                           ; load TBLPTR registers with __pidataCOMRAM
   112  0002E2  0E58               	movlw	low __pidataCOMRAM
   113  0002E4  6EF6               	movwf	tblptrl,c
   114  0002E6  0E03               	movlw	high __pidataCOMRAM
   115  0002E8  6EF7               	movwf	tblptrh,c
   116  0002EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   117  0002EC  6EF8               	movwf	tblptru,c
   118  0002EE  EE00  F03A         	lfsr	0,__pdataCOMRAM
   119  0002F2  EE10 F005          	lfsr	1,5
   120  0002F6                     copy_data0:
   121  0002F6  0009               	tblrd		*+
   122  0002F8  CFF5 FFEE          	movff	tablat,postinc0
   123  0002FC  50E5               	movf	postdec1,w,c
   124  0002FE  50E1               	movf	fsr1l,w,c
   125  000300  E1FA               	bnz	copy_data0
   126                           
   127                           ; Clear objects allocated to COMRAM (34 bytes)
   128  000302  EE00  F001         	lfsr	0,__pbssCOMRAM
   129  000306  0E22               	movlw	34
   130  000308                     clear_0:
   131  000308  6AEE               	clrf	postinc0,c
   132  00030A  06E8               	decf	wreg,f,c
   133  00030C  E1FD               	bnz	clear_0
   134  00030E                     end_of_initialization:
   135                           	opt stack 0
   136  00030E                     __end_of__initialization:
   137                           	opt stack 0
   138  00030E  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   139  000310  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   140  000312  0E00               	movlw	low (__Lmediumconst shr (0+16))
   141  000314  6EF8               	movwf	tblptru,c
   142  000316  0100               	movlb	0
   143  000318  EFA7  F001         	goto	_main	;jump to C main() function
   144                           tblptru	equ	0xFF8
   145                           tblptrh	equ	0xFF7
   146                           tblptrl	equ	0xFF6
   147                           tablat	equ	0xFF5
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           postdec1	equ	0xFE5
   151                           fsr1l	equ	0xFE1
   152                           
   153                           	psect	bssCOMRAM
   154  000001                     __pbssCOMRAM:
   155                           	opt stack 0
   156  000001                     _keypadFlags:
   157                           	opt stack 0
   158  000001                     	ds	3
   159  000004                     	ds	1
   160  000005                     _UARTinterruptState:
   161                           	opt stack 0
   162  000005                     	ds	1
   163  000006                     _arr_dataRX:
   164                           	opt stack 0
   165  000006                     	ds	16
   166  000016                     _uart:
   167                           	opt stack 0
   168  000016                     	ds	12
   169  000022                     Keypad@dataOut:
   170                           	opt stack 0
   171  000022                     	ds	1
   172                           tblptru	equ	0xFF8
   173                           tblptrh	equ	0xFF7
   174                           tblptrl	equ	0xFF6
   175                           tablat	equ	0xFF5
   176                           postinc0	equ	0xFEE
   177                           wreg	equ	0xFE8
   178                           postdec1	equ	0xFE5
   179                           fsr1l	equ	0xFE1
   180                           
   181                           	psect	dataCOMRAM
   182  00003A                     __pdataCOMRAM:
   183                           	opt stack 0
   184  00003A                     _UART:
   185                           	opt stack 0
   186  00003A                     	ds	2
   187  00003C                     	ds	1
   188  00003D                     _KPDState:
   189                           	opt stack 0
   190  00003D                     	ds	1
   191  00003E                     Keypad@dataEnd:
   192                           	opt stack 0
   193  00003E                     	ds	1
   194                           tblptru	equ	0xFF8
   195                           tblptrh	equ	0xFF7
   196                           tblptrl	equ	0xFF6
   197                           tablat	equ	0xFF5
   198                           postinc0	equ	0xFEE
   199                           wreg	equ	0xFE8
   200                           postdec1	equ	0xFE5
   201                           fsr1l	equ	0xFE1
   202                           
   203                           	psect	cstackCOMRAM
   204  000023                     __pcstackCOMRAM:
   205                           	opt stack 0
   206  000023                     ??_interruptHandlerUART:
   207  000023                     
   208                           ; 1 bytes @ 0x0
   209  000023                     	ds	21
   210  000038                     readKeyboard@i:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0x15
   214  000038                     	ds	1
   215  000039                     ??_keypadRoutine:
   216                           
   217                           ; 1 bytes @ 0x16
   218  000039                     	ds	1
   219  00003A                     tblptru	equ	0xFF8
   220                           tblptrh	equ	0xFF7
   221                           tblptrl	equ	0xFF6
   222                           tablat	equ	0xFF5
   223                           postinc0	equ	0xFEE
   224                           wreg	equ	0xFE8
   225                           postdec1	equ	0xFE5
   226                           fsr1l	equ	0xFE1
   227                           
   228                           ; 1 bytes @ 0x17
   229 ;;
   230 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   231 ;;
   232 ;; *************** function _main *****************
   233 ;; Defined at:
   234 ;;		line 13 in file "main.c"
   235 ;; Parameters:    Size  Location     Type
   236 ;;		None
   237 ;; Auto vars:     Size  Location     Type
   238 ;;		None
   239 ;; Return value:  Size  Location     Type
   240 ;;                  1    wreg      void 
   241 ;; Registers used:
   242 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   243 ;; Tracked objects:
   244 ;;		On entry : 0/0
   245 ;;		On exit  : 0/0
   246 ;;		Unchanged: 0/0
   247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   248 ;;      Params:         0       0       0       0       0       0       0       0       0
   249 ;;      Locals:         0       0       0       0       0       0       0       0       0
   250 ;;      Temps:          0       0       0       0       0       0       0       0       0
   251 ;;      Totals:         0       0       0       0       0       0       0       0       0
   252 ;;Total ram usage:        0 bytes
   253 ;; Hardware stack levels required when called:    3
   254 ;; This function calls:
   255 ;;		_keypadRoutine
   256 ;;		_machineConfig
   257 ;; This function is called by:
   258 ;;		Startup code after reset
   259 ;; This function uses a non-reentrant model
   260 ;;
   261                           
   262                           	psect	text0
   263  00034E                     __ptext0:
   264                           	opt stack 0
   265  00034E                     _main:
   266                           	opt stack 28
   267                           
   268                           ;main.c: 14: machineConfig();
   269                           
   270                           ;incstack = 0
   271  00034E  EC8E  F001         	call	_machineConfig	;wreg free
   272  000352                     
   273                           ;main.c: 17: keypadRoutine();
   274  000352  EC3B  F001         	call	_keypadRoutine	;wreg free
   275  000356  D7FD               	goto	l23
   276  000358                     __end_of_main:
   277                           	opt stack 0
   278                           tblptru	equ	0xFF8
   279                           tblptrh	equ	0xFF7
   280                           tblptrl	equ	0xFF6
   281                           tablat	equ	0xFF5
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           postdec1	equ	0xFE5
   285                           fsr1l	equ	0xFE1
   286                           
   287 ;; *************** function _machineConfig *****************
   288 ;; Defined at:
   289 ;;		line 3 in file "machineConfig.c"
   290 ;; Parameters:    Size  Location     Type
   291 ;;		None
   292 ;; Auto vars:     Size  Location     Type
   293 ;;		None
   294 ;; Return value:  Size  Location     Type
   295 ;;                  1    wreg      void 
   296 ;; Registers used:
   297 ;;		wreg, status,2
   298 ;; Tracked objects:
   299 ;;		On entry : 0/0
   300 ;;		On exit  : 0/0
   301 ;;		Unchanged: 0/0
   302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   303 ;;      Params:         0       0       0       0       0       0       0       0       0
   304 ;;      Locals:         0       0       0       0       0       0       0       0       0
   305 ;;      Temps:          0       0       0       0       0       0       0       0       0
   306 ;;      Totals:         0       0       0       0       0       0       0       0       0
   307 ;;Total ram usage:        0 bytes
   308 ;; Hardware stack levels used:    1
   309 ;; Hardware stack levels required when called:    1
   310 ;; This function calls:
   311 ;;		Nothing
   312 ;; This function is called by:
   313 ;;		_main
   314 ;; This function uses a non-reentrant model
   315 ;;
   316                           
   317                           	psect	text1
   318  00031C                     __ptext1:
   319                           	opt stack 0
   320  00031C                     _machineConfig:
   321                           	opt stack 29
   322                           
   323                           ;machineConfig.c: 6: OSCCONbits.IRCF = 0b111;
   324                           
   325                           ;incstack = 0
   326  00031C  88D3               	bsf	4051,4,c	;volatile
   327  00031E  8AD3               	bsf	4051,5,c	;volatile
   328  000320  8CD3               	bsf	4051,6,c	;volatile
   329                           
   330                           ;machineConfig.c: 7: OSCCONbits.SCS1 = 1;
   331  000322  82D3               	bsf	4051,1,c	;volatile
   332                           
   333                           ;machineConfig.c: 8: OSCCONbits.SCS0 = 0;
   334  000324  90D3               	bcf	4051,0,c	;volatile
   335                           
   336                           ;machineConfig.c: 11: TRISA = 0b11011111;
   337  000326  0EDF               	movlw	223
   338  000328  6E92               	movwf	3986,c	;volatile
   339                           
   340                           ;machineConfig.c: 13: TRISB = 0b00001111;
   341  00032A  0E0F               	movlw	15
   342  00032C  6E93               	movwf	3987,c	;volatile
   343                           
   344                           ;machineConfig.c: 14: TRISC = 0b10000000;
   345  00032E  0E80               	movlw	128
   346  000330  6E94               	movwf	3988,c	;volatile
   347                           
   348                           ;machineConfig.c: 17: LATA = 0x00;
   349  000332  0E00               	movlw	0
   350  000334  6E89               	movwf	3977,c	;volatile
   351                           
   352                           ;machineConfig.c: 18: LATB = 0xF0;
   353  000336  0EF0               	movlw	240
   354  000338  6E8A               	movwf	3978,c	;volatile
   355                           
   356                           ;machineConfig.c: 19: LATC = 0b10000000;
   357  00033A  0E80               	movlw	128
   358  00033C  6E8B               	movwf	3979,c	;volatile
   359                           
   360                           ;machineConfig.c: 22: ADCON1 = 0x0F;
   361  00033E  0E0F               	movlw	15
   362  000340  6EC1               	movwf	4033,c	;volatile
   363                           
   364                           ;machineConfig.c: 23: ADCON0bits.ADON = 0;
   365  000342  90C2               	bcf	4034,0,c	;volatile
   366                           
   367                           ;machineConfig.c: 26: PEIE = 1;
   368  000344  8CF2               	bsf	intcon,6,c	;volatile
   369                           
   370                           ;machineConfig.c: 27: ADIE = 0;
   371  000346  9C9D               	bcf	3997,6,c	;volatile
   372                           
   373                           ;machineConfig.c: 28: RCONbits.IPEN = 0;
   374  000348  9ED0               	bcf	4048,7,c	;volatile
   375                           
   376                           ;machineConfig.c: 29: (INTCONbits.GIE = 0);
   377  00034A  9EF2               	bcf	intcon,7,c	;volatile
   378  00034C  0012               	return		;funcret
   379  00034E                     __end_of_machineConfig:
   380                           	opt stack 0
   381                           tblptru	equ	0xFF8
   382                           tblptrh	equ	0xFF7
   383                           tblptrl	equ	0xFF6
   384                           tablat	equ	0xFF5
   385                           intcon	equ	0xFF2
   386                           postinc0	equ	0xFEE
   387                           wreg	equ	0xFE8
   388                           postdec1	equ	0xFE5
   389                           fsr1l	equ	0xFE1
   390                           
   391 ;; *************** function _keypadRoutine *****************
   392 ;; Defined at:
   393 ;;		line 47 in file "Keypad.c"
   394 ;; Parameters:    Size  Location     Type
   395 ;;		None
   396 ;; Auto vars:     Size  Location     Type
   397 ;;		None
   398 ;; Return value:  Size  Location     Type
   399 ;;                  1    wreg      void 
   400 ;; Registers used:
   401 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   402 ;; Tracked objects:
   403 ;;		On entry : 0/0
   404 ;;		On exit  : 0/0
   405 ;;		Unchanged: 0/0
   406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   407 ;;      Params:         0       0       0       0       0       0       0       0       0
   408 ;;      Locals:         0       0       0       0       0       0       0       0       0
   409 ;;      Temps:          1       0       0       0       0       0       0       0       0
   410 ;;      Totals:         1       0       0       0       0       0       0       0       0
   411 ;;Total ram usage:        1 bytes
   412 ;; Hardware stack levels used:    1
   413 ;; Hardware stack levels required when called:    2
   414 ;; This function calls:
   415 ;;		_readKeyboard
   416 ;; This function is called by:
   417 ;;		_main
   418 ;; This function uses a non-reentrant model
   419 ;;
   420                           
   421                           	psect	text2
   422  000276                     __ptext2:
   423                           	opt stack 0
   424  000276                     _keypadRoutine:
   425                           	opt stack 28
   426                           
   427                           ;Keypad.c: 56: if(PORTAbits.RA4){
   428                           
   429                           ;incstack = 0
   430  000276  A880               	btfss	3968,4,c	;volatile
   431  000278  D009               	goto	l139
   432                           
   433                           ;Keypad.c: 57: LATAbits.LATA5 = 0;
   434  00027A  9A89               	bcf	3977,5,c	;volatile
   435                           
   436                           ;Keypad.c: 58: TRISA = 0xFF;
   437  00027C  6892               	setf	3986,c	;volatile
   438  00027E  B880               	btfsc	3968,4,c	;volatile
   439  000280  D7FE               	goto	l141
   440                           
   441                           ;Keypad.c: 60: LATA = 0x00;
   442  000282  0E00               	movlw	0
   443  000284  6E89               	movwf	3977,c	;volatile
   444                           
   445                           ;Keypad.c: 61: TRISA = 0b11011111;
   446  000286  0EDF               	movlw	223
   447  000288  6E92               	movwf	3986,c	;volatile
   448                           
   449                           ;Keypad.c: 62: }
   450  00028A  0012               	return	
   451  00028C                     l139:
   452                           
   453                           ;Keypad.c: 65: else{
   454                           ;Keypad.c: 66: TRISA = 0b11011111;
   455  00028C  0EDF               	movlw	223
   456  00028E  6E92               	movwf	3986,c	;volatile
   457                           
   458                           ;Keypad.c: 69: dataOut = readKeyboard();
   459  000290  EC01  F001         	call	_readKeyboard	;wreg free
   460  000294  6E22               	movwf	Keypad@dataOut,c
   461                           
   462                           ;Keypad.c: 72: if (dataOut != 0xF0){
   463  000296  0EF0               	movlw	240
   464  000298  1822               	xorwf	Keypad@dataOut,w,c
   465  00029A  B4D8               	btfsc	status,2,c
   466  00029C  0012               	return	
   467                           
   468                           ;Keypad.c: 77: _delay((unsigned long)((20)*(8000000/4000.0)));
   469  00029E  0E34               	movlw	52
   470  0002A0  6E39               	movwf	??_keypadRoutine& (0+255),c
   471  0002A2  0EF2               	movlw	242
   472  0002A4                     u537:
   473  0002A4  2EE8               	decfsz	wreg,f,c
   474  0002A6  D7FE               	bra	u537
   475  0002A8  2E39               	decfsz	??_keypadRoutine& (0+255),f,c
   476  0002AA  D7FC               	bra	u537
   477                           
   478                           ;Keypad.c: 78: if (dataOut == readKeyboard()){
   479  0002AC  EC01  F001         	call	_readKeyboard	;wreg free
   480  0002B0  1822               	xorwf	Keypad@dataOut,w,c
   481  0002B2  A4D8               	btfss	status,2,c
   482  0002B4  D011               	goto	u170
   483                           
   484                           ;Keypad.c: 83: LATA = dataOut & 0b00001111U;
   485  0002B6  5022               	movf	Keypad@dataOut,w,c
   486  0002B8  0B0F               	andlw	15
   487  0002BA  6E89               	movwf	3977,c	;volatile
   488                           
   489                           ;Keypad.c: 84: TRISA = 0b11010000;
   490  0002BC  0ED0               	movlw	208
   491  0002BE  6E92               	movwf	3986,c	;volatile
   492                           
   493                           ;Keypad.c: 85: LATAbits.LATA5 = 1;
   494  0002C0  8A89               	bsf	3977,5,c	;volatile
   495                           
   496                           ;Keypad.c: 88: while (dataOut == readKeyboard()){
   497  0002C2  D005               	goto	u160
   498  0002C4                     l147:
   499                           
   500                           ;Keypad.c: 92: if(PORTAbits.RA4){
   501  0002C4  A880               	btfss	3968,4,c	;volatile
   502  0002C6  D003               	goto	u160
   503                           
   504                           ;Keypad.c: 93: TRISA = 0xFF;
   505  0002C8  6892               	setf	3986,c	;volatile
   506  0002CA                     
   507                           ;Keypad.c: 95: continue;
   508  0002CA  B880               	btfsc	3968,4,c	;volatile
   509  0002CC  D7FE               	goto	l150
   510  0002CE                     u160:
   511  0002CE  EC01  F001         	call	_readKeyboard	;wreg free
   512  0002D2  1822               	xorwf	Keypad@dataOut,w,c
   513  0002D4  B4D8               	btfsc	status,2,c
   514  0002D6  D7F6               	goto	l147
   515  0002D8                     u170:
   516                           
   517                           ;Keypad.c: 96: }
   518                           ;Keypad.c: 97: }
   519                           ;Keypad.c: 98: }
   520                           ;Keypad.c: 99: }
   521                           ;Keypad.c: 103: LATA = 0x00;
   522  0002D8  0E00               	movlw	0
   523  0002DA  6E89               	movwf	3977,c	;volatile
   524                           
   525                           ;Keypad.c: 104: TRISA = 0b11011111;
   526  0002DC  0EDF               	movlw	223
   527  0002DE  6E92               	movwf	3986,c	;volatile
   528  0002E0  0012               	return	
   529  0002E2                     __end_of_keypadRoutine:
   530                           	opt stack 0
   531                           tblptru	equ	0xFF8
   532                           tblptrh	equ	0xFF7
   533                           tblptrl	equ	0xFF6
   534                           tablat	equ	0xFF5
   535                           intcon	equ	0xFF2
   536                           postinc0	equ	0xFEE
   537                           wreg	equ	0xFE8
   538                           postdec1	equ	0xFE5
   539                           fsr1l	equ	0xFE1
   540                           status	equ	0xFD8
   541                           
   542 ;; *************** function _readKeyboard *****************
   543 ;; Defined at:
   544 ;;		line 14 in file "Keypad.c"
   545 ;; Parameters:    Size  Location     Type
   546 ;;		None
   547 ;; Auto vars:     Size  Location     Type
   548 ;;  i               1   21[COMRAM] unsigned char 
   549 ;; Return value:  Size  Location     Type
   550 ;;                  1    wreg      unsigned char 
   551 ;; Registers used:
   552 ;;		wreg, status,2, status,0, prodl, prodh
   553 ;; Tracked objects:
   554 ;;		On entry : 0/0
   555 ;;		On exit  : 0/0
   556 ;;		Unchanged: 0/0
   557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   558 ;;      Params:         0       0       0       0       0       0       0       0       0
   559 ;;      Locals:         1       0       0       0       0       0       0       0       0
   560 ;;      Temps:          0       0       0       0       0       0       0       0       0
   561 ;;      Totals:         1       0       0       0       0       0       0       0       0
   562 ;;Total ram usage:        1 bytes
   563 ;; Hardware stack levels used:    1
   564 ;; Hardware stack levels required when called:    1
   565 ;; This function calls:
   566 ;;		Nothing
   567 ;; This function is called by:
   568 ;;		_keypadRoutine
   569 ;;		_keypadRoutine_StateBased
   570 ;;		_keypadRoutineUART
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574                           	psect	text3
   575  000202                     __ptext3:
   576                           	opt stack 0
   577  000202                     _readKeyboard:
   578                           	opt stack 28
   579                           
   580                           ;Keypad.c: 25: for(unsigned char i = 0; i < 4; i++){
   581                           
   582                           ;incstack = 0
   583  000202  0E00               	movlw	0
   584  000204  6E38               	movwf	readKeyboard@i,c
   585  000206                     l898:
   586  000206  0E03               	movlw	3
   587  000208  6438               	cpfsgt	readKeyboard@i,c
   588  00020A  D001               	goto	l123
   589  00020C  D032               	goto	u100
   590  00020E                     l123:
   591                           
   592                           ;Keypad.c: 26: if(i == 0)
   593  00020E  5038               	movf	readKeyboard@i,w,c
   594  000210  A4D8               	btfss	status,2,c
   595  000212  D002               	goto	l125
   596                           
   597                           ;Keypad.c: 27: LATB = 0x10;
   598  000214  0E10               	movlw	16
   599  000216  D010               	goto	L3
   600  000218                     l125:
   601                           
   602                           ;Keypad.c: 28: else if(i == 1)
   603  000218  0438               	decf	readKeyboard@i,w,c
   604  00021A  A4D8               	btfss	status,2,c
   605  00021C  D002               	goto	l127
   606                           
   607                           ;Keypad.c: 29: LATB = 0x20;
   608  00021E  0E20               	movlw	32
   609  000220  D00B               	goto	L3
   610  000222                     l127:
   611                           
   612                           ;Keypad.c: 30: else if(i == 2)
   613  000222  0E02               	movlw	2
   614  000224  1838               	xorwf	readKeyboard@i,w,c
   615  000226  A4D8               	btfss	status,2,c
   616  000228  D002               	goto	l129
   617                           
   618                           ;Keypad.c: 31: LATB = 0x40;
   619  00022A  0E40               	movlw	64
   620  00022C  D005               	goto	L3
   621  00022E                     l129:
   622                           
   623                           ;Keypad.c: 32: else if(i == 3)
   624  00022E  0E03               	movlw	3
   625  000230  1838               	xorwf	readKeyboard@i,w,c
   626  000232  A4D8               	btfss	status,2,c
   627  000234  D002               	goto	l131
   628                           
   629                           ;Keypad.c: 33: LATB = 0x80;
   630  000236  0E80               	movlw	128
   631  000238                     L3:
   632  000238  6E8A               	movwf	3978,c	;volatile
   633  00023A                     l131:
   634                           
   635                           ;Keypad.c: 35: if(PORTBbits.RB0)
   636  00023A  A081               	btfss	3969,0,c	;volatile
   637  00023C  D004               	goto	l132
   638                           
   639                           ;Keypad.c: 36: return (i * 4U);
   640  00023E  5038               	movf	readKeyboard@i,w,c
   641  000240  0D04               	mullw	4
   642  000242  50F3               	movf	prodl,w,c
   643  000244  0012               	return	
   644  000246                     l132:
   645                           
   646                           ;Keypad.c: 37: if(PORTBbits.RB1)
   647  000246  A281               	btfss	3969,1,c	;volatile
   648  000248  D004               	goto	l134
   649                           
   650                           ;Keypad.c: 38: return (i * 4U) + 1U;
   651  00024A  5038               	movf	readKeyboard@i,w,c
   652  00024C  0D04               	mullw	4
   653  00024E  28F3               	incf	prodl,w,c
   654  000250  0012               	return	
   655  000252                     l134:
   656                           
   657                           ;Keypad.c: 39: if(PORTBbits.RB2)
   658  000252  A481               	btfss	3969,2,c	;volatile
   659  000254  D005               	goto	l135
   660                           
   661                           ;Keypad.c: 40: return (i * 4U) + 2U;
   662  000256  5038               	movf	readKeyboard@i,w,c
   663  000258  0D04               	mullw	4
   664  00025A  50F3               	movf	prodl,w,c
   665  00025C  0F02               	addlw	2
   666  00025E  0012               	return	
   667  000260                     l135:
   668                           
   669                           ;Keypad.c: 41: if(PORTBbits.RB3)
   670  000260  A681               	btfss	3969,3,c	;volatile
   671  000262  D005               	goto	l136
   672                           
   673                           ;Keypad.c: 42: return (i * 4U) + 3U;
   674  000264  5038               	movf	readKeyboard@i,w,c
   675  000266  0D04               	mullw	4
   676  000268  50F3               	movf	prodl,w,c
   677  00026A  0F03               	addlw	3
   678  00026C  0012               	return	
   679  00026E                     l136:
   680  00026E  2A38               	incf	readKeyboard@i,f,c
   681  000270  D7CA               	goto	l898
   682  000272                     u100:
   683                           
   684                           ;Keypad.c: 43: }
   685                           ;Keypad.c: 44: return 0xF0;
   686  000272  0EF0               	movlw	240
   687  000274  0012               	return	
   688  000276                     __end_of_readKeyboard:
   689                           	opt stack 0
   690                           tblptru	equ	0xFF8
   691                           tblptrh	equ	0xFF7
   692                           tblptrl	equ	0xFF6
   693                           tablat	equ	0xFF5
   694                           prodl	equ	0xFF3
   695                           intcon	equ	0xFF2
   696                           postinc0	equ	0xFEE
   697                           wreg	equ	0xFE8
   698                           postdec1	equ	0xFE5
   699                           fsr1l	equ	0xFE1
   700                           status	equ	0xFD8
   701                           
   702 ;; *************** function _interruptHandlerUART *****************
   703 ;; Defined at:
   704 ;;		line 10 in file "interruptUART.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;		None
   707 ;; Auto vars:     Size  Location     Type
   708 ;;		None
   709 ;; Return value:  Size  Location     Type
   710 ;;                  1    wreg      void 
   711 ;; Registers used:
   712 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   718 ;;      Params:         0       0       0       0       0       0       0       0       0
   719 ;;      Locals:         0       0       0       0       0       0       0       0       0
   720 ;;      Temps:         21       0       0       0       0       0       0       0       0
   721 ;;      Totals:        21       0       0       0       0       0       0       0       0
   722 ;;Total ram usage:       21 bytes
   723 ;; Hardware stack levels used:    1
   724 ;; This function calls:
   725 ;;		Nothing
   726 ;; This function is called by:
   727 ;;		Interrupt level 2
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	intcode
   732  000008                     __pintcode:
   733                           	opt stack 0
   734  000008                     _interruptHandlerUART:
   735                           	opt stack 28
   736                           
   737                           ;incstack = 0
   738  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   739  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
   740                           tblptru	equ	0xFF8
   741                           tblptrh	equ	0xFF7
   742                           tblptrl	equ	0xFF6
   743                           tablat	equ	0xFF5
   744                           prodl	equ	0xFF3
   745                           intcon	equ	0xFF2
   746                           postinc0	equ	0xFEE
   747                           wreg	equ	0xFE8
   748                           postdec1	equ	0xFE5
   749                           fsr1l	equ	0xFE1
   750                           status	equ	0xFD8
   751                           
   752                           	psect	intcode_body
   753  000012                     __pintcode_body:
   754                           	opt stack 28
   755  000012                     int_func:
   756                           	opt stack 28
   757  000012  0006               	pop		; remove dummy address from shadow register refresh
   758  000014  CFFA F026          	movff	pclath,??_interruptHandlerUART+3
   759  000018  CFFB F027          	movff	pclatu,??_interruptHandlerUART+4
   760  00001C  CFE9 F028          	movff	fsr0l,??_interruptHandlerUART+5
   761  000020  CFEA F029          	movff	fsr0h,??_interruptHandlerUART+6
   762  000024  CFE1 F02A          	movff	fsr1l,??_interruptHandlerUART+7
   763  000028  CFE2 F02B          	movff	fsr1h,??_interruptHandlerUART+8
   764  00002C  CFD9 F02C          	movff	fsr2l,??_interruptHandlerUART+9
   765  000030  CFDA F02D          	movff	fsr2h,??_interruptHandlerUART+10
   766  000034  CFF3 F02E          	movff	prodl,??_interruptHandlerUART+11
   767  000038  CFF4 F02F          	movff	prodh,??_interruptHandlerUART+12
   768  00003C  CFF6 F030          	movff	tblptrl,??_interruptHandlerUART+13
   769  000040  CFF7 F031          	movff	tblptrh,??_interruptHandlerUART+14
   770  000044  CFF8 F032          	movff	tblptru,??_interruptHandlerUART+15
   771  000048  CFF5 F033          	movff	tablat,??_interruptHandlerUART+16
   772  00004C  C03F  F034         	movff	btemp,??_interruptHandlerUART+17
   773  000050  C040  F035         	movff	btemp+1,??_interruptHandlerUART+18
   774  000054  C041  F036         	movff	btemp+2,??_interruptHandlerUART+19
   775  000058  C042  F037         	movff	btemp+3,??_interruptHandlerUART+20
   776                           
   777                           ;interruptUART.c: 17: if(TXIF){
   778  00005C  A89E               	btfss	3998,4,c	;volatile
   779  00005E  D044               	goto	i2l83
   780                           
   781                           ;interruptUART.c: 19: UARTinterruptState = INTCONbits.GIE;
   782  000060  0E00               	movlw	0
   783  000062  BEF2               	btfsc	intcon,7,c	;volatile
   784  000064  0E01               	movlw	1
   785  000066  6E05               	movwf	_UARTinterruptState,c	;volatile
   786                           
   787                           ;interruptUART.c: 20: (INTCONbits.GIE = 0);
   788  000068  9EF2               	bcf	intcon,7,c	;volatile
   789                           
   790                           ;interruptUART.c: 21: TXREG = UART -> _dataTX[UART -> _numTransmits];
   791  00006A  EE20 F003          	lfsr	2,3
   792  00006E  503A               	movf	_UART,w,c
   793  000070  26D9               	addwf	fsr2l,f,c
   794  000072  503B               	movf	_UART+1,w,c
   795  000074  22DA               	addwfc	fsr2h,f,c
   796  000076  50DF               	movf	indf2,w,c
   797  000078  6E23               	movwf	??_interruptHandlerUART& (0+255),c
   798  00007A  5023               	movf	??_interruptHandlerUART,w,c
   799  00007C  0D01               	mullw	1
   800  00007E  C03A  FFD9         	movff	_UART,fsr2l
   801  000082  C03B  FFDA         	movff	_UART+1,fsr2h
   802  000086  CFDE F024          	movff	postinc2,??_interruptHandlerUART+1
   803  00008A  CFDD F025          	movff	postdec2,??_interruptHandlerUART+2
   804  00008E  50F3               	movf	prodl,w,c
   805  000090  2424               	addwf	??_interruptHandlerUART+1,w,c
   806  000092  6ED9               	movwf	fsr2l,c
   807  000094  50F4               	movf	prodh,w,c
   808  000096  2025               	addwfc	??_interruptHandlerUART+2,w,c
   809  000098  6EDA               	movwf	fsr2h,c
   810  00009A  50DF               	movf	indf2,w,c
   811  00009C  6EAD               	movwf	4013,c	;volatile
   812                           
   813                           ;interruptUART.c: 22: INTCONbits.GIE = UARTinterruptState;
   814  00009E  B005               	btfsc	_UARTinterruptState,0,c	;volatile
   815  0000A0  D002               	bra	i2u19_45
   816  0000A2  9EF2               	bcf	intcon,7,c	;volatile
   817  0000A4  D001               	bra	i2u19_46
   818  0000A6                     i2u19_45:
   819  0000A6  8EF2               	bsf	intcon,7,c	;volatile
   820  0000A8                     i2u19_46:
   821                           
   822                           ;interruptUART.c: 24: UART -> _numTransmits++;
   823  0000A8  EE20 F003          	lfsr	2,3
   824  0000AC  503A               	movf	_UART,w,c
   825  0000AE  26D9               	addwf	fsr2l,f,c
   826  0000B0  503B               	movf	_UART+1,w,c
   827  0000B2  22DA               	addwfc	fsr2h,f,c
   828  0000B4  2ADF               	incf	indf2,f,c
   829                           
   830                           ;interruptUART.c: 27: if((UART -> _numTransmits) == (UART -> _numBytesTX)){
   831  0000B6  EE20 F002          	lfsr	2,2
   832  0000BA  503A               	movf	_UART,w,c
   833  0000BC  26D9               	addwf	fsr2l,f,c
   834  0000BE  503B               	movf	_UART+1,w,c
   835  0000C0  22DA               	addwfc	fsr2h,f,c
   836  0000C2  EE10 F003          	lfsr	1,3
   837  0000C6  503A               	movf	_UART,w,c
   838  0000C8  26E1               	addwf	fsr1l,f,c
   839  0000CA  503B               	movf	_UART+1,w,c
   840  0000CC  22E2               	addwfc	fsr1h,f,c
   841  0000CE  50DE               	movf	postinc2,w,c
   842  0000D0  18E6               	xorwf	postinc1,w,c
   843  0000D2  A4D8               	btfss	status,2,c
   844  0000D4  D009               	goto	i2l83
   845                           
   846                           ;interruptUART.c: 28: TXIE = 0;
   847  0000D6  989D               	bcf	3997,4,c	;volatile
   848                           
   849                           ;interruptUART.c: 31: UART -> _stateTX = UART_STATE_READY;
   850  0000D8  EE20 F008          	lfsr	2,8
   851  0000DC  503A               	movf	_UART,w,c
   852  0000DE  26D9               	addwf	fsr2l,f,c
   853  0000E0  503B               	movf	_UART+1,w,c
   854  0000E2  22DA               	addwfc	fsr2h,f,c
   855  0000E4  0E01               	movlw	1
   856  0000E6  6EDF               	movwf	indf2,c
   857  0000E8                     i2l83:
   858                           
   859                           ;interruptUART.c: 32: }
   860                           ;interruptUART.c: 33: }
   861                           ;interruptUART.c: 36: if(RCIF){
   862  0000E8  AA9E               	btfss	3998,5,c	;volatile
   863  0000EA  D065               	goto	i2l89
   864                           
   865                           ;interruptUART.c: 39: if(RCSTAbits.FERR){
   866  0000EC  A4AB               	btfss	4011,2,c	;volatile
   867  0000EE  D008               	goto	i2l85
   868                           
   869                           ;interruptUART.c: 43: UART -> _lastReceiveFERR = 1;
   870  0000F0  EE20 F00A          	lfsr	2,10
   871  0000F4  503A               	movf	_UART,w,c
   872  0000F6  26D9               	addwf	fsr2l,f,c
   873  0000F8  503B               	movf	_UART+1,w,c
   874  0000FA  22DA               	addwfc	fsr2h,f,c
   875  0000FC  0E01               	movlw	1
   876  0000FE  D007               	goto	L4
   877  000100                     i2l85:
   878                           
   879                           ;interruptUART.c: 45: else{
   880                           ;interruptUART.c: 46: UART -> _lastReceiveFERR = 0;
   881  000100  EE20 F00A          	lfsr	2,10
   882  000104  503A               	movf	_UART,w,c
   883  000106  26D9               	addwf	fsr2l,f,c
   884  000108  503B               	movf	_UART+1,w,c
   885  00010A  22DA               	addwfc	fsr2h,f,c
   886  00010C  0E00               	movlw	0
   887  00010E                     L4:
   888  00010E  6EDF               	movwf	indf2,c
   889                           
   890                           ;interruptUART.c: 47: }
   891                           ;interruptUART.c: 50: UARTinterruptState = INTCONbits.GIE;
   892  000110  0E00               	movlw	0
   893  000112  BEF2               	btfsc	intcon,7,c	;volatile
   894  000114  0E01               	movlw	1
   895  000116  6E05               	movwf	_UARTinterruptState,c	;volatile
   896                           
   897                           ;interruptUART.c: 51: (INTCONbits.GIE = 0);
   898  000118  9EF2               	bcf	intcon,7,c	;volatile
   899                           
   900                           ;interruptUART.c: 52: UART -> _dataRX[UART -> _numReceives] = RCREG;
   901  00011A  EE20 F007          	lfsr	2,7
   902  00011E  503A               	movf	_UART,w,c
   903  000120  26D9               	addwf	fsr2l,f,c
   904  000122  503B               	movf	_UART+1,w,c
   905  000124  22DA               	addwfc	fsr2h,f,c
   906  000126  50DF               	movf	indf2,w,c
   907  000128  6E23               	movwf	??_interruptHandlerUART& (0+255),c
   908  00012A  5023               	movf	??_interruptHandlerUART,w,c
   909  00012C  0D01               	mullw	1
   910  00012E  EE20 F004          	lfsr	2,4
   911  000132  503A               	movf	_UART,w,c
   912  000134  26D9               	addwf	fsr2l,f,c
   913  000136  503B               	movf	_UART+1,w,c
   914  000138  22DA               	addwfc	fsr2h,f,c
   915  00013A  CFDE F024          	movff	postinc2,??_interruptHandlerUART+1
   916  00013E  CFDD F025          	movff	postdec2,??_interruptHandlerUART+2
   917  000142  50F3               	movf	prodl,w,c
   918  000144  2424               	addwf	??_interruptHandlerUART+1,w,c
   919  000146  6ED9               	movwf	fsr2l,c
   920  000148  50F4               	movf	prodh,w,c
   921  00014A  2025               	addwfc	??_interruptHandlerUART+2,w,c
   922  00014C  6EDA               	movwf	fsr2h,c
   923  00014E  CFAE FFDF          	movff	4014,indf2	;volatile
   924                           
   925                           ;interruptUART.c: 53: INTCONbits.GIE = UARTinterruptState;
   926  000152  B005               	btfsc	_UARTinterruptState,0,c	;volatile
   927  000154  D002               	bra	i2u23_45
   928  000156  9EF2               	bcf	intcon,7,c	;volatile
   929  000158  D001               	bra	i2u23_46
   930  00015A                     i2u23_45:
   931  00015A  8EF2               	bsf	intcon,7,c	;volatile
   932  00015C                     i2u23_46:
   933                           
   934                           ;interruptUART.c: 57: if(RCSTAbits.OERR){
   935  00015C  A2AB               	btfss	4011,1,c	;volatile
   936  00015E  D003               	goto	i2l87
   937                           
   938                           ;interruptUART.c: 59: RCSTAbits.CREN = 0;
   939  000160  98AB               	bcf	4011,4,c	;volatile
   940                           
   941                           ;interruptUART.c: 60: RCSTAbits.CREN = 1;
   942  000162  88AB               	bsf	4011,4,c	;volatile
   943                           
   944                           ;interruptUART.c: 61: }
   945  000164  D008               	goto	i2l88
   946  000166                     i2l87:
   947                           
   948                           ;interruptUART.c: 62: else{
   949                           ;interruptUART.c: 63: UART -> _lastReceiveOERR = 0;
   950  000166  EE20 F00B          	lfsr	2,11
   951  00016A  503A               	movf	_UART,w,c
   952  00016C  26D9               	addwf	fsr2l,f,c
   953  00016E  503B               	movf	_UART+1,w,c
   954  000170  22DA               	addwfc	fsr2h,f,c
   955  000172  0E00               	movlw	0
   956  000174  6EDF               	movwf	indf2,c
   957  000176                     i2l88:
   958                           
   959                           ;interruptUART.c: 64: }
   960                           ;interruptUART.c: 66: UART -> _numReceives++;
   961  000176  EE20 F007          	lfsr	2,7
   962  00017A  503A               	movf	_UART,w,c
   963  00017C  26D9               	addwf	fsr2l,f,c
   964  00017E  503B               	movf	_UART+1,w,c
   965  000180  22DA               	addwfc	fsr2h,f,c
   966  000182  2ADF               	incf	indf2,f,c
   967                           
   968                           ;interruptUART.c: 69: if(UART -> _numReceives >= UART -> _numBytesRX){
   969  000184  EE20 F006          	lfsr	2,6
   970  000188  503A               	movf	_UART,w,c
   971  00018A  26D9               	addwf	fsr2l,f,c
   972  00018C  503B               	movf	_UART+1,w,c
   973  00018E  22DA               	addwfc	fsr2h,f,c
   974  000190  EE10 F007          	lfsr	1,7
   975  000194  503A               	movf	_UART,w,c
   976  000196  26E1               	addwf	fsr1l,f,c
   977  000198  503B               	movf	_UART+1,w,c
   978  00019A  22E2               	addwfc	fsr1h,f,c
   979  00019C  50DE               	movf	postinc2,w,c
   980  00019E  5CE6               	subwf	postinc1,w,c
   981  0001A0  A0D8               	btfss	status,0,c
   982  0001A2  D009               	goto	i2l89
   983                           
   984                           ;interruptUART.c: 70: RCIE = 0;
   985  0001A4  9A9D               	bcf	3997,5,c	;volatile
   986                           
   987                           ;interruptUART.c: 73: UART -> _stateRX = UART_STATE_READY;
   988  0001A6  EE20 F009          	lfsr	2,9
   989  0001AA  503A               	movf	_UART,w,c
   990  0001AC  26D9               	addwf	fsr2l,f,c
   991  0001AE  503B               	movf	_UART+1,w,c
   992  0001B0  22DA               	addwfc	fsr2h,f,c
   993  0001B2  0E01               	movlw	1
   994  0001B4  6EDF               	movwf	indf2,c
   995  0001B6                     i2l89:
   996  0001B6  C037  F042         	movff	??_interruptHandlerUART+20,btemp+3
   997  0001BA  C036  F041         	movff	??_interruptHandlerUART+19,btemp+2
   998  0001BE  C035  F040         	movff	??_interruptHandlerUART+18,btemp+1
   999  0001C2  C034  F03F         	movff	??_interruptHandlerUART+17,btemp
  1000  0001C6  C033  FFF5         	movff	??_interruptHandlerUART+16,tablat
  1001  0001CA  C032  FFF8         	movff	??_interruptHandlerUART+15,tblptru
  1002  0001CE  C031  FFF7         	movff	??_interruptHandlerUART+14,tblptrh
  1003  0001D2  C030  FFF6         	movff	??_interruptHandlerUART+13,tblptrl
  1004  0001D6  C02F  FFF4         	movff	??_interruptHandlerUART+12,prodh
  1005  0001DA  C02E  FFF3         	movff	??_interruptHandlerUART+11,prodl
  1006  0001DE  C02D  FFDA         	movff	??_interruptHandlerUART+10,fsr2h
  1007  0001E2  C02C  FFD9         	movff	??_interruptHandlerUART+9,fsr2l
  1008  0001E6  C02B  FFE2         	movff	??_interruptHandlerUART+8,fsr1h
  1009  0001EA  C02A  FFE1         	movff	??_interruptHandlerUART+7,fsr1l
  1010  0001EE  C029  FFEA         	movff	??_interruptHandlerUART+6,fsr0h
  1011  0001F2  C028  FFE9         	movff	??_interruptHandlerUART+5,fsr0l
  1012  0001F6  C027  FFFB         	movff	??_interruptHandlerUART+4,pclatu
  1013  0001FA  C026  FFFA         	movff	??_interruptHandlerUART+3,pclath
  1014  0001FE  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1015  000200  0011               	retfie		f
  1016  000202                     __end_of_interruptHandlerUART:
  1017                           	opt stack 0
  1018  0000                     pclatu	equ	0xFFB
  1019                           pclath	equ	0xFFA
  1020                           tblptru	equ	0xFF8
  1021                           tblptrh	equ	0xFF7
  1022                           tblptrl	equ	0xFF6
  1023                           tablat	equ	0xFF5
  1024                           prodh	equ	0xFF4
  1025                           prodl	equ	0xFF3
  1026                           intcon	equ	0xFF2
  1027                           postinc0	equ	0xFEE
  1028                           fsr0h	equ	0xFEA
  1029                           fsr0l	equ	0xFE9
  1030                           wreg	equ	0xFE8
  1031                           postinc1	equ	0xFE6
  1032                           postdec1	equ	0xFE5
  1033                           fsr1h	equ	0xFE2
  1034                           fsr1l	equ	0xFE1
  1035                           indf2	equ	0xFDF
  1036                           postinc2	equ	0xFDE
  1037                           postdec2	equ	0xFDD
  1038                           fsr2h	equ	0xFDA
  1039                           fsr2l	equ	0xFD9
  1040                           status	equ	0xFD8
  1041                           pclatu	equ	0xFFB
  1042                           pclath	equ	0xFFA
  1043                           tblptru	equ	0xFF8
  1044                           tblptrh	equ	0xFF7
  1045                           tblptrl	equ	0xFF6
  1046                           tablat	equ	0xFF5
  1047                           prodh	equ	0xFF4
  1048                           prodl	equ	0xFF3
  1049                           intcon	equ	0xFF2
  1050                           postinc0	equ	0xFEE
  1051                           fsr0h	equ	0xFEA
  1052                           fsr0l	equ	0xFE9
  1053                           wreg	equ	0xFE8
  1054                           postinc1	equ	0xFE6
  1055                           postdec1	equ	0xFE5
  1056                           fsr1h	equ	0xFE2
  1057                           fsr1l	equ	0xFE1
  1058                           indf2	equ	0xFDF
  1059                           postinc2	equ	0xFDE
  1060                           postdec2	equ	0xFDD
  1061                           fsr2h	equ	0xFDA
  1062                           fsr2l	equ	0xFD9
  1063                           status	equ	0xFD8
  1064                           
  1065                           	psect	rparam
  1066  0000                     pclatu	equ	0xFFB
  1067                           pclath	equ	0xFFA
  1068                           tblptru	equ	0xFF8
  1069                           tblptrh	equ	0xFF7
  1070                           tblptrl	equ	0xFF6
  1071                           tablat	equ	0xFF5
  1072                           prodh	equ	0xFF4
  1073                           prodl	equ	0xFF3
  1074                           intcon	equ	0xFF2
  1075                           postinc0	equ	0xFEE
  1076                           fsr0h	equ	0xFEA
  1077                           fsr0l	equ	0xFE9
  1078                           wreg	equ	0xFE8
  1079                           postinc1	equ	0xFE6
  1080                           postdec1	equ	0xFE5
  1081                           fsr1h	equ	0xFE2
  1082                           fsr1l	equ	0xFE1
  1083                           indf2	equ	0xFDF
  1084                           postinc2	equ	0xFDE
  1085                           postdec2	equ	0xFDD
  1086                           fsr2h	equ	0xFDA
  1087                           fsr2l	equ	0xFD9
  1088                           status	equ	0xFD8
  1089                           
  1090                           	psect	temp
  1091  00003F                     btemp:
  1092                           	opt stack 0
  1093  00003F                     	ds	1
  1094  0000                     int$flags	set	btemp
  1095  0000                     wtemp6	set	btemp+1
  1096                           pclatu	equ	0xFFB
  1097                           pclath	equ	0xFFA
  1098                           tblptru	equ	0xFF8
  1099                           tblptrh	equ	0xFF7
  1100                           tblptrl	equ	0xFF6
  1101                           tablat	equ	0xFF5
  1102                           prodh	equ	0xFF4
  1103                           prodl	equ	0xFF3
  1104                           intcon	equ	0xFF2
  1105                           postinc0	equ	0xFEE
  1106                           fsr0h	equ	0xFEA
  1107                           fsr0l	equ	0xFE9
  1108                           wreg	equ	0xFE8
  1109                           postinc1	equ	0xFE6
  1110                           postdec1	equ	0xFE5
  1111                           fsr1h	equ	0xFE2
  1112                           fsr1l	equ	0xFE1
  1113                           indf2	equ	0xFDF
  1114                           postinc2	equ	0xFDE
  1115                           postdec2	equ	0xFDD
  1116                           fsr2h	equ	0xFDA
  1117                           fsr2l	equ	0xFD9
  1118                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     23      62
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S21$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    S21$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_keypadRoutine
    _keypadRoutine->_readKeyboard

Critical Paths under _interruptHandlerUART in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandlerUART in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandlerUART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandlerUART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandlerUART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandlerUART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandlerUART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandlerUART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandlerUART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     150
                      _keypadRoutine
                      _machineConfig
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keypadRoutine                                        1     1      0     150
                                             22 COMRAM     1     1      0
                       _readKeyboard
 ---------------------------------------------------------------------------------
 (2) _readKeyboard                                         1     1      0     150
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _interruptHandlerUART                                21    21      0       0
                                              0 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keypadRoutine
     _readKeyboard
   _machineConfig

 _interruptHandlerUART (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     17      3E       1       66.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3E      20        0.0%
DATA                 0      0      3E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 16 14:40:27 2018

                           l23 0352                    __CFG_BOR$ON 000000                    __CFG_BORV$3 000000  
                 __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000  
                 __CFG_CP3$OFF 000000                            l131 023A                            l123 020E  
                          l132 0246                            l125 0218                            l141 027E  
                          l134 0252                            l150 02CA                            l135 0260  
                          l127 0222                            l136 026E                            l129 022E  
                          l147 02C4                            l139 028C                            l898 0206  
                 __CFG_CPB$OFF 000000                            u100 0272                            u160 02CE  
                          u170 02D8                   __CFG_CPD$OFF 000000                            u537 02A4  
               ?_machineConfig 0023                            wreg 000FE8                   __CFG_LVP$OFF 000000  
                 __CFG_WDT$OFF 000000                           _ADIE 007CEE                           _LATA 000F89  
                         _LATB 000F8A                           _LATC 000F8B                           _PEIE 007F96  
                         _RCIE 007CED                           _RCIF 007CF5                           i2l83 00E8  
                         i2l85 0100                           i2l87 0166                           i2l88 0176  
                         i2l89 01B6                           _UART 003A                           _TRMT 007D61  
                         _TXIE 007CEC                           _TXIF 007CF4                           _main 034E  
                         _uart 0016                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr2h 000FDA                           fsr0l 000FE9                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 003F  
                         prodh 000FF4                           prodl 000FF3                           start 000E  
                __CFG_IESO$OFF 000000                  __CFG_MCLRE$ON 000000                   ___param_bank 000000  
                __CFG_PLLDIV$5 000000                 __CFG_CCP2MX$ON 000000                          ?_main 0023  
                        _RCREG 000FAE                          _SPBRG 000FAF                  __CFG_USBDIV$2 000000  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TXREG 000FAD                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000           _interruptHandlerUART 0008  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
               __CFG_EBTRB$OFF 000000                          pclath 000FFA                          tablat 000FF5  
                        status 000FD8                          wtemp6 0040                __initialization 02E2  
                 __end_of_main 0358                ??_machineConfig 0038                         ??_main 003A  
                __activetblptr 000002                  ?_readKeyboard 0023          ?_interruptHandlerUART 0023  
                       _ADCON1 000FC1                         _TRISC6 007CA6                         _TRISC7 007CA7  
               __CFG_VREGEN$ON 000000                 __CFG_XINST$OFF 000000                 __CFG_STVREN$ON 000000  
                       clear_0 0308                 ??_readKeyboard 0038                   __pdataCOMRAM 003A  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                   __accesstop 0060        __end_of__initialization 030E                __CFG_PBADEN$OFF 000000  
       __size_of_keypadRoutine 006C                  ___rparam_used 000001                 __pcstackCOMRAM 0023  
       ??_interruptHandlerUART 0023                  _keypadRoutine 0276                     _arr_dataRX 0006  
                      i2u23_45 015A                        i2u23_46 015C                        i2u19_45 00A6  
                      i2u19_46 00A8           __end_of_readKeyboard 0276                        __Hparam 0000  
                      __Lparam 0000                        _dataEnd 003C                        _dataOut 0004  
                      __pcinit 02E2                 ?_keypadRoutine 0023                        __ramtop 0800  
                      __ptext0 034E                        __ptext1 031C                        __ptext2 0276  
                      __ptext3 0202                 __pintcode_body 0012           end_of_initialization 030E  
                __Lmediumconst 0000                        int_func 0012                      _RCSTAbits 000FAB  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                      _PORTAbits 000F80  
                    _PORTBbits 000F81          __end_of_machineConfig 034E                      _TXSTAbits 000FAC  
              ??_keypadRoutine 0039                  __pidataCOMRAM 0358            start_initialization 02E2  
                Keypad@dataEnd 003E          __size_of_readKeyboard 0074                  Keypad@dataOut 0022  
             __CFG_LPT1OSC$OFF 000000                    __pbssCOMRAM 0001                   _readKeyboard 0202  
__size_of_interruptHandlerUART 01FA             _UARTinterruptState 0005                      __pintcode 0008  
                     _LATAbits 000F89                       _KPDState 003D                       _RCONbits 000FD0  
             __CFG_WDTPS$32768 000000                     _ADCON0bits 000FC2                      copy_data0 02F6  
                readKeyboard@i 0038                       __Hrparam 0000                       __Lrparam 0000  
                  _keypadFlags 0001                  __size_of_main 000A         __size_of_machineConfig 0032  
                     int$flags 003F          __end_of_keypadRoutine 02E2          __CFG_CPUDIV$OSC3_PLL4 000000  
                   _INTCONbits 000FF2                       intlevel2 0000   __end_of_interruptHandlerUART 0202  
                   _OSCCONbits 000FD3            __CFG_FOSC$INTOSC_HS 000000                  _machineConfig 031C  
