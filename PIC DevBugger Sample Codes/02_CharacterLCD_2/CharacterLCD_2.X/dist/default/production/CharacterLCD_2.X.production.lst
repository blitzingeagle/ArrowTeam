

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Jan 12 00:05:45 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4620 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	idataCOMRAM
    77  00DD69                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for main@F2986
    81  00DD69  41                 	db	65
    82  00DD6A  45                 	db	69
    83  00DD6B  52                 	db	82
    84  00DD6C  32                 	db	50
    85  00DD6D  30                 	db	48
    86  00DD6E  31                 	db	49
    87  00DD6F  00                 	db	0
    88                           
    89                           	psect	mediumconst
    90  00FE86                     __pmediumconst:
    91                           	opt stack 0
    92  00FE86  00                 	db	0
    93  00FE87                     _dpowers:
    94                           	opt stack 0
    95  00FE87  0001               	dw	1
    96  00FE89  0000               	dw	0
    97  00FE8B  000A               	dw	10
    98  00FE8D  0000               	dw	0
    99  00FE8F  0064               	dw	100
   100  00FE91  0000               	dw	0
   101  00FE93  03E8               	dw	1000
   102  00FE95  0000               	dw	0
   103  00FE97  2710               	dw	10000
   104  00FE99  0000               	dw	0
   105  00FE9B  86A0               	dw	34464
   106  00FE9D  0001               	dw	1
   107  00FE9F  4240               	dw	16960
   108  00FEA1  000F               	dw	15
   109  00FEA3  9680               	dw	38528
   110  00FEA5  0098               	dw	152
   111  00FEA7  E100               	dw	57600
   112  00FEA9  05F5               	dw	1525
   113  00FEAB  CA00               	dw	51712
   114  00FEAD  3B9A               	dw	15258
   115  00FEAF                     __end_of_dpowers:
   116                           	opt stack 0
   117  00FEAF                     __powers_:
   118                           	opt stack 0
   119  00FEAF  00                 	db	0
   120  00FEB0  80                 	db	128
   121  00FEB1  3F                 	db	63
   122  00FEB2  00                 	db	0
   123  00FEB3  20                 	db	32
   124  00FEB4  41                 	db	65
   125  00FEB5  00                 	db	0
   126  00FEB6  C8                 	db	200
   127  00FEB7  42                 	db	66
   128  00FEB8  00                 	db	0
   129  00FEB9  7A                 	db	122
   130  00FEBA  44                 	db	68
   131  00FEBB  40                 	db	64
   132  00FEBC  1C                 	db	28
   133  00FEBD  46                 	db	70
   134  00FEBE  50                 	db	80
   135  00FEBF  C3                 	db	195
   136  00FEC0  47                 	db	71
   137  00FEC1  24                 	db	36
   138  00FEC2  74                 	db	116
   139  00FEC3  49                 	db	73
   140  00FEC4  97                 	db	151
   141  00FEC5  18                 	db	24
   142  00FEC6  4B                 	db	75
   143  00FEC7  BC                 	db	188
   144  00FEC8  BE                 	db	190
   145  00FEC9  4C                 	db	76
   146  00FECA  6B                 	db	107
   147  00FECB  6E                 	db	110
   148  00FECC  4E                 	db	78
   149  00FECD  03                 	db	3
   150  00FECE  15                 	db	21
   151  00FECF  50                 	db	80
   152  00FED0  79                 	db	121
   153  00FED1  AD                 	db	173
   154  00FED2  60                 	db	96
   155  00FED3  F3                 	db	243
   156  00FED4  49                 	db	73
   157  00FED5  71                 	db	113
   158  00FED6                     __end_of__powers_:
   159                           	opt stack 0
   160  00FED6                     __npowers_:
   161                           	opt stack 0
   162  00FED6  00                 	db	0
   163  00FED7  80                 	db	128
   164  00FED8  3F                 	db	63
   165  00FED9  CD                 	db	205
   166  00FEDA  CC                 	db	204
   167  00FEDB  3D                 	db	61
   168  00FEDC  D7                 	db	215
   169  00FEDD  23                 	db	35
   170  00FEDE  3C                 	db	60
   171  00FEDF  12                 	db	18
   172  00FEE0  83                 	db	131
   173  00FEE1  3A                 	db	58
   174  00FEE2  B7                 	db	183
   175  00FEE3  D1                 	db	209
   176  00FEE4  38                 	db	56
   177  00FEE5  C6                 	db	198
   178  00FEE6  27                 	db	39
   179  00FEE7  37                 	db	55
   180  00FEE8  38                 	db	56
   181  00FEE9  86                 	db	134
   182  00FEEA  35                 	db	53
   183  00FEEB  C0                 	db	192
   184  00FEEC  D6                 	db	214
   185  00FEED  33                 	db	51
   186  00FEEE  CC                 	db	204
   187  00FEEF  2B                 	db	43
   188  00FEF0  32                 	db	50
   189  00FEF1  70                 	db	112
   190  00FEF2  89                 	db	137
   191  00FEF3  30                 	db	48
   192  00FEF4  E7                 	db	231
   193  00FEF5  DB                 	db	219
   194  00FEF6  2E                 	db	46
   195  00FEF7  E5                 	db	229
   196  00FEF8  3C                 	db	60
   197  00FEF9  1E                 	db	30
   198  00FEFA  42                 	db	66
   199  00FEFB  A2                 	db	162
   200  00FEFC  0D                 	db	13
   201  00FEFD                     __end_of__npowers_:
   202                           	opt stack 0
   203  00FEFD                     _LCD_LEFT:
   204                           	opt stack 0
   205  00FEFD  00                 	db	0
   206  00FEFE                     __end_of_LCD_LEFT:
   207                           	opt stack 0
   208  00FEFE                     _LCD_RIGHT:
   209                           	opt stack 0
   210  00FEFE  01                 	db	1
   211  00FEFF                     __end_of_LCD_RIGHT:
   212                           	opt stack 0
   213  00FEFF                     _LCD_SIZE_VERT:
   214                           	opt stack 0
   215  00FEFF  02                 	db	2
   216  00FF00                     __end_of_LCD_SIZE_VERT:
   217                           	opt stack 0
   218  00FF00                     _LCD_SIZE_HORZ:
   219                           	opt stack 0
   220  00FF00  10                 	db	16
   221  00FF01                     __end_of_LCD_SIZE_HORZ:
   222                           	opt stack 0
   223  00FF01                     _LCD_VERT_LIMIT:
   224                           	opt stack 0
   225  00FF01  02                 	db	2
   226  00FF02                     __end_of_LCD_VERT_LIMIT:
   227                           	opt stack 0
   228  00FF02                     _LCD_HORZ_LIMIT:
   229                           	opt stack 0
   230  00FF02  28                 	db	40
   231  00FF03                     __end_of_LCD_HORZ_LIMIT:
   232                           	opt stack 0
   233  0000                     _INTCONbits	set	4082
   234  0000                     _LATDbits	set	3980
   235  0000                     _ADCON1	set	4033
   236  0000                     _ADCON0	set	4034
   237  0000                     _TRISE	set	3990
   238  0000                     _TRISD	set	3989
   239  0000                     _TRISC	set	3988
   240  0000                     _TRISB	set	3987
   241  0000                     _TRISA	set	3986
   242  0000                     _LATE	set	3981
   243  0000                     _LATD	set	3980
   244  0000                     _LATC	set	3979
   245  0000                     _LATB	set	3978
   246  0000                     _LATA	set	3977
   247  00FF03                     STR_22:
   248  00FF03  48                 	db	72	;'H'
   249  00FF04  65                 	db	101	;'e'
   250  00FF05  6C                 	db	108	;'l'
   251  00FF06  6C                 	db	108	;'l'
   252  00FF07  6F                 	db	111	;'o'
   253  00FF08  20                 	db	32
   254  00FF09  77                 	db	119	;'w'
   255  00FF0A  6F                 	db	111	;'o'
   256  00FF0B  72                 	db	114	;'r'
   257  00FF0C  6C                 	db	108	;'l'
   258  00FF0D  64                 	db	100	;'d'
   259  00FF0E  21                 	db	33
   260  00FF0F  20                 	db	32
   261  00FF10  20                 	db	32
   262  00FF11  20                 	db	32
   263  00FF12  20                 	db	32
   264  00FF13  00                 	db	0
   265  00FF14                     STR_17:
   266  00FF14  63                 	db	99	;'c'
   267  00FF15  61                 	db	97	;'a'
   268  00FF16  6E                 	db	110	;'n'
   269  00FF17  20                 	db	32
   270  00FF18  62                 	db	98	;'b'
   271  00FF19  65                 	db	101	;'e'
   272  00FF1A  20                 	db	32
   273  00FF1B  73                 	db	115	;'s'
   274  00FF1C  70                 	db	112	;'p'
   275  00FF1D  65                 	db	101	;'e'
   276  00FF1E  63                 	db	99	;'c'
   277  00FF1F  69                 	db	105	;'i'
   278  00FF20  66                 	db	102	;'f'
   279  00FF21  69                 	db	105	;'i'
   280  00FF22  65                 	db	101	;'e'
   281  00FF23  64                 	db	100	;'d'
   282  00FF24  00                 	db	0
   283  00FF25                     STR_8:
   284  00FF25  43                 	db	67	;'C'
   285  00FF26  75                 	db	117	;'u'
   286  00FF27  72                 	db	114	;'r'
   287  00FF28  73                 	db	115	;'s'
   288  00FF29  6F                 	db	111	;'o'
   289  00FF2A  72                 	db	114	;'r'
   290  00FF2B  20                 	db	32
   291  00FF2C  62                 	db	98	;'b'
   292  00FF2D  6C                 	db	108	;'l'
   293  00FF2E  69                 	db	105	;'i'
   294  00FF2F  6E                 	db	110	;'n'
   295  00FF30  6B                 	db	107	;'k'
   296  00FF31  20                 	db	32
   297  00FF32  63                 	db	99	;'c'
   298  00FF33  61                 	db	97	;'a'
   299  00FF34  6E                 	db	110	;'n'
   300  00FF35  00                 	db	0
   301  00FF36                     STR_15:
   302  00FF36  6C                 	db	108	;'l'
   303  00FF37  69                 	db	105	;'i'
   304  00FF38  6B                 	db	107	;'k'
   305  00FF39  65                 	db	101	;'e'
   306  00FF3A  6C                 	db	108	;'l'
   307  00FF3B  79                 	db	121	;'y'
   308  00FF3C  20                 	db	32
   309  00FF3D  73                 	db	115	;'s'
   310  00FF3E  74                 	db	116	;'t'
   311  00FF3F  61                 	db	97	;'a'
   312  00FF40  79                 	db	121	;'y'
   313  00FF41  20                 	db	32
   314  00FF42  6F                 	db	111	;'o'
   315  00FF43  6E                 	db	110	;'n'
   316  00FF44  21                 	db	33
   317  00FF45  00                 	db	0
   318  00FF46                     STR_16:
   319  00FF46  43                 	db	67	;'C'
   320  00FF47  75                 	db	117	;'u'
   321  00FF48  72                 	db	114	;'r'
   322  00FF49  73                 	db	115	;'s'
   323  00FF4A  6F                 	db	111	;'o'
   324  00FF4B  72                 	db	114	;'r'
   325  00FF4C  20                 	db	32
   326  00FF4D  70                 	db	112	;'p'
   327  00FF4E  6F                 	db	111	;'o'
   328  00FF4F  73                 	db	115	;'s'
   329  00FF50  69                 	db	105	;'i'
   330  00FF51  74                 	db	116	;'t'
   331  00FF52  69                 	db	105	;'i'
   332  00FF53  6F                 	db	111	;'o'
   333  00FF54  6E                 	db	110	;'n'
   334  00FF55  00                 	db	0
   335  00FF56                     STR_20:
   336  00FF56  44                 	db	68	;'D'
   337  00FF57  69                 	db	105	;'i'
   338  00FF58  73                 	db	115	;'s'
   339  00FF59  70                 	db	112	;'p'
   340  00FF5A  6C                 	db	108	;'l'
   341  00FF5B  61                 	db	97	;'a'
   342  00FF5C  79                 	db	121	;'y'
   343  00FF5D  20                 	db	32
   344  00FF5E  63                 	db	99	;'c'
   345  00FF5F  61                 	db	97	;'a'
   346  00FF60  6E                 	db	110	;'n'
   347  00FF61  20                 	db	32
   348  00FF62  62                 	db	98	;'b'
   349  00FF63  65                 	db	101	;'e'
   350  00FF64  00                 	db	0
   351  00FF65                     STR_2:
   352  00FF65  54                 	db	84	;'T'
   353  00FF66  65                 	db	101	;'e'
   354  00FF67  78                 	db	120	;'x'
   355  00FF68  74                 	db	116	;'t'
   356  00FF69  20                 	db	32
   357  00FF6A  63                 	db	99	;'c'
   358  00FF6B  61                 	db	97	;'a'
   359  00FF6C  6E                 	db	110	;'n'
   360  00FF6D  20                 	db	32
   361  00FF6E  62                 	db	98	;'b'
   362  00FF6F  65                 	db	101	;'e'
   363  00FF70  20                 	db	32
   364  00FF71  6F                 	db	111	;'o'
   365  00FF72  6E                 	db	110	;'n'
   366  00FF73  00                 	db	0
   367  00FF74                     STR_3:
   368  00FF74  6D                 	db	109	;'m'
   369  00FF75  75                 	db	117	;'u'
   370  00FF76  6C                 	db	108	;'l'
   371  00FF77  74                 	db	116	;'t'
   372  00FF78  69                 	db	105	;'i'
   373  00FF79  70                 	db	112	;'p'
   374  00FF7A  6C                 	db	108	;'l'
   375  00FF7B  65                 	db	101	;'e'
   376  00FF7C  20                 	db	32
   377  00FF7D  6C                 	db	108	;'l'
   378  00FF7E  69                 	db	105	;'i'
   379  00FF7F  6E                 	db	110	;'n'
   380  00FF80  65                 	db	101	;'e'
   381  00FF81  73                 	db	115	;'s'
   382  00FF82  00                 	db	0
   383  00FF83                     STR_14:
   384  00FF83  42                 	db	66	;'B'
   385  00FF84  75                 	db	117	;'u'
   386  00FF85  74                 	db	116	;'t'
   387  00FF86  20                 	db	32
   388  00FF87  74                 	db	116	;'t'
   389  00FF88  68                 	db	104	;'h'
   390  00FF89  61                 	db	97	;'a'
   391  00FF8A  74                 	db	116	;'t'
   392  00FF8B  20                 	db	32
   393  00FF8C  77                 	db	119	;'w'
   394  00FF8D  69                 	db	105	;'i'
   395  00FF8E  6C                 	db	108	;'l'
   396  00FF8F  6C                 	db	108	;'l'
   397  00FF90  00                 	db	0
   398  00FF91                     STR_1:
   399  00FF91  48                 	db	72	;'H'
   400  00FF92  65                 	db	101	;'e'
   401  00FF93  6C                 	db	108	;'l'
   402  00FF94  6C                 	db	108	;'l'
   403  00FF95  6F                 	db	111	;'o'
   404  00FF96  20                 	db	32
   405  00FF97  77                 	db	119	;'w'
   406  00FF98  6F                 	db	111	;'o'
   407  00FF99  72                 	db	114	;'r'
   408  00FF9A  6C                 	db	108	;'l'
   409  00FF9B  64                 	db	100	;'d'
   410  00FF9C  21                 	db	33
   411  00FF9D  00                 	db	0
   412  00FF9E                     STR_4:
   413  00FF9E  49                 	db	73	;'I'
   414  00FF9F  6E                 	db	110	;'n'
   415  00FFA0  74                 	db	116	;'t'
   416  00FFA1  65                 	db	101	;'e'
   417  00FFA2  67                 	db	103	;'g'
   418  00FFA3  65                 	db	101	;'e'
   419  00FFA4  72                 	db	114	;'r'
   420  00FFA5  3A                 	db	58	;':'
   421  00FFA6  20                 	db	32
   422  00FFA7  25                 	db	37
   423  00FFA8  64                 	db	100	;'d'
   424  00FFA9  00                 	db	0
   425  00FFAA                     STR_9:
   426  00FFAA  62                 	db	98	;'b'
   427  00FFAB  65                 	db	101	;'e'
   428  00FFAC  20                 	db	32
   429  00FFAD  74                 	db	116	;'t'
   430  00FFAE  6F                 	db	111	;'o'
   431  00FFAF  67                 	db	103	;'g'
   432  00FFB0  67                 	db	103	;'g'
   433  00FFB1  6C                 	db	108	;'l'
   434  00FFB2  65                 	db	101	;'e'
   435  00FFB3  64                 	db	100	;'d'
   436  00FFB4  00                 	db	0
   437  00FFB5                     STR_10:
   438  00FFB5  41                 	db	65	;'A'
   439  00FFB6  73                 	db	115	;'s'
   440  00FFB7  20                 	db	32
   441  00FFB8  63                 	db	99	;'c'
   442  00FFB9  61                 	db	97	;'a'
   443  00FFBA  6E                 	db	110	;'n'
   444  00FFBB  20                 	db	32
   445  00FFBC  74                 	db	116	;'t'
   446  00FFBD  68                 	db	104	;'h'
   447  00FFBE  65                 	db	101	;'e'
   448  00FFBF  00                 	db	0
   449  00FFC0                     STR_7:
   450  00FFC0  43                 	db	67	;'C'
   451  00FFC1  68                 	db	104	;'h'
   452  00FFC2  61                 	db	97	;'a'
   453  00FFC3  72                 	db	114	;'r'
   454  00FFC4  5B                 	db	91	;'['
   455  00FFC5  5D                 	db	93	;']'
   456  00FFC6  3A                 	db	58	;':'
   457  00FFC7  20                 	db	32
   458  00FFC8  25                 	db	37
   459  00FFC9  73                 	db	115	;'s'
   460  00FFCA  00                 	db	0
   461  00FFCB                     STR_5:
   462  00FFCB  46                 	db	70	;'F'
   463  00FFCC  6C                 	db	108	;'l'
   464  00FFCD  6F                 	db	111	;'o'
   465  00FFCE  61                 	db	97	;'a'
   466  00FFCF  74                 	db	116	;'t'
   467  00FFD0  3A                 	db	58	;':'
   468  00FFD1  20                 	db	32
   469  00FFD2  25                 	db	37
   470  00FFD3  66                 	db	102	;'f'
   471  00FFD4  00                 	db	0
   472  00FFD5                     STR_6:
   473  00FFD5  4C                 	db	76	;'L'
   474  00FFD6  6F                 	db	111	;'o'
   475  00FFD7  6E                 	db	110	;'n'
   476  00FFD8  67                 	db	103	;'g'
   477  00FFD9  3A                 	db	58	;':'
   478  00FFDA  20                 	db	32
   479  00FFDB  25                 	db	37
   480  00FFDC  6C                 	db	108	;'l'
   481  00FFDD  75                 	db	117	;'u'
   482  00FFDE  00                 	db	0
   483  00FFDF                     STR_11:
   484  00FFDF  63                 	db	99	;'c'
   485  00FFE0  75                 	db	117	;'u'
   486  00FFE1  72                 	db	114	;'r'
   487  00FFE2  73                 	db	115	;'s'
   488  00FFE3  6F                 	db	111	;'o'
   489  00FFE4  72                 	db	114	;'r'
   490  00FFE5  21                 	db	33
   491  00FFE6  00                 	db	0
   492  00FFE7                     STR_21:
   493  00FFE7  73                 	db	115	;'s'
   494  00FFE8  68                 	db	104	;'h'
   495  00FFE9  69                 	db	105	;'i'
   496  00FFEA  66                 	db	102	;'f'
   497  00FFEB  74                 	db	116	;'t'
   498  00FFEC  65                 	db	101	;'e'
   499  00FFED  64                 	db	100	;'d'
   500  00FFEE  00                 	db	0
   501  00FFEF                     STR_13:
   502  00FFEF  64                 	db	100	;'d'
   503  00FFF0  69                 	db	105	;'i'
   504  00FFF1  73                 	db	115	;'s'
   505  00FFF2  70                 	db	112	;'p'
   506  00FFF3  6C                 	db	108	;'l'
   507  00FFF4  61                 	db	97	;'a'
   508  00FFF5  79                 	db	121	;'y'
   509  00FFF6  00                 	db	0
   510  00FFF7                     STR_23:
   511  00FFF7  28                 	db	40
   512  00FFF8  6E                 	db	110	;'n'
   513  00FFF9  75                 	db	117	;'u'
   514  00FFFA  6C                 	db	108	;'l'
   515  00FFFB  6C                 	db	108	;'l'
   516  00FFFC  29                 	db	41
   517  00FFFD  00                 	db	0
   518  0000                     
   519                           ; #config settings
   520  00FFFE  00                 	db	0	; dummy byte at the end
   521  0000                     
   522                           	psect	cinit
   523  00DE44                     __pcinit:
   524                           	opt stack 0
   525  00DE44                     start_initialization:
   526                           	opt stack 0
   527  00DE44                     __initialization:
   528                           	opt stack 0
   529                           
   530                           ; Initialize objects allocated to COMRAM (7 bytes)
   531                           ; load TBLPTR registers with __pidataCOMRAM
   532  00DE44  0E69               	movlw	low __pidataCOMRAM
   533  00DE46  6EF6               	movwf	tblptrl,c
   534  00DE48  0EDD               	movlw	high __pidataCOMRAM
   535  00DE4A  6EF7               	movwf	tblptrh,c
   536  00DE4C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   537  00DE4E  6EF8               	movwf	tblptru,c
   538  00DE50  EE00  F075         	lfsr	0,__pdataCOMRAM
   539  00DE54  EE10 F007          	lfsr	1,7
   540  00DE58                     copy_data0:
   541  00DE58  0009               	tblrd		*+
   542  00DE5A  CFF5 FFEE          	movff	tablat,postinc0
   543  00DE5E  50E5               	movf	postdec1,w,c
   544  00DE60  50E1               	movf	fsr1l,w,c
   545  00DE62  E1FA               	bnz	copy_data0
   546                           
   547                           ; Clear objects allocated to COMRAM (2 bytes)
   548  00DE64  6A7D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   549  00DE66  6A7C               	clrf	__pbssCOMRAM& (0+255),c
   550  00DE68                     end_of_initialization:
   551                           	opt stack 0
   552  00DE68                     __end_of__initialization:
   553                           	opt stack 0
   554  00DE68  0100               	movlb	0
   555  00DE6A  EFEE  F077         	goto	_main	;jump to C main() function
   556                           tblptru	equ	0xFF8
   557                           tblptrh	equ	0xFF7
   558                           tblptrl	equ	0xFF6
   559                           tablat	equ	0xFF5
   560                           postinc0	equ	0xFEE
   561                           postdec1	equ	0xFE5
   562                           fsr1l	equ	0xFE1
   563                           
   564                           	psect	bssCOMRAM
   565  00007C                     __pbssCOMRAM:
   566                           	opt stack 0
   567  00007C                     lcd@LCDinterruptState:
   568                           	opt stack 0
   569  00007C                     	ds	1
   570  00007D                     	ds	1
   571                           tblptru	equ	0xFF8
   572                           tblptrh	equ	0xFF7
   573                           tblptrl	equ	0xFF6
   574                           tablat	equ	0xFF5
   575                           postinc0	equ	0xFEE
   576                           postdec1	equ	0xFE5
   577                           fsr1l	equ	0xFE1
   578                           
   579                           	psect	dataCOMRAM
   580  000075                     __pdataCOMRAM:
   581                           	opt stack 0
   582  000075                     main@F2986:
   583                           	opt stack 0
   584  000075                     	ds	7
   585                           tblptru	equ	0xFF8
   586                           tblptrh	equ	0xFF7
   587                           tblptrl	equ	0xFF6
   588                           tablat	equ	0xFF5
   589                           postinc0	equ	0xFEE
   590                           postdec1	equ	0xFE5
   591                           fsr1l	equ	0xFE1
   592                           
   593                           	psect	cstackCOMRAM
   594  000001                     __pcstackCOMRAM:
   595                           	opt stack 0
   596  000001                     ?___awmod:
   597                           	opt stack 0
   598  000001                     ?___ftpack:
   599                           	opt stack 0
   600  000001                     ?___ftneg:
   601                           	opt stack 0
   602  000001                     ?__tdiv_to_l_:
   603                           	opt stack 0
   604  000001                     ?__div_to_l_:
   605                           	opt stack 0
   606  000001                     ?___lldiv:
   607                           	opt stack 0
   608  000001                     lcdNibble@temp:
   609                           	opt stack 0
   610  000001                     ___lbmod@divisor:
   611                           	opt stack 0
   612  000001                     ___awmod@dividend:
   613                           	opt stack 0
   614  000001                     __div_to_l_@f1:
   615                           	opt stack 0
   616  000001                     ___ftpack@arg:
   617                           	opt stack 0
   618  000001                     __tdiv_to_l_@f1:
   619                           	opt stack 0
   620  000001                     ___ftge@ff1:
   621                           	opt stack 0
   622  000001                     ___ftneg@f1:
   623                           	opt stack 0
   624  000001                     ___lldiv@dividend:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0x0
   628  000001                     	ds	1
   629  000002                     lcdNibble@data:
   630                           	opt stack 0
   631  000002                     ___lbmod@dividend:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x1
   635  000002                     	ds	1
   636  000003                     lcdInst@data:
   637                           	opt stack 0
   638  000003                     putch@data:
   639                           	opt stack 0
   640  000003                     ___lbmod@counter:
   641                           	opt stack 0
   642  000003                     ___awmod@divisor:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x2
   646  000003                     	ds	1
   647  000004                     ??_initLCD:
   648  000004                     lcd_shift_cursor@direction:
   649                           	opt stack 0
   650  000004                     lcd_shift_display@direction:
   651                           	opt stack 0
   652  000004                     ___ftpack@exp:
   653                           	opt stack 0
   654  000004                     ___lbmod@rem:
   655                           	opt stack 0
   656  000004                     __div_to_l_@f2:
   657                           	opt stack 0
   658  000004                     __tdiv_to_l_@f2:
   659                           	opt stack 0
   660  000004                     ___ftge@ff2:
   661                           	opt stack 0
   662                           
   663                           ; 3 bytes @ 0x3
   664  000004                     	ds	1
   665  000005                     lcd_shift_cursor@numChars:
   666                           	opt stack 0
   667  000005                     lcd_shift_display@numChars:
   668                           	opt stack 0
   669  000005                     ___awmod@counter:
   670                           	opt stack 0
   671  000005                     ___ftpack@sign:
   672                           	opt stack 0
   673  000005                     ___lldiv@divisor:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x4
   677  000005                     	ds	1
   678  000006                     ??___ftpack:
   679  000006                     lcd_shift_cursor@n:
   680                           	opt stack 0
   681  000006                     lcd_shift_display@n:
   682                           	opt stack 0
   683  000006                     ___awmod@sign:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x5
   687  000006                     	ds	1
   688  000007                     ??__tdiv_to_l_:
   689  000007                     ??___ftge:
   690  000007                     ?___awdiv:
   691                           	opt stack 0
   692  000007                     lcd_set_cursor@y:
   693                           	opt stack 0
   694  000007                     ___awdiv@dividend:
   695                           	opt stack 0
   696  000007                     __div_to_l_@quot:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x6
   700  000007                     	ds	1
   701  000008                     ??_lcd_set_cursor:
   702                           
   703                           ; 1 bytes @ 0x7
   704  000008                     	ds	1
   705  000009                     ?___lltoft:
   706                           	opt stack 0
   707  000009                     lcd_set_cursor@x:
   708                           	opt stack 0
   709  000009                     ___awdiv@divisor:
   710                           	opt stack 0
   711  000009                     ___lldiv@quotient:
   712                           	opt stack 0
   713  000009                     ___lltoft@c:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x8
   717  000009                     	ds	1
   718  00000A                     lcd_set_cursor@i:
   719                           	opt stack 0
   720  00000A                     __tdiv_to_l_@quot:
   721                           	opt stack 0
   722                           
   723                           ; 4 bytes @ 0x9
   724  00000A                     	ds	1
   725  00000B                     ___awdiv@counter:
   726                           	opt stack 0
   727  00000B                     __div_to_l_@cntr:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0xA
   731  00000B                     	ds	1
   732  00000C                     ___awdiv@sign:
   733                           	opt stack 0
   734  00000C                     __div_to_l_@exp1:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0xB
   738  00000C                     	ds	1
   739  00000D                     ??___lltoft:
   740  00000D                     ___lldiv@counter:
   741                           	opt stack 0
   742  00000D                     ___awdiv@quotient:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0xC
   746  00000D                     	ds	1
   747  00000E                     ?___llmod:
   748                           	opt stack 0
   749  00000E                     __tdiv_to_l_@cntr:
   750                           	opt stack 0
   751  00000E                     ___llmod@dividend:
   752                           	opt stack 0
   753                           
   754                           ; 4 bytes @ 0xD
   755  00000E                     	ds	1
   756  00000F                     ?___wmul:
   757                           	opt stack 0
   758  00000F                     __tdiv_to_l_@exp1:
   759                           	opt stack 0
   760  00000F                     ___wmul@multiplier:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0xE
   764  00000F                     	ds	2
   765  000011                     ___lltoft@exp:
   766                           	opt stack 0
   767  000011                     ___wmul@multiplicand:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x10
   771  000011                     	ds	1
   772  000012                     ___llmod@divisor:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0x11
   776  000012                     	ds	1
   777  000013                     ___wmul@product:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x12
   781  000013                     	ds	2
   782  000015                     ?___ftmul:
   783                           	opt stack 0
   784  000015                     ___ftmul@f1:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0x14
   788  000015                     	ds	1
   789  000016                     ___llmod@counter:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x15
   793  000016                     	ds	2
   794  000018                     ___ftmul@f2:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x17
   798  000018                     	ds	3
   799  00001B                     ??___ftmul:
   800                           
   801                           ; 1 bytes @ 0x1A
   802  00001B                     	ds	3
   803  00001E                     ___ftmul@exp:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x1D
   807  00001E                     	ds	1
   808  00001F                     ___ftmul@f3_as_product:
   809                           	opt stack 0
   810                           
   811                           ; 3 bytes @ 0x1E
   812  00001F                     	ds	3
   813  000022                     ___ftmul@cntr:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x21
   817  000022                     	ds	1
   818  000023                     ___ftmul@sign:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x22
   822  000023                     	ds	1
   823  000024                     ?_fround:
   824                           	opt stack 0
   825  000024                     ?_scale:
   826                           	opt stack 0
   827                           
   828                           ; 3 bytes @ 0x23
   829  000024                     	ds	3
   830  000027                     _fround$860:
   831                           	opt stack 0
   832  000027                     _scale$861:
   833                           	opt stack 0
   834                           
   835                           ; 3 bytes @ 0x26
   836  000027                     	ds	3
   837  00002A                     scale@scl:
   838                           	opt stack 0
   839  00002A                     _fround$859:
   840                           	opt stack 0
   841                           
   842                           ; 3 bytes @ 0x29
   843  00002A                     	ds	1
   844  00002B                     ?___fttol:
   845                           	opt stack 0
   846  00002B                     ___fttol@f1:
   847                           	opt stack 0
   848                           
   849                           ; 3 bytes @ 0x2A
   850  00002B                     	ds	2
   851  00002D                     fround@prec:
   852                           	opt stack 0
   853                           
   854                           ; 1 bytes @ 0x2C
   855  00002D                     	ds	1
   856  00002E                     ?___ftadd:
   857                           	opt stack 0
   858  00002E                     ___ftadd@f1:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x2D
   862  00002E                     	ds	1
   863  00002F                     ??___fttol:
   864                           
   865                           ; 1 bytes @ 0x2E
   866  00002F                     	ds	2
   867  000031                     ___ftadd@f2:
   868                           	opt stack 0
   869                           
   870                           ; 3 bytes @ 0x30
   871  000031                     	ds	3
   872  000034                     ??___ftadd:
   873  000034                     ___fttol@sign1:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x33
   877  000034                     	ds	1
   878  000035                     ___fttol@lval:
   879                           	opt stack 0
   880                           
   881                           ; 4 bytes @ 0x34
   882  000035                     	ds	2
   883  000037                     ___ftadd@sign:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x36
   887  000037                     	ds	1
   888  000038                     ___ftadd@exp2:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x37
   892  000038                     	ds	1
   893  000039                     ___ftadd@exp1:
   894                           	opt stack 0
   895  000039                     ___fttol@exp1:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x38
   899  000039                     	ds	1
   900  00003A                     ?___ftsub:
   901                           	opt stack 0
   902  00003A                     ___ftsub@f1:
   903                           	opt stack 0
   904                           
   905                           ; 3 bytes @ 0x39
   906  00003A                     	ds	3
   907  00003D                     ___ftsub@f2:
   908                           	opt stack 0
   909                           
   910                           ; 3 bytes @ 0x3C
   911  00003D                     	ds	3
   912  000040                     ?_printf:
   913                           	opt stack 0
   914  000040                     printf@f:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x3F
   918  000040                     	ds	6
   919  000046                     ??_printf:
   920                           
   921                           ; 1 bytes @ 0x45
   922  000046                     	ds	6
   923  00004C                     _printf$862:
   924                           	opt stack 0
   925                           
   926                           ; 3 bytes @ 0x4B
   927  00004C                     	ds	3
   928  00004F                     printf@cp:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x4E
   932  00004F                     	ds	2
   933  000051                     printf@flag:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x50
   937  000051                     	ds	2
   938  000053                     printf@ap:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x52
   942  000053                     	ds	2
   943  000055                     printf@prec:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x54
   947  000055                     	ds	2
   948  000057                     printf@exp:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x56
   952  000057                     	ds	2
   953  000059                     printf@val:
   954                           	opt stack 0
   955                           
   956                           ; 4 bytes @ 0x58
   957  000059                     	ds	4
   958  00005D                     printf@tmpval:
   959                           	opt stack 0
   960                           
   961                           ; 4 bytes @ 0x5C
   962  00005D                     	ds	4
   963  000061                     printf@fval:
   964                           	opt stack 0
   965                           
   966                           ; 3 bytes @ 0x60
   967  000061                     	ds	3
   968  000064                     printf@c:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x63
   972  000064                     	ds	1
   973  000065                     ??_main:
   974                           
   975                           ; 1 bytes @ 0x64
   976  000065                     	ds	2
   977  000067                     main@arr:
   978                           	opt stack 0
   979                           
   980                           ; 7 bytes @ 0x66
   981  000067                     	ds	7
   982  00006E                     main@i:
   983                           	opt stack 0
   984                           
   985                           ; 1 bytes @ 0x6D
   986  00006E                     	ds	1
   987  00006F                     _main$858:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0x6E
   991  00006F                     	ds	2
   992  000071                     main@i_108:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x70
   996  000071                     	ds	1
   997  000072                     main@i_110:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x71
  1001  000072                     	ds	1
  1002  000073                     main@numShifts:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x72
  1006  000073                     	ds	1
  1007  000074                     main@x:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x73
  1011  000074                     	ds	1
  1012                           tblptru	equ	0xFF8
  1013                           tblptrh	equ	0xFF7
  1014                           tblptrl	equ	0xFF6
  1015                           tablat	equ	0xFF5
  1016                           postinc0	equ	0xFEE
  1017                           postdec1	equ	0xFE5
  1018                           fsr1l	equ	0xFE1
  1019                           
  1020 ;;
  1021 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1022 ;;
  1023 ;; *************** function _main *****************
  1024 ;; Defined at:
  1025 ;;		line 20 in file "main.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;		None
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  i               1  113[COMRAM] unsigned char 
  1030 ;;  i               1  112[COMRAM] unsigned char 
  1031 ;;  i               1  109[COMRAM] unsigned char 
  1032 ;;  x               1  115[COMRAM] unsigned char 
  1033 ;;  arr             7  102[COMRAM] unsigned char [7]
  1034 ;;  numShifts       1  114[COMRAM] unsigned char 
  1035 ;; Return value:  Size  Location     Type
  1036 ;;                  1    wreg      void 
  1037 ;; Registers used:
  1038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1045 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1046 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1047 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1048 ;;Total ram usage:       16 bytes
  1049 ;; Hardware stack levels required when called:    4
  1050 ;; This function calls:
  1051 ;;		___awmod
  1052 ;;		___lbmod
  1053 ;;		_initLCD
  1054 ;;		_lcdInst
  1055 ;;		_lcd_set_cursor
  1056 ;;		_lcd_shift_display
  1057 ;;		_printf
  1058 ;;		_putch
  1059 ;; This function is called by:
  1060 ;;		Startup code after reset
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           	psect	text0
  1065  00EFDC                     __ptext0:
  1066                           	opt stack 0
  1067  00EFDC                     _main:
  1068                           	opt stack 27
  1069                           
  1070                           ;main.c: 26: LATA = 0x00;
  1071                           
  1072                           ;incstack = 0
  1073  00EFDC  0E00               	movlw	0
  1074  00EFDE  6E89               	movwf	3977,c	;volatile
  1075                           
  1076                           ;main.c: 27: LATB = 0x00;
  1077  00EFE0  0E00               	movlw	0
  1078  00EFE2  6E8A               	movwf	3978,c	;volatile
  1079                           
  1080                           ;main.c: 28: LATC = 0x00;
  1081  00EFE4  0E00               	movlw	0
  1082  00EFE6  6E8B               	movwf	3979,c	;volatile
  1083                           
  1084                           ;main.c: 29: LATD = 0x00;
  1085  00EFE8  0E00               	movlw	0
  1086  00EFEA  6E8C               	movwf	3980,c	;volatile
  1087                           
  1088                           ;main.c: 30: LATE = 0x00;
  1089  00EFEC  0E00               	movlw	0
  1090  00EFEE  6E8D               	movwf	3981,c	;volatile
  1091                           
  1092                           ;main.c: 34: TRISA = 0xFF;
  1093  00EFF0  6892               	setf	3986,c	;volatile
  1094                           
  1095                           ;main.c: 35: TRISB = 0xFF;
  1096  00EFF2  6893               	setf	3987,c	;volatile
  1097                           
  1098                           ;main.c: 36: TRISC = 0x00;
  1099  00EFF4  0E00               	movlw	0
  1100  00EFF6  6E94               	movwf	3988,c	;volatile
  1101                           
  1102                           ;main.c: 37: TRISD = 0x00;
  1103  00EFF8  0E00               	movlw	0
  1104  00EFFA  6E95               	movwf	3989,c	;volatile
  1105                           
  1106                           ;main.c: 38: TRISE = 0x00;
  1107  00EFFC  0E00               	movlw	0
  1108  00EFFE  6E96               	movwf	3990,c	;volatile
  1109                           
  1110                           ;main.c: 41: ADCON0 = 0x00;
  1111  00F000  0E00               	movlw	0
  1112  00F002  6EC2               	movwf	4034,c	;volatile
  1113                           
  1114                           ;main.c: 42: ADCON1 = 0b00001111;
  1115  00F004  0E0F               	movlw	15
  1116  00F006  6EC1               	movwf	4033,c	;volatile
  1117                           
  1118                           ;main.c: 46: initLCD();
  1119  00F008  EC74  F06F         	call	_initLCD	;wreg free
  1120                           
  1121                           ;main.c: 49: printf("Hello world!");
  1122  00F00C  0E91               	movlw	low STR_1
  1123  00F00E  6E40               	movwf	printf@f,c
  1124  00F010  0EFF               	movlw	high STR_1
  1125  00F012  6E41               	movwf	printf@f+1,c
  1126  00F014  EC42  F07B         	call	_printf	;wreg free
  1127                           
  1128                           ;main.c: 50: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1129  00F018  0E66               	movlw	102
  1130  00F01A  6E66               	movwf	(??_main+1)& (0+255),c
  1131  00F01C  0E76               	movlw	118
  1132  00F01E  6E65               	movwf	??_main& (0+255),c
  1133  00F020  0EC1               	movlw	193
  1134  00F022                     u2917:
  1135  00F022  2EE8               	decfsz	wreg,f,c
  1136  00F024  D7FE               	bra	u2917
  1137  00F026  2E65               	decfsz	??_main& (0+255),f,c
  1138  00F028  D7FC               	bra	u2917
  1139  00F02A  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1140  00F02C  D7FA               	bra	u2917
  1141  00F02E  F000               	nop	
  1142                           
  1143                           ;main.c: 55: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1144                           
  1145                           ;main.c: 53: while(1){
  1146  00F030  0E01               	movlw	1
  1147  00F032  ECB8  F06E         	call	_lcdInst
  1148  00F036  0EC3               	movlw	195
  1149  00F038  6E65               	movwf	??_main& (0+255),c
  1150  00F03A  0ECD               	movlw	205
  1151  00F03C                     u2927:
  1152  00F03C  2EE8               	decfsz	wreg,f,c
  1153  00F03E  D7FE               	bra	u2927
  1154  00F040  2E65               	decfsz	??_main& (0+255),f,c
  1155  00F042  D7FC               	bra	u2927
  1156  00F044  F000               	nop	
  1157                           
  1158                           ;main.c: 56: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1159  00F046  0E80               	movlw	128
  1160  00F048  ECB8  F06E         	call	_lcdInst
  1161  00F04C  0E41               	movlw	65
  1162  00F04E  6E65               	movwf	??_main& (0+255),c
  1163  00F050  0EEE               	movlw	238
  1164  00F052                     u2937:
  1165  00F052  2EE8               	decfsz	wreg,f,c
  1166  00F054  D7FE               	bra	u2937
  1167  00F056  2E65               	decfsz	??_main& (0+255),f,c
  1168  00F058  D7FC               	bra	u2937
  1169  00F05A  D000               	nop2	
  1170                           
  1171                           ;main.c: 57: printf("Text can be on");
  1172  00F05C  0E65               	movlw	low STR_2
  1173  00F05E  6E40               	movwf	printf@f,c
  1174  00F060  0EFF               	movlw	high STR_2
  1175  00F062  6E41               	movwf	printf@f+1,c
  1176  00F064  EC42  F07B         	call	_printf	;wreg free
  1177                           
  1178                           ;main.c: 58: lcdInst(0xC0);;
  1179  00F068  0EC0               	movlw	192
  1180  00F06A  ECB8  F06E         	call	_lcdInst
  1181                           
  1182                           ;main.c: 59: printf("multiple lines");
  1183  00F06E  0E74               	movlw	low STR_3
  1184  00F070  6E40               	movwf	printf@f,c
  1185  00F072  0EFF               	movlw	high STR_3
  1186  00F074  6E41               	movwf	printf@f+1,c
  1187  00F076  EC42  F07B         	call	_printf	;wreg free
  1188                           
  1189                           ;main.c: 60: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1190  00F07A  0E66               	movlw	102
  1191  00F07C  6E66               	movwf	(??_main+1)& (0+255),c
  1192  00F07E  0E76               	movlw	118
  1193  00F080  6E65               	movwf	??_main& (0+255),c
  1194  00F082  0EC1               	movlw	193
  1195  00F084                     u2947:
  1196  00F084  2EE8               	decfsz	wreg,f,c
  1197  00F086  D7FE               	bra	u2947
  1198  00F088  2E65               	decfsz	??_main& (0+255),f,c
  1199  00F08A  D7FC               	bra	u2947
  1200  00F08C  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1201  00F08E  D7FA               	bra	u2947
  1202  00F090  F000               	nop	
  1203                           
  1204                           ;main.c: 63: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1205  00F092  0E01               	movlw	1
  1206  00F094  ECB8  F06E         	call	_lcdInst
  1207  00F098  0EC3               	movlw	195
  1208  00F09A  6E65               	movwf	??_main& (0+255),c
  1209  00F09C  0ECD               	movlw	205
  1210  00F09E                     u2957:
  1211  00F09E  2EE8               	decfsz	wreg,f,c
  1212  00F0A0  D7FE               	bra	u2957
  1213  00F0A2  2E65               	decfsz	??_main& (0+255),f,c
  1214  00F0A4  D7FC               	bra	u2957
  1215  00F0A6  F000               	nop	
  1216                           
  1217                           ;main.c: 64: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1218  00F0A8  0E80               	movlw	128
  1219  00F0AA  ECB8  F06E         	call	_lcdInst
  1220  00F0AE  0E41               	movlw	65
  1221  00F0B0  6E65               	movwf	??_main& (0+255),c
  1222  00F0B2  0EEE               	movlw	238
  1223  00F0B4                     u2967:
  1224  00F0B4  2EE8               	decfsz	wreg,f,c
  1225  00F0B6  D7FE               	bra	u2967
  1226  00F0B8  2E65               	decfsz	??_main& (0+255),f,c
  1227  00F0BA  D7FC               	bra	u2967
  1228  00F0BC  D000               	nop2	
  1229                           
  1230                           ;main.c: 65: printf("Integer: %d", 10);
  1231  00F0BE  0E9E               	movlw	low STR_4
  1232  00F0C0  6E40               	movwf	printf@f,c
  1233  00F0C2  0EFF               	movlw	high STR_4
  1234  00F0C4  6E41               	movwf	printf@f+1,c
  1235  00F0C6  0E00               	movlw	0
  1236  00F0C8  6E43               	movwf	?_printf+3,c
  1237  00F0CA  0E0A               	movlw	10
  1238  00F0CC  6E42               	movwf	?_printf+2,c
  1239  00F0CE  EC42  F07B         	call	_printf	;wreg free
  1240                           
  1241                           ;main.c: 66: lcdInst(0xC0);;
  1242  00F0D2  0EC0               	movlw	192
  1243  00F0D4  ECB8  F06E         	call	_lcdInst
  1244                           
  1245                           ;main.c: 67: printf("Float: %f", 3.14159);
  1246  00F0D8  0ECB               	movlw	low STR_5
  1247  00F0DA  6E40               	movwf	printf@f,c
  1248  00F0DC  0EFF               	movlw	high STR_5
  1249  00F0DE  6E41               	movwf	printf@f+1,c
  1250  00F0E0  0E10               	movlw	16
  1251  00F0E2  6E42               	movwf	?_printf+2,c
  1252  00F0E4  0E49               	movlw	73
  1253  00F0E6  6E43               	movwf	?_printf+3,c
  1254  00F0E8  0E40               	movlw	64
  1255  00F0EA  6E44               	movwf	?_printf+4,c
  1256  00F0EC  EC42  F07B         	call	_printf	;wreg free
  1257                           
  1258                           ;main.c: 68: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1259  00F0F0  0E66               	movlw	102
  1260  00F0F2  6E66               	movwf	(??_main+1)& (0+255),c
  1261  00F0F4  0E76               	movlw	118
  1262  00F0F6  6E65               	movwf	??_main& (0+255),c
  1263  00F0F8  0EC1               	movlw	193
  1264  00F0FA                     u2977:
  1265  00F0FA  2EE8               	decfsz	wreg,f,c
  1266  00F0FC  D7FE               	bra	u2977
  1267  00F0FE  2E65               	decfsz	??_main& (0+255),f,c
  1268  00F100  D7FC               	bra	u2977
  1269  00F102  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1270  00F104  D7FA               	bra	u2977
  1271  00F106  F000               	nop	
  1272                           
  1273                           ;main.c: 70: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1274  00F108  0E01               	movlw	1
  1275  00F10A  ECB8  F06E         	call	_lcdInst
  1276  00F10E  0EC3               	movlw	195
  1277  00F110  6E65               	movwf	??_main& (0+255),c
  1278  00F112  0ECD               	movlw	205
  1279  00F114                     u2987:
  1280  00F114  2EE8               	decfsz	wreg,f,c
  1281  00F116  D7FE               	bra	u2987
  1282  00F118  2E65               	decfsz	??_main& (0+255),f,c
  1283  00F11A  D7FC               	bra	u2987
  1284  00F11C  F000               	nop	
  1285                           
  1286                           ;main.c: 71: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1287  00F11E  0E80               	movlw	128
  1288  00F120  ECB8  F06E         	call	_lcdInst
  1289  00F124  0E41               	movlw	65
  1290  00F126  6E65               	movwf	??_main& (0+255),c
  1291  00F128  0EEE               	movlw	238
  1292  00F12A                     u2997:
  1293  00F12A  2EE8               	decfsz	wreg,f,c
  1294  00F12C  D7FE               	bra	u2997
  1295  00F12E  2E65               	decfsz	??_main& (0+255),f,c
  1296  00F130  D7FC               	bra	u2997
  1297  00F132  D000               	nop2	
  1298                           
  1299                           ;main.c: 72: printf("Long: %lu", 4291234567);
  1300  00F134  0ED5               	movlw	low STR_6
  1301  00F136  6E40               	movwf	printf@f,c
  1302  00F138  0EFF               	movlw	high STR_6
  1303  00F13A  6E41               	movwf	printf@f+1,c
  1304  00F13C  0E07               	movlw	7
  1305  00F13E  6E42               	movwf	?_printf+2,c
  1306  00F140  0E0B               	movlw	11
  1307  00F142  6E43               	movwf	?_printf+3,c
  1308  00F144  0EC7               	movlw	199
  1309  00F146  6E44               	movwf	?_printf+4,c
  1310  00F148  0EFF               	movlw	255
  1311  00F14A  6E45               	movwf	?_printf+5,c
  1312  00F14C  EC42  F07B         	call	_printf	;wreg free
  1313                           
  1314                           ;main.c: 73: lcdInst(0xC0);;
  1315  00F150  0EC0               	movlw	192
  1316  00F152  ECB8  F06E         	call	_lcdInst
  1317                           
  1318                           ;main.c: 74: char arr[7] = "AER201\0";
  1319  00F156  EE20  F075         	lfsr	2,main@F2986
  1320  00F15A  EE10  F067         	lfsr	1,main@arr
  1321  00F15E  0E06               	movlw	6
  1322  00F160                     u2821:
  1323  00F160  CFDB FFE3          	movff	plusw2,plusw1
  1324  00F164  06E8               	decf	wreg,f,c
  1325  00F166  E2FC               	bc	u2821
  1326                           
  1327                           ;main.c: 75: printf("Char[]: %s", arr);
  1328  00F168  0EC0               	movlw	low STR_7
  1329  00F16A  6E40               	movwf	printf@f,c
  1330  00F16C  0EFF               	movlw	high STR_7
  1331  00F16E  6E41               	movwf	printf@f+1,c
  1332  00F170  0E67               	movlw	low main@arr
  1333  00F172  6E42               	movwf	?_printf+2,c
  1334  00F174  0E00               	movlw	high main@arr
  1335  00F176  6E43               	movwf	?_printf+3,c
  1336  00F178  EC42  F07B         	call	_printf	;wreg free
  1337                           
  1338                           ;main.c: 76: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1339  00F17C  0E66               	movlw	102
  1340  00F17E  6E66               	movwf	(??_main+1)& (0+255),c
  1341  00F180  0E76               	movlw	118
  1342  00F182  6E65               	movwf	??_main& (0+255),c
  1343  00F184  0EC1               	movlw	193
  1344  00F186                     u3007:
  1345  00F186  2EE8               	decfsz	wreg,f,c
  1346  00F188  D7FE               	bra	u3007
  1347  00F18A  2E65               	decfsz	??_main& (0+255),f,c
  1348  00F18C  D7FC               	bra	u3007
  1349  00F18E  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1350  00F190  D7FA               	bra	u3007
  1351  00F192  F000               	nop	
  1352                           
  1353                           ;main.c: 79: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1354  00F194  0E01               	movlw	1
  1355  00F196  ECB8  F06E         	call	_lcdInst
  1356  00F19A  0EC3               	movlw	195
  1357  00F19C  6E65               	movwf	??_main& (0+255),c
  1358  00F19E  0ECD               	movlw	205
  1359  00F1A0                     u3017:
  1360  00F1A0  2EE8               	decfsz	wreg,f,c
  1361  00F1A2  D7FE               	bra	u3017
  1362  00F1A4  2E65               	decfsz	??_main& (0+255),f,c
  1363  00F1A6  D7FC               	bra	u3017
  1364  00F1A8  F000               	nop	
  1365                           
  1366                           ;main.c: 80: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1367  00F1AA  0E80               	movlw	128
  1368  00F1AC  ECB8  F06E         	call	_lcdInst
  1369  00F1B0  0E41               	movlw	65
  1370  00F1B2  6E65               	movwf	??_main& (0+255),c
  1371  00F1B4  0EEE               	movlw	238
  1372  00F1B6                     u3027:
  1373  00F1B6  2EE8               	decfsz	wreg,f,c
  1374  00F1B8  D7FE               	bra	u3027
  1375  00F1BA  2E65               	decfsz	??_main& (0+255),f,c
  1376  00F1BC  D7FC               	bra	u3027
  1377  00F1BE  D000               	nop2	
  1378                           
  1379                           ;main.c: 81: printf("Cursor blink can");
  1380  00F1C0  0E25               	movlw	low STR_8
  1381  00F1C2  6E40               	movwf	printf@f,c
  1382  00F1C4  0EFF               	movlw	high STR_8
  1383  00F1C6  6E41               	movwf	printf@f+1,c
  1384  00F1C8  EC42  F07B         	call	_printf	;wreg free
  1385                           
  1386                           ;main.c: 82: lcdInst(0xC0);;
  1387  00F1CC  0EC0               	movlw	192
  1388  00F1CE  ECB8  F06E         	call	_lcdInst
  1389                           
  1390                           ;main.c: 83: printf("be toggled");
  1391  00F1D2  0EAA               	movlw	low STR_9
  1392  00F1D4  6E40               	movwf	printf@f,c
  1393  00F1D6  0EFF               	movlw	high STR_9
  1394  00F1D8  6E41               	movwf	printf@f+1,c
  1395  00F1DA  EC42  F07B         	call	_printf	;wreg free
  1396                           
  1397                           ;main.c: 84: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1398  00F1DE  0E66               	movlw	102
  1399  00F1E0  6E66               	movwf	(??_main+1)& (0+255),c
  1400  00F1E2  0E76               	movlw	118
  1401  00F1E4  6E65               	movwf	??_main& (0+255),c
  1402  00F1E6  0EC1               	movlw	193
  1403  00F1E8                     u3037:
  1404  00F1E8  2EE8               	decfsz	wreg,f,c
  1405  00F1EA  D7FE               	bra	u3037
  1406  00F1EC  2E65               	decfsz	??_main& (0+255),f,c
  1407  00F1EE  D7FC               	bra	u3037
  1408  00F1F0  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1409  00F1F2  D7FA               	bra	u3037
  1410  00F1F4  F000               	nop	
  1411                           
  1412                           ;main.c: 85: lcdInst(8 | (1 << 2) | (1 << 1)| 0);;
  1413  00F1F6  0E0E               	movlw	14
  1414  00F1F8  ECB8  F06E         	call	_lcdInst
  1415                           
  1416                           ;main.c: 86: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1417  00F1FC  0E66               	movlw	102
  1418  00F1FE  6E66               	movwf	(??_main+1)& (0+255),c
  1419  00F200  0E76               	movlw	118
  1420  00F202  6E65               	movwf	??_main& (0+255),c
  1421  00F204  0EC1               	movlw	193
  1422  00F206                     u3047:
  1423  00F206  2EE8               	decfsz	wreg,f,c
  1424  00F208  D7FE               	bra	u3047
  1425  00F20A  2E65               	decfsz	??_main& (0+255),f,c
  1426  00F20C  D7FC               	bra	u3047
  1427  00F20E  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1428  00F210  D7FA               	bra	u3047
  1429  00F212  F000               	nop	
  1430                           
  1431                           ;main.c: 89: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1432  00F214  0E01               	movlw	1
  1433  00F216  ECB8  F06E         	call	_lcdInst
  1434  00F21A  0EC3               	movlw	195
  1435  00F21C  6E65               	movwf	??_main& (0+255),c
  1436  00F21E  0ECD               	movlw	205
  1437  00F220                     u3057:
  1438  00F220  2EE8               	decfsz	wreg,f,c
  1439  00F222  D7FE               	bra	u3057
  1440  00F224  2E65               	decfsz	??_main& (0+255),f,c
  1441  00F226  D7FC               	bra	u3057
  1442  00F228  F000               	nop	
  1443                           
  1444                           ;main.c: 90: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1445  00F22A  0E80               	movlw	128
  1446  00F22C  ECB8  F06E         	call	_lcdInst
  1447  00F230  0E41               	movlw	65
  1448  00F232  6E65               	movwf	??_main& (0+255),c
  1449  00F234  0EEE               	movlw	238
  1450  00F236                     u3067:
  1451  00F236  2EE8               	decfsz	wreg,f,c
  1452  00F238  D7FE               	bra	u3067
  1453  00F23A  2E65               	decfsz	??_main& (0+255),f,c
  1454  00F23C  D7FC               	bra	u3067
  1455  00F23E  D000               	nop2	
  1456                           
  1457                           ;main.c: 91: printf("As can the");
  1458  00F240  0EB5               	movlw	low STR_10
  1459  00F242  6E40               	movwf	printf@f,c
  1460  00F244  0EFF               	movlw	high STR_10
  1461  00F246  6E41               	movwf	printf@f+1,c
  1462  00F248  EC42  F07B         	call	_printf	;wreg free
  1463                           
  1464                           ;main.c: 92: lcdInst(0xC0);;
  1465  00F24C  0EC0               	movlw	192
  1466  00F24E  ECB8  F06E         	call	_lcdInst
  1467                           
  1468                           ;main.c: 93: printf("cursor!");
  1469  00F252  0EDF               	movlw	low STR_11
  1470  00F254  6E40               	movwf	printf@f,c
  1471  00F256  0EFF               	movlw	high STR_11
  1472  00F258  6E41               	movwf	printf@f+1,c
  1473  00F25A  EC42  F07B         	call	_printf	;wreg free
  1474                           
  1475                           ;main.c: 94: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1476  00F25E  0E66               	movlw	102
  1477  00F260  6E66               	movwf	(??_main+1)& (0+255),c
  1478  00F262  0E76               	movlw	118
  1479  00F264  6E65               	movwf	??_main& (0+255),c
  1480  00F266  0EC1               	movlw	193
  1481  00F268                     u3077:
  1482  00F268  2EE8               	decfsz	wreg,f,c
  1483  00F26A  D7FE               	bra	u3077
  1484  00F26C  2E65               	decfsz	??_main& (0+255),f,c
  1485  00F26E  D7FC               	bra	u3077
  1486  00F270  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1487  00F272  D7FA               	bra	u3077
  1488  00F274  F000               	nop	
  1489                           
  1490                           ;main.c: 95: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1491  00F276  0E0C               	movlw	12
  1492  00F278  ECB8  F06E         	call	_lcdInst
  1493                           
  1494                           ;main.c: 96: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1495  00F27C  0E66               	movlw	102
  1496  00F27E  6E66               	movwf	(??_main+1)& (0+255),c
  1497  00F280  0E76               	movlw	118
  1498  00F282  6E65               	movwf	??_main& (0+255),c
  1499  00F284  0EC1               	movlw	193
  1500  00F286                     u3087:
  1501  00F286  2EE8               	decfsz	wreg,f,c
  1502  00F288  D7FE               	bra	u3087
  1503  00F28A  2E65               	decfsz	??_main& (0+255),f,c
  1504  00F28C  D7FC               	bra	u3087
  1505  00F28E  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1506  00F290  D7FA               	bra	u3087
  1507  00F292  F000               	nop	
  1508                           
  1509                           ;main.c: 99: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1510  00F294  0E01               	movlw	1
  1511  00F296  ECB8  F06E         	call	_lcdInst
  1512  00F29A  0EC3               	movlw	195
  1513  00F29C  6E65               	movwf	??_main& (0+255),c
  1514  00F29E  0ECD               	movlw	205
  1515  00F2A0                     u3097:
  1516  00F2A0  2EE8               	decfsz	wreg,f,c
  1517  00F2A2  D7FE               	bra	u3097
  1518  00F2A4  2E65               	decfsz	??_main& (0+255),f,c
  1519  00F2A6  D7FC               	bra	u3097
  1520  00F2A8  F000               	nop	
  1521                           
  1522                           ;main.c: 100: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1523  00F2AA  0E80               	movlw	128
  1524  00F2AC  ECB8  F06E         	call	_lcdInst
  1525  00F2B0  0E41               	movlw	65
  1526  00F2B2  6E65               	movwf	??_main& (0+255),c
  1527  00F2B4  0EEE               	movlw	238
  1528  00F2B6                     u3107:
  1529  00F2B6  2EE8               	decfsz	wreg,f,c
  1530  00F2B8  D7FE               	bra	u3107
  1531  00F2BA  2E65               	decfsz	??_main& (0+255),f,c
  1532  00F2BC  D7FC               	bra	u3107
  1533  00F2BE  D000               	nop2	
  1534                           
  1535                           ;main.c: 101: printf("As can the");
  1536  00F2C0  0EB5               	movlw	low STR_10
  1537  00F2C2  6E40               	movwf	printf@f,c
  1538  00F2C4  0EFF               	movlw	high STR_10
  1539  00F2C6  6E41               	movwf	printf@f+1,c
  1540  00F2C8  EC42  F07B         	call	_printf	;wreg free
  1541                           
  1542                           ;main.c: 102: lcdInst(0xC0);;
  1543  00F2CC  0EC0               	movlw	192
  1544  00F2CE  ECB8  F06E         	call	_lcdInst
  1545                           
  1546                           ;main.c: 103: printf("display");
  1547  00F2D2  0EEF               	movlw	low STR_13
  1548  00F2D4  6E40               	movwf	printf@f,c
  1549  00F2D6  0EFF               	movlw	high STR_13
  1550  00F2D8  6E41               	movwf	printf@f+1,c
  1551  00F2DA  EC42  F07B         	call	_printf	;wreg free
  1552                           
  1553                           ;main.c: 104: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1554  00F2DE  0E66               	movlw	102
  1555  00F2E0  6E66               	movwf	(??_main+1)& (0+255),c
  1556  00F2E2  0E76               	movlw	118
  1557  00F2E4  6E65               	movwf	??_main& (0+255),c
  1558  00F2E6  0EC1               	movlw	193
  1559  00F2E8                     u3117:
  1560  00F2E8  2EE8               	decfsz	wreg,f,c
  1561  00F2EA  D7FE               	bra	u3117
  1562  00F2EC  2E65               	decfsz	??_main& (0+255),f,c
  1563  00F2EE  D7FC               	bra	u3117
  1564  00F2F0  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1565  00F2F2  D7FA               	bra	u3117
  1566  00F2F4  F000               	nop	
  1567                           
  1568                           ;main.c: 105: lcdInst(8 | (0 << 2) | (0 << 1)| 0);;
  1569  00F2F6  0E08               	movlw	8
  1570  00F2F8  ECB8  F06E         	call	_lcdInst
  1571                           
  1572                           ;main.c: 106: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1573  00F2FC  0E66               	movlw	102
  1574  00F2FE  6E66               	movwf	(??_main+1)& (0+255),c
  1575  00F300  0E76               	movlw	118
  1576  00F302  6E65               	movwf	??_main& (0+255),c
  1577  00F304  0EC1               	movlw	193
  1578  00F306                     u3127:
  1579  00F306  2EE8               	decfsz	wreg,f,c
  1580  00F308  D7FE               	bra	u3127
  1581  00F30A  2E65               	decfsz	??_main& (0+255),f,c
  1582  00F30C  D7FC               	bra	u3127
  1583  00F30E  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1584  00F310  D7FA               	bra	u3127
  1585  00F312  F000               	nop	
  1586                           
  1587                           ;main.c: 108: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1588  00F314  0E01               	movlw	1
  1589  00F316  ECB8  F06E         	call	_lcdInst
  1590  00F31A  0EC3               	movlw	195
  1591  00F31C  6E65               	movwf	??_main& (0+255),c
  1592  00F31E  0ECD               	movlw	205
  1593  00F320                     u3137:
  1594  00F320  2EE8               	decfsz	wreg,f,c
  1595  00F322  D7FE               	bra	u3137
  1596  00F324  2E65               	decfsz	??_main& (0+255),f,c
  1597  00F326  D7FC               	bra	u3137
  1598  00F328  F000               	nop	
  1599                           
  1600                           ;main.c: 109: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1601  00F32A  0E80               	movlw	128
  1602  00F32C  ECB8  F06E         	call	_lcdInst
  1603  00F330  0E41               	movlw	65
  1604  00F332  6E65               	movwf	??_main& (0+255),c
  1605  00F334  0EEE               	movlw	238
  1606  00F336                     u3147:
  1607  00F336  2EE8               	decfsz	wreg,f,c
  1608  00F338  D7FE               	bra	u3147
  1609  00F33A  2E65               	decfsz	??_main& (0+255),f,c
  1610  00F33C  D7FC               	bra	u3147
  1611  00F33E  D000               	nop2	
  1612                           
  1613                           ;main.c: 110: printf("But that will");
  1614  00F340  0E83               	movlw	low STR_14
  1615  00F342  6E40               	movwf	printf@f,c
  1616  00F344  0EFF               	movlw	high STR_14
  1617  00F346  6E41               	movwf	printf@f+1,c
  1618  00F348  EC42  F07B         	call	_printf	;wreg free
  1619                           
  1620                           ;main.c: 111: lcdInst(0xC0);;
  1621  00F34C  0EC0               	movlw	192
  1622  00F34E  ECB8  F06E         	call	_lcdInst
  1623                           
  1624                           ;main.c: 112: printf("likely stay on!");
  1625  00F352  0E36               	movlw	low STR_15
  1626  00F354  6E40               	movwf	printf@f,c
  1627  00F356  0EFF               	movlw	high STR_15
  1628  00F358  6E41               	movwf	printf@f+1,c
  1629  00F35A  EC42  F07B         	call	_printf	;wreg free
  1630                           
  1631                           ;main.c: 113: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1632  00F35E  0E0C               	movlw	12
  1633  00F360  ECB8  F06E         	call	_lcdInst
  1634                           
  1635                           ;main.c: 114: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1636  00F364  0E66               	movlw	102
  1637  00F366  6E66               	movwf	(??_main+1)& (0+255),c
  1638  00F368  0E76               	movlw	118
  1639  00F36A  6E65               	movwf	??_main& (0+255),c
  1640  00F36C  0EC1               	movlw	193
  1641  00F36E                     u3157:
  1642  00F36E  2EE8               	decfsz	wreg,f,c
  1643  00F370  D7FE               	bra	u3157
  1644  00F372  2E65               	decfsz	??_main& (0+255),f,c
  1645  00F374  D7FC               	bra	u3157
  1646  00F376  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1647  00F378  D7FA               	bra	u3157
  1648  00F37A  F000               	nop	
  1649                           
  1650                           ;main.c: 117: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1651  00F37C  0E01               	movlw	1
  1652  00F37E  ECB8  F06E         	call	_lcdInst
  1653  00F382  0EC3               	movlw	195
  1654  00F384  6E65               	movwf	??_main& (0+255),c
  1655  00F386  0ECD               	movlw	205
  1656  00F388                     u3167:
  1657  00F388  2EE8               	decfsz	wreg,f,c
  1658  00F38A  D7FE               	bra	u3167
  1659  00F38C  2E65               	decfsz	??_main& (0+255),f,c
  1660  00F38E  D7FC               	bra	u3167
  1661  00F390  F000               	nop	
  1662                           
  1663                           ;main.c: 118: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1664  00F392  0E80               	movlw	128
  1665  00F394  ECB8  F06E         	call	_lcdInst
  1666  00F398  0E41               	movlw	65
  1667  00F39A  6E65               	movwf	??_main& (0+255),c
  1668  00F39C  0EEE               	movlw	238
  1669  00F39E                     u3177:
  1670  00F39E  2EE8               	decfsz	wreg,f,c
  1671  00F3A0  D7FE               	bra	u3177
  1672  00F3A2  2E65               	decfsz	??_main& (0+255),f,c
  1673  00F3A4  D7FC               	bra	u3177
  1674  00F3A6  D000               	nop2	
  1675                           
  1676                           ;main.c: 119: printf("Cursor position");
  1677  00F3A8  0E46               	movlw	low STR_16
  1678  00F3AA  6E40               	movwf	printf@f,c
  1679  00F3AC  0EFF               	movlw	high STR_16
  1680  00F3AE  6E41               	movwf	printf@f+1,c
  1681  00F3B0  EC42  F07B         	call	_printf	;wreg free
  1682                           
  1683                           ;main.c: 120: lcdInst(0xC0);;
  1684  00F3B4  0EC0               	movlw	192
  1685  00F3B6  ECB8  F06E         	call	_lcdInst
  1686                           
  1687                           ;main.c: 121: printf("can be specified");
  1688  00F3BA  0E14               	movlw	low STR_17
  1689  00F3BC  6E40               	movwf	printf@f,c
  1690  00F3BE  0EFF               	movlw	high STR_17
  1691  00F3C0  6E41               	movwf	printf@f+1,c
  1692  00F3C2  EC42  F07B         	call	_printf	;wreg free
  1693                           
  1694                           ;main.c: 122: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1695  00F3C6  0E66               	movlw	102
  1696  00F3C8  6E66               	movwf	(??_main+1)& (0+255),c
  1697  00F3CA  0E76               	movlw	118
  1698  00F3CC  6E65               	movwf	??_main& (0+255),c
  1699  00F3CE  0EC1               	movlw	193
  1700  00F3D0                     u3187:
  1701  00F3D0  2EE8               	decfsz	wreg,f,c
  1702  00F3D2  D7FE               	bra	u3187
  1703  00F3D4  2E65               	decfsz	??_main& (0+255),f,c
  1704  00F3D6  D7FC               	bra	u3187
  1705  00F3D8  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1706  00F3DA  D7FA               	bra	u3187
  1707  00F3DC  F000               	nop	
  1708                           
  1709                           ;main.c: 123: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1710  00F3DE  0E01               	movlw	1
  1711  00F3E0  ECB8  F06E         	call	_lcdInst
  1712  00F3E4  0EC3               	movlw	195
  1713  00F3E6  6E65               	movwf	??_main& (0+255),c
  1714  00F3E8  0ECD               	movlw	205
  1715  00F3EA                     u3197:
  1716  00F3EA  2EE8               	decfsz	wreg,f,c
  1717  00F3EC  D7FE               	bra	u3197
  1718  00F3EE  2E65               	decfsz	??_main& (0+255),f,c
  1719  00F3F0  D7FC               	bra	u3197
  1720  00F3F2  F000               	nop	
  1721                           
  1722                           ;main.c: 124: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1723  00F3F4  0E80               	movlw	128
  1724  00F3F6  ECB8  F06E         	call	_lcdInst
  1725  00F3FA  0E41               	movlw	65
  1726  00F3FC  6E65               	movwf	??_main& (0+255),c
  1727  00F3FE  0EEE               	movlw	238
  1728  00F400                     u3207:
  1729  00F400  2EE8               	decfsz	wreg,f,c
  1730  00F402  D7FE               	bra	u3207
  1731  00F404  2E65               	decfsz	??_main& (0+255),f,c
  1732  00F406  D7FC               	bra	u3207
  1733  00F408  D000               	nop2	
  1734                           
  1735                           ;main.c: 127: for(unsigned char x = 0; x < LCD_SIZE_HORZ; x++){
  1736  00F40A  0E00               	movlw	0
  1737  00F40C  6E74               	movwf	main@x,c
  1738  00F40E                     l3079:
  1739  00F40E  0E00               	movlw	low _LCD_SIZE_HORZ
  1740  00F410  6EF6               	movwf	tblptrl,c
  1741  00F412                     	if	1	;There is more than 1 active tblptr byte
  1742  00F412  0EFF               	movlw	high _LCD_SIZE_HORZ
  1743  00F414  6EF7               	movwf	tblptrh,c
  1744  00F416                     	endif
  1745  00F416                     	if	1	;There are 3 active tblptr bytes
  1746  00F416  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1747  00F418  6EF8               	movwf	tblptru,c
  1748  00F41A                     	endif
  1749  00F41A  0009               	tblrd		*+
  1750  00F41C  50F5               	movf	tablat,w,c
  1751  00F41E  5C74               	subwf	main@x,w,c
  1752  00F420  B0D8               	btfsc	status,0,c
  1753  00F422  D076               	goto	u2850
  1754                           
  1755                           ;main.c: 128: if(x % LCD_SIZE_VERT){
  1756  00F424  0EFF               	movlw	low _LCD_SIZE_VERT
  1757  00F426  6EF6               	movwf	tblptrl,c
  1758  00F428                     	if	1	;There is more than 1 active tblptr byte
  1759  00F428  0EFE               	movlw	high _LCD_SIZE_VERT
  1760  00F42A  6EF7               	movwf	tblptrh,c
  1761  00F42C                     	endif
  1762  00F42C                     	if	1	;There are 3 active tblptr bytes
  1763  00F42C  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
  1764  00F42E  6EF8               	movwf	tblptru,c
  1765  00F430                     	endif
  1766  00F430  0008               	tblrd		*
  1767  00F432  CFF5 F001          	movff	tablat,___lbmod@divisor
  1768  00F436  5074               	movf	main@x,w,c
  1769  00F438  EC0D  F06F         	call	___lbmod
  1770  00F43C  0900               	iorlw	0
  1771  00F43E  B4D8               	btfsc	status,2,c
  1772  00F440  D033               	goto	l62
  1773                           
  1774                           ;main.c: 129: lcd_set_cursor((unsigned char)(LCD_SIZE_HORZ - x), (unsigned char)(x % LCD
      +                          _SIZE_VERT));
  1775  00F442  0EFF               	movlw	low _LCD_SIZE_VERT
  1776  00F444  6EF6               	movwf	tblptrl,c
  1777  00F446                     	if	1	;There is more than 1 active tblptr byte
  1778  00F446  0EFE               	movlw	high _LCD_SIZE_VERT
  1779  00F448  6EF7               	movwf	tblptrh,c
  1780  00F44A                     	endif
  1781  00F44A                     	if	1	;There are 3 active tblptr bytes
  1782  00F44A  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
  1783  00F44C  6EF8               	movwf	tblptru,c
  1784  00F44E                     	endif
  1785  00F44E  0008               	tblrd		*
  1786  00F450  CFF5 F001          	movff	tablat,___lbmod@divisor
  1787  00F454  5074               	movf	main@x,w,c
  1788  00F456  EC0D  F06F         	call	___lbmod
  1789  00F45A  6E07               	movwf	lcd_set_cursor@y,c
  1790  00F45C  0E00               	movlw	low _LCD_SIZE_HORZ
  1791  00F45E  6EF6               	movwf	tblptrl,c
  1792  00F460                     	if	1	;There is more than 1 active tblptr byte
  1793  00F460  0EFF               	movlw	high _LCD_SIZE_HORZ
  1794  00F462  6EF7               	movwf	tblptrh,c
  1795  00F464                     	endif
  1796  00F464                     	if	1	;There are 3 active tblptr bytes
  1797  00F464  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1798  00F466  6EF8               	movwf	tblptru,c
  1799  00F468                     	endif
  1800  00F468  0008               	tblrd		*
  1801  00F46A  CFF5 F065          	movff	tablat,??_main
  1802  00F46E  5074               	movf	main@x,w,c
  1803  00F470  0800               	sublw	0
  1804  00F472  2465               	addwf	??_main,w,c
  1805  00F474  EC37  F06F         	call	_lcd_set_cursor
  1806                           
  1807                           ;main.c: 131: printf("%d", x % 10);
  1808  00F478  C074  F001         	movff	main@x,___awmod@dividend
  1809  00F47C  6A02               	clrf	___awmod@dividend+1,c
  1810  00F47E  0E00               	movlw	0
  1811  00F480  6E04               	movwf	___awmod@divisor+1,c
  1812  00F482  0E0A               	movlw	10
  1813  00F484  6E03               	movwf	___awmod@divisor,c
  1814  00F486  ECFB  F06F         	call	___awmod	;wreg free
  1815  00F48A  C001  F06F         	movff	?___awmod,_main$858
  1816  00F48E  C002  F070         	movff	?___awmod+1,_main$858+1
  1817                           
  1818                           ;main.c: 131: printf("%d", x % 10);
  1819  00F492  0EA7               	movlw	low (STR_4+9)
  1820  00F494  6E40               	movwf	printf@f,c
  1821  00F496  0EFF               	movlw	high (STR_4+9)
  1822  00F498  6E41               	movwf	printf@f+1,c
  1823  00F49A  C06F  F042         	movff	_main$858,?_printf+2
  1824  00F49E  C070  F043         	movff	_main$858+1,?_printf+3
  1825  00F4A2  EC42  F07B         	call	_printf	;wreg free
  1826                           
  1827                           ;main.c: 132: }
  1828  00F4A6  D027               	goto	l63
  1829  00F4A8                     l62:
  1830                           
  1831                           ;main.c: 133: else{
  1832                           ;main.c: 134: lcd_set_cursor(x, (unsigned char)(x % LCD_SIZE_VERT));
  1833  00F4A8  0EFF               	movlw	low _LCD_SIZE_VERT
  1834  00F4AA  6EF6               	movwf	tblptrl,c
  1835  00F4AC                     	if	1	;There is more than 1 active tblptr byte
  1836  00F4AC  0EFE               	movlw	high _LCD_SIZE_VERT
  1837  00F4AE  6EF7               	movwf	tblptrh,c
  1838  00F4B0                     	endif
  1839  00F4B0                     	if	1	;There are 3 active tblptr bytes
  1840  00F4B0  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
  1841  00F4B2  6EF8               	movwf	tblptru,c
  1842  00F4B4                     	endif
  1843  00F4B4  0008               	tblrd		*
  1844  00F4B6  CFF5 F001          	movff	tablat,___lbmod@divisor
  1845  00F4BA  5074               	movf	main@x,w,c
  1846  00F4BC  EC0D  F06F         	call	___lbmod
  1847  00F4C0  6E07               	movwf	lcd_set_cursor@y,c
  1848  00F4C2  5074               	movf	main@x,w,c
  1849  00F4C4  EC37  F06F         	call	_lcd_set_cursor
  1850                           
  1851                           ;main.c: 135: printf("%d", x % 10);
  1852  00F4C8  C074  F001         	movff	main@x,___awmod@dividend
  1853  00F4CC  6A02               	clrf	___awmod@dividend+1,c
  1854  00F4CE  0E00               	movlw	0
  1855  00F4D0  6E04               	movwf	___awmod@divisor+1,c
  1856  00F4D2  0E0A               	movlw	10
  1857  00F4D4  6E03               	movwf	___awmod@divisor,c
  1858  00F4D6  ECFB  F06F         	call	___awmod	;wreg free
  1859  00F4DA  C001  F06F         	movff	?___awmod,_main$858
  1860  00F4DE  C002  F070         	movff	?___awmod+1,_main$858+1
  1861                           
  1862                           ;main.c: 135: printf("%d", x % 10);
  1863  00F4E2  0EA7               	movlw	low (STR_4+9)
  1864  00F4E4  6E40               	movwf	printf@f,c
  1865  00F4E6  0EFF               	movlw	high (STR_4+9)
  1866  00F4E8  6E41               	movwf	printf@f+1,c
  1867  00F4EA  C06F  F042         	movff	_main$858,?_printf+2
  1868  00F4EE  C070  F043         	movff	_main$858+1,?_printf+3
  1869  00F4F2  EC42  F07B         	call	_printf	;wreg free
  1870  00F4F6                     l63:
  1871                           
  1872                           ;main.c: 136: }
  1873                           ;main.c: 137: _delay((unsigned long)((150)*(40000000/4000.0)));
  1874  00F4F6  0E08               	movlw	8
  1875  00F4F8  6E66               	movwf	(??_main+1)& (0+255),c
  1876  00F4FA  0E9D               	movlw	157
  1877  00F4FC  6E65               	movwf	??_main& (0+255),c
  1878  00F4FE  0E06               	movlw	6
  1879  00F500                     u3217:
  1880  00F500  2EE8               	decfsz	wreg,f,c
  1881  00F502  D7FE               	bra	u3217
  1882  00F504  2E65               	decfsz	??_main& (0+255),f,c
  1883  00F506  D7FC               	bra	u3217
  1884  00F508  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1885  00F50A  D7FA               	bra	u3217
  1886  00F50C  2A74               	incf	main@x,f,c
  1887  00F50E  D77F               	goto	l3079
  1888  00F510                     u2850:
  1889                           
  1890                           ;main.c: 138: }
  1891                           ;main.c: 141: unsigned char numShifts = 0;
  1892  00F510  0E00               	movlw	0
  1893  00F512  6E73               	movwf	main@numShifts,c
  1894                           
  1895                           ;main.c: 148: lcd_set_cursor(LCD_SIZE_HORZ + 1, 0);
  1896  00F514  0E00               	movlw	0
  1897  00F516  6E07               	movwf	lcd_set_cursor@y,c
  1898  00F518  0E00               	movlw	low _LCD_SIZE_HORZ
  1899  00F51A  6EF6               	movwf	tblptrl,c
  1900  00F51C                     	if	1	;There is more than 1 active tblptr byte
  1901  00F51C  0EFF               	movlw	high _LCD_SIZE_HORZ
  1902  00F51E  6EF7               	movwf	tblptrh,c
  1903  00F520                     	endif
  1904  00F520                     	if	1	;There are 3 active tblptr bytes
  1905  00F520  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1906  00F522  6EF8               	movwf	tblptru,c
  1907  00F524                     	endif
  1908  00F524  0008               	tblrd		*
  1909  00F526  CFF5 F065          	movff	tablat,??_main
  1910  00F52A  2865               	incf	??_main,w,c
  1911  00F52C  EC37  F06F         	call	_lcd_set_cursor
  1912                           
  1913                           ;main.c: 149: printf("Display can be");
  1914  00F530  0E56               	movlw	low STR_20
  1915  00F532  6E40               	movwf	printf@f,c
  1916  00F534  0EFF               	movlw	high STR_20
  1917  00F536  6E41               	movwf	printf@f+1,c
  1918  00F538  EC42  F07B         	call	_printf	;wreg free
  1919                           
  1920                           ;main.c: 150: lcd_set_cursor(LCD_SIZE_HORZ + 4, 1);
  1921  00F53C  0E01               	movlw	1
  1922  00F53E  6E07               	movwf	lcd_set_cursor@y,c
  1923  00F540  0E00               	movlw	low _LCD_SIZE_HORZ
  1924  00F542  6EF6               	movwf	tblptrl,c
  1925  00F544                     	if	1	;There is more than 1 active tblptr byte
  1926  00F544  0EFF               	movlw	high _LCD_SIZE_HORZ
  1927  00F546  6EF7               	movwf	tblptrh,c
  1928  00F548                     	endif
  1929  00F548                     	if	1	;There are 3 active tblptr bytes
  1930  00F548  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1931  00F54A  6EF8               	movwf	tblptru,c
  1932  00F54C                     	endif
  1933  00F54C  0008               	tblrd		*
  1934  00F54E  50F5               	movf	tablat,w,c
  1935  00F550  0F04               	addlw	4
  1936  00F552  EC37  F06F         	call	_lcd_set_cursor
  1937                           
  1938                           ;main.c: 151: printf("shifted");
  1939  00F556  0EE7               	movlw	low STR_21
  1940  00F558  6E40               	movwf	printf@f,c
  1941  00F55A  0EFF               	movlw	high STR_21
  1942  00F55C  6E41               	movwf	printf@f+1,c
  1943  00F55E  EC42  F07B         	call	_printf	;wreg free
  1944                           
  1945                           ;main.c: 152: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1946  00F562  0E66               	movlw	102
  1947  00F564  6E66               	movwf	(??_main+1)& (0+255),c
  1948  00F566  0E76               	movlw	118
  1949  00F568  6E65               	movwf	??_main& (0+255),c
  1950  00F56A  0EC1               	movlw	193
  1951  00F56C                     u3227:
  1952  00F56C  2EE8               	decfsz	wreg,f,c
  1953  00F56E  D7FE               	bra	u3227
  1954  00F570  2E65               	decfsz	??_main& (0+255),f,c
  1955  00F572  D7FC               	bra	u3227
  1956  00F574  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1957  00F576  D7FA               	bra	u3227
  1958  00F578  F000               	nop	
  1959                           
  1960                           ;main.c: 154: numShifts = LCD_SIZE_HORZ;
  1961  00F57A  0E00               	movlw	low _LCD_SIZE_HORZ
  1962  00F57C  6EF6               	movwf	tblptrl,c
  1963  00F57E                     	if	1	;There is more than 1 active tblptr byte
  1964  00F57E  0EFF               	movlw	high _LCD_SIZE_HORZ
  1965  00F580  6EF7               	movwf	tblptrh,c
  1966  00F582                     	endif
  1967  00F582                     	if	1	;There are 3 active tblptr bytes
  1968  00F582  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1969  00F584  6EF8               	movwf	tblptru,c
  1970  00F586                     	endif
  1971  00F586  0008               	tblrd		*
  1972  00F588  CFF5 F073          	movff	tablat,main@numShifts
  1973                           
  1974                           ;main.c: 155: for(unsigned char i = 0; i < numShifts; i++){
  1975  00F58C  0E00               	movlw	0
  1976  00F58E  6E6E               	movwf	main@i,c
  1977  00F590  D018               	goto	l64
  1978  00F592                     
  1979                           ;main.c: 156: lcd_shift_display(1, LCD_LEFT);
  1980  00F592  0EFD               	movlw	low _LCD_LEFT
  1981  00F594  6EF6               	movwf	tblptrl,c
  1982  00F596                     	if	1	;There is more than 1 active tblptr byte
  1983  00F596  0EFE               	movlw	high _LCD_LEFT
  1984  00F598  6EF7               	movwf	tblptrh,c
  1985  00F59A                     	endif
  1986  00F59A                     	if	1	;There are 3 active tblptr bytes
  1987  00F59A  0E00               	movlw	low (_LCD_LEFT shr (0+16))
  1988  00F59C  6EF8               	movwf	tblptru,c
  1989  00F59E                     	endif
  1990  00F59E  0008               	tblrd		*
  1991  00F5A0  CFF5 F004          	movff	tablat,lcd_shift_display@direction
  1992  00F5A4  0E01               	movlw	1
  1993  00F5A6  ECDA  F06E         	call	_lcd_shift_display
  1994                           
  1995                           ;main.c: 157: _delay((unsigned long)((150)*(40000000/4000.0)));
  1996  00F5AA  0E08               	movlw	8
  1997  00F5AC  6E66               	movwf	(??_main+1)& (0+255),c
  1998  00F5AE  0E9D               	movlw	157
  1999  00F5B0  6E65               	movwf	??_main& (0+255),c
  2000  00F5B2  0E06               	movlw	6
  2001  00F5B4                     u3237:
  2002  00F5B4  2EE8               	decfsz	wreg,f,c
  2003  00F5B6  D7FE               	bra	u3237
  2004  00F5B8  2E65               	decfsz	??_main& (0+255),f,c
  2005  00F5BA  D7FC               	bra	u3237
  2006  00F5BC  2E66               	decfsz	(??_main+1)& (0+255),f,c
  2007  00F5BE  D7FA               	bra	u3237
  2008  00F5C0  2A6E               	incf	main@i,f,c
  2009  00F5C2                     l64:
  2010  00F5C2  5073               	movf	main@numShifts,w,c
  2011  00F5C4  5C6E               	subwf	main@i,w,c
  2012  00F5C6  A0D8               	btfss	status,0,c
  2013  00F5C8  D7E4               	goto	l65
  2014                           
  2015                           ;main.c: 158: }
  2016                           ;main.c: 159: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2017  00F5CA  0E66               	movlw	102
  2018  00F5CC  6E66               	movwf	(??_main+1)& (0+255),c
  2019  00F5CE  0E76               	movlw	118
  2020  00F5D0  6E65               	movwf	??_main& (0+255),c
  2021  00F5D2  0EC1               	movlw	193
  2022  00F5D4                     u3247:
  2023  00F5D4  2EE8               	decfsz	wreg,f,c
  2024  00F5D6  D7FE               	bra	u3247
  2025  00F5D8  2E65               	decfsz	??_main& (0+255),f,c
  2026  00F5DA  D7FC               	bra	u3247
  2027  00F5DC  2E66               	decfsz	(??_main+1)& (0+255),f,c
  2028  00F5DE  D7FA               	bra	u3247
  2029  00F5E0  F000               	nop	
  2030                           
  2031                           ;main.c: 162: lcd_set_cursor(numShifts - 16, 1);
  2032  00F5E2  0E01               	movlw	1
  2033  00F5E4  6E07               	movwf	lcd_set_cursor@y,c
  2034  00F5E6  5073               	movf	main@numShifts,w,c
  2035  00F5E8  0FF0               	addlw	240
  2036  00F5EA  EC37  F06F         	call	_lcd_set_cursor
  2037                           
  2038                           ;main.c: 163: for(unsigned char i = numShifts; i > 0; i--){
  2039  00F5EE  C073  F071         	movff	main@numShifts,main@i_108
  2040  00F5F2                     l3133:
  2041  00F5F2  5071               	movf	main@i_108,w,c
  2042  00F5F4  B4D8               	btfsc	status,2,c
  2043  00F5F6  D005               	goto	u2880
  2044                           
  2045                           ;main.c: 164: putch(' ');
  2046  00F5F8  0E20               	movlw	32
  2047  00F5FA  ECC2  F06E         	call	_putch
  2048  00F5FE  0671               	decf	main@i_108,f,c
  2049  00F600  D7F8               	goto	l3133
  2050  00F602                     u2880:
  2051                           
  2052                           ;main.c: 165: }
  2053                           ;main.c: 169: lcd_set_cursor(numShifts - 16, 0);
  2054  00F602  0E00               	movlw	0
  2055  00F604  6E07               	movwf	lcd_set_cursor@y,c
  2056  00F606  5073               	movf	main@numShifts,w,c
  2057  00F608  0FF0               	addlw	240
  2058  00F60A  EC37  F06F         	call	_lcd_set_cursor
  2059                           
  2060                           ;main.c: 170: printf("Hello world!    ");
  2061  00F60E  0E03               	movlw	low STR_22
  2062  00F610  6E40               	movwf	printf@f,c
  2063  00F612  0EFF               	movlw	high STR_22
  2064  00F614  6E41               	movwf	printf@f+1,c
  2065  00F616  EC42  F07B         	call	_printf	;wreg free
  2066                           
  2067                           ;main.c: 172: for(unsigned char i = 0; i < LCD_SIZE_HORZ; i++){
  2068  00F61A  0E00               	movlw	0
  2069  00F61C  6E72               	movwf	main@i_110,c
  2070  00F61E                     l3149:
  2071  00F61E  0E00               	movlw	low _LCD_SIZE_HORZ
  2072  00F620  6EF6               	movwf	tblptrl,c
  2073  00F622                     	if	1	;There is more than 1 active tblptr byte
  2074  00F622  0EFF               	movlw	high _LCD_SIZE_HORZ
  2075  00F624  6EF7               	movwf	tblptrh,c
  2076  00F626                     	endif
  2077  00F626                     	if	1	;There are 3 active tblptr bytes
  2078  00F626  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  2079  00F628  6EF8               	movwf	tblptru,c
  2080  00F62A                     	endif
  2081  00F62A  0009               	tblrd		*+
  2082  00F62C  50F5               	movf	tablat,w,c
  2083  00F62E  5C72               	subwf	main@i_110,w,c
  2084  00F630  B0D8               	btfsc	status,0,c
  2085  00F632  D019               	goto	u2900
  2086                           
  2087                           ;main.c: 173: lcd_shift_display(1, LCD_RIGHT);
  2088  00F634  0EFE               	movlw	low _LCD_RIGHT
  2089  00F636  6EF6               	movwf	tblptrl,c
  2090  00F638                     	if	1	;There is more than 1 active tblptr byte
  2091  00F638  0EFE               	movlw	high _LCD_RIGHT
  2092  00F63A  6EF7               	movwf	tblptrh,c
  2093  00F63C                     	endif
  2094  00F63C                     	if	1	;There are 3 active tblptr bytes
  2095  00F63C  0E00               	movlw	low (_LCD_RIGHT shr (0+16))
  2096  00F63E  6EF8               	movwf	tblptru,c
  2097  00F640                     	endif
  2098  00F640  0008               	tblrd		*
  2099  00F642  CFF5 F004          	movff	tablat,lcd_shift_display@direction
  2100  00F646  0E01               	movlw	1
  2101  00F648  ECDA  F06E         	call	_lcd_shift_display
  2102                           
  2103                           ;main.c: 174: _delay((unsigned long)((150)*(40000000/4000.0)));
  2104  00F64C  0E08               	movlw	8
  2105  00F64E  6E66               	movwf	(??_main+1)& (0+255),c
  2106  00F650  0E9D               	movlw	157
  2107  00F652  6E65               	movwf	??_main& (0+255),c
  2108  00F654  0E06               	movlw	6
  2109  00F656                     u3257:
  2110  00F656  2EE8               	decfsz	wreg,f,c
  2111  00F658  D7FE               	bra	u3257
  2112  00F65A  2E65               	decfsz	??_main& (0+255),f,c
  2113  00F65C  D7FC               	bra	u3257
  2114  00F65E  2E66               	decfsz	(??_main+1)& (0+255),f,c
  2115  00F660  D7FA               	bra	u3257
  2116  00F662  2A72               	incf	main@i_110,f,c
  2117  00F664  D7DC               	goto	l3149
  2118  00F666                     u2900:
  2119                           
  2120                           ;main.c: 175: }
  2121                           ;main.c: 176: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  2122  00F666  0E0F               	movlw	15
  2123  00F668  ECB8  F06E         	call	_lcdInst
  2124                           
  2125                           ;main.c: 177: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2126  00F66C  0E66               	movlw	102
  2127  00F66E  6E66               	movwf	(??_main+1)& (0+255),c
  2128  00F670  0E76               	movlw	118
  2129  00F672  6E65               	movwf	??_main& (0+255),c
  2130  00F674  0EC1               	movlw	193
  2131  00F676                     u3267:
  2132  00F676  2EE8               	decfsz	wreg,f,c
  2133  00F678  D7FE               	bra	u3267
  2134  00F67A  2E65               	decfsz	??_main& (0+255),f,c
  2135  00F67C  D7FC               	bra	u3267
  2136  00F67E  2E66               	decfsz	(??_main+1)& (0+255),f,c
  2137  00F680  D7FA               	bra	u3267
  2138  00F682  D4D5               	goto	L4
  2139  00F684                     __end_of_main:
  2140                           	opt stack 0
  2141                           tblptru	equ	0xFF8
  2142                           tblptrh	equ	0xFF7
  2143                           tblptrl	equ	0xFF6
  2144                           tablat	equ	0xFF5
  2145                           postinc0	equ	0xFEE
  2146                           wreg	equ	0xFE8
  2147                           postdec1	equ	0xFE5
  2148                           plusw1	equ	0xFE3
  2149                           fsr1l	equ	0xFE1
  2150                           plusw2	equ	0xFDB
  2151                           status	equ	0xFD8
  2152                           
  2153 ;; *************** function _printf *****************
  2154 ;; Defined at:
  2155 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;  f               2   63[COMRAM] PTR const unsigned char 
  2158 ;;		 -> STR_22(17), STR_21(8), STR_20(15), STR_19(3), 
  2159 ;;		 -> STR_18(3), STR_17(17), STR_16(16), STR_15(16), 
  2160 ;;		 -> STR_14(14), STR_13(8), STR_12(11), STR_11(8), 
  2161 ;;		 -> STR_10(11), STR_9(11), STR_8(17), STR_7(11), 
  2162 ;;		 -> STR_6(10), STR_5(10), STR_4(12), STR_3(15), 
  2163 ;;		 -> STR_2(15), STR_1(13), 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  tmpval          4   92[COMRAM] struct .
  2166 ;;  val             4   88[COMRAM] unsigned long 
  2167 ;;  fval            3   96[COMRAM] unsigned long 
  2168 ;;  exp             2   86[COMRAM] int 
  2169 ;;  prec            2   84[COMRAM] int 
  2170 ;;  ap              2   82[COMRAM] PTR void [1]
  2171 ;;		 -> ?_printf(2), 
  2172 ;;  flag            2   80[COMRAM] unsigned short 
  2173 ;;  cp              2   78[COMRAM] PTR const unsigned char 
  2174 ;;		 -> STR_23(7), main@arr(7), 
  2175 ;;  len             2    0        unsigned int 
  2176 ;;  width           2    0        int 
  2177 ;;  c               1   99[COMRAM] char 
  2178 ;;  d               1    0        unsigned char 
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  2   63[COMRAM] int 
  2181 ;; Registers used:
  2182 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2188 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;Total ram usage:       37 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; Hardware stack levels required when called:    3
  2195 ;; This function calls:
  2196 ;;		___awdiv
  2197 ;;		___ftadd
  2198 ;;		___ftge
  2199 ;;		___ftmul
  2200 ;;		___ftneg
  2201 ;;		___ftsub
  2202 ;;		___fttol
  2203 ;;		___lldiv
  2204 ;;		___llmod
  2205 ;;		___lltoft
  2206 ;;		___wmul
  2207 ;;		__div_to_l_
  2208 ;;		__tdiv_to_l_
  2209 ;;		_fround
  2210 ;;		_putch
  2211 ;;		_scale
  2212 ;; This function is called by:
  2213 ;;		_main
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216                           
  2217                           	psect	text1
  2218  00F684                     __ptext1:
  2219                           	opt stack 0
  2220  00F684                     _printf:
  2221                           	opt stack 27
  2222                           
  2223                           ;doprnt.c: 466: va_list ap;
  2224                           ;doprnt.c: 499: signed char c;
  2225                           ;doprnt.c: 501: int width;
  2226                           ;doprnt.c: 504: int prec;
  2227                           ;doprnt.c: 508: unsigned short flag;
  2228                           ;doprnt.c: 515: char d;
  2229                           ;doprnt.c: 516: double fval;
  2230                           ;doprnt.c: 517: int exp;
  2231                           ;doprnt.c: 523: union {
  2232                           ;doprnt.c: 524: unsigned long vd;
  2233                           ;doprnt.c: 525: double integ;
  2234                           ;doprnt.c: 526: } tmpval;
  2235                           ;doprnt.c: 528: unsigned long val;
  2236                           ;doprnt.c: 529: unsigned len;
  2237                           ;doprnt.c: 530: const char * cp;
  2238                           ;doprnt.c: 533: *ap = __va_start();
  2239                           
  2240                           ;incstack = 0
  2241  00F684  0E42               	movlw	low (?_printf+2)
  2242  00F686  6E53               	movwf	printf@ap,c
  2243  00F688  0E00               	movlw	high (?_printf+2)
  2244  00F68A  6E54               	movwf	printf@ap+1,c
  2245                           
  2246                           ;doprnt.c: 536: while(c = *f++) {
  2247  00F68C  D3EE               	goto	u2760
  2248  00F68E                     
  2249                           ;doprnt.c: 538: if(c != '%')
  2250  00F68E  0E25               	movlw	37
  2251  00F690  1864               	xorwf	printf@c,w,c
  2252  00F692  B4D8               	btfsc	status,2,c
  2253  00F694  D004               	goto	l164
  2254                           
  2255                           ;doprnt.c: 540: {
  2256                           ;doprnt.c: 541: (putch(c) );
  2257  00F696  5064               	movf	printf@c,w,c
  2258  00F698  ECC2  F06E         	call	_putch
  2259                           
  2260                           ;doprnt.c: 542: continue;
  2261  00F69C  D3E6               	goto	u2760
  2262  00F69E                     l164:
  2263                           
  2264                           ;doprnt.c: 543: }
  2265                           ;doprnt.c: 548: flag = 0;
  2266  00F69E  0E00               	movlw	0
  2267  00F6A0  6E52               	movwf	printf@flag+1,c
  2268  00F6A2  0E00               	movlw	0
  2269  00F6A4  6E51               	movwf	printf@flag,c
  2270                           
  2271                           ;doprnt.c: 635: switch(c = *f++) {
  2272                           
  2273                           ;doprnt.c: 633: loop:
  2274  00F6A6  D045               	goto	l166
  2275  00F6A8                     
  2276                           ;doprnt.c: 643: flag |= 0x10;
  2277  00F6A8  8851               	bsf	printf@flag,4,c
  2278                           
  2279                           ;doprnt.c: 644: goto loop;
  2280  00F6AA  D043               	goto	l166
  2281  00F6AC                     
  2282                           ;doprnt.c: 663: flag |= 0x400;
  2283  00F6AC  8452               	bsf	printf@flag+1,2,c
  2284                           
  2285                           ;doprnt.c: 698: case 'i':
  2286                           ;doprnt.c: 699: break;
  2287                           
  2288                           ;doprnt.c: 697: case 'd':
  2289                           
  2290                           ;doprnt.c: 664: break;
  2291  00F6AE  D062               	goto	l171
  2292  00F6B0                     
  2293                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2294  00F6B0  C053  FFD9         	movff	printf@ap,fsr2l
  2295  00F6B4  C054  FFDA         	movff	printf@ap+1,fsr2h
  2296  00F6B8  CFDE F04F          	movff	postinc2,printf@cp
  2297  00F6BC  CFDD F050          	movff	postdec2,printf@cp+1
  2298  00F6C0  0E02               	movlw	2
  2299  00F6C2  2653               	addwf	printf@ap,f,c
  2300  00F6C4  0E00               	movlw	0
  2301  00F6C6  2254               	addwfc	printf@ap+1,f,c
  2302                           
  2303                           ;doprnt.c: 740: if(!cp)
  2304  00F6C8  504F               	movf	printf@cp,w,c
  2305  00F6CA  1050               	iorwf	printf@cp+1,w,c
  2306  00F6CC  A4D8               	btfss	status,2,c
  2307  00F6CE  D01A               	goto	l176
  2308                           
  2309                           ;doprnt.c: 741: cp = "(null)";
  2310  00F6D0  0EF7               	movlw	low STR_23
  2311  00F6D2  6E4F               	movwf	printf@cp,c
  2312  00F6D4  0EFF               	movlw	high STR_23
  2313  00F6D6  6E50               	movwf	printf@cp+1,c
  2314                           
  2315                           ;doprnt.c: 777: while(*cp)
  2316  00F6D8  D015               	goto	l176
  2317  00F6DA                     
  2318                           ;doprnt.c: 778: (putch(*cp++) );
  2319  00F6DA  C04F  FFF6         	movff	printf@cp,tblptrl
  2320  00F6DE  C050  FFF7         	movff	printf@cp+1,tblptrh
  2321  00F6E2  0E00               	movlw	low (__mediumconst shr (0+16))
  2322  00F6E4  6EF8               	movwf	tblptru,c
  2323  00F6E6  0E0F               	movlw	(high __ramtop+-1)
  2324  00F6E8  64F7               	cpfsgt	tblptrh,c
  2325  00F6EA  D003               	bra	u2427
  2326  00F6EC  0008               	tblrd		*
  2327  00F6EE  50F5               	movf	tablat,w,c
  2328  00F6F0  D005               	bra	u2420
  2329  00F6F2                     u2427:
  2330  00F6F2  CFF6 FFE9          	movff	tblptrl,fsr0l
  2331  00F6F6  CFF7 FFEA          	movff	tblptrh,fsr0h
  2332  00F6FA  50EF               	movf	indf0,w,c
  2333  00F6FC                     u2420:
  2334  00F6FC  ECC2  F06E         	call	_putch
  2335  00F700  4A4F               	infsnz	printf@cp,f,c
  2336  00F702  2A50               	incf	printf@cp+1,f,c
  2337  00F704                     l176:
  2338  00F704  C04F  FFF6         	movff	printf@cp,tblptrl
  2339  00F708  C050  FFF7         	movff	printf@cp+1,tblptrh
  2340  00F70C  0E00               	movlw	low (__mediumconst shr (0+16))
  2341  00F70E  6EF8               	movwf	tblptru,c
  2342  00F710  0E0F               	movlw	(high __ramtop+-1)
  2343  00F712  64F7               	cpfsgt	tblptrh,c
  2344  00F714  D003               	bra	u2437
  2345  00F716  0008               	tblrd		*
  2346  00F718  50F5               	movf	tablat,w,c
  2347  00F71A  D005               	bra	u2430
  2348  00F71C                     u2437:
  2349  00F71C  CFF6 FFE9          	movff	tblptrl,fsr0l
  2350  00F720  CFF7 FFEA          	movff	tblptrh,fsr0h
  2351  00F724  50EF               	movf	indf0,w,c
  2352  00F726                     u2430:
  2353  00F726  0900               	iorlw	0
  2354  00F728  B4D8               	btfsc	status,2,c
  2355  00F72A  D39F               	goto	u2760
  2356  00F72C  D7D6               	goto	l177
  2357  00F72E                     
  2358                           ;doprnt.c: 818: flag |= 0x40;
  2359  00F72E  8C51               	bsf	printf@flag,6,c
  2360                           
  2361                           ;doprnt.c: 822: }
  2362                           
  2363                           ;doprnt.c: 819: break;
  2364  00F730  D021               	goto	l171
  2365  00F732                     l166:
  2366  00F732  C040  FFF6         	movff	printf@f,tblptrl
  2367  00F736  C041  FFF7         	movff	printf@f+1,tblptrh
  2368  00F73A  4A40               	infsnz	printf@f,f,c
  2369  00F73C  2A41               	incf	printf@f+1,f,c
  2370  00F73E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2371  00F73E  6AF8               	clrf	tblptru,c
  2372  00F740                     	endif
  2373  00F740                     	if	0	;tblptru may be non-zero
  2374  00F740                     	endif
  2375  00F740  0008               	tblrd		*
  2376  00F742  CFF5 F064          	movff	tablat,printf@c
  2377  00F746  5064               	movf	printf@c,w,c
  2378                           
  2379                           ; Switch size 1, requested type "space"
  2380                           ; Number of cases is 7, Range of values is 0 to 117
  2381                           ; switch strategies available:
  2382                           ; Name         Instructions Cycles
  2383                           ; simple_byte           22    12 (average)
  2384                           ;	Chosen strategy is simple_byte
  2385  00F748  0A00               	xorlw	0	; case 0
  2386  00F74A  B4D8               	btfsc	status,2,c
  2387  00F74C  0012               	return	
  2388  00F74E  0A64               	xorlw	100	; case 100
  2389  00F750  B4D8               	btfsc	status,2,c
  2390  00F752  D010               	goto	l171
  2391  00F754  0A02               	xorlw	2	; case 102
  2392  00F756  B4D8               	btfsc	status,2,c
  2393  00F758  D7A9               	goto	l170
  2394  00F75A  0A0F               	xorlw	15	; case 105
  2395  00F75C  B4D8               	btfsc	status,2,c
  2396  00F75E  D00A               	goto	l171
  2397  00F760  0A05               	xorlw	5	; case 108
  2398  00F762  B4D8               	btfsc	status,2,c
  2399  00F764  D7A1               	goto	l169
  2400  00F766  0A1F               	xorlw	31	; case 115
  2401  00F768  B4D8               	btfsc	status,2,c
  2402  00F76A  D7A2               	goto	l174
  2403  00F76C  0A06               	xorlw	6	; case 117
  2404  00F76E  B4D8               	btfsc	status,2,c
  2405  00F770  D7DE               	goto	l180
  2406  00F772  D37B               	goto	u2760
  2407  00F774                     l171:
  2408                           
  2409                           ;doprnt.c: 825: if(flag & (0x700)) {
  2410  00F774  0E07               	movlw	7
  2411  00F776  1452               	andwf	printf@flag+1,w,c
  2412  00F778  B4D8               	btfsc	status,2,c
  2413  00F77A  D2A8               	goto	l181
  2414                           
  2415                           ;doprnt.c: 829: prec = 6;
  2416  00F77C  0E00               	movlw	0
  2417  00F77E  6E56               	movwf	printf@prec+1,c
  2418  00F780  0E06               	movlw	6
  2419  00F782  6E55               	movwf	printf@prec,c
  2420                           
  2421                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2422  00F784  C053  FFD9         	movff	printf@ap,fsr2l
  2423  00F788  C054  FFDA         	movff	printf@ap+1,fsr2h
  2424  00F78C  CFDE F061          	movff	postinc2,printf@fval
  2425  00F790  CFDE F062          	movff	postinc2,printf@fval+1
  2426  00F794  CFDD F063          	movff	postdec2,printf@fval+2
  2427  00F798  0E03               	movlw	3
  2428  00F79A  2653               	addwf	printf@ap,f,c
  2429  00F79C  0E00               	movlw	0
  2430  00F79E  2254               	addwfc	printf@ap+1,f,c
  2431                           
  2432                           ;doprnt.c: 831: if(fval < 0.0) {
  2433  00F7A0  AE63               	btfss	printf@fval+2,7,c
  2434  00F7A2  D010               	goto	l182
  2435                           
  2436                           ;doprnt.c: 832: fval = -fval;
  2437  00F7A4  C061  F001         	movff	printf@fval,___ftneg@f1
  2438  00F7A8  C062  F002         	movff	printf@fval+1,___ftneg@f1+1
  2439  00F7AC  C063  F003         	movff	printf@fval+2,___ftneg@f1+2
  2440  00F7B0  ECE8  F06E         	call	___ftneg	;wreg free
  2441  00F7B4  C001  F061         	movff	?___ftneg,printf@fval
  2442  00F7B8  C002  F062         	movff	?___ftneg+1,printf@fval+1
  2443  00F7BC  C003  F063         	movff	?___ftneg+2,printf@fval+2
  2444                           
  2445                           ;doprnt.c: 833: flag |= 0x03;
  2446  00F7C0  0E03               	movlw	3
  2447  00F7C2  1251               	iorwf	printf@flag,f,c
  2448  00F7C4                     l182:
  2449                           
  2450                           ;doprnt.c: 834: }
  2451                           ;doprnt.c: 835: exp = 0;
  2452  00F7C4  0E00               	movlw	0
  2453  00F7C6  6E58               	movwf	printf@exp+1,c
  2454  00F7C8  0E00               	movlw	0
  2455  00F7CA  6E57               	movwf	printf@exp,c
  2456                           
  2457                           ;doprnt.c: 836: if( fval!=0) {
  2458  00F7CC  5061               	movf	printf@fval,w,c
  2459  00F7CE  1062               	iorwf	printf@fval+1,w,c
  2460  00F7D0  1063               	iorwf	printf@fval+2,w,c
  2461  00F7D2  B4D8               	btfsc	status,2,c
  2462  00F7D4  D083               	goto	l187
  2463                           
  2464                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2465  00F7D6  0E82               	movlw	130
  2466  00F7D8  6E46               	movwf	??_printf& (0+255),c
  2467  00F7DA  0EFF               	movlw	255
  2468  00F7DC  6E47               	movwf	(??_printf+1)& (0+255),c
  2469  00F7DE  C061  F048         	movff	printf@fval,??_printf+2
  2470  00F7E2  C062  F049         	movff	printf@fval+1,??_printf+3
  2471  00F7E6  C063  F04A         	movff	printf@fval+2,??_printf+4
  2472  00F7EA  C064  F04B         	movff	printf@fval+3,??_printf+5
  2473  00F7EE  0E10               	movlw	16
  2474  00F7F0  D005               	goto	u2480
  2475  00F7F2                     u2485:
  2476  00F7F2  90D8               	bcf	status,0,c
  2477  00F7F4  324B               	rrcf	??_printf+5,f,c
  2478  00F7F6  324A               	rrcf	??_printf+4,f,c
  2479  00F7F8  3249               	rrcf	??_printf+3,f,c
  2480  00F7FA  3248               	rrcf	??_printf+2,f,c
  2481  00F7FC                     u2480:
  2482  00F7FC  2EE8               	decfsz	wreg,f,c
  2483  00F7FE  D7F9               	goto	u2485
  2484  00F800  5048               	movf	??_printf+2,w,c
  2485  00F802  2446               	addwf	??_printf,w,c
  2486  00F804  6E57               	movwf	printf@exp,c
  2487  00F806  0E00               	movlw	0
  2488  00F808  2047               	addwfc	??_printf+1,w,c
  2489  00F80A  6E58               	movwf	printf@exp+1,c
  2490                           
  2491                           ;doprnt.c: 838: exp--;
  2492  00F80C  0657               	decf	printf@exp,f,c
  2493  00F80E  A0D8               	btfss	status,0,c
  2494  00F810  0658               	decf	printf@exp+1,f,c
  2495                           
  2496                           ;doprnt.c: 839: exp *= 3;
  2497  00F812  C057  F00F         	movff	printf@exp,___wmul@multiplier
  2498  00F816  C058  F010         	movff	printf@exp+1,___wmul@multiplier+1
  2499  00F81A  0E00               	movlw	0
  2500  00F81C  6E12               	movwf	___wmul@multiplicand+1,c
  2501  00F81E  0E03               	movlw	3
  2502  00F820  6E11               	movwf	___wmul@multiplicand,c
  2503  00F822  ECFA  F06E         	call	___wmul	;wreg free
  2504  00F826  C00F  F057         	movff	?___wmul,printf@exp
  2505  00F82A  C010  F058         	movff	?___wmul+1,printf@exp+1
  2506                           
  2507                           ;doprnt.c: 840: exp /= 10;
  2508  00F82E  C057  F007         	movff	printf@exp,___awdiv@dividend
  2509  00F832  C058  F008         	movff	printf@exp+1,___awdiv@dividend+1
  2510  00F836  0E00               	movlw	0
  2511  00F838  6E0A               	movwf	___awdiv@divisor+1,c
  2512  00F83A  0E0A               	movlw	10
  2513  00F83C  6E09               	movwf	___awdiv@divisor,c
  2514  00F83E  ECB3  F070         	call	___awdiv	;wreg free
  2515  00F842  C007  F057         	movff	?___awdiv,printf@exp
  2516  00F846  C008  F058         	movff	?___awdiv+1,printf@exp+1
  2517                           
  2518                           ;doprnt.c: 841: if(exp < 0)
  2519  00F84A  AE58               	btfss	printf@exp+1,7,c
  2520  00F84C  D003               	goto	l184
  2521                           
  2522                           ;doprnt.c: 842: exp--;
  2523  00F84E  0657               	decf	printf@exp,f,c
  2524  00F850  A0D8               	btfss	status,0,c
  2525  00F852  0658               	decf	printf@exp+1,f,c
  2526  00F854                     l184:
  2527                           
  2528                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2529  00F854  5057               	movf	printf@exp,w,c
  2530  00F856  0800               	sublw	0
  2531  00F858  ECC6  F075         	call	_scale
  2532  00F85C  C024  F05D         	movff	?_scale,printf@tmpval
  2533  00F860  C025  F05E         	movff	?_scale+1,printf@tmpval+1
  2534  00F864  C026  F05F         	movff	?_scale+2,printf@tmpval+2
  2535                           
  2536                           ;doprnt.c: 847: tmpval.integ *= fval;
  2537  00F868  C05D  F015         	movff	printf@tmpval,___ftmul@f1
  2538  00F86C  C05E  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  2539  00F870  C05F  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  2540  00F874  C061  F018         	movff	printf@fval,___ftmul@f2
  2541  00F878  C062  F019         	movff	printf@fval+1,___ftmul@f2+1
  2542  00F87C  C063  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2543  00F880  EC0E  F072         	call	___ftmul	;wreg free
  2544  00F884  C015  F05D         	movff	?___ftmul,printf@tmpval
  2545  00F888  C016  F05E         	movff	?___ftmul+1,printf@tmpval+1
  2546  00F88C  C017  F05F         	movff	?___ftmul+2,printf@tmpval+2
  2547                           
  2548                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2549  00F890  C05D  F001         	movff	printf@tmpval,___ftge@ff1
  2550  00F894  C05E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2551  00F898  C05F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2552  00F89C  0E00               	movlw	0
  2553  00F89E  6E04               	movwf	___ftge@ff2,c
  2554  00F8A0  0E80               	movlw	128
  2555  00F8A2  6E05               	movwf	___ftge@ff2+1,c
  2556  00F8A4  0E3F               	movlw	63
  2557  00F8A6  6E06               	movwf	___ftge@ff2+2,c
  2558  00F8A8  ECF5  F070         	call	___ftge	;wreg free
  2559  00F8AC  B0D8               	btfsc	status,0,c
  2560  00F8AE  D004               	goto	l185
  2561                           
  2562                           ;doprnt.c: 849: exp--;
  2563  00F8B0  0657               	decf	printf@exp,f,c
  2564  00F8B2  A0D8               	btfss	status,0,c
  2565  00F8B4  0658               	decf	printf@exp+1,f,c
  2566  00F8B6  D012               	goto	l187
  2567  00F8B8                     l185:
  2568                           
  2569                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2570  00F8B8  C05D  F001         	movff	printf@tmpval,___ftge@ff1
  2571  00F8BC  C05E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2572  00F8C0  C05F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2573  00F8C4  0E00               	movlw	0
  2574  00F8C6  6E04               	movwf	___ftge@ff2,c
  2575  00F8C8  0E20               	movlw	32
  2576  00F8CA  6E05               	movwf	___ftge@ff2+1,c
  2577  00F8CC  0E41               	movlw	65
  2578  00F8CE  6E06               	movwf	___ftge@ff2+2,c
  2579  00F8D0  ECF5  F070         	call	___ftge	;wreg free
  2580  00F8D4  A0D8               	btfss	status,0,c
  2581  00F8D6  D002               	goto	l187
  2582                           
  2583                           ;doprnt.c: 851: exp++;
  2584  00F8D8  4A57               	infsnz	printf@exp,f,c
  2585  00F8DA  2A58               	incf	printf@exp+1,f,c
  2586  00F8DC                     l187:
  2587                           
  2588                           ;doprnt.c: 852: }
  2589                           ;doprnt.c: 1112: if(prec <= 12)
  2590  00F8DC  BE56               	btfsc	printf@prec+1,7,c
  2591  00F8DE  D006               	goto	u2520
  2592  00F8E0  5056               	movf	printf@prec+1,w,c
  2593  00F8E2  E11B               	bnz	l2733
  2594  00F8E4  0E0D               	movlw	13
  2595  00F8E6  5C55               	subwf	printf@prec,w,c
  2596  00F8E8  B0D8               	btfsc	status,0,c
  2597  00F8EA  D017               	goto	l188
  2598  00F8EC                     u2520:
  2599                           
  2600                           ;doprnt.c: 1113: fval += fround(prec);
  2601  00F8EC  C061  F02E         	movff	printf@fval,___ftadd@f1
  2602  00F8F0  C062  F02F         	movff	printf@fval+1,___ftadd@f1+1
  2603  00F8F4  C063  F030         	movff	printf@fval+2,___ftadd@f1+2
  2604  00F8F8  5055               	movf	printf@prec,w,c
  2605  00F8FA  EC8B  F074         	call	_fround
  2606  00F8FE  C024  F031         	movff	?_fround,___ftadd@f2
  2607  00F902  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2608  00F906  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2609  00F90A  ECB5  F073         	call	___ftadd	;wreg free
  2610  00F90E  C02E  F061         	movff	?___ftadd,printf@fval
  2611  00F912  C02F  F062         	movff	?___ftadd+1,printf@fval+1
  2612  00F916  C030  F063         	movff	?___ftadd+2,printf@fval+2
  2613  00F91A                     l188:
  2614  00F91A                     l2733:
  2615                           
  2616                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2617  00F91A  BE58               	btfsc	printf@exp+1,7,c
  2618  00F91C  D006               	goto	u2530
  2619  00F91E  5058               	movf	printf@exp+1,w,c
  2620  00F920  E11E               	bnz	l2741
  2621  00F922  0E0A               	movlw	10
  2622  00F924  5C57               	subwf	printf@exp,w,c
  2623  00F926  B0D8               	btfsc	status,0,c
  2624  00F928  D01A               	goto	u2560
  2625  00F92A                     u2530:
  2626  00F92A  5061               	movf	printf@fval,w,c
  2627  00F92C  1062               	iorwf	printf@fval+1,w,c
  2628  00F92E  1063               	iorwf	printf@fval+2,w,c
  2629  00F930  B4D8               	btfsc	status,2,c
  2630  00F932  D051               	goto	l189
  2631  00F934  C061  F02B         	movff	printf@fval,___fttol@f1
  2632  00F938  C062  F02C         	movff	printf@fval+1,___fttol@f1+1
  2633  00F93C  C063  F02D         	movff	printf@fval+2,___fttol@f1+2
  2634  00F940  EC94  F071         	call	___fttol	;wreg free
  2635  00F944  502B               	movf	?___fttol,w,c
  2636  00F946  102C               	iorwf	?___fttol+1,w,c
  2637  00F948  102D               	iorwf	?___fttol+2,w,c
  2638  00F94A  102E               	iorwf	?___fttol+3,w,c
  2639  00F94C  B4D8               	btfsc	status,2,c
  2640  00F94E  BE58               	btfsc	printf@exp+1,7,c
  2641  00F950  D042               	goto	l189
  2642  00F952  5058               	movf	printf@exp+1,w,c
  2643  00F954  E104               	bnz	l2741
  2644  00F956  0E02               	movlw	2
  2645  00F958  5C57               	subwf	printf@exp,w,c
  2646  00F95A  A0D8               	btfss	status,0,c
  2647  00F95C  D03C               	goto	l189
  2648  00F95E                     u2560:
  2649  00F95E                     l2741:
  2650                           
  2651                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2652  00F95E  C05D  F001         	movff	printf@tmpval,___ftge@ff1
  2653  00F962  C05E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2654  00F966  C05F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2655  00F96A  0E70               	movlw	112
  2656  00F96C  6E04               	movwf	___ftge@ff2,c
  2657  00F96E  0E89               	movlw	137
  2658  00F970  6E05               	movwf	___ftge@ff2+1,c
  2659  00F972  0E40               	movlw	64
  2660  00F974  6E06               	movwf	___ftge@ff2+2,c
  2661  00F976  ECF5  F070         	call	___ftge	;wreg free
  2662  00F97A  B0D8               	btfsc	status,0,c
  2663  00F97C  D002               	goto	l192
  2664                           
  2665                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2666  00F97E  0EF7               	movlw	247
  2667  00F980  D001               	goto	L1
  2668  00F982                     l192:
  2669                           
  2670                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2671  00F982  0EF8               	movlw	248
  2672  00F984                     L1:
  2673  00F984  2657               	addwf	printf@exp,f,c
  2674  00F986  0EFF               	movlw	255
  2675  00F988  2258               	addwfc	printf@exp+1,f,c
  2676                           
  2677                           ;doprnt.c: 1124: }
  2678                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2679  00F98A  5057               	movf	printf@exp,w,c
  2680  00F98C  ECC6  F075         	call	_scale
  2681  00F990  C024  F05D         	movff	?_scale,printf@tmpval
  2682  00F994  C025  F05E         	movff	?_scale+1,printf@tmpval+1
  2683  00F998  C026  F05F         	movff	?_scale+2,printf@tmpval+2
  2684                           
  2685                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2686  00F99C  C061  F001         	movff	printf@fval,__tdiv_to_l_@f1
  2687  00F9A0  C062  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2688  00F9A4  C063  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2689  00F9A8  C05D  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  2690  00F9AC  C05E  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2691  00F9B0  C05F  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2692  00F9B4  EC1C  F073         	call	__tdiv_to_l_	;wreg free
  2693  00F9B8  C001  F059         	movff	?__tdiv_to_l_,printf@val
  2694  00F9BC  C002  F05A         	movff	?__tdiv_to_l_+1,printf@val+1
  2695  00F9C0  C003  F05B         	movff	?__tdiv_to_l_+2,printf@val+2
  2696  00F9C4  C004  F05C         	movff	?__tdiv_to_l_+3,printf@val+3
  2697                           
  2698                           ;doprnt.c: 1129: fval = 0.0;
  2699  00F9C8  0E00               	movlw	0
  2700  00F9CA  6E61               	movwf	printf@fval,c
  2701  00F9CC  0E00               	movlw	0
  2702  00F9CE  6E62               	movwf	printf@fval+1,c
  2703  00F9D0  0E00               	movlw	0
  2704  00F9D2  6E63               	movwf	printf@fval+2,c
  2705                           
  2706                           ;doprnt.c: 1130: } else {
  2707  00F9D4  D032               	goto	l198
  2708  00F9D6                     l189:
  2709                           
  2710                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2711  00F9D6  C061  F02B         	movff	printf@fval,___fttol@f1
  2712  00F9DA  C062  F02C         	movff	printf@fval+1,___fttol@f1+1
  2713  00F9DE  C063  F02D         	movff	printf@fval+2,___fttol@f1+2
  2714  00F9E2  EC94  F071         	call	___fttol	;wreg free
  2715  00F9E6  C02B  F059         	movff	?___fttol,printf@val
  2716  00F9EA  C02C  F05A         	movff	?___fttol+1,printf@val+1
  2717  00F9EE  C02D  F05B         	movff	?___fttol+2,printf@val+2
  2718  00F9F2  C02E  F05C         	movff	?___fttol+3,printf@val+3
  2719                           
  2720                           ;doprnt.c: 1132: fval -= (double)val;
  2721  00F9F6  C061  F03A         	movff	printf@fval,___ftsub@f1
  2722  00F9FA  C062  F03B         	movff	printf@fval+1,___ftsub@f1+1
  2723  00F9FE  C063  F03C         	movff	printf@fval+2,___ftsub@f1+2
  2724  00FA02  C059  F009         	movff	printf@val,___lltoft@c
  2725  00FA06  C05A  F00A         	movff	printf@val+1,___lltoft@c+1
  2726  00FA0A  C05B  F00B         	movff	printf@val+2,___lltoft@c+2
  2727  00FA0E  C05C  F00C         	movff	printf@val+3,___lltoft@c+3
  2728  00FA12  EC9A  F06F         	call	___lltoft	;wreg free
  2729  00FA16  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2730  00FA1A  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2731  00FA1E  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2732  00FA22  EC54  F06F         	call	___ftsub	;wreg free
  2733  00FA26  C03A  F061         	movff	?___ftsub,printf@fval
  2734  00FA2A  C03B  F062         	movff	?___ftsub+1,printf@fval+1
  2735  00FA2E  C03C  F063         	movff	?___ftsub+2,printf@fval+2
  2736                           
  2737                           ;doprnt.c: 1133: exp = 0;
  2738  00FA32  0E00               	movlw	0
  2739  00FA34  6E58               	movwf	printf@exp+1,c
  2740  00FA36  0E00               	movlw	0
  2741  00FA38  6E57               	movwf	printf@exp,c
  2742  00FA3A                     l198:
  2743                           
  2744                           ;doprnt.c: 1134: }
  2745                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2746  00FA3A  0E01               	movlw	1
  2747  00FA3C  6E64               	movwf	printf@c,c
  2748  00FA3E                     l2761:
  2749  00FA3E  0E0A               	movlw	10
  2750  00FA40  1864               	xorwf	printf@c,w,c
  2751  00FA42  B4D8               	btfsc	status,2,c
  2752  00FA44  D01B               	goto	u2600
  2753                           
  2754                           ;doprnt.c: 1137: if(val < dpowers[c])
  2755  00FA46  5064               	movf	printf@c,w,c
  2756  00FA48  0D04               	mullw	4
  2757  00FA4A  0E87               	movlw	low _dpowers
  2758  00FA4C  24F3               	addwf	prodl,w,c
  2759  00FA4E  6EF6               	movwf	tblptrl,c
  2760  00FA50  0EFE               	movlw	high _dpowers
  2761  00FA52  20F4               	addwfc	prodh,w,c
  2762  00FA54  6EF7               	movwf	tblptrh,c
  2763  00FA56                     	if	1	;There are 3 active tblptr bytes
  2764  00FA56  6AF8               	clrf	tblptru,c
  2765  00FA58  0E00               	movlw	low (__mediumconst shr (0+16))
  2766  00FA5A  22F8               	addwfc	tblptru,f,c
  2767  00FA5C                     	endif
  2768  00FA5C  0009               	tblrd		*+
  2769  00FA5E  50F5               	movf	tablat,w,c
  2770  00FA60  5C59               	subwf	printf@val,w,c
  2771  00FA62  0009               	tblrd		*+
  2772  00FA64  50F5               	movf	tablat,w,c
  2773  00FA66  585A               	subwfb	printf@val+1,w,c
  2774  00FA68  0009               	tblrd		*+
  2775  00FA6A  50F5               	movf	tablat,w,c
  2776  00FA6C  585B               	subwfb	printf@val+2,w,c
  2777  00FA6E  0009               	tblrd		*+
  2778  00FA70  50F5               	movf	tablat,w,c
  2779  00FA72  585C               	subwfb	printf@val+3,w,c
  2780  00FA74  A0D8               	btfss	status,0,c
  2781  00FA76  D002               	goto	u2600
  2782                           
  2783                           ;doprnt.c: 1138: break;
  2784  00FA78  2A64               	incf	printf@c,f,c
  2785  00FA7A  D7E1               	goto	l2761
  2786  00FA7C                     u2600:
  2787                           
  2788                           ;doprnt.c: 1175: {
  2789                           ;doprnt.c: 1188: if(flag & 0x03)
  2790  00FA7C  0E03               	movlw	3
  2791  00FA7E  1451               	andwf	printf@flag,w,c
  2792  00FA80  6E46               	movwf	??_printf& (0+255),c
  2793  00FA82  0E00               	movlw	0
  2794  00FA84  1452               	andwf	printf@flag+1,w,c
  2795  00FA86  6E47               	movwf	(??_printf+1)& (0+255),c
  2796  00FA88  5046               	movf	??_printf,w,c
  2797  00FA8A  1047               	iorwf	??_printf+1,w,c
  2798  00FA8C  B4D8               	btfsc	status,2,c
  2799  00FA8E  D04B               	goto	l203
  2800                           
  2801                           ;doprnt.c: 1190: (putch('-') );
  2802  00FA90  0E2D               	movlw	45
  2803  00FA92  ECC2  F06E         	call	_putch
  2804                           
  2805                           ;doprnt.c: 1195: }
  2806                           ;doprnt.c: 1196: while(c--) {
  2807  00FA96  D047               	goto	l203
  2808  00FA98                     
  2809                           ;doprnt.c: 1200: {
  2810                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2811  00FA98  C059  F001         	movff	printf@val,___lldiv@dividend
  2812  00FA9C  C05A  F002         	movff	printf@val+1,___lldiv@dividend+1
  2813  00FAA0  C05B  F003         	movff	printf@val+2,___lldiv@dividend+2
  2814  00FAA4  C05C  F004         	movff	printf@val+3,___lldiv@dividend+3
  2815  00FAA8  5064               	movf	printf@c,w,c
  2816  00FAAA  0D04               	mullw	4
  2817  00FAAC  0E87               	movlw	low _dpowers
  2818  00FAAE  24F3               	addwf	prodl,w,c
  2819  00FAB0  6EF6               	movwf	tblptrl,c
  2820  00FAB2  0EFE               	movlw	high _dpowers
  2821  00FAB4  20F4               	addwfc	prodh,w,c
  2822  00FAB6  6EF7               	movwf	tblptrh,c
  2823  00FAB8                     	if	1	;There are 3 active tblptr bytes
  2824  00FAB8  6AF8               	clrf	tblptru,c
  2825  00FABA  0E00               	movlw	low (__mediumconst shr (0+16))
  2826  00FABC  22F8               	addwfc	tblptru,f,c
  2827  00FABE                     	endif
  2828  00FABE  0009               	tblrd		*+
  2829  00FAC0  CFF5 F005          	movff	tablat,___lldiv@divisor
  2830  00FAC4  0009               	tblrd		*+
  2831  00FAC6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2832  00FACA  0009               	tblrd		*+
  2833  00FACC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2834  00FAD0  000A               	tblrd		*-
  2835  00FAD2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2836  00FAD6  EC72  F070         	call	___lldiv	;wreg free
  2837  00FADA  C001  F05D         	movff	?___lldiv,printf@tmpval
  2838  00FADE  C002  F05E         	movff	?___lldiv+1,printf@tmpval+1
  2839  00FAE2  C003  F05F         	movff	?___lldiv+2,printf@tmpval+2
  2840  00FAE6  C004  F060         	movff	?___lldiv+3,printf@tmpval+3
  2841                           
  2842                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2843  00FAEA  C05D  F00E         	movff	printf@tmpval,___llmod@dividend
  2844  00FAEE  C05E  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2845  00FAF2  C05F  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2846  00FAF6  C060  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2847  00FAFA  0E0A               	movlw	10
  2848  00FAFC  6E12               	movwf	___llmod@divisor,c
  2849  00FAFE  0E00               	movlw	0
  2850  00FB00  6E13               	movwf	___llmod@divisor+1,c
  2851  00FB02  0E00               	movlw	0
  2852  00FB04  6E14               	movwf	___llmod@divisor+2,c
  2853  00FB06  0E00               	movlw	0
  2854  00FB08  6E15               	movwf	___llmod@divisor+3,c
  2855  00FB0A  ECC8  F06F         	call	___llmod	;wreg free
  2856  00FB0E  C00E  F05D         	movff	?___llmod,printf@tmpval
  2857  00FB12  C00F  F05E         	movff	?___llmod+1,printf@tmpval+1
  2858  00FB16  C010  F05F         	movff	?___llmod+2,printf@tmpval+2
  2859  00FB1A  C011  F060         	movff	?___llmod+3,printf@tmpval+3
  2860                           
  2861                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2862  00FB1E  505D               	movf	printf@tmpval,w,c
  2863  00FB20  0F30               	addlw	48
  2864  00FB22  ECC2  F06E         	call	_putch
  2865  00FB26                     l203:
  2866  00FB26  0664               	decf	printf@c,f,c
  2867  00FB28  2864               	incf	printf@c,w,c
  2868  00FB2A  B4D8               	btfsc	status,2,c
  2869  00FB2C  D007               	goto	l206
  2870  00FB2E  D7B4               	goto	l204
  2871  00FB30                     l2785:
  2872                           
  2873                           ;doprnt.c: 1208: (putch('0') );
  2874  00FB30  0E30               	movlw	48
  2875  00FB32  ECC2  F06E         	call	_putch
  2876                           
  2877                           ;doprnt.c: 1209: exp--;
  2878  00FB36  0657               	decf	printf@exp,f,c
  2879  00FB38  A0D8               	btfss	status,0,c
  2880  00FB3A  0658               	decf	printf@exp+1,f,c
  2881  00FB3C                     l206:
  2882  00FB3C  BE58               	btfsc	printf@exp+1,7,c
  2883  00FB3E  D005               	goto	u2630
  2884  00FB40  5058               	movf	printf@exp+1,w,c
  2885  00FB42  E1F6               	bnz	l2785
  2886  00FB44  0457               	decf	printf@exp,w,c
  2887  00FB46  B0D8               	btfsc	status,0,c
  2888  00FB48  D7F3               	goto	l207
  2889  00FB4A                     u2630:
  2890                           
  2891                           ;doprnt.c: 1210: }
  2892                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2893  00FB4A  BE56               	btfsc	printf@prec+1,7,c
  2894  00FB4C  D009               	goto	l209
  2895  00FB4E  5056               	movf	printf@prec+1,w,c
  2896  00FB50  E104               	bnz	u2640
  2897  00FB52  0E09               	movlw	9
  2898  00FB54  5C55               	subwf	printf@prec,w,c
  2899  00FB56  A0D8               	btfss	status,0,c
  2900  00FB58  D003               	goto	l209
  2901  00FB5A                     u2640:
  2902                           
  2903                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2904  00FB5A  0E08               	movlw	8
  2905  00FB5C  6E64               	movwf	printf@c,c
  2906  00FB5E  D002               	goto	l210
  2907  00FB60                     l209:
  2908                           
  2909                           ;doprnt.c: 1213: else
  2910                           ;doprnt.c: 1214: c = prec;
  2911  00FB60  C055  F064         	movff	printf@prec,printf@c
  2912  00FB64                     l210:
  2913                           
  2914                           ;doprnt.c: 1215: prec -= c;
  2915  00FB64  5064               	movf	printf@c,w,c
  2916  00FB66  5E55               	subwf	printf@prec,f,c
  2917  00FB68  0E00               	movlw	0
  2918  00FB6A  BE64               	btfsc	printf@c,7,c
  2919  00FB6C  0EFF               	movlw	255
  2920  00FB6E  5A56               	subwfb	printf@prec+1,f,c
  2921                           
  2922                           ;doprnt.c: 1219: if(c)
  2923  00FB70  5064               	movf	printf@c,w,c
  2924  00FB72  B4D8               	btfsc	status,2,c
  2925  00FB74  D003               	goto	l211
  2926                           
  2927                           ;doprnt.c: 1221: (putch('.') );
  2928  00FB76  0E2E               	movlw	46
  2929  00FB78  ECC2  F06E         	call	_putch
  2930  00FB7C                     l211:
  2931                           
  2932                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2933  00FB7C  5064               	movf	printf@c,w,c
  2934  00FB7E  ECC6  F075         	call	_scale
  2935  00FB82  C024  F04C         	movff	?_scale,_printf$862
  2936  00FB86  C025  F04D         	movff	?_scale+1,_printf$862+1
  2937  00FB8A  C026  F04E         	movff	?_scale+2,_printf$862+2
  2938                           
  2939                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2940  00FB8E  C061  F018         	movff	printf@fval,___ftmul@f2
  2941  00FB92  C062  F019         	movff	printf@fval+1,___ftmul@f2+1
  2942  00FB96  C063  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2943  00FB9A  C04C  F015         	movff	_printf$862,___ftmul@f1
  2944  00FB9E  C04D  F016         	movff	_printf$862+1,___ftmul@f1+1
  2945  00FBA2  C04E  F017         	movff	_printf$862+2,___ftmul@f1+2
  2946  00FBA6  EC0E  F072         	call	___ftmul	;wreg free
  2947  00FBAA  C015  F02B         	movff	?___ftmul,___fttol@f1
  2948  00FBAE  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2949  00FBB2  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2950  00FBB6  EC94  F071         	call	___fttol	;wreg free
  2951  00FBBA  C02B  F059         	movff	?___fttol,printf@val
  2952  00FBBE  C02C  F05A         	movff	?___fttol+1,printf@val+1
  2953  00FBC2  C02D  F05B         	movff	?___fttol+2,printf@val+2
  2954  00FBC6  C02E  F05C         	movff	?___fttol+3,printf@val+3
  2955                           
  2956                           ;doprnt.c: 1228: while(c--) {
  2957  00FBCA  D070               	goto	l212
  2958  00FBCC                     
  2959                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2960  00FBCC  C059  F001         	movff	printf@val,___lldiv@dividend
  2961  00FBD0  C05A  F002         	movff	printf@val+1,___lldiv@dividend+1
  2962  00FBD4  C05B  F003         	movff	printf@val+2,___lldiv@dividend+2
  2963  00FBD8  C05C  F004         	movff	printf@val+3,___lldiv@dividend+3
  2964  00FBDC  5064               	movf	printf@c,w,c
  2965  00FBDE  0D04               	mullw	4
  2966  00FBE0  0E87               	movlw	low _dpowers
  2967  00FBE2  24F3               	addwf	prodl,w,c
  2968  00FBE4  6EF6               	movwf	tblptrl,c
  2969  00FBE6  0EFE               	movlw	high _dpowers
  2970  00FBE8  20F4               	addwfc	prodh,w,c
  2971  00FBEA  6EF7               	movwf	tblptrh,c
  2972  00FBEC                     	if	1	;There are 3 active tblptr bytes
  2973  00FBEC  6AF8               	clrf	tblptru,c
  2974  00FBEE  0E00               	movlw	low (__mediumconst shr (0+16))
  2975  00FBF0  22F8               	addwfc	tblptru,f,c
  2976  00FBF2                     	endif
  2977  00FBF2  0009               	tblrd		*+
  2978  00FBF4  CFF5 F005          	movff	tablat,___lldiv@divisor
  2979  00FBF8  0009               	tblrd		*+
  2980  00FBFA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2981  00FBFE  0009               	tblrd		*+
  2982  00FC00  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2983  00FC04  000A               	tblrd		*-
  2984  00FC06  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2985  00FC0A  EC72  F070         	call	___lldiv	;wreg free
  2986  00FC0E  C001  F05D         	movff	?___lldiv,printf@tmpval
  2987  00FC12  C002  F05E         	movff	?___lldiv+1,printf@tmpval+1
  2988  00FC16  C003  F05F         	movff	?___lldiv+2,printf@tmpval+2
  2989  00FC1A  C004  F060         	movff	?___lldiv+3,printf@tmpval+3
  2990                           
  2991                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2992  00FC1E  C05D  F00E         	movff	printf@tmpval,___llmod@dividend
  2993  00FC22  C05E  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2994  00FC26  C05F  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2995  00FC2A  C060  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2996  00FC2E  0E0A               	movlw	10
  2997  00FC30  6E12               	movwf	___llmod@divisor,c
  2998  00FC32  0E00               	movlw	0
  2999  00FC34  6E13               	movwf	___llmod@divisor+1,c
  3000  00FC36  0E00               	movlw	0
  3001  00FC38  6E14               	movwf	___llmod@divisor+2,c
  3002  00FC3A  0E00               	movlw	0
  3003  00FC3C  6E15               	movwf	___llmod@divisor+3,c
  3004  00FC3E  ECC8  F06F         	call	___llmod	;wreg free
  3005  00FC42  C00E  F05D         	movff	?___llmod,printf@tmpval
  3006  00FC46  C00F  F05E         	movff	?___llmod+1,printf@tmpval+1
  3007  00FC4A  C010  F05F         	movff	?___llmod+2,printf@tmpval+2
  3008  00FC4E  C011  F060         	movff	?___llmod+3,printf@tmpval+3
  3009                           
  3010                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3011  00FC52  505D               	movf	printf@tmpval,w,c
  3012  00FC54  0F30               	addlw	48
  3013  00FC56  ECC2  F06E         	call	_putch
  3014                           
  3015                           ;doprnt.c: 1232: val %= dpowers[c];
  3016  00FC5A  C059  F00E         	movff	printf@val,___llmod@dividend
  3017  00FC5E  C05A  F00F         	movff	printf@val+1,___llmod@dividend+1
  3018  00FC62  C05B  F010         	movff	printf@val+2,___llmod@dividend+2
  3019  00FC66  C05C  F011         	movff	printf@val+3,___llmod@dividend+3
  3020  00FC6A  5064               	movf	printf@c,w,c
  3021  00FC6C  0D04               	mullw	4
  3022  00FC6E  0E87               	movlw	low _dpowers
  3023  00FC70  24F3               	addwf	prodl,w,c
  3024  00FC72  6EF6               	movwf	tblptrl,c
  3025  00FC74  0EFE               	movlw	high _dpowers
  3026  00FC76  20F4               	addwfc	prodh,w,c
  3027  00FC78  6EF7               	movwf	tblptrh,c
  3028  00FC7A                     	if	1	;There are 3 active tblptr bytes
  3029  00FC7A  6AF8               	clrf	tblptru,c
  3030  00FC7C  0E00               	movlw	low (__mediumconst shr (0+16))
  3031  00FC7E  22F8               	addwfc	tblptru,f,c
  3032  00FC80                     	endif
  3033  00FC80  0009               	tblrd		*+
  3034  00FC82  CFF5 F012          	movff	tablat,___llmod@divisor
  3035  00FC86  0009               	tblrd		*+
  3036  00FC88  CFF5 F013          	movff	tablat,___llmod@divisor+1
  3037  00FC8C  0009               	tblrd		*+
  3038  00FC8E  CFF5 F014          	movff	tablat,___llmod@divisor+2
  3039  00FC92  000A               	tblrd		*-
  3040  00FC94  CFF5 F015          	movff	tablat,___llmod@divisor+3
  3041  00FC98  ECC8  F06F         	call	___llmod	;wreg free
  3042  00FC9C  C00E  F059         	movff	?___llmod,printf@val
  3043  00FCA0  C00F  F05A         	movff	?___llmod+1,printf@val+1
  3044  00FCA4  C010  F05B         	movff	?___llmod+2,printf@val+2
  3045  00FCA8  C011  F05C         	movff	?___llmod+3,printf@val+3
  3046  00FCAC                     l212:
  3047  00FCAC  0664               	decf	printf@c,f,c
  3048  00FCAE  2864               	incf	printf@c,w,c
  3049  00FCB0  B4D8               	btfsc	status,2,c
  3050  00FCB2  D007               	goto	l215
  3051  00FCB4  D78B               	goto	l213
  3052  00FCB6                     
  3053                           ;doprnt.c: 1236: (putch('0') );
  3054  00FCB6  0E30               	movlw	48
  3055  00FCB8  ECC2  F06E         	call	_putch
  3056                           
  3057                           ;doprnt.c: 1237: prec--;
  3058  00FCBC  0655               	decf	printf@prec,f,c
  3059  00FCBE  A0D8               	btfss	status,0,c
  3060  00FCC0  0656               	decf	printf@prec+1,f,c
  3061  00FCC2                     l215:
  3062  00FCC2  5055               	movf	printf@prec,w,c
  3063  00FCC4  1056               	iorwf	printf@prec+1,w,c
  3064  00FCC6  B4D8               	btfsc	status,2,c
  3065  00FCC8  D0D0               	goto	u2760
  3066  00FCCA  D7F5               	goto	l216
  3067  00FCCC                     l181:
  3068                           
  3069                           ;doprnt.c: 1246: }
  3070                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  3071  00FCCC  BC51               	btfsc	printf@flag,6,c
  3072  00FCCE  D02E               	goto	l218
  3073                           
  3074                           ;doprnt.c: 1253: {
  3075                           ;doprnt.c: 1255: if(flag & 0x10)
  3076  00FCD0  A851               	btfss	printf@flag,4,c
  3077  00FCD2  D00E               	goto	l219
  3078                           
  3079                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  3080  00FCD4  C053  FFD9         	movff	printf@ap,fsr2l
  3081  00FCD8  C054  FFDA         	movff	printf@ap+1,fsr2h
  3082  00FCDC  CFDE F059          	movff	postinc2,printf@val
  3083  00FCE0  CFDE F05A          	movff	postinc2,printf@val+1
  3084  00FCE4  CFDE F05B          	movff	postinc2,printf@val+2
  3085  00FCE8  CFDE F05C          	movff	postinc2,printf@val+3
  3086  00FCEC  0E04               	movlw	4
  3087  00FCEE  D00E               	goto	L2
  3088  00FCF0                     l219:
  3089                           
  3090                           ;doprnt.c: 1257: else
  3091                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3092  00FCF0  C053  FFD9         	movff	printf@ap,fsr2l
  3093  00FCF4  C054  FFDA         	movff	printf@ap+1,fsr2h
  3094  00FCF8  CFDE F059          	movff	postinc2,printf@val
  3095  00FCFC  CFDD F05A          	movff	postdec2,printf@val+1
  3096  00FD00  0E00               	movlw	0
  3097  00FD02  BE5A               	btfsc	printf@val+1,7,c
  3098  00FD04  0EFF               	movlw	-1
  3099  00FD06  6E5B               	movwf	printf@val+2,c
  3100  00FD08  6E5C               	movwf	printf@val+3,c
  3101  00FD0A  0E02               	movlw	2
  3102  00FD0C                     L2:
  3103  00FD0C  2653               	addwf	printf@ap,f,c
  3104  00FD0E  0E00               	movlw	0
  3105  00FD10  2254               	addwfc	printf@ap+1,f,c
  3106                           
  3107                           ;doprnt.c: 1261: if((long)val < 0) {
  3108  00FD12  AE5C               	btfss	printf@val+3,7,c
  3109  00FD14  D02D               	goto	l224
  3110                           
  3111                           ;doprnt.c: 1262: flag |= 0x03;
  3112  00FD16  0E03               	movlw	3
  3113  00FD18  1251               	iorwf	printf@flag,f,c
  3114                           
  3115                           ;doprnt.c: 1263: val = -val;
  3116  00FD1A  1E5C               	comf	printf@val+3,f,c
  3117  00FD1C  1E5B               	comf	printf@val+2,f,c
  3118  00FD1E  1E5A               	comf	printf@val+1,f,c
  3119  00FD20  6C59               	negf	printf@val,c
  3120  00FD22  0E00               	movlw	0
  3121  00FD24  225A               	addwfc	printf@val+1,f,c
  3122  00FD26  225B               	addwfc	printf@val+2,f,c
  3123  00FD28  225C               	addwfc	printf@val+3,f,c
  3124                           
  3125                           ;doprnt.c: 1264: }
  3126                           ;doprnt.c: 1266: }
  3127  00FD2A  D022               	goto	l224
  3128  00FD2C                     l218:
  3129                           
  3130                           ;doprnt.c: 1268: else
  3131                           ;doprnt.c: 1273: {
  3132                           ;doprnt.c: 1281: if(flag & 0x10)
  3133  00FD2C  A851               	btfss	printf@flag,4,c
  3134  00FD2E  D00E               	goto	l223
  3135                           
  3136                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  3137  00FD30  C053  FFD9         	movff	printf@ap,fsr2l
  3138  00FD34  C054  FFDA         	movff	printf@ap+1,fsr2h
  3139  00FD38  CFDE F059          	movff	postinc2,printf@val
  3140  00FD3C  CFDE F05A          	movff	postinc2,printf@val+1
  3141  00FD40  CFDE F05B          	movff	postinc2,printf@val+2
  3142  00FD44  CFDE F05C          	movff	postinc2,printf@val+3
  3143  00FD48  0E04               	movlw	4
  3144  00FD4A  D00F               	goto	L3
  3145  00FD4C                     l223:
  3146                           
  3147                           ;doprnt.c: 1283: else
  3148                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3149  00FD4C  C053  FFD9         	movff	printf@ap,fsr2l
  3150  00FD50  C054  FFDA         	movff	printf@ap+1,fsr2h
  3151  00FD54  CFDE F046          	movff	postinc2,??_printf
  3152  00FD58  CFDD F047          	movff	postdec2,??_printf+1
  3153  00FD5C  C046  F059         	movff	??_printf,printf@val
  3154  00FD60  C047  F05A         	movff	??_printf+1,printf@val+1
  3155  00FD64  6A5B               	clrf	printf@val+2,c
  3156  00FD66  6A5C               	clrf	printf@val+3,c
  3157  00FD68  0E02               	movlw	2
  3158  00FD6A                     L3:
  3159  00FD6A  2653               	addwf	printf@ap,f,c
  3160  00FD6C  0E00               	movlw	0
  3161  00FD6E  2254               	addwfc	printf@ap+1,f,c
  3162  00FD70                     l224:
  3163                           
  3164                           ;doprnt.c: 1287: }
  3165                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3166  00FD70  0E01               	movlw	1
  3167  00FD72  6E64               	movwf	printf@c,c
  3168  00FD74                     l2845:
  3169  00FD74  0E0A               	movlw	10
  3170  00FD76  1864               	xorwf	printf@c,w,c
  3171  00FD78  B4D8               	btfsc	status,2,c
  3172  00FD7A  D01B               	goto	u2740
  3173                           
  3174                           ;doprnt.c: 1306: if(val < dpowers[c])
  3175  00FD7C  5064               	movf	printf@c,w,c
  3176  00FD7E  0D04               	mullw	4
  3177  00FD80  0E87               	movlw	low _dpowers
  3178  00FD82  24F3               	addwf	prodl,w,c
  3179  00FD84  6EF6               	movwf	tblptrl,c
  3180  00FD86  0EFE               	movlw	high _dpowers
  3181  00FD88  20F4               	addwfc	prodh,w,c
  3182  00FD8A  6EF7               	movwf	tblptrh,c
  3183  00FD8C                     	if	1	;There are 3 active tblptr bytes
  3184  00FD8C  6AF8               	clrf	tblptru,c
  3185  00FD8E  0E00               	movlw	low (__mediumconst shr (0+16))
  3186  00FD90  22F8               	addwfc	tblptru,f,c
  3187  00FD92                     	endif
  3188  00FD92  0009               	tblrd		*+
  3189  00FD94  50F5               	movf	tablat,w,c
  3190  00FD96  5C59               	subwf	printf@val,w,c
  3191  00FD98  0009               	tblrd		*+
  3192  00FD9A  50F5               	movf	tablat,w,c
  3193  00FD9C  585A               	subwfb	printf@val+1,w,c
  3194  00FD9E  0009               	tblrd		*+
  3195  00FDA0  50F5               	movf	tablat,w,c
  3196  00FDA2  585B               	subwfb	printf@val+2,w,c
  3197  00FDA4  0009               	tblrd		*+
  3198  00FDA6  50F5               	movf	tablat,w,c
  3199  00FDA8  585C               	subwfb	printf@val+3,w,c
  3200  00FDAA  A0D8               	btfss	status,0,c
  3201  00FDAC  D002               	goto	u2740
  3202                           
  3203                           ;doprnt.c: 1307: break;
  3204  00FDAE  2A64               	incf	printf@c,f,c
  3205  00FDB0  D7E1               	goto	l2845
  3206  00FDB2                     u2740:
  3207                           
  3208                           ;doprnt.c: 1422: {
  3209                           ;doprnt.c: 1438: if(flag & 0x03)
  3210  00FDB2  0E03               	movlw	3
  3211  00FDB4  1451               	andwf	printf@flag,w,c
  3212  00FDB6  6E46               	movwf	??_printf& (0+255),c
  3213  00FDB8  0E00               	movlw	0
  3214  00FDBA  1452               	andwf	printf@flag+1,w,c
  3215  00FDBC  6E47               	movwf	(??_printf+1)& (0+255),c
  3216  00FDBE  5046               	movf	??_printf,w,c
  3217  00FDC0  1047               	iorwf	??_printf+1,w,c
  3218  00FDC2  B4D8               	btfsc	status,2,c
  3219  00FDC4  D003               	goto	l228
  3220                           
  3221                           ;doprnt.c: 1439: (putch('-') );
  3222  00FDC6  0E2D               	movlw	45
  3223  00FDC8  ECC2  F06E         	call	_putch
  3224  00FDCC                     l228:
  3225                           
  3226                           ;doprnt.c: 1469: }
  3227                           ;doprnt.c: 1472: prec = c;
  3228  00FDCC  5064               	movf	printf@c,w,c
  3229  00FDCE  6E55               	movwf	printf@prec,c
  3230  00FDD0  6A56               	clrf	printf@prec+1,c
  3231  00FDD2  BE55               	btfsc	printf@prec,7,c
  3232  00FDD4  0656               	decf	printf@prec+1,f,c
  3233                           
  3234                           ;doprnt.c: 1474: while(prec--) {
  3235  00FDD6  D041               	goto	l229
  3236  00FDD8                     l2863:
  3237                           
  3238                           ;doprnt.c: 1478: {
  3239                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3240  00FDD8  C055  F046         	movff	printf@prec,??_printf
  3241  00FDDC  C056  F047         	movff	printf@prec+1,??_printf+1
  3242  00FDE0  90D8               	bcf	status,0,c
  3243  00FDE2  3646               	rlcf	??_printf,f,c
  3244  00FDE4  3647               	rlcf	??_printf+1,f,c
  3245  00FDE6  90D8               	bcf	status,0,c
  3246  00FDE8  3646               	rlcf	??_printf,f,c
  3247  00FDEA  3647               	rlcf	??_printf+1,f,c
  3248  00FDEC  0E87               	movlw	low _dpowers
  3249  00FDEE  2446               	addwf	??_printf,w,c
  3250  00FDF0  6EF6               	movwf	tblptrl,c
  3251  00FDF2  0EFE               	movlw	high _dpowers
  3252  00FDF4  2047               	addwfc	??_printf+1,w,c
  3253  00FDF6  6EF7               	movwf	tblptrh,c
  3254  00FDF8                     	if	1	;There are 3 active tblptr bytes
  3255  00FDF8  6AF8               	clrf	tblptru,c
  3256  00FDFA  0E00               	movlw	low (__mediumconst shr (0+16))
  3257  00FDFC  22F8               	addwfc	tblptru,f,c
  3258  00FDFE                     	endif
  3259  00FDFE  0009               	tblrd		*+
  3260  00FE00  CFF5 F005          	movff	tablat,___lldiv@divisor
  3261  00FE04  0009               	tblrd		*+
  3262  00FE06  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3263  00FE0A  0009               	tblrd		*+
  3264  00FE0C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3265  00FE10  000A               	tblrd		*-
  3266  00FE12  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3267  00FE16  C059  F001         	movff	printf@val,___lldiv@dividend
  3268  00FE1A  C05A  F002         	movff	printf@val+1,___lldiv@dividend+1
  3269  00FE1E  C05B  F003         	movff	printf@val+2,___lldiv@dividend+2
  3270  00FE22  C05C  F004         	movff	printf@val+3,___lldiv@dividend+3
  3271  00FE26  EC72  F070         	call	___lldiv	;wreg free
  3272  00FE2A  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3273  00FE2E  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3274  00FE32  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3275  00FE36  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3276  00FE3A  0E0A               	movlw	10
  3277  00FE3C  6E12               	movwf	___llmod@divisor,c
  3278  00FE3E  0E00               	movlw	0
  3279  00FE40  6E13               	movwf	___llmod@divisor+1,c
  3280  00FE42  0E00               	movlw	0
  3281  00FE44  6E14               	movwf	___llmod@divisor+2,c
  3282  00FE46  0E00               	movlw	0
  3283  00FE48  6E15               	movwf	___llmod@divisor+3,c
  3284  00FE4A  ECC8  F06F         	call	___llmod	;wreg free
  3285  00FE4E  500E               	movf	?___llmod,w,c
  3286  00FE50  0F30               	addlw	48
  3287  00FE52  6E64               	movwf	printf@c,c
  3288                           
  3289                           ;doprnt.c: 1523: }
  3290                           ;doprnt.c: 1524: (putch(c) );
  3291  00FE54  5064               	movf	printf@c,w,c
  3292  00FE56  ECC2  F06E         	call	_putch
  3293  00FE5A                     l229:
  3294  00FE5A  0655               	decf	printf@prec,f,c
  3295  00FE5C  A0D8               	btfss	status,0,c
  3296  00FE5E  0656               	decf	printf@prec+1,f,c
  3297  00FE60  2855               	incf	printf@prec,w,c
  3298  00FE62  E1BA               	bnz	l2863
  3299  00FE64  2856               	incf	printf@prec+1,w,c
  3300  00FE66  A4D8               	btfss	status,2,c
  3301  00FE68  D7B7               	goto	l230
  3302  00FE6A                     u2760:
  3303  00FE6A  C040  FFF6         	movff	printf@f,tblptrl
  3304  00FE6E  C041  FFF7         	movff	printf@f+1,tblptrh
  3305  00FE72  4A40               	infsnz	printf@f,f,c
  3306  00FE74  2A41               	incf	printf@f+1,f,c
  3307  00FE76                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3308  00FE76  6AF8               	clrf	tblptru,c
  3309  00FE78                     	endif
  3310  00FE78                     	if	0	;tblptru may be non-zero
  3311  00FE78                     	endif
  3312  00FE78  0008               	tblrd		*
  3313  00FE7A  CFF5 F064          	movff	tablat,printf@c
  3314  00FE7E  5064               	movf	printf@c,w,c
  3315  00FE80  B4D8               	btfsc	status,2,c
  3316  00FE82  0012               	return	
  3317  00FE84  D404               	goto	l163
  3318  00FE86                     __end_of_printf:
  3319                           	opt stack 0
  3320                           tblptru	equ	0xFF8
  3321                           tblptrh	equ	0xFF7
  3322                           tblptrl	equ	0xFF6
  3323                           tablat	equ	0xFF5
  3324                           prodh	equ	0xFF4
  3325                           prodl	equ	0xFF3
  3326                           indf0	equ	0xFEF
  3327                           postinc0	equ	0xFEE
  3328                           fsr0h	equ	0xFEA
  3329                           fsr0l	equ	0xFE9
  3330                           wreg	equ	0xFE8
  3331                           postdec1	equ	0xFE5
  3332                           plusw1	equ	0xFE3
  3333                           fsr1l	equ	0xFE1
  3334                           postinc2	equ	0xFDE
  3335                           postdec2	equ	0xFDD
  3336                           plusw2	equ	0xFDB
  3337                           fsr2h	equ	0xFDA
  3338                           fsr2l	equ	0xFD9
  3339                           status	equ	0xFD8
  3340                           
  3341 ;; *************** function _scale *****************
  3342 ;; Defined at:
  3343 ;;		line 425 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;  scl             1    wreg     char 
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;  scl             1   41[COMRAM] char 
  3348 ;; Return value:  Size  Location     Type
  3349 ;;                  3   35[COMRAM] char 
  3350 ;; Registers used:
  3351 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3352 ;; Tracked objects:
  3353 ;;		On entry : 0/0
  3354 ;;		On exit  : 0/0
  3355 ;;		Unchanged: 0/0
  3356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3357 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3360 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3361 ;;Total ram usage:        7 bytes
  3362 ;; Hardware stack levels used:    1
  3363 ;; Hardware stack levels required when called:    2
  3364 ;; This function calls:
  3365 ;;		___awdiv
  3366 ;;		___awmod
  3367 ;;		___ftmul
  3368 ;;		___wmul
  3369 ;; This function is called by:
  3370 ;;		_printf
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           	psect	text2
  3375  00EB8C                     __ptext2:
  3376                           	opt stack 0
  3377  00EB8C                     _scale:
  3378                           	opt stack 27
  3379                           
  3380                           ;incstack = 0
  3381                           ;scale@scl stored from wreg
  3382  00EB8C  6E2A               	movwf	scale@scl,c
  3383                           
  3384                           ;doprnt.c: 428: if(scl < 0) {
  3385  00EB8E  AE2A               	btfss	scale@scl,7,c
  3386  00EB90  D113               	goto	l152
  3387                           
  3388                           ;doprnt.c: 429: scl = -scl;
  3389  00EB92  6C2A               	negf	scale@scl,c
  3390                           
  3391                           ;doprnt.c: 430: if(scl>=110)
  3392  00EB94  502A               	movf	scale@scl,w,c
  3393  00EB96  0A80               	xorlw	128
  3394  00EB98  0F12               	addlw	-238
  3395  00EB9A  A0D8               	btfss	status,0,c
  3396  00EB9C  D09A               	goto	l153
  3397                           
  3398                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3399  00EB9E  0E00               	movlw	0
  3400  00EBA0  6E12               	movwf	___wmul@multiplicand+1,c
  3401  00EBA2  0E03               	movlw	3
  3402  00EBA4  6E11               	movwf	___wmul@multiplicand,c
  3403  00EBA6  0E00               	movlw	0
  3404  00EBA8  6E0A               	movwf	___awdiv@divisor+1,c
  3405  00EBAA  0E0A               	movlw	10
  3406  00EBAC  6E09               	movwf	___awdiv@divisor,c
  3407  00EBAE  0E00               	movlw	0
  3408  00EBB0  6E04               	movwf	___awmod@divisor+1,c
  3409  00EBB2  0E64               	movlw	100
  3410  00EBB4  6E03               	movwf	___awmod@divisor,c
  3411  00EBB6  502A               	movf	scale@scl,w,c
  3412  00EBB8  6E01               	movwf	___awmod@dividend,c
  3413  00EBBA  6A02               	clrf	___awmod@dividend+1,c
  3414  00EBBC  BE01               	btfsc	___awmod@dividend,7,c
  3415  00EBBE  0602               	decf	___awmod@dividend+1,f,c
  3416  00EBC0  ECFB  F06F         	call	___awmod	;wreg free
  3417  00EBC4  C001  F007         	movff	?___awmod,___awdiv@dividend
  3418  00EBC8  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3419  00EBCC  ECB3  F070         	call	___awdiv	;wreg free
  3420  00EBD0  0E09               	movlw	9
  3421  00EBD2  2407               	addwf	?___awdiv,w,c
  3422  00EBD4  6E0F               	movwf	___wmul@multiplier,c
  3423  00EBD6  0E00               	movlw	0
  3424  00EBD8  2008               	addwfc	?___awdiv+1,w,c
  3425  00EBDA  6E10               	movwf	___wmul@multiplier+1,c
  3426  00EBDC  ECFA  F06E         	call	___wmul	;wreg free
  3427  00EBE0  0ED6               	movlw	low __npowers_
  3428  00EBE2  240F               	addwf	?___wmul,w,c
  3429  00EBE4  6EF6               	movwf	tblptrl,c
  3430  00EBE6  0EFE               	movlw	high __npowers_
  3431  00EBE8  2010               	addwfc	?___wmul+1,w,c
  3432  00EBEA  6EF7               	movwf	tblptrh,c
  3433  00EBEC                     	if	1	;There are 3 active tblptr bytes
  3434  00EBEC  6AF8               	clrf	tblptru,c
  3435  00EBEE  0E00               	movlw	low (__mediumconst shr (0+16))
  3436  00EBF0  22F8               	addwfc	tblptru,f,c
  3437  00EBF2                     	endif
  3438  00EBF2  0009               	tblrd		*+
  3439  00EBF4  CFF5 F018          	movff	tablat,___ftmul@f2
  3440  00EBF8  0009               	tblrd		*+
  3441  00EBFA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3442  00EBFE  000A               	tblrd		*-
  3443  00EC00  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3444  00EC04  0E00               	movlw	0
  3445  00EC06  6E0A               	movwf	___awdiv@divisor+1,c
  3446  00EC08  0E64               	movlw	100
  3447  00EC0A  6E09               	movwf	___awdiv@divisor,c
  3448  00EC0C  502A               	movf	scale@scl,w,c
  3449  00EC0E  6E07               	movwf	___awdiv@dividend,c
  3450  00EC10  6A08               	clrf	___awdiv@dividend+1,c
  3451  00EC12  BE07               	btfsc	___awdiv@dividend,7,c
  3452  00EC14  0608               	decf	___awdiv@dividend+1,f,c
  3453  00EC16  ECB3  F070         	call	___awdiv	;wreg free
  3454  00EC1A  0E12               	movlw	18
  3455  00EC1C  2407               	addwf	?___awdiv,w,c
  3456  00EC1E  6E0F               	movwf	___wmul@multiplier,c
  3457  00EC20  0E00               	movlw	0
  3458  00EC22  2008               	addwfc	?___awdiv+1,w,c
  3459  00EC24  6E10               	movwf	___wmul@multiplier+1,c
  3460  00EC26  0E00               	movlw	0
  3461  00EC28  6E12               	movwf	___wmul@multiplicand+1,c
  3462  00EC2A  0E03               	movlw	3
  3463  00EC2C  6E11               	movwf	___wmul@multiplicand,c
  3464  00EC2E  ECFA  F06E         	call	___wmul	;wreg free
  3465  00EC32  0ED6               	movlw	low __npowers_
  3466  00EC34  240F               	addwf	?___wmul,w,c
  3467  00EC36  6EF6               	movwf	tblptrl,c
  3468  00EC38  0EFE               	movlw	high __npowers_
  3469  00EC3A  2010               	addwfc	?___wmul+1,w,c
  3470  00EC3C  6EF7               	movwf	tblptrh,c
  3471  00EC3E                     	if	1	;There are 3 active tblptr bytes
  3472  00EC3E  6AF8               	clrf	tblptru,c
  3473  00EC40  0E00               	movlw	low (__mediumconst shr (0+16))
  3474  00EC42  22F8               	addwfc	tblptru,f,c
  3475  00EC44                     	endif
  3476  00EC44  0009               	tblrd		*+
  3477  00EC46  CFF5 F015          	movff	tablat,___ftmul@f1
  3478  00EC4A  0009               	tblrd		*+
  3479  00EC4C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3480  00EC50  000A               	tblrd		*-
  3481  00EC52  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3482  00EC56  EC0E  F072         	call	___ftmul	;wreg free
  3483  00EC5A  C015  F027         	movff	?___ftmul,_scale$861
  3484  00EC5E  C016  F028         	movff	?___ftmul+1,_scale$861+1
  3485  00EC62  C017  F029         	movff	?___ftmul+2,_scale$861+2
  3486                           
  3487                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3488  00EC66  C027  F015         	movff	_scale$861,___ftmul@f1
  3489  00EC6A  C028  F016         	movff	_scale$861+1,___ftmul@f1+1
  3490  00EC6E  C029  F017         	movff	_scale$861+2,___ftmul@f1+2
  3491  00EC72  0E00               	movlw	0
  3492  00EC74  6E12               	movwf	___wmul@multiplicand+1,c
  3493  00EC76  0E03               	movlw	3
  3494  00EC78  6E11               	movwf	___wmul@multiplicand,c
  3495  00EC7A  0E00               	movlw	0
  3496  00EC7C  6E04               	movwf	___awmod@divisor+1,c
  3497  00EC7E  0E0A               	movlw	10
  3498  00EC80  6E03               	movwf	___awmod@divisor,c
  3499  00EC82  502A               	movf	scale@scl,w,c
  3500  00EC84  6E01               	movwf	___awmod@dividend,c
  3501  00EC86  6A02               	clrf	___awmod@dividend+1,c
  3502  00EC88  BE01               	btfsc	___awmod@dividend,7,c
  3503  00EC8A  0602               	decf	___awmod@dividend+1,f,c
  3504  00EC8C  ECFB  F06F         	call	___awmod	;wreg free
  3505  00EC90  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3506  00EC94  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3507  00EC98  ECFA  F06E         	call	___wmul	;wreg free
  3508  00EC9C  0ED6               	movlw	low __npowers_
  3509  00EC9E  240F               	addwf	?___wmul,w,c
  3510  00ECA0  6EF6               	movwf	tblptrl,c
  3511  00ECA2  0EFE               	movlw	high __npowers_
  3512  00ECA4  2010               	addwfc	?___wmul+1,w,c
  3513  00ECA6  6EF7               	movwf	tblptrh,c
  3514  00ECA8                     	if	1	;There are 3 active tblptr bytes
  3515  00ECA8  6AF8               	clrf	tblptru,c
  3516  00ECAA  0E00               	movlw	low (__mediumconst shr (0+16))
  3517  00ECAC  22F8               	addwfc	tblptru,f,c
  3518  00ECAE                     	endif
  3519  00ECAE  0009               	tblrd		*+
  3520  00ECB0  CFF5 F018          	movff	tablat,___ftmul@f2
  3521  00ECB4  0009               	tblrd		*+
  3522  00ECB6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3523  00ECBA  000A               	tblrd		*-
  3524  00ECBC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3525  00ECC0  EC0E  F072         	call	___ftmul	;wreg free
  3526  00ECC4  C015  F024         	movff	?___ftmul,?_scale
  3527  00ECC8  C016  F025         	movff	?___ftmul+1,?_scale+1
  3528  00ECCC  C017  F026         	movff	?___ftmul+2,?_scale+2
  3529  00ECD0  0012               	return	
  3530  00ECD2                     l153:
  3531                           
  3532                           ;doprnt.c: 432: else if(scl > 10)
  3533  00ECD2  502A               	movf	scale@scl,w,c
  3534  00ECD4  0A80               	xorlw	128
  3535  00ECD6  0F75               	addlw	-139
  3536  00ECD8  A0D8               	btfss	status,0,c
  3537  00ECDA  D059               	goto	l156
  3538                           
  3539                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3540  00ECDC  0E00               	movlw	0
  3541  00ECDE  6E0A               	movwf	___awdiv@divisor+1,c
  3542  00ECE0  0E0A               	movlw	10
  3543  00ECE2  6E09               	movwf	___awdiv@divisor,c
  3544  00ECE4  502A               	movf	scale@scl,w,c
  3545  00ECE6  6E07               	movwf	___awdiv@dividend,c
  3546  00ECE8  6A08               	clrf	___awdiv@dividend+1,c
  3547  00ECEA  BE07               	btfsc	___awdiv@dividend,7,c
  3548  00ECEC  0608               	decf	___awdiv@dividend+1,f,c
  3549  00ECEE  ECB3  F070         	call	___awdiv	;wreg free
  3550  00ECF2  0E09               	movlw	9
  3551  00ECF4  2407               	addwf	?___awdiv,w,c
  3552  00ECF6  6E0F               	movwf	___wmul@multiplier,c
  3553  00ECF8  0E00               	movlw	0
  3554  00ECFA  2008               	addwfc	?___awdiv+1,w,c
  3555  00ECFC  6E10               	movwf	___wmul@multiplier+1,c
  3556  00ECFE  0E00               	movlw	0
  3557  00ED00  6E12               	movwf	___wmul@multiplicand+1,c
  3558  00ED02  0E03               	movlw	3
  3559  00ED04  6E11               	movwf	___wmul@multiplicand,c
  3560  00ED06  ECFA  F06E         	call	___wmul	;wreg free
  3561  00ED0A  0ED6               	movlw	low __npowers_
  3562  00ED0C  240F               	addwf	?___wmul,w,c
  3563  00ED0E  6EF6               	movwf	tblptrl,c
  3564  00ED10  0EFE               	movlw	high __npowers_
  3565  00ED12  2010               	addwfc	?___wmul+1,w,c
  3566  00ED14  6EF7               	movwf	tblptrh,c
  3567  00ED16                     	if	1	;There are 3 active tblptr bytes
  3568  00ED16  6AF8               	clrf	tblptru,c
  3569  00ED18  0E00               	movlw	low (__mediumconst shr (0+16))
  3570  00ED1A  22F8               	addwfc	tblptru,f,c
  3571  00ED1C                     	endif
  3572  00ED1C  0009               	tblrd		*+
  3573  00ED1E  CFF5 F015          	movff	tablat,___ftmul@f1
  3574  00ED22  0009               	tblrd		*+
  3575  00ED24  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3576  00ED28  000A               	tblrd		*-
  3577  00ED2A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3578  00ED2E  0E00               	movlw	0
  3579  00ED30  6E12               	movwf	___wmul@multiplicand+1,c
  3580  00ED32  0E03               	movlw	3
  3581  00ED34  6E11               	movwf	___wmul@multiplicand,c
  3582  00ED36  0E00               	movlw	0
  3583  00ED38  6E04               	movwf	___awmod@divisor+1,c
  3584  00ED3A  0E0A               	movlw	10
  3585  00ED3C  6E03               	movwf	___awmod@divisor,c
  3586  00ED3E  502A               	movf	scale@scl,w,c
  3587  00ED40  6E01               	movwf	___awmod@dividend,c
  3588  00ED42  6A02               	clrf	___awmod@dividend+1,c
  3589  00ED44  BE01               	btfsc	___awmod@dividend,7,c
  3590  00ED46  0602               	decf	___awmod@dividend+1,f,c
  3591  00ED48  ECFB  F06F         	call	___awmod	;wreg free
  3592  00ED4C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3593  00ED50  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3594  00ED54  ECFA  F06E         	call	___wmul	;wreg free
  3595  00ED58  0ED6               	movlw	low __npowers_
  3596  00ED5A  240F               	addwf	?___wmul,w,c
  3597  00ED5C  6EF6               	movwf	tblptrl,c
  3598  00ED5E  0EFE               	movlw	high __npowers_
  3599  00ED60  2010               	addwfc	?___wmul+1,w,c
  3600  00ED62  6EF7               	movwf	tblptrh,c
  3601  00ED64                     	if	1	;There are 3 active tblptr bytes
  3602  00ED64  6AF8               	clrf	tblptru,c
  3603  00ED66  0E00               	movlw	low (__mediumconst shr (0+16))
  3604  00ED68  22F8               	addwfc	tblptru,f,c
  3605  00ED6A                     	endif
  3606  00ED6A  0009               	tblrd		*+
  3607  00ED6C  CFF5 F018          	movff	tablat,___ftmul@f2
  3608  00ED70  0009               	tblrd		*+
  3609  00ED72  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3610  00ED76  000A               	tblrd		*-
  3611  00ED78  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3612  00ED7C  EC0E  F072         	call	___ftmul	;wreg free
  3613  00ED80  C015  F024         	movff	?___ftmul,?_scale
  3614  00ED84  C016  F025         	movff	?___ftmul+1,?_scale+1
  3615  00ED88  C017  F026         	movff	?___ftmul+2,?_scale+2
  3616  00ED8C  0012               	return	
  3617  00ED8E                     l156:
  3618                           
  3619                           ;doprnt.c: 434: return _npowers_[scl];
  3620  00ED8E  502A               	movf	scale@scl,w,c
  3621  00ED90  0D03               	mullw	3
  3622  00ED92  0ED6               	movlw	low __npowers_
  3623  00ED94  24F3               	addwf	prodl,w,c
  3624  00ED96  6EF6               	movwf	tblptrl,c
  3625  00ED98  0EFE               	movlw	high __npowers_
  3626  00ED9A  20F4               	addwfc	prodh,w,c
  3627  00ED9C  6EF7               	movwf	tblptrh,c
  3628  00ED9E                     	if	1	;There are 3 active tblptr bytes
  3629  00ED9E  6AF8               	clrf	tblptru,c
  3630  00EDA0  0E00               	movlw	low (__mediumconst shr (0+16))
  3631  00EDA2  22F8               	addwfc	tblptru,f,c
  3632  00EDA4                     	endif
  3633  00EDA4  0009               	tblrd		*+
  3634  00EDA6  CFF5 F024          	movff	tablat,?_scale
  3635  00EDAA  0009               	tblrd		*+
  3636  00EDAC  CFF5 F025          	movff	tablat,?_scale+1
  3637  00EDB0  000A               	tblrd		*-
  3638  00EDB2  CFF5 F026          	movff	tablat,?_scale+2
  3639  00EDB6  0012               	return	
  3640  00EDB8                     l152:
  3641                           
  3642                           ;doprnt.c: 435: }
  3643                           ;doprnt.c: 436: if(scl>=110)
  3644  00EDB8  502A               	movf	scale@scl,w,c
  3645  00EDBA  0A80               	xorlw	128
  3646  00EDBC  0F12               	addlw	-238
  3647  00EDBE  A0D8               	btfss	status,0,c
  3648  00EDC0  D09A               	goto	l157
  3649                           
  3650                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3651  00EDC2  0E00               	movlw	0
  3652  00EDC4  6E12               	movwf	___wmul@multiplicand+1,c
  3653  00EDC6  0E03               	movlw	3
  3654  00EDC8  6E11               	movwf	___wmul@multiplicand,c
  3655  00EDCA  0E00               	movlw	0
  3656  00EDCC  6E0A               	movwf	___awdiv@divisor+1,c
  3657  00EDCE  0E0A               	movlw	10
  3658  00EDD0  6E09               	movwf	___awdiv@divisor,c
  3659  00EDD2  0E00               	movlw	0
  3660  00EDD4  6E04               	movwf	___awmod@divisor+1,c
  3661  00EDD6  0E64               	movlw	100
  3662  00EDD8  6E03               	movwf	___awmod@divisor,c
  3663  00EDDA  502A               	movf	scale@scl,w,c
  3664  00EDDC  6E01               	movwf	___awmod@dividend,c
  3665  00EDDE  6A02               	clrf	___awmod@dividend+1,c
  3666  00EDE0  BE01               	btfsc	___awmod@dividend,7,c
  3667  00EDE2  0602               	decf	___awmod@dividend+1,f,c
  3668  00EDE4  ECFB  F06F         	call	___awmod	;wreg free
  3669  00EDE8  C001  F007         	movff	?___awmod,___awdiv@dividend
  3670  00EDEC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3671  00EDF0  ECB3  F070         	call	___awdiv	;wreg free
  3672  00EDF4  0E09               	movlw	9
  3673  00EDF6  2407               	addwf	?___awdiv,w,c
  3674  00EDF8  6E0F               	movwf	___wmul@multiplier,c
  3675  00EDFA  0E00               	movlw	0
  3676  00EDFC  2008               	addwfc	?___awdiv+1,w,c
  3677  00EDFE  6E10               	movwf	___wmul@multiplier+1,c
  3678  00EE00  ECFA  F06E         	call	___wmul	;wreg free
  3679  00EE04  0EAF               	movlw	low __powers_
  3680  00EE06  240F               	addwf	?___wmul,w,c
  3681  00EE08  6EF6               	movwf	tblptrl,c
  3682  00EE0A  0EFE               	movlw	high __powers_
  3683  00EE0C  2010               	addwfc	?___wmul+1,w,c
  3684  00EE0E  6EF7               	movwf	tblptrh,c
  3685  00EE10                     	if	1	;There are 3 active tblptr bytes
  3686  00EE10  6AF8               	clrf	tblptru,c
  3687  00EE12  0E00               	movlw	low (__mediumconst shr (0+16))
  3688  00EE14  22F8               	addwfc	tblptru,f,c
  3689  00EE16                     	endif
  3690  00EE16  0009               	tblrd		*+
  3691  00EE18  CFF5 F018          	movff	tablat,___ftmul@f2
  3692  00EE1C  0009               	tblrd		*+
  3693  00EE1E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3694  00EE22  000A               	tblrd		*-
  3695  00EE24  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3696  00EE28  0E00               	movlw	0
  3697  00EE2A  6E0A               	movwf	___awdiv@divisor+1,c
  3698  00EE2C  0E64               	movlw	100
  3699  00EE2E  6E09               	movwf	___awdiv@divisor,c
  3700  00EE30  502A               	movf	scale@scl,w,c
  3701  00EE32  6E07               	movwf	___awdiv@dividend,c
  3702  00EE34  6A08               	clrf	___awdiv@dividend+1,c
  3703  00EE36  BE07               	btfsc	___awdiv@dividend,7,c
  3704  00EE38  0608               	decf	___awdiv@dividend+1,f,c
  3705  00EE3A  ECB3  F070         	call	___awdiv	;wreg free
  3706  00EE3E  0E12               	movlw	18
  3707  00EE40  2407               	addwf	?___awdiv,w,c
  3708  00EE42  6E0F               	movwf	___wmul@multiplier,c
  3709  00EE44  0E00               	movlw	0
  3710  00EE46  2008               	addwfc	?___awdiv+1,w,c
  3711  00EE48  6E10               	movwf	___wmul@multiplier+1,c
  3712  00EE4A  0E00               	movlw	0
  3713  00EE4C  6E12               	movwf	___wmul@multiplicand+1,c
  3714  00EE4E  0E03               	movlw	3
  3715  00EE50  6E11               	movwf	___wmul@multiplicand,c
  3716  00EE52  ECFA  F06E         	call	___wmul	;wreg free
  3717  00EE56  0EAF               	movlw	low __powers_
  3718  00EE58  240F               	addwf	?___wmul,w,c
  3719  00EE5A  6EF6               	movwf	tblptrl,c
  3720  00EE5C  0EFE               	movlw	high __powers_
  3721  00EE5E  2010               	addwfc	?___wmul+1,w,c
  3722  00EE60  6EF7               	movwf	tblptrh,c
  3723  00EE62                     	if	1	;There are 3 active tblptr bytes
  3724  00EE62  6AF8               	clrf	tblptru,c
  3725  00EE64  0E00               	movlw	low (__mediumconst shr (0+16))
  3726  00EE66  22F8               	addwfc	tblptru,f,c
  3727  00EE68                     	endif
  3728  00EE68  0009               	tblrd		*+
  3729  00EE6A  CFF5 F015          	movff	tablat,___ftmul@f1
  3730  00EE6E  0009               	tblrd		*+
  3731  00EE70  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3732  00EE74  000A               	tblrd		*-
  3733  00EE76  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3734  00EE7A  EC0E  F072         	call	___ftmul	;wreg free
  3735  00EE7E  C015  F027         	movff	?___ftmul,_scale$861
  3736  00EE82  C016  F028         	movff	?___ftmul+1,_scale$861+1
  3737  00EE86  C017  F029         	movff	?___ftmul+2,_scale$861+2
  3738                           
  3739                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3740  00EE8A  C027  F015         	movff	_scale$861,___ftmul@f1
  3741  00EE8E  C028  F016         	movff	_scale$861+1,___ftmul@f1+1
  3742  00EE92  C029  F017         	movff	_scale$861+2,___ftmul@f1+2
  3743  00EE96  0E00               	movlw	0
  3744  00EE98  6E12               	movwf	___wmul@multiplicand+1,c
  3745  00EE9A  0E03               	movlw	3
  3746  00EE9C  6E11               	movwf	___wmul@multiplicand,c
  3747  00EE9E  0E00               	movlw	0
  3748  00EEA0  6E04               	movwf	___awmod@divisor+1,c
  3749  00EEA2  0E0A               	movlw	10
  3750  00EEA4  6E03               	movwf	___awmod@divisor,c
  3751  00EEA6  502A               	movf	scale@scl,w,c
  3752  00EEA8  6E01               	movwf	___awmod@dividend,c
  3753  00EEAA  6A02               	clrf	___awmod@dividend+1,c
  3754  00EEAC  BE01               	btfsc	___awmod@dividend,7,c
  3755  00EEAE  0602               	decf	___awmod@dividend+1,f,c
  3756  00EEB0  ECFB  F06F         	call	___awmod	;wreg free
  3757  00EEB4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3758  00EEB8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3759  00EEBC  ECFA  F06E         	call	___wmul	;wreg free
  3760  00EEC0  0EAF               	movlw	low __powers_
  3761  00EEC2  240F               	addwf	?___wmul,w,c
  3762  00EEC4  6EF6               	movwf	tblptrl,c
  3763  00EEC6  0EFE               	movlw	high __powers_
  3764  00EEC8  2010               	addwfc	?___wmul+1,w,c
  3765  00EECA  6EF7               	movwf	tblptrh,c
  3766  00EECC                     	if	1	;There are 3 active tblptr bytes
  3767  00EECC  6AF8               	clrf	tblptru,c
  3768  00EECE  0E00               	movlw	low (__mediumconst shr (0+16))
  3769  00EED0  22F8               	addwfc	tblptru,f,c
  3770  00EED2                     	endif
  3771  00EED2  0009               	tblrd		*+
  3772  00EED4  CFF5 F018          	movff	tablat,___ftmul@f2
  3773  00EED8  0009               	tblrd		*+
  3774  00EEDA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3775  00EEDE  000A               	tblrd		*-
  3776  00EEE0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3777  00EEE4  EC0E  F072         	call	___ftmul	;wreg free
  3778  00EEE8  C015  F024         	movff	?___ftmul,?_scale
  3779  00EEEC  C016  F025         	movff	?___ftmul+1,?_scale+1
  3780  00EEF0  C017  F026         	movff	?___ftmul+2,?_scale+2
  3781  00EEF4  0012               	return	
  3782  00EEF6                     l157:
  3783                           
  3784                           ;doprnt.c: 438: else if(scl > 10)
  3785  00EEF6  502A               	movf	scale@scl,w,c
  3786  00EEF8  0A80               	xorlw	128
  3787  00EEFA  0F75               	addlw	-139
  3788  00EEFC  A0D8               	btfss	status,0,c
  3789  00EEFE  D059               	goto	l159
  3790                           
  3791                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3792  00EF00  0E00               	movlw	0
  3793  00EF02  6E0A               	movwf	___awdiv@divisor+1,c
  3794  00EF04  0E0A               	movlw	10
  3795  00EF06  6E09               	movwf	___awdiv@divisor,c
  3796  00EF08  502A               	movf	scale@scl,w,c
  3797  00EF0A  6E07               	movwf	___awdiv@dividend,c
  3798  00EF0C  6A08               	clrf	___awdiv@dividend+1,c
  3799  00EF0E  BE07               	btfsc	___awdiv@dividend,7,c
  3800  00EF10  0608               	decf	___awdiv@dividend+1,f,c
  3801  00EF12  ECB3  F070         	call	___awdiv	;wreg free
  3802  00EF16  0E09               	movlw	9
  3803  00EF18  2407               	addwf	?___awdiv,w,c
  3804  00EF1A  6E0F               	movwf	___wmul@multiplier,c
  3805  00EF1C  0E00               	movlw	0
  3806  00EF1E  2008               	addwfc	?___awdiv+1,w,c
  3807  00EF20  6E10               	movwf	___wmul@multiplier+1,c
  3808  00EF22  0E00               	movlw	0
  3809  00EF24  6E12               	movwf	___wmul@multiplicand+1,c
  3810  00EF26  0E03               	movlw	3
  3811  00EF28  6E11               	movwf	___wmul@multiplicand,c
  3812  00EF2A  ECFA  F06E         	call	___wmul	;wreg free
  3813  00EF2E  0EAF               	movlw	low __powers_
  3814  00EF30  240F               	addwf	?___wmul,w,c
  3815  00EF32  6EF6               	movwf	tblptrl,c
  3816  00EF34  0EFE               	movlw	high __powers_
  3817  00EF36  2010               	addwfc	?___wmul+1,w,c
  3818  00EF38  6EF7               	movwf	tblptrh,c
  3819  00EF3A                     	if	1	;There are 3 active tblptr bytes
  3820  00EF3A  6AF8               	clrf	tblptru,c
  3821  00EF3C  0E00               	movlw	low (__mediumconst shr (0+16))
  3822  00EF3E  22F8               	addwfc	tblptru,f,c
  3823  00EF40                     	endif
  3824  00EF40  0009               	tblrd		*+
  3825  00EF42  CFF5 F015          	movff	tablat,___ftmul@f1
  3826  00EF46  0009               	tblrd		*+
  3827  00EF48  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3828  00EF4C  000A               	tblrd		*-
  3829  00EF4E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3830  00EF52  0E00               	movlw	0
  3831  00EF54  6E12               	movwf	___wmul@multiplicand+1,c
  3832  00EF56  0E03               	movlw	3
  3833  00EF58  6E11               	movwf	___wmul@multiplicand,c
  3834  00EF5A  0E00               	movlw	0
  3835  00EF5C  6E04               	movwf	___awmod@divisor+1,c
  3836  00EF5E  0E0A               	movlw	10
  3837  00EF60  6E03               	movwf	___awmod@divisor,c
  3838  00EF62  502A               	movf	scale@scl,w,c
  3839  00EF64  6E01               	movwf	___awmod@dividend,c
  3840  00EF66  6A02               	clrf	___awmod@dividend+1,c
  3841  00EF68  BE01               	btfsc	___awmod@dividend,7,c
  3842  00EF6A  0602               	decf	___awmod@dividend+1,f,c
  3843  00EF6C  ECFB  F06F         	call	___awmod	;wreg free
  3844  00EF70  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3845  00EF74  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3846  00EF78  ECFA  F06E         	call	___wmul	;wreg free
  3847  00EF7C  0EAF               	movlw	low __powers_
  3848  00EF7E  240F               	addwf	?___wmul,w,c
  3849  00EF80  6EF6               	movwf	tblptrl,c
  3850  00EF82  0EFE               	movlw	high __powers_
  3851  00EF84  2010               	addwfc	?___wmul+1,w,c
  3852  00EF86  6EF7               	movwf	tblptrh,c
  3853  00EF88                     	if	1	;There are 3 active tblptr bytes
  3854  00EF88  6AF8               	clrf	tblptru,c
  3855  00EF8A  0E00               	movlw	low (__mediumconst shr (0+16))
  3856  00EF8C  22F8               	addwfc	tblptru,f,c
  3857  00EF8E                     	endif
  3858  00EF8E  0009               	tblrd		*+
  3859  00EF90  CFF5 F018          	movff	tablat,___ftmul@f2
  3860  00EF94  0009               	tblrd		*+
  3861  00EF96  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3862  00EF9A  000A               	tblrd		*-
  3863  00EF9C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3864  00EFA0  EC0E  F072         	call	___ftmul	;wreg free
  3865  00EFA4  C015  F024         	movff	?___ftmul,?_scale
  3866  00EFA8  C016  F025         	movff	?___ftmul+1,?_scale+1
  3867  00EFAC  C017  F026         	movff	?___ftmul+2,?_scale+2
  3868  00EFB0  0012               	return	
  3869  00EFB2                     l159:
  3870                           
  3871                           ;doprnt.c: 440: return _powers_[scl];
  3872  00EFB2  502A               	movf	scale@scl,w,c
  3873  00EFB4  0D03               	mullw	3
  3874  00EFB6  0EAF               	movlw	low __powers_
  3875  00EFB8  24F3               	addwf	prodl,w,c
  3876  00EFBA  6EF6               	movwf	tblptrl,c
  3877  00EFBC  0EFE               	movlw	high __powers_
  3878  00EFBE  20F4               	addwfc	prodh,w,c
  3879  00EFC0  6EF7               	movwf	tblptrh,c
  3880  00EFC2                     	if	1	;There are 3 active tblptr bytes
  3881  00EFC2  6AF8               	clrf	tblptru,c
  3882  00EFC4  0E00               	movlw	low (__mediumconst shr (0+16))
  3883  00EFC6  22F8               	addwfc	tblptru,f,c
  3884  00EFC8                     	endif
  3885  00EFC8  0009               	tblrd		*+
  3886  00EFCA  CFF5 F024          	movff	tablat,?_scale
  3887  00EFCE  0009               	tblrd		*+
  3888  00EFD0  CFF5 F025          	movff	tablat,?_scale+1
  3889  00EFD4  000A               	tblrd		*-
  3890  00EFD6  CFF5 F026          	movff	tablat,?_scale+2
  3891  00EFDA  0012               	return	
  3892  00EFDC                     __end_of_scale:
  3893                           	opt stack 0
  3894                           tblptru	equ	0xFF8
  3895                           tblptrh	equ	0xFF7
  3896                           tblptrl	equ	0xFF6
  3897                           tablat	equ	0xFF5
  3898                           prodh	equ	0xFF4
  3899                           prodl	equ	0xFF3
  3900                           indf0	equ	0xFEF
  3901                           postinc0	equ	0xFEE
  3902                           fsr0h	equ	0xFEA
  3903                           fsr0l	equ	0xFE9
  3904                           wreg	equ	0xFE8
  3905                           postdec1	equ	0xFE5
  3906                           plusw1	equ	0xFE3
  3907                           fsr1l	equ	0xFE1
  3908                           postinc2	equ	0xFDE
  3909                           postdec2	equ	0xFDD
  3910                           plusw2	equ	0xFDB
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function _putch *****************
  3916 ;; Defined at:
  3917 ;;		line 24 in file "lcd.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  data            1    wreg     unsigned char 
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;  data            1    2[COMRAM] unsigned char 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  1    wreg      void 
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0, cstack
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3934 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;Total ram usage:        1 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    1
  3938 ;; This function calls:
  3939 ;;		_lcdNibble
  3940 ;; This function is called by:
  3941 ;;		_main
  3942 ;;		_printf
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           	psect	text3
  3947  00DD84                     __ptext3:
  3948                           	opt stack 0
  3949  00DD84                     _putch:
  3950                           	opt stack 29
  3951                           
  3952                           ;incstack = 0
  3953                           ;putch@data stored from wreg
  3954  00DD84  6E03               	movwf	putch@data,c
  3955                           
  3956                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  3957  00DD86  848C               	bsf	3980,2,c	;volatile
  3958                           
  3959                           ;lcd.c: 33: lcdNibble(data);
  3960  00DD88  5003               	movf	putch@data,w,c
  3961  00DD8A  EC33  F070         	call	_lcdNibble
  3962                           
  3963                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  3964  00DD8E  0EC8               	movlw	200
  3965  00DD90                     u3277:
  3966  00DD90  D000               	nop2	
  3967  00DD92  2EE8               	decfsz	wreg,f,c
  3968  00DD94  D7FD               	bra	u3277
  3969  00DD96  0012               	return		;funcret
  3970  00DD98                     __end_of_putch:
  3971                           	opt stack 0
  3972                           tblptru	equ	0xFF8
  3973                           tblptrh	equ	0xFF7
  3974                           tblptrl	equ	0xFF6
  3975                           tablat	equ	0xFF5
  3976                           prodh	equ	0xFF4
  3977                           prodl	equ	0xFF3
  3978                           indf0	equ	0xFEF
  3979                           postinc0	equ	0xFEE
  3980                           fsr0h	equ	0xFEA
  3981                           fsr0l	equ	0xFE9
  3982                           wreg	equ	0xFE8
  3983                           postdec1	equ	0xFE5
  3984                           plusw1	equ	0xFE3
  3985                           fsr1l	equ	0xFE1
  3986                           postinc2	equ	0xFDE
  3987                           postdec2	equ	0xFDD
  3988                           plusw2	equ	0xFDB
  3989                           fsr2h	equ	0xFDA
  3990                           fsr2l	equ	0xFD9
  3991                           status	equ	0xFD8
  3992                           
  3993 ;; *************** function _fround *****************
  3994 ;; Defined at:
  3995 ;;		line 409 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;  prec            1    wreg     unsigned char 
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;  prec            1   44[COMRAM] unsigned char 
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  3   35[COMRAM] unsigned char 
  4002 ;; Registers used:
  4003 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4009 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4010 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4012 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;Total ram usage:       10 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:    2
  4016 ;; This function calls:
  4017 ;;		___awdiv
  4018 ;;		___awmod
  4019 ;;		___ftmul
  4020 ;;		___wmul
  4021 ;; This function is called by:
  4022 ;;		_printf
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text4
  4027  00E916                     __ptext4:
  4028                           	opt stack 0
  4029  00E916                     _fround:
  4030                           	opt stack 27
  4031                           
  4032                           ;incstack = 0
  4033                           ;fround@prec stored from wreg
  4034  00E916  6E2D               	movwf	fround@prec,c
  4035                           
  4036                           ;doprnt.c: 413: if(prec>=110)
  4037  00E918  0E6D               	movlw	109
  4038  00E91A  642D               	cpfsgt	fround@prec,c
  4039  00E91C  D0A8               	goto	l146
  4040                           
  4041                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4042  00E91E  0E00               	movlw	0
  4043  00E920  6E12               	movwf	___wmul@multiplicand+1,c
  4044  00E922  0E03               	movlw	3
  4045  00E924  6E11               	movwf	___wmul@multiplicand,c
  4046  00E926  0E00               	movlw	0
  4047  00E928  6E0A               	movwf	___awdiv@divisor+1,c
  4048  00E92A  0E0A               	movlw	10
  4049  00E92C  6E09               	movwf	___awdiv@divisor,c
  4050  00E92E  0E00               	movlw	0
  4051  00E930  6E04               	movwf	___awmod@divisor+1,c
  4052  00E932  0E64               	movlw	100
  4053  00E934  6E03               	movwf	___awmod@divisor,c
  4054  00E936  C02D  F001         	movff	fround@prec,___awmod@dividend
  4055  00E93A  6A02               	clrf	___awmod@dividend+1,c
  4056  00E93C  ECFB  F06F         	call	___awmod	;wreg free
  4057  00E940  C001  F007         	movff	?___awmod,___awdiv@dividend
  4058  00E944  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4059  00E948  ECB3  F070         	call	___awdiv	;wreg free
  4060  00E94C  0E09               	movlw	9
  4061  00E94E  2407               	addwf	?___awdiv,w,c
  4062  00E950  6E0F               	movwf	___wmul@multiplier,c
  4063  00E952  0E00               	movlw	0
  4064  00E954  2008               	addwfc	?___awdiv+1,w,c
  4065  00E956  6E10               	movwf	___wmul@multiplier+1,c
  4066  00E958  ECFA  F06E         	call	___wmul	;wreg free
  4067  00E95C  0ED6               	movlw	low __npowers_
  4068  00E95E  240F               	addwf	?___wmul,w,c
  4069  00E960  6EF6               	movwf	tblptrl,c
  4070  00E962  0EFE               	movlw	high __npowers_
  4071  00E964  2010               	addwfc	?___wmul+1,w,c
  4072  00E966  6EF7               	movwf	tblptrh,c
  4073  00E968                     	if	1	;There are 3 active tblptr bytes
  4074  00E968  6AF8               	clrf	tblptru,c
  4075  00E96A  0E00               	movlw	low (__mediumconst shr (0+16))
  4076  00E96C  22F8               	addwfc	tblptru,f,c
  4077  00E96E                     	endif
  4078  00E96E  0009               	tblrd		*+
  4079  00E970  CFF5 F018          	movff	tablat,___ftmul@f2
  4080  00E974  0009               	tblrd		*+
  4081  00E976  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4082  00E97A  000A               	tblrd		*-
  4083  00E97C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4084  00E980  0E00               	movlw	0
  4085  00E982  6E0A               	movwf	___awdiv@divisor+1,c
  4086  00E984  0E64               	movlw	100
  4087  00E986  6E09               	movwf	___awdiv@divisor,c
  4088  00E988  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4089  00E98C  6A08               	clrf	___awdiv@dividend+1,c
  4090  00E98E  ECB3  F070         	call	___awdiv	;wreg free
  4091  00E992  0E12               	movlw	18
  4092  00E994  2407               	addwf	?___awdiv,w,c
  4093  00E996  6E0F               	movwf	___wmul@multiplier,c
  4094  00E998  0E00               	movlw	0
  4095  00E99A  2008               	addwfc	?___awdiv+1,w,c
  4096  00E99C  6E10               	movwf	___wmul@multiplier+1,c
  4097  00E99E  0E00               	movlw	0
  4098  00E9A0  6E12               	movwf	___wmul@multiplicand+1,c
  4099  00E9A2  0E03               	movlw	3
  4100  00E9A4  6E11               	movwf	___wmul@multiplicand,c
  4101  00E9A6  ECFA  F06E         	call	___wmul	;wreg free
  4102  00E9AA  0ED6               	movlw	low __npowers_
  4103  00E9AC  240F               	addwf	?___wmul,w,c
  4104  00E9AE  6EF6               	movwf	tblptrl,c
  4105  00E9B0  0EFE               	movlw	high __npowers_
  4106  00E9B2  2010               	addwfc	?___wmul+1,w,c
  4107  00E9B4  6EF7               	movwf	tblptrh,c
  4108  00E9B6                     	if	1	;There are 3 active tblptr bytes
  4109  00E9B6  6AF8               	clrf	tblptru,c
  4110  00E9B8  0E00               	movlw	low (__mediumconst shr (0+16))
  4111  00E9BA  22F8               	addwfc	tblptru,f,c
  4112  00E9BC                     	endif
  4113  00E9BC  0009               	tblrd		*+
  4114  00E9BE  CFF5 F015          	movff	tablat,___ftmul@f1
  4115  00E9C2  0009               	tblrd		*+
  4116  00E9C4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4117  00E9C8  000A               	tblrd		*-
  4118  00E9CA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4119  00E9CE  EC0E  F072         	call	___ftmul	;wreg free
  4120  00E9D2  C015  F02A         	movff	?___ftmul,_fround$859
  4121  00E9D6  C016  F02B         	movff	?___ftmul+1,_fround$859+1
  4122  00E9DA  C017  F02C         	movff	?___ftmul+2,_fround$859+2
  4123                           
  4124                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4125  00E9DE  0E00               	movlw	0
  4126  00E9E0  6E12               	movwf	___wmul@multiplicand+1,c
  4127  00E9E2  0E03               	movlw	3
  4128  00E9E4  6E11               	movwf	___wmul@multiplicand,c
  4129  00E9E6  0E00               	movlw	0
  4130  00E9E8  6E04               	movwf	___awmod@divisor+1,c
  4131  00E9EA  0E0A               	movlw	10
  4132  00E9EC  6E03               	movwf	___awmod@divisor,c
  4133  00E9EE  C02D  F001         	movff	fround@prec,___awmod@dividend
  4134  00E9F2  6A02               	clrf	___awmod@dividend+1,c
  4135  00E9F4  ECFB  F06F         	call	___awmod	;wreg free
  4136  00E9F8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4137  00E9FC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4138  00EA00  ECFA  F06E         	call	___wmul	;wreg free
  4139  00EA04  0ED6               	movlw	low __npowers_
  4140  00EA06  240F               	addwf	?___wmul,w,c
  4141  00EA08  6EF6               	movwf	tblptrl,c
  4142  00EA0A  0EFE               	movlw	high __npowers_
  4143  00EA0C  2010               	addwfc	?___wmul+1,w,c
  4144  00EA0E  6EF7               	movwf	tblptrh,c
  4145  00EA10                     	if	1	;There are 3 active tblptr bytes
  4146  00EA10  6AF8               	clrf	tblptru,c
  4147  00EA12  0E00               	movlw	low (__mediumconst shr (0+16))
  4148  00EA14  22F8               	addwfc	tblptru,f,c
  4149  00EA16                     	endif
  4150  00EA16  0009               	tblrd		*+
  4151  00EA18  CFF5 F018          	movff	tablat,___ftmul@f2
  4152  00EA1C  0009               	tblrd		*+
  4153  00EA1E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4154  00EA22  000A               	tblrd		*-
  4155  00EA24  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4156  00EA28  C02A  F015         	movff	_fround$859,___ftmul@f1
  4157  00EA2C  C02B  F016         	movff	_fround$859+1,___ftmul@f1+1
  4158  00EA30  C02C  F017         	movff	_fround$859+2,___ftmul@f1+2
  4159  00EA34  EC0E  F072         	call	___ftmul	;wreg free
  4160  00EA38  C015  F027         	movff	?___ftmul,_fround$860
  4161  00EA3C  C016  F028         	movff	?___ftmul+1,_fround$860+1
  4162  00EA40  C017  F029         	movff	?___ftmul+2,_fround$860+2
  4163                           
  4164                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4165  00EA44  C027  F015         	movff	_fround$860,___ftmul@f1
  4166  00EA48  C028  F016         	movff	_fround$860+1,___ftmul@f1+1
  4167  00EA4C  C029  F017         	movff	_fround$860+2,___ftmul@f1+2
  4168  00EA50  0E00               	movlw	0
  4169  00EA52  6E18               	movwf	___ftmul@f2,c
  4170  00EA54  0E00               	movlw	0
  4171  00EA56  6E19               	movwf	___ftmul@f2+1,c
  4172  00EA58  0E3F               	movlw	63
  4173  00EA5A  6E1A               	movwf	___ftmul@f2+2,c
  4174  00EA5C  EC0E  F072         	call	___ftmul	;wreg free
  4175  00EA60  C015  F024         	movff	?___ftmul,?_fround
  4176  00EA64  C016  F025         	movff	?___ftmul+1,?_fround+1
  4177  00EA68  C017  F026         	movff	?___ftmul+2,?_fround+2
  4178  00EA6C  0012               	return	
  4179  00EA6E                     l146:
  4180                           
  4181                           ;doprnt.c: 415: else if(prec > 10)
  4182  00EA6E  0E0A               	movlw	10
  4183  00EA70  642D               	cpfsgt	fround@prec,c
  4184  00EA72  D069               	goto	l149
  4185                           
  4186                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4187  00EA74  0E00               	movlw	0
  4188  00EA76  6E12               	movwf	___wmul@multiplicand+1,c
  4189  00EA78  0E03               	movlw	3
  4190  00EA7A  6E11               	movwf	___wmul@multiplicand,c
  4191  00EA7C  0E00               	movlw	0
  4192  00EA7E  6E04               	movwf	___awmod@divisor+1,c
  4193  00EA80  0E0A               	movlw	10
  4194  00EA82  6E03               	movwf	___awmod@divisor,c
  4195  00EA84  C02D  F001         	movff	fround@prec,___awmod@dividend
  4196  00EA88  6A02               	clrf	___awmod@dividend+1,c
  4197  00EA8A  ECFB  F06F         	call	___awmod	;wreg free
  4198  00EA8E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4199  00EA92  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4200  00EA96  ECFA  F06E         	call	___wmul	;wreg free
  4201  00EA9A  0ED6               	movlw	low __npowers_
  4202  00EA9C  240F               	addwf	?___wmul,w,c
  4203  00EA9E  6EF6               	movwf	tblptrl,c
  4204  00EAA0  0EFE               	movlw	high __npowers_
  4205  00EAA2  2010               	addwfc	?___wmul+1,w,c
  4206  00EAA4  6EF7               	movwf	tblptrh,c
  4207  00EAA6                     	if	1	;There are 3 active tblptr bytes
  4208  00EAA6  6AF8               	clrf	tblptru,c
  4209  00EAA8  0E00               	movlw	low (__mediumconst shr (0+16))
  4210  00EAAA  22F8               	addwfc	tblptru,f,c
  4211  00EAAC                     	endif
  4212  00EAAC  0009               	tblrd		*+
  4213  00EAAE  CFF5 F018          	movff	tablat,___ftmul@f2
  4214  00EAB2  0009               	tblrd		*+
  4215  00EAB4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4216  00EAB8  000A               	tblrd		*-
  4217  00EABA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4218  00EABE  0E00               	movlw	0
  4219  00EAC0  6E0A               	movwf	___awdiv@divisor+1,c
  4220  00EAC2  0E0A               	movlw	10
  4221  00EAC4  6E09               	movwf	___awdiv@divisor,c
  4222  00EAC6  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4223  00EACA  6A08               	clrf	___awdiv@dividend+1,c
  4224  00EACC  ECB3  F070         	call	___awdiv	;wreg free
  4225  00EAD0  0E09               	movlw	9
  4226  00EAD2  2407               	addwf	?___awdiv,w,c
  4227  00EAD4  6E0F               	movwf	___wmul@multiplier,c
  4228  00EAD6  0E00               	movlw	0
  4229  00EAD8  2008               	addwfc	?___awdiv+1,w,c
  4230  00EADA  6E10               	movwf	___wmul@multiplier+1,c
  4231  00EADC  0E00               	movlw	0
  4232  00EADE  6E12               	movwf	___wmul@multiplicand+1,c
  4233  00EAE0  0E03               	movlw	3
  4234  00EAE2  6E11               	movwf	___wmul@multiplicand,c
  4235  00EAE4  ECFA  F06E         	call	___wmul	;wreg free
  4236  00EAE8  0ED6               	movlw	low __npowers_
  4237  00EAEA  240F               	addwf	?___wmul,w,c
  4238  00EAEC  6EF6               	movwf	tblptrl,c
  4239  00EAEE  0EFE               	movlw	high __npowers_
  4240  00EAF0  2010               	addwfc	?___wmul+1,w,c
  4241  00EAF2  6EF7               	movwf	tblptrh,c
  4242  00EAF4                     	if	1	;There are 3 active tblptr bytes
  4243  00EAF4  6AF8               	clrf	tblptru,c
  4244  00EAF6  0E00               	movlw	low (__mediumconst shr (0+16))
  4245  00EAF8  22F8               	addwfc	tblptru,f,c
  4246  00EAFA                     	endif
  4247  00EAFA  0009               	tblrd		*+
  4248  00EAFC  CFF5 F015          	movff	tablat,___ftmul@f1
  4249  00EB00  0009               	tblrd		*+
  4250  00EB02  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4251  00EB06  000A               	tblrd		*-
  4252  00EB08  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4253  00EB0C  EC0E  F072         	call	___ftmul	;wreg free
  4254  00EB10  C015  F02A         	movff	?___ftmul,_fround$859
  4255  00EB14  C016  F02B         	movff	?___ftmul+1,_fround$859+1
  4256  00EB18  C017  F02C         	movff	?___ftmul+2,_fround$859+2
  4257                           
  4258                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4259  00EB1C  C02A  F015         	movff	_fround$859,___ftmul@f1
  4260  00EB20  C02B  F016         	movff	_fround$859+1,___ftmul@f1+1
  4261  00EB24  C02C  F017         	movff	_fround$859+2,___ftmul@f1+2
  4262  00EB28  0E00               	movlw	0
  4263  00EB2A  6E18               	movwf	___ftmul@f2,c
  4264  00EB2C  0E00               	movlw	0
  4265  00EB2E  6E19               	movwf	___ftmul@f2+1,c
  4266  00EB30  0E3F               	movlw	63
  4267  00EB32  6E1A               	movwf	___ftmul@f2+2,c
  4268  00EB34  EC0E  F072         	call	___ftmul	;wreg free
  4269  00EB38  C015  F024         	movff	?___ftmul,?_fround
  4270  00EB3C  C016  F025         	movff	?___ftmul+1,?_fround+1
  4271  00EB40  C017  F026         	movff	?___ftmul+2,?_fround+2
  4272  00EB44  0012               	return	
  4273  00EB46                     l149:
  4274                           
  4275                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4276  00EB46  502D               	movf	fround@prec,w,c
  4277  00EB48  0D03               	mullw	3
  4278  00EB4A  0ED6               	movlw	low __npowers_
  4279  00EB4C  24F3               	addwf	prodl,w,c
  4280  00EB4E  6EF6               	movwf	tblptrl,c
  4281  00EB50  0EFE               	movlw	high __npowers_
  4282  00EB52  20F4               	addwfc	prodh,w,c
  4283  00EB54  6EF7               	movwf	tblptrh,c
  4284  00EB56                     	if	1	;There are 3 active tblptr bytes
  4285  00EB56  6AF8               	clrf	tblptru,c
  4286  00EB58  0E00               	movlw	low (__mediumconst shr (0+16))
  4287  00EB5A  22F8               	addwfc	tblptru,f,c
  4288  00EB5C                     	endif
  4289  00EB5C  0009               	tblrd		*+
  4290  00EB5E  CFF5 F015          	movff	tablat,___ftmul@f1
  4291  00EB62  0009               	tblrd		*+
  4292  00EB64  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4293  00EB68  000A               	tblrd		*-
  4294  00EB6A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4295  00EB6E  0E00               	movlw	0
  4296  00EB70  6E18               	movwf	___ftmul@f2,c
  4297  00EB72  0E00               	movlw	0
  4298  00EB74  6E19               	movwf	___ftmul@f2+1,c
  4299  00EB76  0E3F               	movlw	63
  4300  00EB78  6E1A               	movwf	___ftmul@f2+2,c
  4301  00EB7A  EC0E  F072         	call	___ftmul	;wreg free
  4302  00EB7E  C015  F024         	movff	?___ftmul,?_fround
  4303  00EB82  C016  F025         	movff	?___ftmul+1,?_fround+1
  4304  00EB86  C017  F026         	movff	?___ftmul+2,?_fround+2
  4305  00EB8A  0012               	return	
  4306  00EB8C                     __end_of_fround:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           indf0	equ	0xFEF
  4315                           postinc0	equ	0xFEE
  4316                           fsr0h	equ	0xFEA
  4317                           fsr0l	equ	0xFE9
  4318                           wreg	equ	0xFE8
  4319                           postdec1	equ	0xFE5
  4320                           plusw1	equ	0xFE3
  4321                           fsr1l	equ	0xFE1
  4322                           postinc2	equ	0xFDE
  4323                           postdec2	equ	0xFDD
  4324                           plusw2	equ	0xFDB
  4325                           fsr2h	equ	0xFDA
  4326                           fsr2l	equ	0xFD9
  4327                           status	equ	0xFD8
  4328                           
  4329 ;; *************** function ___wmul *****************
  4330 ;; Defined at:
  4331 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;  multiplier      2   14[COMRAM] unsigned int 
  4334 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;  product         2   18[COMRAM] unsigned int 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  2   14[COMRAM] unsigned int 
  4339 ;; Registers used:
  4340 ;;		wreg, status,2, status,0, prodl, prodh
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4346 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;Total ram usage:        6 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; This function calls:
  4353 ;;		Nothing
  4354 ;; This function is called by:
  4355 ;;		_fround
  4356 ;;		_scale
  4357 ;;		_printf
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text5
  4362  00DDF4                     __ptext5:
  4363                           	opt stack 0
  4364  00DDF4                     ___wmul:
  4365                           	opt stack 28
  4366                           
  4367                           ;incstack = 0
  4368  00DDF4  500F               	movf	___wmul@multiplier,w,c
  4369  00DDF6  0211               	mulwf	___wmul@multiplicand,c
  4370  00DDF8  CFF3 F013          	movff	prodl,___wmul@product
  4371  00DDFC  CFF4 F014          	movff	prodh,___wmul@product+1
  4372  00DE00  500F               	movf	___wmul@multiplier,w,c
  4373  00DE02  0212               	mulwf	___wmul@multiplicand+1,c
  4374  00DE04  50F3               	movf	prodl,w,c
  4375  00DE06  2614               	addwf	___wmul@product+1,f,c
  4376  00DE08  5010               	movf	___wmul@multiplier+1,w,c
  4377  00DE0A  0211               	mulwf	___wmul@multiplicand,c
  4378  00DE0C  50F3               	movf	prodl,w,c
  4379  00DE0E  2614               	addwf	___wmul@product+1,f,c
  4380  00DE10  C013  F00F         	movff	___wmul@product,?___wmul
  4381  00DE14  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4382  00DE18  0012               	return	
  4383  00DE1A                     __end_of___wmul:
  4384                           	opt stack 0
  4385                           tblptru	equ	0xFF8
  4386                           tblptrh	equ	0xFF7
  4387                           tblptrl	equ	0xFF6
  4388                           tablat	equ	0xFF5
  4389                           prodh	equ	0xFF4
  4390                           prodl	equ	0xFF3
  4391                           indf0	equ	0xFEF
  4392                           postinc0	equ	0xFEE
  4393                           fsr0h	equ	0xFEA
  4394                           fsr0l	equ	0xFE9
  4395                           wreg	equ	0xFE8
  4396                           postdec1	equ	0xFE5
  4397                           plusw1	equ	0xFE3
  4398                           fsr1l	equ	0xFE1
  4399                           postinc2	equ	0xFDE
  4400                           postdec2	equ	0xFDD
  4401                           plusw2	equ	0xFDB
  4402                           fsr2h	equ	0xFDA
  4403                           fsr2l	equ	0xFD9
  4404                           status	equ	0xFD8
  4405                           
  4406 ;; *************** function ___ftmul *****************
  4407 ;; Defined at:
  4408 ;;		line 62 in file "/Applications/microchip/xc8/v1.45/sources/common/ftmul.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;  f1              3   20[COMRAM] float 
  4411 ;;  f2              3   23[COMRAM] float 
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  4414 ;;  sign            1   34[COMRAM] unsigned char 
  4415 ;;  cntr            1   33[COMRAM] unsigned char 
  4416 ;;  exp             1   29[COMRAM] unsigned char 
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  3   20[COMRAM] float 
  4419 ;; Registers used:
  4420 ;;		wreg, status,2, status,0, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4426 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;Total ram usage:       15 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    1
  4433 ;; This function calls:
  4434 ;;		___ftpack
  4435 ;; This function is called by:
  4436 ;;		_fround
  4437 ;;		_scale
  4438 ;;		_printf
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           	psect	text6
  4443  00E41C                     __ptext6:
  4444                           	opt stack 0
  4445  00E41C                     ___ftmul:
  4446                           	opt stack 27
  4447                           
  4448                           ;incstack = 0
  4449  00E41C  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  4450  00E420  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4451  00E422  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4452  00E424  3416               	rlcf	___ftmul@f1+1,w,c
  4453  00E426  361B               	rlcf	??___ftmul& (0+255),f,c
  4454  00E428  E301               	bnc	u1771
  4455  00E42A  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4456  00E42C                     u1771:
  4457  00E42C  501B               	movf	??___ftmul,w,c
  4458  00E42E  6E1E               	movwf	___ftmul@exp,c
  4459  00E430  501E               	movf	___ftmul@exp,w,c
  4460  00E432  A4D8               	btfss	status,2,c
  4461  00E434  D007               	goto	l561
  4462  00E436  0E00               	movlw	0
  4463  00E438  6E15               	movwf	?___ftmul,c
  4464  00E43A  0E00               	movlw	0
  4465  00E43C  6E16               	movwf	?___ftmul+1,c
  4466  00E43E  0E00               	movlw	0
  4467  00E440  6E17               	movwf	?___ftmul+2,c
  4468  00E442  0012               	return	
  4469  00E444                     l561:
  4470  00E444  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  4471  00E448  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4472  00E44A  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4473  00E44C  3419               	rlcf	___ftmul@f2+1,w,c
  4474  00E44E  361B               	rlcf	??___ftmul& (0+255),f,c
  4475  00E450  E301               	bnc	u1791
  4476  00E452  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4477  00E454                     u1791:
  4478  00E454  501B               	movf	??___ftmul,w,c
  4479  00E456  6E23               	movwf	___ftmul@sign,c
  4480  00E458  5023               	movf	___ftmul@sign,w,c
  4481  00E45A  A4D8               	btfss	status,2,c
  4482  00E45C  D007               	goto	l563
  4483  00E45E  0E00               	movlw	0
  4484  00E460  6E15               	movwf	?___ftmul,c
  4485  00E462  0E00               	movlw	0
  4486  00E464  6E16               	movwf	?___ftmul+1,c
  4487  00E466  0E00               	movlw	0
  4488  00E468  6E17               	movwf	?___ftmul+2,c
  4489  00E46A  0012               	return	
  4490  00E46C                     l563:
  4491  00E46C  5023               	movf	___ftmul@sign,w,c
  4492  00E46E  0F7B               	addlw	123
  4493  00E470  261E               	addwf	___ftmul@exp,f,c
  4494  00E472  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  4495  00E476  501A               	movf	___ftmul@f2+2,w,c
  4496  00E478  1A23               	xorwf	___ftmul@sign,f,c
  4497  00E47A  0E80               	movlw	128
  4498  00E47C  1623               	andwf	___ftmul@sign,f,c
  4499  00E47E  8E16               	bsf	___ftmul@f1+1,7,c
  4500  00E480  8E19               	bsf	___ftmul@f2+1,7,c
  4501  00E482  0EFF               	movlw	255
  4502  00E484  1618               	andwf	___ftmul@f2,f,c
  4503  00E486  0EFF               	movlw	255
  4504  00E488  1619               	andwf	___ftmul@f2+1,f,c
  4505  00E48A  0E00               	movlw	0
  4506  00E48C  161A               	andwf	___ftmul@f2+2,f,c
  4507  00E48E  0E00               	movlw	0
  4508  00E490  6E1F               	movwf	___ftmul@f3_as_product,c
  4509  00E492  0E00               	movlw	0
  4510  00E494  6E20               	movwf	___ftmul@f3_as_product+1,c
  4511  00E496  0E00               	movlw	0
  4512  00E498  6E21               	movwf	___ftmul@f3_as_product+2,c
  4513  00E49A  0E07               	movlw	7
  4514  00E49C  6E22               	movwf	___ftmul@cntr,c
  4515  00E49E  A015               	btfss	___ftmul@f1,0,c
  4516  00E4A0  D006               	goto	l565
  4517  00E4A2  5018               	movf	___ftmul@f2,w,c
  4518  00E4A4  261F               	addwf	___ftmul@f3_as_product,f,c
  4519  00E4A6  5019               	movf	___ftmul@f2+1,w,c
  4520  00E4A8  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4521  00E4AA  501A               	movf	___ftmul@f2+2,w,c
  4522  00E4AC  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4523  00E4AE                     l565:
  4524  00E4AE  90D8               	bcf	status,0,c
  4525  00E4B0  3217               	rrcf	___ftmul@f1+2,f,c
  4526  00E4B2  3216               	rrcf	___ftmul@f1+1,f,c
  4527  00E4B4  3215               	rrcf	___ftmul@f1,f,c
  4528  00E4B6  90D8               	bcf	status,0,c
  4529  00E4B8  3618               	rlcf	___ftmul@f2,f,c
  4530  00E4BA  3619               	rlcf	___ftmul@f2+1,f,c
  4531  00E4BC  361A               	rlcf	___ftmul@f2+2,f,c
  4532  00E4BE  2E22               	decfsz	___ftmul@cntr,f,c
  4533  00E4C0  D7EE               	goto	l564
  4534  00E4C2  0E09               	movlw	9
  4535  00E4C4  6E22               	movwf	___ftmul@cntr,c
  4536  00E4C6  A015               	btfss	___ftmul@f1,0,c
  4537  00E4C8  D006               	goto	l568
  4538  00E4CA  5018               	movf	___ftmul@f2,w,c
  4539  00E4CC  261F               	addwf	___ftmul@f3_as_product,f,c
  4540  00E4CE  5019               	movf	___ftmul@f2+1,w,c
  4541  00E4D0  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4542  00E4D2  501A               	movf	___ftmul@f2+2,w,c
  4543  00E4D4  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4544  00E4D6                     l568:
  4545  00E4D6  90D8               	bcf	status,0,c
  4546  00E4D8  3217               	rrcf	___ftmul@f1+2,f,c
  4547  00E4DA  3216               	rrcf	___ftmul@f1+1,f,c
  4548  00E4DC  3215               	rrcf	___ftmul@f1,f,c
  4549  00E4DE  90D8               	bcf	status,0,c
  4550  00E4E0  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  4551  00E4E2  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  4552  00E4E4  321F               	rrcf	___ftmul@f3_as_product,f,c
  4553  00E4E6  2E22               	decfsz	___ftmul@cntr,f,c
  4554  00E4E8  D7EE               	goto	l567
  4555  00E4EA  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4556  00E4EE  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4557  00E4F2  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4558  00E4F6  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  4559  00E4FA  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  4560  00E4FE  EC3D  F071         	call	___ftpack	;wreg free
  4561  00E502  C001  F015         	movff	?___ftpack,?___ftmul
  4562  00E506  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  4563  00E50A  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  4564  00E50E  0012               	return	
  4565  00E510                     __end_of___ftmul:
  4566                           	opt stack 0
  4567                           tblptru	equ	0xFF8
  4568                           tblptrh	equ	0xFF7
  4569                           tblptrl	equ	0xFF6
  4570                           tablat	equ	0xFF5
  4571                           prodh	equ	0xFF4
  4572                           prodl	equ	0xFF3
  4573                           indf0	equ	0xFEF
  4574                           postinc0	equ	0xFEE
  4575                           fsr0h	equ	0xFEA
  4576                           fsr0l	equ	0xFE9
  4577                           wreg	equ	0xFE8
  4578                           postdec1	equ	0xFE5
  4579                           plusw1	equ	0xFE3
  4580                           fsr1l	equ	0xFE1
  4581                           postinc2	equ	0xFDE
  4582                           postdec2	equ	0xFDD
  4583                           plusw2	equ	0xFDB
  4584                           fsr2h	equ	0xFDA
  4585                           fsr2l	equ	0xFD9
  4586                           status	equ	0xFD8
  4587                           
  4588 ;; *************** function ___awmod *****************
  4589 ;; Defined at:
  4590 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
  4591 ;; Parameters:    Size  Location     Type
  4592 ;;  dividend        2    0[COMRAM] int 
  4593 ;;  divisor         2    2[COMRAM] int 
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;  sign            1    5[COMRAM] unsigned char 
  4596 ;;  counter         1    4[COMRAM] unsigned char 
  4597 ;; Return value:  Size  Location     Type
  4598 ;;                  2    0[COMRAM] int 
  4599 ;; Registers used:
  4600 ;;		wreg, status,2, status,0
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4606 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4607 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4609 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4610 ;;Total ram usage:        6 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; This function calls:
  4613 ;;		Nothing
  4614 ;; This function is called by:
  4615 ;;		_main
  4616 ;;		_fround
  4617 ;;		_scale
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           	psect	text7
  4622  00DFF6                     __ptext7:
  4623                           	opt stack 0
  4624  00DFF6                     ___awmod:
  4625                           	opt stack 28
  4626                           
  4627                           ;incstack = 0
  4628  00DFF6  0E00               	movlw	0
  4629  00DFF8  6E06               	movwf	___awmod@sign,c
  4630  00DFFA  AE02               	btfss	___awmod@dividend+1,7,c
  4631  00DFFC  D006               	goto	l414
  4632  00DFFE  6C01               	negf	___awmod@dividend,c
  4633  00E000  1E02               	comf	___awmod@dividend+1,f,c
  4634  00E002  B0D8               	btfsc	status,0,c
  4635  00E004  2A02               	incf	___awmod@dividend+1,f,c
  4636  00E006  0E01               	movlw	1
  4637  00E008  6E06               	movwf	___awmod@sign,c
  4638  00E00A                     l414:
  4639  00E00A  AE04               	btfss	___awmod@divisor+1,7,c
  4640  00E00C  D004               	goto	l415
  4641  00E00E  6C03               	negf	___awmod@divisor,c
  4642  00E010  1E04               	comf	___awmod@divisor+1,f,c
  4643  00E012  B0D8               	btfsc	status,0,c
  4644  00E014  2A04               	incf	___awmod@divisor+1,f,c
  4645  00E016                     l415:
  4646  00E016  5003               	movf	___awmod@divisor,w,c
  4647  00E018  1004               	iorwf	___awmod@divisor+1,w,c
  4648  00E01A  B4D8               	btfsc	status,2,c
  4649  00E01C  D018               	goto	l422
  4650  00E01E  0E01               	movlw	1
  4651  00E020  6E05               	movwf	___awmod@counter,c
  4652  00E022  D004               	goto	l417
  4653  00E024  90D8               	bcf	status,0,c
  4654  00E026  3603               	rlcf	___awmod@divisor,f,c
  4655  00E028  3604               	rlcf	___awmod@divisor+1,f,c
  4656  00E02A  2A05               	incf	___awmod@counter,f,c
  4657  00E02C                     l417:
  4658  00E02C  AE04               	btfss	___awmod@divisor+1,7,c
  4659  00E02E  D7FA               	goto	l418
  4660  00E030                     u1920:
  4661  00E030  5003               	movf	___awmod@divisor,w,c
  4662  00E032  5C01               	subwf	___awmod@dividend,w,c
  4663  00E034  5004               	movf	___awmod@divisor+1,w,c
  4664  00E036  5802               	subwfb	___awmod@dividend+1,w,c
  4665  00E038  A0D8               	btfss	status,0,c
  4666  00E03A  D004               	goto	l421
  4667  00E03C  5003               	movf	___awmod@divisor,w,c
  4668  00E03E  5E01               	subwf	___awmod@dividend,f,c
  4669  00E040  5004               	movf	___awmod@divisor+1,w,c
  4670  00E042  5A02               	subwfb	___awmod@dividend+1,f,c
  4671  00E044                     l421:
  4672  00E044  90D8               	bcf	status,0,c
  4673  00E046  3204               	rrcf	___awmod@divisor+1,f,c
  4674  00E048  3203               	rrcf	___awmod@divisor,f,c
  4675  00E04A  2E05               	decfsz	___awmod@counter,f,c
  4676  00E04C  D7F1               	goto	u1920
  4677  00E04E                     l422:
  4678  00E04E  5006               	movf	___awmod@sign,w,c
  4679  00E050  B4D8               	btfsc	status,2,c
  4680  00E052  D004               	goto	l423
  4681  00E054  6C01               	negf	___awmod@dividend,c
  4682  00E056  1E02               	comf	___awmod@dividend+1,f,c
  4683  00E058  B0D8               	btfsc	status,0,c
  4684  00E05A  2A02               	incf	___awmod@dividend+1,f,c
  4685  00E05C                     l423:
  4686  00E05C  C001  F001         	movff	___awmod@dividend,?___awmod
  4687  00E060  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4688  00E064  0012               	return	
  4689  00E066                     __end_of___awmod:
  4690                           	opt stack 0
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           prodh	equ	0xFF4
  4696                           prodl	equ	0xFF3
  4697                           indf0	equ	0xFEF
  4698                           postinc0	equ	0xFEE
  4699                           fsr0h	equ	0xFEA
  4700                           fsr0l	equ	0xFE9
  4701                           wreg	equ	0xFE8
  4702                           postdec1	equ	0xFE5
  4703                           plusw1	equ	0xFE3
  4704                           fsr1l	equ	0xFE1
  4705                           postinc2	equ	0xFDE
  4706                           postdec2	equ	0xFDD
  4707                           plusw2	equ	0xFDB
  4708                           fsr2h	equ	0xFDA
  4709                           fsr2l	equ	0xFD9
  4710                           status	equ	0xFD8
  4711                           
  4712 ;; *************** function ___awdiv *****************
  4713 ;; Defined at:
  4714 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;  dividend        2    6[COMRAM] int 
  4717 ;;  divisor         2    8[COMRAM] int 
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;  quotient        2   12[COMRAM] int 
  4720 ;;  sign            1   11[COMRAM] unsigned char 
  4721 ;;  counter         1   10[COMRAM] unsigned char 
  4722 ;; Return value:  Size  Location     Type
  4723 ;;                  2    6[COMRAM] int 
  4724 ;; Registers used:
  4725 ;;		wreg, status,2, status,0
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4731 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;Total ram usage:        8 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; This function calls:
  4738 ;;		Nothing
  4739 ;; This function is called by:
  4740 ;;		_fround
  4741 ;;		_scale
  4742 ;;		_printf
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           	psect	text8
  4747  00E166                     __ptext8:
  4748                           	opt stack 0
  4749  00E166                     ___awdiv:
  4750                           	opt stack 28
  4751                           
  4752                           ;incstack = 0
  4753  00E166  0E00               	movlw	0
  4754  00E168  6E0C               	movwf	___awdiv@sign,c
  4755  00E16A  AE0A               	btfss	___awdiv@divisor+1,7,c
  4756  00E16C  D006               	goto	l401
  4757  00E16E  6C09               	negf	___awdiv@divisor,c
  4758  00E170  1E0A               	comf	___awdiv@divisor+1,f,c
  4759  00E172  B0D8               	btfsc	status,0,c
  4760  00E174  2A0A               	incf	___awdiv@divisor+1,f,c
  4761  00E176  0E01               	movlw	1
  4762  00E178  6E0C               	movwf	___awdiv@sign,c
  4763  00E17A                     l401:
  4764  00E17A  AE08               	btfss	___awdiv@dividend+1,7,c
  4765  00E17C  D006               	goto	l402
  4766  00E17E  6C07               	negf	___awdiv@dividend,c
  4767  00E180  1E08               	comf	___awdiv@dividend+1,f,c
  4768  00E182  B0D8               	btfsc	status,0,c
  4769  00E184  2A08               	incf	___awdiv@dividend+1,f,c
  4770  00E186  0E01               	movlw	1
  4771  00E188  1A0C               	xorwf	___awdiv@sign,f,c
  4772  00E18A                     l402:
  4773  00E18A  0E00               	movlw	0
  4774  00E18C  6E0E               	movwf	___awdiv@quotient+1,c
  4775  00E18E  0E00               	movlw	0
  4776  00E190  6E0D               	movwf	___awdiv@quotient,c
  4777  00E192  5009               	movf	___awdiv@divisor,w,c
  4778  00E194  100A               	iorwf	___awdiv@divisor+1,w,c
  4779  00E196  B4D8               	btfsc	status,2,c
  4780  00E198  D01C               	goto	l409
  4781  00E19A  0E01               	movlw	1
  4782  00E19C  6E0B               	movwf	___awdiv@counter,c
  4783  00E19E  D004               	goto	l404
  4784  00E1A0  90D8               	bcf	status,0,c
  4785  00E1A2  3609               	rlcf	___awdiv@divisor,f,c
  4786  00E1A4  360A               	rlcf	___awdiv@divisor+1,f,c
  4787  00E1A6  2A0B               	incf	___awdiv@counter,f,c
  4788  00E1A8                     l404:
  4789  00E1A8  AE0A               	btfss	___awdiv@divisor+1,7,c
  4790  00E1AA  D7FA               	goto	l405
  4791  00E1AC                     u1860:
  4792  00E1AC  90D8               	bcf	status,0,c
  4793  00E1AE  360D               	rlcf	___awdiv@quotient,f,c
  4794  00E1B0  360E               	rlcf	___awdiv@quotient+1,f,c
  4795  00E1B2  5009               	movf	___awdiv@divisor,w,c
  4796  00E1B4  5C07               	subwf	___awdiv@dividend,w,c
  4797  00E1B6  500A               	movf	___awdiv@divisor+1,w,c
  4798  00E1B8  5808               	subwfb	___awdiv@dividend+1,w,c
  4799  00E1BA  A0D8               	btfss	status,0,c
  4800  00E1BC  D005               	goto	l408
  4801  00E1BE  5009               	movf	___awdiv@divisor,w,c
  4802  00E1C0  5E07               	subwf	___awdiv@dividend,f,c
  4803  00E1C2  500A               	movf	___awdiv@divisor+1,w,c
  4804  00E1C4  5A08               	subwfb	___awdiv@dividend+1,f,c
  4805  00E1C6  800D               	bsf	___awdiv@quotient,0,c
  4806  00E1C8                     l408:
  4807  00E1C8  90D8               	bcf	status,0,c
  4808  00E1CA  320A               	rrcf	___awdiv@divisor+1,f,c
  4809  00E1CC  3209               	rrcf	___awdiv@divisor,f,c
  4810  00E1CE  2E0B               	decfsz	___awdiv@counter,f,c
  4811  00E1D0  D7ED               	goto	u1860
  4812  00E1D2                     l409:
  4813  00E1D2  500C               	movf	___awdiv@sign,w,c
  4814  00E1D4  B4D8               	btfsc	status,2,c
  4815  00E1D6  D004               	goto	l410
  4816  00E1D8  6C0D               	negf	___awdiv@quotient,c
  4817  00E1DA  1E0E               	comf	___awdiv@quotient+1,f,c
  4818  00E1DC  B0D8               	btfsc	status,0,c
  4819  00E1DE  2A0E               	incf	___awdiv@quotient+1,f,c
  4820  00E1E0                     l410:
  4821  00E1E0  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4822  00E1E4  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4823  00E1E8  0012               	return	
  4824  00E1EA                     __end_of___awdiv:
  4825                           	opt stack 0
  4826                           tblptru	equ	0xFF8
  4827                           tblptrh	equ	0xFF7
  4828                           tblptrl	equ	0xFF6
  4829                           tablat	equ	0xFF5
  4830                           prodh	equ	0xFF4
  4831                           prodl	equ	0xFF3
  4832                           indf0	equ	0xFEF
  4833                           postinc0	equ	0xFEE
  4834                           fsr0h	equ	0xFEA
  4835                           fsr0l	equ	0xFE9
  4836                           wreg	equ	0xFE8
  4837                           postdec1	equ	0xFE5
  4838                           plusw1	equ	0xFE3
  4839                           fsr1l	equ	0xFE1
  4840                           postinc2	equ	0xFDE
  4841                           postdec2	equ	0xFDD
  4842                           plusw2	equ	0xFDB
  4843                           fsr2h	equ	0xFDA
  4844                           fsr2l	equ	0xFD9
  4845                           status	equ	0xFD8
  4846                           
  4847 ;; *************** function __tdiv_to_l_ *****************
  4848 ;; Defined at:
  4849 ;;		line 60 in file "/Applications/microchip/xc8/v1.45/sources/common/ftdivl.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;  f1              3    0[COMRAM] float 
  4852 ;;  f2              3    3[COMRAM] float 
  4853 ;; Auto vars:     Size  Location     Type
  4854 ;;  quot            4    9[COMRAM] unsigned long 
  4855 ;;  exp1            1   14[COMRAM] unsigned char 
  4856 ;;  cntr            1   13[COMRAM] unsigned char 
  4857 ;; Return value:  Size  Location     Type
  4858 ;;                  4    0[COMRAM] unsigned long 
  4859 ;; Registers used:
  4860 ;;		wreg, status,2, status,0
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4866 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;Total ram usage:       15 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; This function calls:
  4873 ;;		Nothing
  4874 ;; This function is called by:
  4875 ;;		_printf
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           	psect	text9
  4880  00E638                     __ptext9:
  4881                           	opt stack 0
  4882  00E638                     __tdiv_to_l_:
  4883                           	opt stack 29
  4884                           
  4885                           ;incstack = 0
  4886  00E638  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4887  00E63C  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4888  00E63E  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4889  00E640  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4890  00E642  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4891  00E644  E301               	bnc	u2041
  4892  00E646  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4893  00E648                     u2041:
  4894  00E648  5007               	movf	??__tdiv_to_l_,w,c
  4895  00E64A  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4896  00E64C  500F               	movf	__tdiv_to_l_@exp1,w,c
  4897  00E64E  A4D8               	btfss	status,2,c
  4898  00E650  D009               	goto	l537
  4899  00E652  0E00               	movlw	0
  4900  00E654  6E01               	movwf	?__tdiv_to_l_,c
  4901  00E656  0E00               	movlw	0
  4902  00E658  6E02               	movwf	?__tdiv_to_l_+1,c
  4903  00E65A  0E00               	movlw	0
  4904  00E65C  6E03               	movwf	?__tdiv_to_l_+2,c
  4905  00E65E  0E00               	movlw	0
  4906  00E660  6E04               	movwf	?__tdiv_to_l_+3,c
  4907  00E662  0012               	return	
  4908  00E664                     l537:
  4909  00E664  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4910  00E668  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4911  00E66A  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4912  00E66C  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4913  00E66E  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4914  00E670  E301               	bnc	u2061
  4915  00E672  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4916  00E674                     u2061:
  4917  00E674  5007               	movf	??__tdiv_to_l_,w,c
  4918  00E676  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4919  00E678  500E               	movf	__tdiv_to_l_@cntr,w,c
  4920  00E67A  A4D8               	btfss	status,2,c
  4921  00E67C  D009               	goto	l539
  4922  00E67E  0E00               	movlw	0
  4923  00E680  6E01               	movwf	?__tdiv_to_l_,c
  4924  00E682  0E00               	movlw	0
  4925  00E684  6E02               	movwf	?__tdiv_to_l_+1,c
  4926  00E686  0E00               	movlw	0
  4927  00E688  6E03               	movwf	?__tdiv_to_l_+2,c
  4928  00E68A  0E00               	movlw	0
  4929  00E68C  6E04               	movwf	?__tdiv_to_l_+3,c
  4930  00E68E  0012               	return	
  4931  00E690                     l539:
  4932  00E690  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4933  00E692  0EFF               	movlw	255
  4934  00E694  1601               	andwf	__tdiv_to_l_@f1,f,c
  4935  00E696  0EFF               	movlw	255
  4936  00E698  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4937  00E69A  0E00               	movlw	0
  4938  00E69C  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4939  00E69E  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4940  00E6A0  0EFF               	movlw	255
  4941  00E6A2  1604               	andwf	__tdiv_to_l_@f2,f,c
  4942  00E6A4  0EFF               	movlw	255
  4943  00E6A6  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4944  00E6A8  0E00               	movlw	0
  4945  00E6AA  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4946  00E6AC  0E00               	movlw	0
  4947  00E6AE  6E0A               	movwf	__tdiv_to_l_@quot,c
  4948  00E6B0  0E00               	movlw	0
  4949  00E6B2  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4950  00E6B4  0E00               	movlw	0
  4951  00E6B6  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4952  00E6B8  0E00               	movlw	0
  4953  00E6BA  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4954  00E6BC  0E7F               	movlw	127
  4955  00E6BE  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4956  00E6C0  500E               	movf	__tdiv_to_l_@cntr,w,c
  4957  00E6C2  0F98               	addlw	152
  4958  00E6C4  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4959  00E6C6  0E18               	movlw	24
  4960  00E6C8  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4961  00E6CA                     l540:
  4962  00E6CA  90D8               	bcf	status,0,c
  4963  00E6CC  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4964  00E6CE  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4965  00E6D0  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4966  00E6D2  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4967  00E6D4  5004               	movf	__tdiv_to_l_@f2,w,c
  4968  00E6D6  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4969  00E6D8  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4970  00E6DA  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4971  00E6DC  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4972  00E6DE  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4973  00E6E0  A0D8               	btfss	status,0,c
  4974  00E6E2  D007               	goto	l541
  4975  00E6E4  5004               	movf	__tdiv_to_l_@f2,w,c
  4976  00E6E6  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4977  00E6E8  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4978  00E6EA  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4979  00E6EC  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4980  00E6EE  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4981  00E6F0  800A               	bsf	__tdiv_to_l_@quot,0,c
  4982  00E6F2                     l541:
  4983  00E6F2  90D8               	bcf	status,0,c
  4984  00E6F4  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4985  00E6F6  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4986  00E6F8  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4987  00E6FA  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4988  00E6FC  D7E6               	goto	l540
  4989  00E6FE  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4990  00E700  D016               	goto	l543
  4991  00E702  500F               	movf	__tdiv_to_l_@exp1,w,c
  4992  00E704  0A80               	xorlw	128
  4993  00E706  0F97               	addlw	151
  4994  00E708  B0D8               	btfsc	status,0,c
  4995  00E70A  D009               	goto	l544
  4996  00E70C  0E00               	movlw	0
  4997  00E70E  6E01               	movwf	?__tdiv_to_l_,c
  4998  00E710  0E00               	movlw	0
  4999  00E712  6E02               	movwf	?__tdiv_to_l_+1,c
  5000  00E714  0E00               	movlw	0
  5001  00E716  6E03               	movwf	?__tdiv_to_l_+2,c
  5002  00E718  0E00               	movlw	0
  5003  00E71A  6E04               	movwf	?__tdiv_to_l_+3,c
  5004  00E71C  0012               	return	
  5005  00E71E                     l544:
  5006  00E71E  90D8               	bcf	status,0,c
  5007  00E720  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5008  00E722  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5009  00E724  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5010  00E726  320A               	rrcf	__tdiv_to_l_@quot,f,c
  5011  00E728  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5012  00E72A  D7F9               	goto	l544
  5013  00E72C  D015               	goto	u2120
  5014  00E72E                     l543:
  5015  00E72E  0E17               	movlw	23
  5016  00E730  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5017  00E732  D00F               	goto	l549
  5018  00E734  0E00               	movlw	0
  5019  00E736  6E01               	movwf	?__tdiv_to_l_,c
  5020  00E738  0E00               	movlw	0
  5021  00E73A  6E02               	movwf	?__tdiv_to_l_+1,c
  5022  00E73C  0E00               	movlw	0
  5023  00E73E  6E03               	movwf	?__tdiv_to_l_+2,c
  5024  00E740  0E00               	movlw	0
  5025  00E742  6E04               	movwf	?__tdiv_to_l_+3,c
  5026  00E744  0012               	return	
  5027  00E746  90D8               	bcf	status,0,c
  5028  00E748  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5029  00E74A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5030  00E74C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5031  00E74E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5032  00E750  060F               	decf	__tdiv_to_l_@exp1,f,c
  5033  00E752                     l549:
  5034  00E752  500F               	movf	__tdiv_to_l_@exp1,w,c
  5035  00E754  A4D8               	btfss	status,2,c
  5036  00E756  D7F7               	goto	l550
  5037  00E758                     u2120:
  5038  00E758  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5039  00E75C  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5040  00E760  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5041  00E764  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5042  00E768  0012               	return		;funcret
  5043  00E76A                     __end_of__tdiv_to_l_:
  5044                           	opt stack 0
  5045                           tblptru	equ	0xFF8
  5046                           tblptrh	equ	0xFF7
  5047                           tblptrl	equ	0xFF6
  5048                           tablat	equ	0xFF5
  5049                           prodh	equ	0xFF4
  5050                           prodl	equ	0xFF3
  5051                           indf0	equ	0xFEF
  5052                           postinc0	equ	0xFEE
  5053                           fsr0h	equ	0xFEA
  5054                           fsr0l	equ	0xFE9
  5055                           wreg	equ	0xFE8
  5056                           postdec1	equ	0xFE5
  5057                           plusw1	equ	0xFE3
  5058                           fsr1l	equ	0xFE1
  5059                           postinc2	equ	0xFDE
  5060                           postdec2	equ	0xFDD
  5061                           plusw2	equ	0xFDB
  5062                           fsr2h	equ	0xFDA
  5063                           fsr2l	equ	0xFD9
  5064                           status	equ	0xFD8
  5065                           
  5066 ;; *************** function __div_to_l_ *****************
  5067 ;; Defined at:
  5068 ;;		line 60 in file "/Applications/microchip/xc8/v1.45/sources/common/fldivl.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  f1              3    0[COMRAM] unsigned long 
  5071 ;;  f2              3    3[COMRAM] unsigned long 
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  quot            4    6[COMRAM] unsigned long 
  5074 ;;  exp1            1   11[COMRAM] unsigned char 
  5075 ;;  cntr            1   10[COMRAM] unsigned char 
  5076 ;; Return value:  Size  Location     Type
  5077 ;;                  4    0[COMRAM] unsigned long 
  5078 ;; Registers used:
  5079 ;;		wreg, status,2, status,0
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5085 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5086 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5088 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5089 ;;Total ram usage:       12 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; This function calls:
  5092 ;;		Nothing
  5093 ;; This function is called by:
  5094 ;;		_printf
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           	psect	text10
  5099  00E510                     __ptext10:
  5100                           	opt stack 0
  5101  00E510                     __div_to_l_:
  5102                           	opt stack 29
  5103                           
  5104                           ;incstack = 0
  5105  00E510  3403               	rlcf	__div_to_l_@f1+2,w,c
  5106  00E512  3404               	rlcf	__div_to_l_@f1+3,w,c
  5107  00E514  6E0C               	movwf	__div_to_l_@exp1,c
  5108  00E516  500C               	movf	__div_to_l_@exp1,w,c
  5109  00E518  A4D8               	btfss	status,2,c
  5110  00E51A  D009               	goto	l433
  5111  00E51C  0E00               	movlw	0
  5112  00E51E  6E01               	movwf	?__div_to_l_,c
  5113  00E520  0E00               	movlw	0
  5114  00E522  6E02               	movwf	?__div_to_l_+1,c
  5115  00E524  0E00               	movlw	0
  5116  00E526  6E03               	movwf	?__div_to_l_+2,c
  5117  00E528  0E00               	movlw	0
  5118  00E52A  6E04               	movwf	?__div_to_l_+3,c
  5119  00E52C  0012               	return	
  5120  00E52E                     l433:
  5121  00E52E  3406               	rlcf	__div_to_l_@f2+2,w,c
  5122  00E530  3407               	rlcf	__div_to_l_@f2+3,w,c
  5123  00E532  6E0B               	movwf	__div_to_l_@cntr,c
  5124  00E534  500B               	movf	__div_to_l_@cntr,w,c
  5125  00E536  A4D8               	btfss	status,2,c
  5126  00E538  D009               	goto	l435
  5127  00E53A  0E00               	movlw	0
  5128  00E53C  6E01               	movwf	?__div_to_l_,c
  5129  00E53E  0E00               	movlw	0
  5130  00E540  6E02               	movwf	?__div_to_l_+1,c
  5131  00E542  0E00               	movlw	0
  5132  00E544  6E03               	movwf	?__div_to_l_+2,c
  5133  00E546  0E00               	movlw	0
  5134  00E548  6E04               	movwf	?__div_to_l_+3,c
  5135  00E54A  0012               	return	
  5136  00E54C                     l435:
  5137  00E54C  8E03               	bsf	__div_to_l_@f1+2,7,c
  5138  00E54E  0EFF               	movlw	255
  5139  00E550  1601               	andwf	__div_to_l_@f1,f,c
  5140  00E552  0EFF               	movlw	255
  5141  00E554  1602               	andwf	__div_to_l_@f1+1,f,c
  5142  00E556  0EFF               	movlw	255
  5143  00E558  1603               	andwf	__div_to_l_@f1+2,f,c
  5144  00E55A  0E00               	movlw	0
  5145  00E55C  1604               	andwf	__div_to_l_@f1+3,f,c
  5146  00E55E  8E06               	bsf	__div_to_l_@f2+2,7,c
  5147  00E560  0EFF               	movlw	255
  5148  00E562  1604               	andwf	__div_to_l_@f2,f,c
  5149  00E564  0EFF               	movlw	255
  5150  00E566  1605               	andwf	__div_to_l_@f2+1,f,c
  5151  00E568  0EFF               	movlw	255
  5152  00E56A  1606               	andwf	__div_to_l_@f2+2,f,c
  5153  00E56C  0E00               	movlw	0
  5154  00E56E  1607               	andwf	__div_to_l_@f2+3,f,c
  5155  00E570  0E00               	movlw	0
  5156  00E572  6E07               	movwf	__div_to_l_@quot,c
  5157  00E574  0E00               	movlw	0
  5158  00E576  6E08               	movwf	__div_to_l_@quot+1,c
  5159  00E578  0E00               	movlw	0
  5160  00E57A  6E09               	movwf	__div_to_l_@quot+2,c
  5161  00E57C  0E00               	movlw	0
  5162  00E57E  6E0A               	movwf	__div_to_l_@quot+3,c
  5163  00E580  0E7F               	movlw	127
  5164  00E582  5E0C               	subwf	__div_to_l_@exp1,f,c
  5165  00E584  500B               	movf	__div_to_l_@cntr,w,c
  5166  00E586  0FA0               	addlw	160
  5167  00E588  5E0C               	subwf	__div_to_l_@exp1,f,c
  5168  00E58A  0E20               	movlw	32
  5169  00E58C  6E0B               	movwf	__div_to_l_@cntr,c
  5170  00E58E  90D8               	bcf	status,0,c
  5171  00E590  3607               	rlcf	__div_to_l_@quot,f,c
  5172  00E592  3608               	rlcf	__div_to_l_@quot+1,f,c
  5173  00E594  3609               	rlcf	__div_to_l_@quot+2,f,c
  5174  00E596  360A               	rlcf	__div_to_l_@quot+3,f,c
  5175  00E598  5004               	movf	__div_to_l_@f2,w,c
  5176  00E59A  5C01               	subwf	__div_to_l_@f1,w,c
  5177  00E59C  5005               	movf	__div_to_l_@f2+1,w,c
  5178  00E59E  5802               	subwfb	__div_to_l_@f1+1,w,c
  5179  00E5A0  5006               	movf	__div_to_l_@f2+2,w,c
  5180  00E5A2  5803               	subwfb	__div_to_l_@f1+2,w,c
  5181  00E5A4  5007               	movf	__div_to_l_@f2+3,w,c
  5182  00E5A6  5804               	subwfb	__div_to_l_@f1+3,w,c
  5183  00E5A8  A0D8               	btfss	status,0,c
  5184  00E5AA  D009               	goto	l437
  5185  00E5AC  5004               	movf	__div_to_l_@f2,w,c
  5186  00E5AE  5E01               	subwf	__div_to_l_@f1,f,c
  5187  00E5B0  5005               	movf	__div_to_l_@f2+1,w,c
  5188  00E5B2  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5189  00E5B4  5006               	movf	__div_to_l_@f2+2,w,c
  5190  00E5B6  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5191  00E5B8  5007               	movf	__div_to_l_@f2+3,w,c
  5192  00E5BA  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5193  00E5BC  8007               	bsf	__div_to_l_@quot,0,c
  5194  00E5BE                     l437:
  5195  00E5BE  90D8               	bcf	status,0,c
  5196  00E5C0  3601               	rlcf	__div_to_l_@f1,f,c
  5197  00E5C2  3602               	rlcf	__div_to_l_@f1+1,f,c
  5198  00E5C4  3603               	rlcf	__div_to_l_@f1+2,f,c
  5199  00E5C6  3604               	rlcf	__div_to_l_@f1+3,f,c
  5200  00E5C8  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5201  00E5CA  D7E1               	goto	l436
  5202  00E5CC  AE0C               	btfss	__div_to_l_@exp1,7,c
  5203  00E5CE  D016               	goto	l439
  5204  00E5D0  500C               	movf	__div_to_l_@exp1,w,c
  5205  00E5D2  0A80               	xorlw	128
  5206  00E5D4  0F9F               	addlw	159
  5207  00E5D6  B0D8               	btfsc	status,0,c
  5208  00E5D8  D009               	goto	l440
  5209  00E5DA  0E00               	movlw	0
  5210  00E5DC  6E01               	movwf	?__div_to_l_,c
  5211  00E5DE  0E00               	movlw	0
  5212  00E5E0  6E02               	movwf	?__div_to_l_+1,c
  5213  00E5E2  0E00               	movlw	0
  5214  00E5E4  6E03               	movwf	?__div_to_l_+2,c
  5215  00E5E6  0E00               	movlw	0
  5216  00E5E8  6E04               	movwf	?__div_to_l_+3,c
  5217  00E5EA  0012               	return	
  5218  00E5EC                     l440:
  5219  00E5EC  90D8               	bcf	status,0,c
  5220  00E5EE  320A               	rrcf	__div_to_l_@quot+3,f,c
  5221  00E5F0  3209               	rrcf	__div_to_l_@quot+2,f,c
  5222  00E5F2  3208               	rrcf	__div_to_l_@quot+1,f,c
  5223  00E5F4  3207               	rrcf	__div_to_l_@quot,f,c
  5224  00E5F6  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5225  00E5F8  D7F9               	goto	l440
  5226  00E5FA  D015               	goto	u2190
  5227  00E5FC                     l439:
  5228  00E5FC  0E1F               	movlw	31
  5229  00E5FE  640C               	cpfsgt	__div_to_l_@exp1,c
  5230  00E600  D00F               	goto	l445
  5231  00E602  0E00               	movlw	0
  5232  00E604  6E01               	movwf	?__div_to_l_,c
  5233  00E606  0E00               	movlw	0
  5234  00E608  6E02               	movwf	?__div_to_l_+1,c
  5235  00E60A  0E00               	movlw	0
  5236  00E60C  6E03               	movwf	?__div_to_l_+2,c
  5237  00E60E  0E00               	movlw	0
  5238  00E610  6E04               	movwf	?__div_to_l_+3,c
  5239  00E612  0012               	return	
  5240  00E614  90D8               	bcf	status,0,c
  5241  00E616  3607               	rlcf	__div_to_l_@quot,f,c
  5242  00E618  3608               	rlcf	__div_to_l_@quot+1,f,c
  5243  00E61A  3609               	rlcf	__div_to_l_@quot+2,f,c
  5244  00E61C  360A               	rlcf	__div_to_l_@quot+3,f,c
  5245  00E61E  060C               	decf	__div_to_l_@exp1,f,c
  5246  00E620                     l445:
  5247  00E620  500C               	movf	__div_to_l_@exp1,w,c
  5248  00E622  A4D8               	btfss	status,2,c
  5249  00E624  D7F7               	goto	l446
  5250  00E626                     u2190:
  5251  00E626  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5252  00E62A  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5253  00E62E  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5254  00E632  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5255  00E636  0012               	return		;funcret
  5256  00E638                     __end_of__div_to_l_:
  5257                           	opt stack 0
  5258                           tblptru	equ	0xFF8
  5259                           tblptrh	equ	0xFF7
  5260                           tblptrl	equ	0xFF6
  5261                           tablat	equ	0xFF5
  5262                           prodh	equ	0xFF4
  5263                           prodl	equ	0xFF3
  5264                           indf0	equ	0xFEF
  5265                           postinc0	equ	0xFEE
  5266                           fsr0h	equ	0xFEA
  5267                           fsr0l	equ	0xFE9
  5268                           wreg	equ	0xFE8
  5269                           postdec1	equ	0xFE5
  5270                           plusw1	equ	0xFE3
  5271                           fsr1l	equ	0xFE1
  5272                           postinc2	equ	0xFDE
  5273                           postdec2	equ	0xFDD
  5274                           plusw2	equ	0xFDB
  5275                           fsr2h	equ	0xFDA
  5276                           fsr2l	equ	0xFD9
  5277                           status	equ	0xFD8
  5278                           
  5279 ;; *************** function ___lltoft *****************
  5280 ;; Defined at:
  5281 ;;		line 35 in file "/Applications/microchip/xc8/v1.45/sources/common/lltoft.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  c               4    8[COMRAM] unsigned long 
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;  exp             1   16[COMRAM] unsigned char 
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  3    8[COMRAM] float 
  5288 ;; Registers used:
  5289 ;;		wreg, status,2, status,0, cstack
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5296 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5297 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5298 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5299 ;;Total ram usage:        9 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:    1
  5302 ;; This function calls:
  5303 ;;		___ftpack
  5304 ;; This function is called by:
  5305 ;;		_printf
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           	psect	text11
  5310  00DF34                     __ptext11:
  5311                           	opt stack 0
  5312  00DF34                     ___lltoft:
  5313                           	opt stack 28
  5314                           
  5315                           ;incstack = 0
  5316  00DF34  0E8E               	movlw	142
  5317  00DF36  6E11               	movwf	___lltoft@exp,c
  5318  00DF38  D006               	goto	l639
  5319  00DF3A  90D8               	bcf	status,0,c
  5320  00DF3C  320C               	rrcf	___lltoft@c+3,f,c
  5321  00DF3E  320B               	rrcf	___lltoft@c+2,f,c
  5322  00DF40  320A               	rrcf	___lltoft@c+1,f,c
  5323  00DF42  3209               	rrcf	___lltoft@c,f,c
  5324  00DF44  2A11               	incf	___lltoft@exp,f,c
  5325  00DF46                     l639:
  5326  00DF46  0E00               	movlw	0
  5327  00DF48  1409               	andwf	___lltoft@c,w,c
  5328  00DF4A  6E0D               	movwf	??___lltoft& (0+255),c
  5329  00DF4C  0E00               	movlw	0
  5330  00DF4E  140A               	andwf	___lltoft@c+1,w,c
  5331  00DF50  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  5332  00DF52  0E00               	movlw	0
  5333  00DF54  140B               	andwf	___lltoft@c+2,w,c
  5334  00DF56  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  5335  00DF58  0EFF               	movlw	255
  5336  00DF5A  140C               	andwf	___lltoft@c+3,w,c
  5337  00DF5C  6E10               	movwf	(??___lltoft+3)& (0+255),c
  5338  00DF5E  500D               	movf	??___lltoft,w,c
  5339  00DF60  100E               	iorwf	??___lltoft+1,w,c
  5340  00DF62  100F               	iorwf	??___lltoft+2,w,c
  5341  00DF64  1010               	iorwf	??___lltoft+3,w,c
  5342  00DF66  A4D8               	btfss	status,2,c
  5343  00DF68  D7E8               	goto	l640
  5344  00DF6A  C009  F001         	movff	___lltoft@c,___ftpack@arg
  5345  00DF6E  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5346  00DF72  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5347  00DF76  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  5348  00DF7A  0E00               	movlw	0
  5349  00DF7C  6E05               	movwf	___ftpack@sign,c
  5350  00DF7E  EC3D  F071         	call	___ftpack	;wreg free
  5351  00DF82  C001  F009         	movff	?___ftpack,?___lltoft
  5352  00DF86  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  5353  00DF8A  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  5354  00DF8E  0012               	return	
  5355  00DF90                     __end_of___lltoft:
  5356                           	opt stack 0
  5357                           tblptru	equ	0xFF8
  5358                           tblptrh	equ	0xFF7
  5359                           tblptrl	equ	0xFF6
  5360                           tablat	equ	0xFF5
  5361                           prodh	equ	0xFF4
  5362                           prodl	equ	0xFF3
  5363                           indf0	equ	0xFEF
  5364                           postinc0	equ	0xFEE
  5365                           fsr0h	equ	0xFEA
  5366                           fsr0l	equ	0xFE9
  5367                           wreg	equ	0xFE8
  5368                           postdec1	equ	0xFE5
  5369                           plusw1	equ	0xFE3
  5370                           fsr1l	equ	0xFE1
  5371                           postinc2	equ	0xFDE
  5372                           postdec2	equ	0xFDD
  5373                           plusw2	equ	0xFDB
  5374                           fsr2h	equ	0xFDA
  5375                           fsr2l	equ	0xFD9
  5376                           status	equ	0xFD8
  5377                           
  5378 ;; *************** function ___llmod *****************
  5379 ;; Defined at:
  5380 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/llmod.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;  dividend        4   13[COMRAM] unsigned long 
  5383 ;;  divisor         4   17[COMRAM] unsigned long 
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;  counter         1   21[COMRAM] unsigned char 
  5386 ;; Return value:  Size  Location     Type
  5387 ;;                  4   13[COMRAM] unsigned long 
  5388 ;; Registers used:
  5389 ;;		wreg, status,2, status,0
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5395 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;Total ram usage:        9 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; This function calls:
  5402 ;;		Nothing
  5403 ;; This function is called by:
  5404 ;;		_printf
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           	psect	text12
  5409  00DF90                     __ptext12:
  5410                           	opt stack 0
  5411  00DF90                     ___llmod:
  5412                           	opt stack 29
  5413                           
  5414                           ;incstack = 0
  5415  00DF90  5012               	movf	___llmod@divisor,w,c
  5416  00DF92  1013               	iorwf	___llmod@divisor+1,w,c
  5417  00DF94  1014               	iorwf	___llmod@divisor+2,w,c
  5418  00DF96  1015               	iorwf	___llmod@divisor+3,w,c
  5419  00DF98  B4D8               	btfsc	status,2,c
  5420  00DF9A  D024               	goto	l633
  5421  00DF9C  0E01               	movlw	1
  5422  00DF9E  6E16               	movwf	___llmod@counter,c
  5423  00DFA0  D006               	goto	l628
  5424  00DFA2  90D8               	bcf	status,0,c
  5425  00DFA4  3612               	rlcf	___llmod@divisor,f,c
  5426  00DFA6  3613               	rlcf	___llmod@divisor+1,f,c
  5427  00DFA8  3614               	rlcf	___llmod@divisor+2,f,c
  5428  00DFAA  3615               	rlcf	___llmod@divisor+3,f,c
  5429  00DFAC  2A16               	incf	___llmod@counter,f,c
  5430  00DFAE                     l628:
  5431  00DFAE  AE15               	btfss	___llmod@divisor+3,7,c
  5432  00DFB0  D7F8               	goto	l629
  5433  00DFB2                     u2370:
  5434  00DFB2  5012               	movf	___llmod@divisor,w,c
  5435  00DFB4  5C0E               	subwf	___llmod@dividend,w,c
  5436  00DFB6  5013               	movf	___llmod@divisor+1,w,c
  5437  00DFB8  580F               	subwfb	___llmod@dividend+1,w,c
  5438  00DFBA  5014               	movf	___llmod@divisor+2,w,c
  5439  00DFBC  5810               	subwfb	___llmod@dividend+2,w,c
  5440  00DFBE  5015               	movf	___llmod@divisor+3,w,c
  5441  00DFC0  5811               	subwfb	___llmod@dividend+3,w,c
  5442  00DFC2  A0D8               	btfss	status,0,c
  5443  00DFC4  D008               	goto	l632
  5444  00DFC6  5012               	movf	___llmod@divisor,w,c
  5445  00DFC8  5E0E               	subwf	___llmod@dividend,f,c
  5446  00DFCA  5013               	movf	___llmod@divisor+1,w,c
  5447  00DFCC  5A0F               	subwfb	___llmod@dividend+1,f,c
  5448  00DFCE  5014               	movf	___llmod@divisor+2,w,c
  5449  00DFD0  5A10               	subwfb	___llmod@dividend+2,f,c
  5450  00DFD2  5015               	movf	___llmod@divisor+3,w,c
  5451  00DFD4  5A11               	subwfb	___llmod@dividend+3,f,c
  5452  00DFD6                     l632:
  5453  00DFD6  90D8               	bcf	status,0,c
  5454  00DFD8  3215               	rrcf	___llmod@divisor+3,f,c
  5455  00DFDA  3214               	rrcf	___llmod@divisor+2,f,c
  5456  00DFDC  3213               	rrcf	___llmod@divisor+1,f,c
  5457  00DFDE  3212               	rrcf	___llmod@divisor,f,c
  5458  00DFE0  2E16               	decfsz	___llmod@counter,f,c
  5459  00DFE2  D7E7               	goto	u2370
  5460  00DFE4                     l633:
  5461  00DFE4  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5462  00DFE8  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5463  00DFEC  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5464  00DFF0  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5465  00DFF4  0012               	return		;funcret
  5466  00DFF6                     __end_of___llmod:
  5467                           	opt stack 0
  5468                           tblptru	equ	0xFF8
  5469                           tblptrh	equ	0xFF7
  5470                           tblptrl	equ	0xFF6
  5471                           tablat	equ	0xFF5
  5472                           prodh	equ	0xFF4
  5473                           prodl	equ	0xFF3
  5474                           indf0	equ	0xFEF
  5475                           postinc0	equ	0xFEE
  5476                           fsr0h	equ	0xFEA
  5477                           fsr0l	equ	0xFE9
  5478                           wreg	equ	0xFE8
  5479                           postdec1	equ	0xFE5
  5480                           plusw1	equ	0xFE3
  5481                           fsr1l	equ	0xFE1
  5482                           postinc2	equ	0xFDE
  5483                           postdec2	equ	0xFDD
  5484                           plusw2	equ	0xFDB
  5485                           fsr2h	equ	0xFDA
  5486                           fsr2l	equ	0xFD9
  5487                           status	equ	0xFD8
  5488                           
  5489 ;; *************** function ___lldiv *****************
  5490 ;; Defined at:
  5491 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;  dividend        4    0[COMRAM] unsigned long 
  5494 ;;  divisor         4    4[COMRAM] unsigned long 
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;  quotient        4    8[COMRAM] unsigned long 
  5497 ;;  counter         1   12[COMRAM] unsigned char 
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  4    0[COMRAM] unsigned long 
  5500 ;; Registers used:
  5501 ;;		wreg, status,2, status,0
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5507 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5511 ;;Total ram usage:       13 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; This function calls:
  5514 ;;		Nothing
  5515 ;; This function is called by:
  5516 ;;		_printf
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text13
  5521  00E0E4                     __ptext13:
  5522                           	opt stack 0
  5523  00E0E4                     ___lldiv:
  5524                           	opt stack 29
  5525                           
  5526                           ;incstack = 0
  5527  00E0E4  0E00               	movlw	0
  5528  00E0E6  6E09               	movwf	___lldiv@quotient,c
  5529  00E0E8  0E00               	movlw	0
  5530  00E0EA  6E0A               	movwf	___lldiv@quotient+1,c
  5531  00E0EC  0E00               	movlw	0
  5532  00E0EE  6E0B               	movwf	___lldiv@quotient+2,c
  5533  00E0F0  0E00               	movlw	0
  5534  00E0F2  6E0C               	movwf	___lldiv@quotient+3,c
  5535  00E0F4  5005               	movf	___lldiv@divisor,w,c
  5536  00E0F6  1006               	iorwf	___lldiv@divisor+1,w,c
  5537  00E0F8  1007               	iorwf	___lldiv@divisor+2,w,c
  5538  00E0FA  1008               	iorwf	___lldiv@divisor+3,w,c
  5539  00E0FC  B4D8               	btfsc	status,2,c
  5540  00E0FE  D02A               	goto	l623
  5541  00E100  0E01               	movlw	1
  5542  00E102  6E0D               	movwf	___lldiv@counter,c
  5543  00E104  D006               	goto	l618
  5544  00E106  90D8               	bcf	status,0,c
  5545  00E108  3605               	rlcf	___lldiv@divisor,f,c
  5546  00E10A  3606               	rlcf	___lldiv@divisor+1,f,c
  5547  00E10C  3607               	rlcf	___lldiv@divisor+2,f,c
  5548  00E10E  3608               	rlcf	___lldiv@divisor+3,f,c
  5549  00E110  2A0D               	incf	___lldiv@counter,f,c
  5550  00E112                     l618:
  5551  00E112  AE08               	btfss	___lldiv@divisor+3,7,c
  5552  00E114  D7F8               	goto	l619
  5553  00E116                     u2340:
  5554  00E116  90D8               	bcf	status,0,c
  5555  00E118  3609               	rlcf	___lldiv@quotient,f,c
  5556  00E11A  360A               	rlcf	___lldiv@quotient+1,f,c
  5557  00E11C  360B               	rlcf	___lldiv@quotient+2,f,c
  5558  00E11E  360C               	rlcf	___lldiv@quotient+3,f,c
  5559  00E120  5005               	movf	___lldiv@divisor,w,c
  5560  00E122  5C01               	subwf	___lldiv@dividend,w,c
  5561  00E124  5006               	movf	___lldiv@divisor+1,w,c
  5562  00E126  5802               	subwfb	___lldiv@dividend+1,w,c
  5563  00E128  5007               	movf	___lldiv@divisor+2,w,c
  5564  00E12A  5803               	subwfb	___lldiv@dividend+2,w,c
  5565  00E12C  5008               	movf	___lldiv@divisor+3,w,c
  5566  00E12E  5804               	subwfb	___lldiv@dividend+3,w,c
  5567  00E130  A0D8               	btfss	status,0,c
  5568  00E132  D009               	goto	l622
  5569  00E134  5005               	movf	___lldiv@divisor,w,c
  5570  00E136  5E01               	subwf	___lldiv@dividend,f,c
  5571  00E138  5006               	movf	___lldiv@divisor+1,w,c
  5572  00E13A  5A02               	subwfb	___lldiv@dividend+1,f,c
  5573  00E13C  5007               	movf	___lldiv@divisor+2,w,c
  5574  00E13E  5A03               	subwfb	___lldiv@dividend+2,f,c
  5575  00E140  5008               	movf	___lldiv@divisor+3,w,c
  5576  00E142  5A04               	subwfb	___lldiv@dividend+3,f,c
  5577  00E144  8009               	bsf	___lldiv@quotient,0,c
  5578  00E146                     l622:
  5579  00E146  90D8               	bcf	status,0,c
  5580  00E148  3208               	rrcf	___lldiv@divisor+3,f,c
  5581  00E14A  3207               	rrcf	___lldiv@divisor+2,f,c
  5582  00E14C  3206               	rrcf	___lldiv@divisor+1,f,c
  5583  00E14E  3205               	rrcf	___lldiv@divisor,f,c
  5584  00E150  2E0D               	decfsz	___lldiv@counter,f,c
  5585  00E152  D7E1               	goto	u2340
  5586  00E154                     l623:
  5587  00E154  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5588  00E158  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5589  00E15C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5590  00E160  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5591  00E164  0012               	return		;funcret
  5592  00E166                     __end_of___lldiv:
  5593                           	opt stack 0
  5594                           tblptru	equ	0xFF8
  5595                           tblptrh	equ	0xFF7
  5596                           tblptrl	equ	0xFF6
  5597                           tablat	equ	0xFF5
  5598                           prodh	equ	0xFF4
  5599                           prodl	equ	0xFF3
  5600                           indf0	equ	0xFEF
  5601                           postinc0	equ	0xFEE
  5602                           fsr0h	equ	0xFEA
  5603                           fsr0l	equ	0xFE9
  5604                           wreg	equ	0xFE8
  5605                           postdec1	equ	0xFE5
  5606                           plusw1	equ	0xFE3
  5607                           fsr1l	equ	0xFE1
  5608                           postinc2	equ	0xFDE
  5609                           postdec2	equ	0xFDD
  5610                           plusw2	equ	0xFDB
  5611                           fsr2h	equ	0xFDA
  5612                           fsr2l	equ	0xFD9
  5613                           status	equ	0xFD8
  5614                           
  5615 ;; *************** function ___fttol *****************
  5616 ;; Defined at:
  5617 ;;		line 44 in file "/Applications/microchip/xc8/v1.45/sources/common/fttol.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  f1              3   42[COMRAM] float 
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;  lval            4   52[COMRAM] unsigned long 
  5622 ;;  exp1            1   56[COMRAM] unsigned char 
  5623 ;;  sign1           1   51[COMRAM] unsigned char 
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  4   42[COMRAM] long 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2, status,0
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;Total ram usage:       15 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; This function calls:
  5640 ;;		Nothing
  5641 ;; This function is called by:
  5642 ;;		_printf
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           	psect	text14
  5647  00E328                     __ptext14:
  5648                           	opt stack 0
  5649  00E328                     ___fttol:
  5650                           	opt stack 29
  5651                           
  5652                           ;incstack = 0
  5653  00E328  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  5654  00E32C  6A30               	clrf	(??___fttol+1)& (0+255),c
  5655  00E32E  6A31               	clrf	(??___fttol+2)& (0+255),c
  5656  00E330  342C               	rlcf	___fttol@f1+1,w,c
  5657  00E332  362F               	rlcf	??___fttol& (0+255),f,c
  5658  00E334  E301               	bnc	u2251
  5659  00E336  8030               	bsf	(??___fttol+1)& (0+255),0,c
  5660  00E338                     u2251:
  5661  00E338  502F               	movf	??___fttol,w,c
  5662  00E33A  6E39               	movwf	___fttol@exp1,c
  5663  00E33C  5039               	movf	___fttol@exp1,w,c
  5664  00E33E  A4D8               	btfss	status,2,c
  5665  00E340  D009               	goto	l582
  5666  00E342  0E00               	movlw	0
  5667  00E344  6E2B               	movwf	?___fttol,c
  5668  00E346  0E00               	movlw	0
  5669  00E348  6E2C               	movwf	?___fttol+1,c
  5670  00E34A  0E00               	movlw	0
  5671  00E34C  6E2D               	movwf	?___fttol+2,c
  5672  00E34E  0E00               	movlw	0
  5673  00E350  6E2E               	movwf	?___fttol+3,c
  5674  00E352  0012               	return	
  5675  00E354                     l582:
  5676  00E354  0E17               	movlw	23
  5677  00E356  6E2F               	movwf	??___fttol& (0+255),c
  5678  00E358  C02B  F030         	movff	___fttol@f1,??___fttol+1
  5679  00E35C  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  5680  00E360  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  5681  00E364  282F               	incf	??___fttol,w,c
  5682  00E366  6E33               	movwf	(??___fttol+4)& (0+255),c
  5683  00E368  D004               	goto	u2270
  5684  00E36A                     u2275:
  5685  00E36A  90D8               	bcf	status,0,c
  5686  00E36C  3232               	rrcf	??___fttol+3,f,c
  5687  00E36E  3231               	rrcf	??___fttol+2,f,c
  5688  00E370  3230               	rrcf	??___fttol+1,f,c
  5689  00E372                     u2270:
  5690  00E372  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  5691  00E374  D7FA               	goto	u2275
  5692  00E376  5030               	movf	??___fttol+1,w,c
  5693  00E378  6E34               	movwf	___fttol@sign1,c
  5694  00E37A  8E2C               	bsf	___fttol@f1+1,7,c
  5695  00E37C  0EFF               	movlw	255
  5696  00E37E  162B               	andwf	___fttol@f1,f,c
  5697  00E380  0EFF               	movlw	255
  5698  00E382  162C               	andwf	___fttol@f1+1,f,c
  5699  00E384  0E00               	movlw	0
  5700  00E386  162D               	andwf	___fttol@f1+2,f,c
  5701  00E388  502B               	movf	___fttol@f1,w,c
  5702  00E38A  6E35               	movwf	___fttol@lval,c
  5703  00E38C  502C               	movf	___fttol@f1+1,w,c
  5704  00E38E  6E36               	movwf	___fttol@lval+1,c
  5705  00E390  502D               	movf	___fttol@f1+2,w,c
  5706  00E392  6E37               	movwf	___fttol@lval+2,c
  5707  00E394  6A38               	clrf	___fttol@lval+3,c
  5708  00E396  0E8E               	movlw	142
  5709  00E398  5E39               	subwf	___fttol@exp1,f,c
  5710  00E39A  AE39               	btfss	___fttol@exp1,7,c
  5711  00E39C  D016               	goto	l584
  5712  00E39E  5039               	movf	___fttol@exp1,w,c
  5713  00E3A0  0A80               	xorlw	128
  5714  00E3A2  0F8F               	addlw	143
  5715  00E3A4  B0D8               	btfsc	status,0,c
  5716  00E3A6  D009               	goto	l585
  5717  00E3A8  0E00               	movlw	0
  5718  00E3AA  6E2B               	movwf	?___fttol,c
  5719  00E3AC  0E00               	movlw	0
  5720  00E3AE  6E2C               	movwf	?___fttol+1,c
  5721  00E3B0  0E00               	movlw	0
  5722  00E3B2  6E2D               	movwf	?___fttol+2,c
  5723  00E3B4  0E00               	movlw	0
  5724  00E3B6  6E2E               	movwf	?___fttol+3,c
  5725  00E3B8  0012               	return	
  5726  00E3BA                     l585:
  5727  00E3BA  90D8               	bcf	status,0,c
  5728  00E3BC  3238               	rrcf	___fttol@lval+3,f,c
  5729  00E3BE  3237               	rrcf	___fttol@lval+2,f,c
  5730  00E3C0  3236               	rrcf	___fttol@lval+1,f,c
  5731  00E3C2  3235               	rrcf	___fttol@lval,f,c
  5732  00E3C4  3E39               	incfsz	___fttol@exp1,f,c
  5733  00E3C6  D7F9               	goto	l585
  5734  00E3C8  D015               	goto	u2310
  5735  00E3CA                     l584:
  5736  00E3CA  0E17               	movlw	23
  5737  00E3CC  6439               	cpfsgt	___fttol@exp1,c
  5738  00E3CE  D00F               	goto	l590
  5739  00E3D0  0E00               	movlw	0
  5740  00E3D2  6E2B               	movwf	?___fttol,c
  5741  00E3D4  0E00               	movlw	0
  5742  00E3D6  6E2C               	movwf	?___fttol+1,c
  5743  00E3D8  0E00               	movlw	0
  5744  00E3DA  6E2D               	movwf	?___fttol+2,c
  5745  00E3DC  0E00               	movlw	0
  5746  00E3DE  6E2E               	movwf	?___fttol+3,c
  5747  00E3E0  0012               	return	
  5748  00E3E2  90D8               	bcf	status,0,c
  5749  00E3E4  3635               	rlcf	___fttol@lval,f,c
  5750  00E3E6  3636               	rlcf	___fttol@lval+1,f,c
  5751  00E3E8  3637               	rlcf	___fttol@lval+2,f,c
  5752  00E3EA  3638               	rlcf	___fttol@lval+3,f,c
  5753  00E3EC  0639               	decf	___fttol@exp1,f,c
  5754  00E3EE                     l590:
  5755  00E3EE  5039               	movf	___fttol@exp1,w,c
  5756  00E3F0  A4D8               	btfss	status,2,c
  5757  00E3F2  D7F7               	goto	l591
  5758  00E3F4                     u2310:
  5759  00E3F4  5034               	movf	___fttol@sign1,w,c
  5760  00E3F6  B4D8               	btfsc	status,2,c
  5761  00E3F8  D008               	goto	l593
  5762  00E3FA  1E38               	comf	___fttol@lval+3,f,c
  5763  00E3FC  1E37               	comf	___fttol@lval+2,f,c
  5764  00E3FE  1E36               	comf	___fttol@lval+1,f,c
  5765  00E400  6C35               	negf	___fttol@lval,c
  5766  00E402  0E00               	movlw	0
  5767  00E404  2236               	addwfc	___fttol@lval+1,f,c
  5768  00E406  2237               	addwfc	___fttol@lval+2,f,c
  5769  00E408  2238               	addwfc	___fttol@lval+3,f,c
  5770  00E40A                     l593:
  5771  00E40A  C035  F02B         	movff	___fttol@lval,?___fttol
  5772  00E40E  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5773  00E412  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5774  00E416  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5775  00E41A  0012               	return	
  5776  00E41C                     __end_of___fttol:
  5777                           	opt stack 0
  5778                           tblptru	equ	0xFF8
  5779                           tblptrh	equ	0xFF7
  5780                           tblptrl	equ	0xFF6
  5781                           tablat	equ	0xFF5
  5782                           prodh	equ	0xFF4
  5783                           prodl	equ	0xFF3
  5784                           indf0	equ	0xFEF
  5785                           postinc0	equ	0xFEE
  5786                           fsr0h	equ	0xFEA
  5787                           fsr0l	equ	0xFE9
  5788                           wreg	equ	0xFE8
  5789                           postdec1	equ	0xFE5
  5790                           plusw1	equ	0xFE3
  5791                           fsr1l	equ	0xFE1
  5792                           postinc2	equ	0xFDE
  5793                           postdec2	equ	0xFDD
  5794                           plusw2	equ	0xFDB
  5795                           fsr2h	equ	0xFDA
  5796                           fsr2l	equ	0xFD9
  5797                           status	equ	0xFD8
  5798                           
  5799 ;; *************** function ___ftsub *****************
  5800 ;; Defined at:
  5801 ;;		line 20 in file "/Applications/microchip/xc8/v1.45/sources/common/ftsub.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;  f1              3   57[COMRAM] float 
  5804 ;;  f2              3   60[COMRAM] float 
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;		None
  5807 ;; Return value:  Size  Location     Type
  5808 ;;                  3   57[COMRAM] float 
  5809 ;; Registers used:
  5810 ;;		wreg, status,2, status,0, cstack
  5811 ;; Tracked objects:
  5812 ;;		On entry : 0/0
  5813 ;;		On exit  : 0/0
  5814 ;;		Unchanged: 0/0
  5815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5816 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5820 ;;Total ram usage:        6 bytes
  5821 ;; Hardware stack levels used:    1
  5822 ;; Hardware stack levels required when called:    2
  5823 ;; This function calls:
  5824 ;;		___ftadd
  5825 ;; This function is called by:
  5826 ;;		_printf
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830                           	psect	text15
  5831  00DEA8                     __ptext15:
  5832                           	opt stack 0
  5833  00DEA8                     ___ftsub:
  5834                           	opt stack 27
  5835                           
  5836                           ;incstack = 0
  5837  00DEA8  503D               	movf	___ftsub@f2,w,c
  5838  00DEAA  103E               	iorwf	___ftsub@f2+1,w,c
  5839  00DEAC  103F               	iorwf	___ftsub@f2+2,w,c
  5840  00DEAE  B4D8               	btfsc	status,2,c
  5841  00DEB0  D006               	goto	l578
  5842  00DEB2  0E00               	movlw	0
  5843  00DEB4  1A3D               	xorwf	___ftsub@f2,f,c
  5844  00DEB6  0E00               	movlw	0
  5845  00DEB8  1A3E               	xorwf	___ftsub@f2+1,f,c
  5846  00DEBA  0E80               	movlw	128
  5847  00DEBC  1A3F               	xorwf	___ftsub@f2+2,f,c
  5848  00DEBE                     l578:
  5849  00DEBE  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5850  00DEC2  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5851  00DEC6  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5852  00DECA  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5853  00DECE  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5854  00DED2  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5855  00DED6  ECB5  F073         	call	___ftadd	;wreg free
  5856  00DEDA  C02E  F03A         	movff	?___ftadd,?___ftsub
  5857  00DEDE  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5858  00DEE2  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5859  00DEE6  0012               	return	
  5860  00DEE8                     __end_of___ftsub:
  5861                           	opt stack 0
  5862                           tblptru	equ	0xFF8
  5863                           tblptrh	equ	0xFF7
  5864                           tblptrl	equ	0xFF6
  5865                           tablat	equ	0xFF5
  5866                           prodh	equ	0xFF4
  5867                           prodl	equ	0xFF3
  5868                           indf0	equ	0xFEF
  5869                           postinc0	equ	0xFEE
  5870                           fsr0h	equ	0xFEA
  5871                           fsr0l	equ	0xFE9
  5872                           wreg	equ	0xFE8
  5873                           postdec1	equ	0xFE5
  5874                           plusw1	equ	0xFE3
  5875                           fsr1l	equ	0xFE1
  5876                           postinc2	equ	0xFDE
  5877                           postdec2	equ	0xFDD
  5878                           plusw2	equ	0xFDB
  5879                           fsr2h	equ	0xFDA
  5880                           fsr2l	equ	0xFD9
  5881                           status	equ	0xFD8
  5882                           
  5883 ;; *************** function ___ftadd *****************
  5884 ;; Defined at:
  5885 ;;		line 86 in file "/Applications/microchip/xc8/v1.45/sources/common/ftadd.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;  f1              3   45[COMRAM] float 
  5888 ;;  f2              3   48[COMRAM] float 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  exp1            1   56[COMRAM] unsigned char 
  5891 ;;  exp2            1   55[COMRAM] unsigned char 
  5892 ;;  sign            1   54[COMRAM] unsigned char 
  5893 ;; Return value:  Size  Location     Type
  5894 ;;                  3   45[COMRAM] float 
  5895 ;; Registers used:
  5896 ;;		wreg, status,2, status,0, cstack
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5902 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5903 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5904 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;Total ram usage:       12 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; Hardware stack levels required when called:    1
  5909 ;; This function calls:
  5910 ;;		___ftpack
  5911 ;; This function is called by:
  5912 ;;		_printf
  5913 ;;		___ftsub
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917                           	psect	text16
  5918  00E76A                     __ptext16:
  5919                           	opt stack 0
  5920  00E76A                     ___ftadd:
  5921                           	opt stack 27
  5922                           
  5923                           ;incstack = 0
  5924  00E76A  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5925  00E76E  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5926  00E770  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5927  00E772  342F               	rlcf	___ftadd@f1+1,w,c
  5928  00E774  3634               	rlcf	??___ftadd& (0+255),f,c
  5929  00E776  E301               	bnc	u1561
  5930  00E778  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5931  00E77A                     u1561:
  5932  00E77A  5034               	movf	??___ftadd,w,c
  5933  00E77C  6E39               	movwf	___ftadd@exp1,c
  5934  00E77E  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5935  00E782  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5936  00E784  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5937  00E786  3432               	rlcf	___ftadd@f2+1,w,c
  5938  00E788  3634               	rlcf	??___ftadd& (0+255),f,c
  5939  00E78A  E301               	bnc	u1571
  5940  00E78C  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5941  00E78E                     u1571:
  5942  00E78E  5034               	movf	??___ftadd,w,c
  5943  00E790  6E38               	movwf	___ftadd@exp2,c
  5944  00E792  5039               	movf	___ftadd@exp1,w,c
  5945  00E794  B4D8               	btfsc	status,2,c
  5946  00E796  D00B               	goto	u1600
  5947  00E798  5038               	movf	___ftadd@exp2,w,c
  5948  00E79A  5C39               	subwf	___ftadd@exp1,w,c
  5949  00E79C  B0D8               	btfsc	status,0,c
  5950  00E79E  D00E               	goto	l496
  5951  00E7A0  5039               	movf	___ftadd@exp1,w,c
  5952  00E7A2  0800               	sublw	0
  5953  00E7A4  2438               	addwf	___ftadd@exp2,w,c
  5954  00E7A6  6E34               	movwf	??___ftadd& (0+255),c
  5955  00E7A8  0E18               	movlw	24
  5956  00E7AA  6434               	cpfsgt	??___ftadd,c
  5957  00E7AC  D007               	goto	l496
  5958  00E7AE                     u1600:
  5959  00E7AE  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5960  00E7B2  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5961  00E7B6  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5962  00E7BA  0012               	return	
  5963  00E7BC                     l496:
  5964  00E7BC  5038               	movf	___ftadd@exp2,w,c
  5965  00E7BE  B4D8               	btfsc	status,2,c
  5966  00E7C0  D00B               	goto	u1630
  5967  00E7C2  5039               	movf	___ftadd@exp1,w,c
  5968  00E7C4  5C38               	subwf	___ftadd@exp2,w,c
  5969  00E7C6  B0D8               	btfsc	status,0,c
  5970  00E7C8  D00E               	goto	l500
  5971  00E7CA  5038               	movf	___ftadd@exp2,w,c
  5972  00E7CC  0800               	sublw	0
  5973  00E7CE  2439               	addwf	___ftadd@exp1,w,c
  5974  00E7D0  6E34               	movwf	??___ftadd& (0+255),c
  5975  00E7D2  0E18               	movlw	24
  5976  00E7D4  6434               	cpfsgt	??___ftadd,c
  5977  00E7D6  D007               	goto	l500
  5978  00E7D8                     u1630:
  5979  00E7D8  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5980  00E7DC  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5981  00E7E0  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5982  00E7E4  0012               	return	
  5983  00E7E6                     l500:
  5984  00E7E6  0E06               	movlw	6
  5985  00E7E8  6E37               	movwf	___ftadd@sign,c
  5986  00E7EA  BE30               	btfsc	___ftadd@f1+2,7,c
  5987  00E7EC  8E37               	bsf	___ftadd@sign,7,c
  5988  00E7EE  BE33               	btfsc	___ftadd@f2+2,7,c
  5989  00E7F0  8C37               	bsf	___ftadd@sign,6,c
  5990  00E7F2  8E2F               	bsf	___ftadd@f1+1,7,c
  5991  00E7F4  0EFF               	movlw	255
  5992  00E7F6  162E               	andwf	___ftadd@f1,f,c
  5993  00E7F8  0EFF               	movlw	255
  5994  00E7FA  162F               	andwf	___ftadd@f1+1,f,c
  5995  00E7FC  0E00               	movlw	0
  5996  00E7FE  1630               	andwf	___ftadd@f1+2,f,c
  5997  00E800  8E32               	bsf	___ftadd@f2+1,7,c
  5998  00E802  0EFF               	movlw	255
  5999  00E804  1631               	andwf	___ftadd@f2,f,c
  6000  00E806  0EFF               	movlw	255
  6001  00E808  1632               	andwf	___ftadd@f2+1,f,c
  6002  00E80A  0E00               	movlw	0
  6003  00E80C  1633               	andwf	___ftadd@f2+2,f,c
  6004  00E80E  5038               	movf	___ftadd@exp2,w,c
  6005  00E810  5C39               	subwf	___ftadd@exp1,w,c
  6006  00E812  B0D8               	btfsc	status,0,c
  6007  00E814  D01B               	goto	l505
  6008  00E816                     u1660:
  6009  00E816  90D8               	bcf	status,0,c
  6010  00E818  3631               	rlcf	___ftadd@f2,f,c
  6011  00E81A  3632               	rlcf	___ftadd@f2+1,f,c
  6012  00E81C  3633               	rlcf	___ftadd@f2+2,f,c
  6013  00E81E  0638               	decf	___ftadd@exp2,f,c
  6014  00E820  5039               	movf	___ftadd@exp1,w,c
  6015  00E822  1838               	xorwf	___ftadd@exp2,w,c
  6016  00E824  B4D8               	btfsc	status,2,c
  6017  00E826  D00D               	goto	l510
  6018  00E828  0637               	decf	___ftadd@sign,f,c
  6019  00E82A  C037  F034         	movff	___ftadd@sign,??___ftadd
  6020  00E82E  0E07               	movlw	7
  6021  00E830  1634               	andwf	??___ftadd,f,c
  6022  00E832  B4D8               	btfsc	status,2,c
  6023  00E834  D006               	goto	l510
  6024  00E836  D7EF               	goto	u1660
  6025  00E838  90D8               	bcf	status,0,c
  6026  00E83A  3230               	rrcf	___ftadd@f1+2,f,c
  6027  00E83C  322F               	rrcf	___ftadd@f1+1,f,c
  6028  00E83E  322E               	rrcf	___ftadd@f1,f,c
  6029  00E840  2A39               	incf	___ftadd@exp1,f,c
  6030  00E842                     l510:
  6031  00E842  5038               	movf	___ftadd@exp2,w,c
  6032  00E844  1839               	xorwf	___ftadd@exp1,w,c
  6033  00E846  B4D8               	btfsc	status,2,c
  6034  00E848  D01F               	goto	u1730
  6035  00E84A  D7F6               	goto	l511
  6036  00E84C                     l505:
  6037  00E84C  5039               	movf	___ftadd@exp1,w,c
  6038  00E84E  5C38               	subwf	___ftadd@exp2,w,c
  6039  00E850  B0D8               	btfsc	status,0,c
  6040  00E852  D01A               	goto	u1730
  6041  00E854                     u1700:
  6042  00E854  90D8               	bcf	status,0,c
  6043  00E856  362E               	rlcf	___ftadd@f1,f,c
  6044  00E858  362F               	rlcf	___ftadd@f1+1,f,c
  6045  00E85A  3630               	rlcf	___ftadd@f1+2,f,c
  6046  00E85C  0639               	decf	___ftadd@exp1,f,c
  6047  00E85E  5039               	movf	___ftadd@exp1,w,c
  6048  00E860  1838               	xorwf	___ftadd@exp2,w,c
  6049  00E862  B4D8               	btfsc	status,2,c
  6050  00E864  D00D               	goto	l519
  6051  00E866  0637               	decf	___ftadd@sign,f,c
  6052  00E868  C037  F034         	movff	___ftadd@sign,??___ftadd
  6053  00E86C  0E07               	movlw	7
  6054  00E86E  1634               	andwf	??___ftadd,f,c
  6055  00E870  B4D8               	btfsc	status,2,c
  6056  00E872  D006               	goto	l519
  6057  00E874  D7EF               	goto	u1700
  6058  00E876  90D8               	bcf	status,0,c
  6059  00E878  3233               	rrcf	___ftadd@f2+2,f,c
  6060  00E87A  3232               	rrcf	___ftadd@f2+1,f,c
  6061  00E87C  3231               	rrcf	___ftadd@f2,f,c
  6062  00E87E  2A38               	incf	___ftadd@exp2,f,c
  6063  00E880                     l519:
  6064  00E880  5038               	movf	___ftadd@exp2,w,c
  6065  00E882  1839               	xorwf	___ftadd@exp1,w,c
  6066  00E884  A4D8               	btfss	status,2,c
  6067  00E886  D7F7               	goto	l520
  6068  00E888                     u1730:
  6069  00E888  AE37               	btfss	___ftadd@sign,7,c
  6070  00E88A  D00C               	goto	l522
  6071  00E88C  0EFF               	movlw	255
  6072  00E88E  1A2E               	xorwf	___ftadd@f1,f,c
  6073  00E890  0EFF               	movlw	255
  6074  00E892  1A2F               	xorwf	___ftadd@f1+1,f,c
  6075  00E894  0EFF               	movlw	255
  6076  00E896  1A30               	xorwf	___ftadd@f1+2,f,c
  6077  00E898  0E01               	movlw	1
  6078  00E89A  262E               	addwf	___ftadd@f1,f,c
  6079  00E89C  0E00               	movlw	0
  6080  00E89E  222F               	addwfc	___ftadd@f1+1,f,c
  6081  00E8A0  0E00               	movlw	0
  6082  00E8A2  2230               	addwfc	___ftadd@f1+2,f,c
  6083  00E8A4                     l522:
  6084  00E8A4  AC37               	btfss	___ftadd@sign,6,c
  6085  00E8A6  D00C               	goto	l523
  6086  00E8A8  0EFF               	movlw	255
  6087  00E8AA  1A31               	xorwf	___ftadd@f2,f,c
  6088  00E8AC  0EFF               	movlw	255
  6089  00E8AE  1A32               	xorwf	___ftadd@f2+1,f,c
  6090  00E8B0  0EFF               	movlw	255
  6091  00E8B2  1A33               	xorwf	___ftadd@f2+2,f,c
  6092  00E8B4  0E01               	movlw	1
  6093  00E8B6  2631               	addwf	___ftadd@f2,f,c
  6094  00E8B8  0E00               	movlw	0
  6095  00E8BA  2232               	addwfc	___ftadd@f2+1,f,c
  6096  00E8BC  0E00               	movlw	0
  6097  00E8BE  2233               	addwfc	___ftadd@f2+2,f,c
  6098  00E8C0                     l523:
  6099  00E8C0  0E00               	movlw	0
  6100  00E8C2  6E37               	movwf	___ftadd@sign,c
  6101  00E8C4  502E               	movf	___ftadd@f1,w,c
  6102  00E8C6  2631               	addwf	___ftadd@f2,f,c
  6103  00E8C8  502F               	movf	___ftadd@f1+1,w,c
  6104  00E8CA  2232               	addwfc	___ftadd@f2+1,f,c
  6105  00E8CC  5030               	movf	___ftadd@f1+2,w,c
  6106  00E8CE  2233               	addwfc	___ftadd@f2+2,f,c
  6107  00E8D0  AE33               	btfss	___ftadd@f2+2,7,c
  6108  00E8D2  D00E               	goto	l524
  6109  00E8D4  0EFF               	movlw	255
  6110  00E8D6  1A31               	xorwf	___ftadd@f2,f,c
  6111  00E8D8  0EFF               	movlw	255
  6112  00E8DA  1A32               	xorwf	___ftadd@f2+1,f,c
  6113  00E8DC  0EFF               	movlw	255
  6114  00E8DE  1A33               	xorwf	___ftadd@f2+2,f,c
  6115  00E8E0  0E01               	movlw	1
  6116  00E8E2  2631               	addwf	___ftadd@f2,f,c
  6117  00E8E4  0E00               	movlw	0
  6118  00E8E6  2232               	addwfc	___ftadd@f2+1,f,c
  6119  00E8E8  0E00               	movlw	0
  6120  00E8EA  2233               	addwfc	___ftadd@f2+2,f,c
  6121  00E8EC  0E01               	movlw	1
  6122  00E8EE  6E37               	movwf	___ftadd@sign,c
  6123  00E8F0                     l524:
  6124  00E8F0  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  6125  00E8F4  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6126  00E8F8  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6127  00E8FC  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  6128  00E900  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  6129  00E904  EC3D  F071         	call	___ftpack	;wreg free
  6130  00E908  C001  F02E         	movff	?___ftpack,?___ftadd
  6131  00E90C  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  6132  00E910  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  6133  00E914  0012               	return	
  6134  00E916                     __end_of___ftadd:
  6135                           	opt stack 0
  6136                           tblptru	equ	0xFF8
  6137                           tblptrh	equ	0xFF7
  6138                           tblptrl	equ	0xFF6
  6139                           tablat	equ	0xFF5
  6140                           prodh	equ	0xFF4
  6141                           prodl	equ	0xFF3
  6142                           indf0	equ	0xFEF
  6143                           postinc0	equ	0xFEE
  6144                           fsr0h	equ	0xFEA
  6145                           fsr0l	equ	0xFE9
  6146                           wreg	equ	0xFE8
  6147                           postdec1	equ	0xFE5
  6148                           plusw1	equ	0xFE3
  6149                           fsr1l	equ	0xFE1
  6150                           postinc2	equ	0xFDE
  6151                           postdec2	equ	0xFDD
  6152                           plusw2	equ	0xFDB
  6153                           fsr2h	equ	0xFDA
  6154                           fsr2l	equ	0xFD9
  6155                           status	equ	0xFD8
  6156                           
  6157 ;; *************** function ___ftpack *****************
  6158 ;; Defined at:
  6159 ;;		line 62 in file "/Applications/microchip/xc8/v1.45/sources/common/float.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;  arg             3    0[COMRAM] unsigned um
  6162 ;;  exp             1    3[COMRAM] unsigned char 
  6163 ;;  sign            1    4[COMRAM] unsigned char 
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;		None
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  3    0[COMRAM] float 
  6168 ;; Registers used:
  6169 ;;		wreg, status,2, status,0
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6175 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;Total ram usage:        8 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; This function calls:
  6182 ;;		Nothing
  6183 ;; This function is called by:
  6184 ;;		___ftadd
  6185 ;;		___ftmul
  6186 ;;		___lltoft
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text17
  6191  00E27A                     __ptext17:
  6192                           	opt stack 0
  6193  00E27A                     ___ftpack:
  6194                           	opt stack 27
  6195                           
  6196                           ;incstack = 0
  6197  00E27A  5004               	movf	___ftpack@exp,w,c
  6198  00E27C  B4D8               	btfsc	status,2,c
  6199  00E27E  D005               	goto	u1490
  6200  00E280  5001               	movf	___ftpack@arg,w,c
  6201  00E282  1002               	iorwf	___ftpack@arg+1,w,c
  6202  00E284  1003               	iorwf	___ftpack@arg+2,w,c
  6203  00E286  A4D8               	btfss	status,2,c
  6204  00E288  D00C               	goto	l465
  6205  00E28A                     u1490:
  6206  00E28A  0E00               	movlw	0
  6207  00E28C  6E01               	movwf	?___ftpack,c
  6208  00E28E  0E00               	movlw	0
  6209  00E290  6E02               	movwf	?___ftpack+1,c
  6210  00E292  0E00               	movlw	0
  6211  00E294  6E03               	movwf	?___ftpack+2,c
  6212  00E296  0012               	return	
  6213  00E298  2A04               	incf	___ftpack@exp,f,c
  6214  00E29A  90D8               	bcf	status,0,c
  6215  00E29C  3203               	rrcf	___ftpack@arg+2,f,c
  6216  00E29E  3202               	rrcf	___ftpack@arg+1,f,c
  6217  00E2A0  3201               	rrcf	___ftpack@arg,f,c
  6218  00E2A2                     l465:
  6219  00E2A2  0E00               	movlw	0
  6220  00E2A4  1401               	andwf	___ftpack@arg,w,c
  6221  00E2A6  6E06               	movwf	??___ftpack& (0+255),c
  6222  00E2A8  0E00               	movlw	0
  6223  00E2AA  1402               	andwf	___ftpack@arg+1,w,c
  6224  00E2AC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6225  00E2AE  0EFE               	movlw	254
  6226  00E2B0  1403               	andwf	___ftpack@arg+2,w,c
  6227  00E2B2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6228  00E2B4  5006               	movf	??___ftpack,w,c
  6229  00E2B6  1007               	iorwf	??___ftpack+1,w,c
  6230  00E2B8  1008               	iorwf	??___ftpack+2,w,c
  6231  00E2BA  B4D8               	btfsc	status,2,c
  6232  00E2BC  D00C               	goto	l468
  6233  00E2BE  D7EC               	goto	l466
  6234  00E2C0  2A04               	incf	___ftpack@exp,f,c
  6235  00E2C2  0E01               	movlw	1
  6236  00E2C4  2601               	addwf	___ftpack@arg,f,c
  6237  00E2C6  0E00               	movlw	0
  6238  00E2C8  2202               	addwfc	___ftpack@arg+1,f,c
  6239  00E2CA  0E00               	movlw	0
  6240  00E2CC  2203               	addwfc	___ftpack@arg+2,f,c
  6241  00E2CE  90D8               	bcf	status,0,c
  6242  00E2D0  3203               	rrcf	___ftpack@arg+2,f,c
  6243  00E2D2  3202               	rrcf	___ftpack@arg+1,f,c
  6244  00E2D4  3201               	rrcf	___ftpack@arg,f,c
  6245  00E2D6                     l468:
  6246  00E2D6  0E00               	movlw	0
  6247  00E2D8  1401               	andwf	___ftpack@arg,w,c
  6248  00E2DA  6E06               	movwf	??___ftpack& (0+255),c
  6249  00E2DC  0E00               	movlw	0
  6250  00E2DE  1402               	andwf	___ftpack@arg+1,w,c
  6251  00E2E0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6252  00E2E2  0EFF               	movlw	255
  6253  00E2E4  1403               	andwf	___ftpack@arg+2,w,c
  6254  00E2E6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6255  00E2E8  5006               	movf	??___ftpack,w,c
  6256  00E2EA  1007               	iorwf	??___ftpack+1,w,c
  6257  00E2EC  1008               	iorwf	??___ftpack+2,w,c
  6258  00E2EE  B4D8               	btfsc	status,2,c
  6259  00E2F0  D006               	goto	l471
  6260  00E2F2  D7E6               	goto	l469
  6261  00E2F4  0604               	decf	___ftpack@exp,f,c
  6262  00E2F6  90D8               	bcf	status,0,c
  6263  00E2F8  3601               	rlcf	___ftpack@arg,f,c
  6264  00E2FA  3602               	rlcf	___ftpack@arg+1,f,c
  6265  00E2FC  3603               	rlcf	___ftpack@arg+2,f,c
  6266  00E2FE                     l471:
  6267  00E2FE  BE02               	btfsc	___ftpack@arg+1,7,c
  6268  00E300  D003               	goto	u1530
  6269  00E302  0E02               	movlw	2
  6270  00E304  6004               	cpfslt	___ftpack@exp,c
  6271  00E306  D7F6               	goto	l472
  6272  00E308                     u1530:
  6273  00E308  A004               	btfss	___ftpack@exp,0,c
  6274  00E30A  9E02               	bcf	___ftpack@arg+1,7,c
  6275  00E30C  90D8               	bcf	status,0,c
  6276  00E30E  3204               	rrcf	___ftpack@exp,f,c
  6277  00E310  5004               	movf	___ftpack@exp,w,c
  6278  00E312  1203               	iorwf	___ftpack@arg+2,f,c
  6279  00E314  5005               	movf	___ftpack@sign,w,c
  6280  00E316  A4D8               	btfss	status,2,c
  6281  00E318  8E03               	bsf	___ftpack@arg+2,7,c
  6282  00E31A  C001  F001         	movff	___ftpack@arg,?___ftpack
  6283  00E31E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6284  00E322  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6285  00E326  0012               	return	
  6286  00E328                     __end_of___ftpack:
  6287                           	opt stack 0
  6288                           tblptru	equ	0xFF8
  6289                           tblptrh	equ	0xFF7
  6290                           tblptrl	equ	0xFF6
  6291                           tablat	equ	0xFF5
  6292                           prodh	equ	0xFF4
  6293                           prodl	equ	0xFF3
  6294                           indf0	equ	0xFEF
  6295                           postinc0	equ	0xFEE
  6296                           fsr0h	equ	0xFEA
  6297                           fsr0l	equ	0xFE9
  6298                           wreg	equ	0xFE8
  6299                           postdec1	equ	0xFE5
  6300                           plusw1	equ	0xFE3
  6301                           fsr1l	equ	0xFE1
  6302                           postinc2	equ	0xFDE
  6303                           postdec2	equ	0xFDD
  6304                           plusw2	equ	0xFDB
  6305                           fsr2h	equ	0xFDA
  6306                           fsr2l	equ	0xFD9
  6307                           status	equ	0xFD8
  6308                           
  6309 ;; *************** function ___ftneg *****************
  6310 ;; Defined at:
  6311 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/ftneg.c"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;  f1              3    0[COMRAM] float 
  6314 ;; Auto vars:     Size  Location     Type
  6315 ;;		None
  6316 ;; Return value:  Size  Location     Type
  6317 ;;                  3    0[COMRAM] float 
  6318 ;; Registers used:
  6319 ;;		wreg, status,2, status,0
  6320 ;; Tracked objects:
  6321 ;;		On entry : 0/0
  6322 ;;		On exit  : 0/0
  6323 ;;		Unchanged: 0/0
  6324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6325 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6328 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6329 ;;Total ram usage:        3 bytes
  6330 ;; Hardware stack levels used:    1
  6331 ;; This function calls:
  6332 ;;		Nothing
  6333 ;; This function is called by:
  6334 ;;		_printf
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           	psect	text18
  6339  00DDD0                     __ptext18:
  6340                           	opt stack 0
  6341  00DDD0                     ___ftneg:
  6342                           	opt stack 29
  6343                           
  6344                           ;incstack = 0
  6345  00DDD0  5001               	movf	___ftneg@f1,w,c
  6346  00DDD2  1002               	iorwf	___ftneg@f1+1,w,c
  6347  00DDD4  1003               	iorwf	___ftneg@f1+2,w,c
  6348  00DDD6  B4D8               	btfsc	status,2,c
  6349  00DDD8  D006               	goto	l572
  6350  00DDDA  0E00               	movlw	0
  6351  00DDDC  1A01               	xorwf	___ftneg@f1,f,c
  6352  00DDDE  0E00               	movlw	0
  6353  00DDE0  1A02               	xorwf	___ftneg@f1+1,f,c
  6354  00DDE2  0E80               	movlw	128
  6355  00DDE4  1A03               	xorwf	___ftneg@f1+2,f,c
  6356  00DDE6                     l572:
  6357  00DDE6  C001  F001         	movff	___ftneg@f1,?___ftneg
  6358  00DDEA  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  6359  00DDEE  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  6360  00DDF2  0012               	return		;funcret
  6361  00DDF4                     __end_of___ftneg:
  6362                           	opt stack 0
  6363                           tblptru	equ	0xFF8
  6364                           tblptrh	equ	0xFF7
  6365                           tblptrl	equ	0xFF6
  6366                           tablat	equ	0xFF5
  6367                           prodh	equ	0xFF4
  6368                           prodl	equ	0xFF3
  6369                           indf0	equ	0xFEF
  6370                           postinc0	equ	0xFEE
  6371                           fsr0h	equ	0xFEA
  6372                           fsr0l	equ	0xFE9
  6373                           wreg	equ	0xFE8
  6374                           postdec1	equ	0xFE5
  6375                           plusw1	equ	0xFE3
  6376                           fsr1l	equ	0xFE1
  6377                           postinc2	equ	0xFDE
  6378                           postdec2	equ	0xFDD
  6379                           plusw2	equ	0xFDB
  6380                           fsr2h	equ	0xFDA
  6381                           fsr2l	equ	0xFD9
  6382                           status	equ	0xFD8
  6383                           
  6384 ;; *************** function ___ftge *****************
  6385 ;; Defined at:
  6386 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/ftge.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;  ff1             3    0[COMRAM] float 
  6389 ;;  ff2             3    3[COMRAM] float 
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;		None
  6392 ;; Return value:  Size  Location     Type
  6393 ;;		None               void
  6394 ;; Registers used:
  6395 ;;		wreg, status,2, status,0
  6396 ;; Tracked objects:
  6397 ;;		On entry : 0/0
  6398 ;;		On exit  : 0/0
  6399 ;;		Unchanged: 0/0
  6400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6401 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6403 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6404 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6405 ;;Total ram usage:        9 bytes
  6406 ;; Hardware stack levels used:    1
  6407 ;; This function calls:
  6408 ;;		Nothing
  6409 ;; This function is called by:
  6410 ;;		_printf
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           	psect	text19
  6415  00E1EA                     __ptext19:
  6416                           	opt stack 0
  6417  00E1EA                     ___ftge:
  6418                           	opt stack 29
  6419                           
  6420                           ;incstack = 0
  6421  00E1EA  AE03               	btfss	___ftge@ff1+2,7,c
  6422  00E1EC  D016               	goto	l554
  6423  00E1EE  C001  F007         	movff	___ftge@ff1,??___ftge
  6424  00E1F2  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6425  00E1F6  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6426  00E1FA  1E07               	comf	??___ftge,f,c
  6427  00E1FC  1E08               	comf	??___ftge+1,f,c
  6428  00E1FE  1E09               	comf	??___ftge+2,f,c
  6429  00E200  2A07               	incf	??___ftge,f,c
  6430  00E202  0E00               	movlw	0
  6431  00E204  2208               	addwfc	??___ftge+1,f,c
  6432  00E206  2209               	addwfc	??___ftge+2,f,c
  6433  00E208  0E00               	movlw	0
  6434  00E20A  2407               	addwf	??___ftge,w,c
  6435  00E20C  6E01               	movwf	___ftge@ff1,c
  6436  00E20E  0E00               	movlw	0
  6437  00E210  2008               	addwfc	??___ftge+1,w,c
  6438  00E212  6E02               	movwf	___ftge@ff1+1,c
  6439  00E214  0E80               	movlw	128
  6440  00E216  2009               	addwfc	??___ftge+2,w,c
  6441  00E218  6E03               	movwf	___ftge@ff1+2,c
  6442  00E21A                     l554:
  6443  00E21A  AE06               	btfss	___ftge@ff2+2,7,c
  6444  00E21C  D016               	goto	l555
  6445  00E21E  C004  F007         	movff	___ftge@ff2,??___ftge
  6446  00E222  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6447  00E226  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6448  00E22A  1E07               	comf	??___ftge,f,c
  6449  00E22C  1E08               	comf	??___ftge+1,f,c
  6450  00E22E  1E09               	comf	??___ftge+2,f,c
  6451  00E230  2A07               	incf	??___ftge,f,c
  6452  00E232  0E00               	movlw	0
  6453  00E234  2208               	addwfc	??___ftge+1,f,c
  6454  00E236  2209               	addwfc	??___ftge+2,f,c
  6455  00E238  0E00               	movlw	0
  6456  00E23A  2407               	addwf	??___ftge,w,c
  6457  00E23C  6E04               	movwf	___ftge@ff2,c
  6458  00E23E  0E00               	movlw	0
  6459  00E240  2008               	addwfc	??___ftge+1,w,c
  6460  00E242  6E05               	movwf	___ftge@ff2+1,c
  6461  00E244  0E80               	movlw	128
  6462  00E246  2009               	addwfc	??___ftge+2,w,c
  6463  00E248  6E06               	movwf	___ftge@ff2+2,c
  6464  00E24A                     l555:
  6465  00E24A  0E00               	movlw	0
  6466  00E24C  1A01               	xorwf	___ftge@ff1,f,c
  6467  00E24E  0E00               	movlw	0
  6468  00E250  1A02               	xorwf	___ftge@ff1+1,f,c
  6469  00E252  0E80               	movlw	128
  6470  00E254  1A03               	xorwf	___ftge@ff1+2,f,c
  6471  00E256  0E00               	movlw	0
  6472  00E258  1A04               	xorwf	___ftge@ff2,f,c
  6473  00E25A  0E00               	movlw	0
  6474  00E25C  1A05               	xorwf	___ftge@ff2+1,f,c
  6475  00E25E  0E80               	movlw	128
  6476  00E260  1A06               	xorwf	___ftge@ff2+2,f,c
  6477  00E262  5004               	movf	___ftge@ff2,w,c
  6478  00E264  5C01               	subwf	___ftge@ff1,w,c
  6479  00E266  5005               	movf	___ftge@ff2+1,w,c
  6480  00E268  5802               	subwfb	___ftge@ff1+1,w,c
  6481  00E26A  5006               	movf	___ftge@ff2+2,w,c
  6482  00E26C  5803               	subwfb	___ftge@ff1+2,w,c
  6483  00E26E  B0D8               	btfsc	status,0,c
  6484  00E270  D002               	goto	l2033
  6485  00E272  90D8               	bcf	status,0,c
  6486  00E274  0012               	return	
  6487  00E276                     l2033:
  6488  00E276  80D8               	bsf	status,0,c
  6489  00E278  0012               	return	
  6490  00E27A                     __end_of___ftge:
  6491                           	opt stack 0
  6492                           tblptru	equ	0xFF8
  6493                           tblptrh	equ	0xFF7
  6494                           tblptrl	equ	0xFF6
  6495                           tablat	equ	0xFF5
  6496                           prodh	equ	0xFF4
  6497                           prodl	equ	0xFF3
  6498                           indf0	equ	0xFEF
  6499                           postinc0	equ	0xFEE
  6500                           fsr0h	equ	0xFEA
  6501                           fsr0l	equ	0xFE9
  6502                           wreg	equ	0xFE8
  6503                           postdec1	equ	0xFE5
  6504                           plusw1	equ	0xFE3
  6505                           fsr1l	equ	0xFE1
  6506                           postinc2	equ	0xFDE
  6507                           postdec2	equ	0xFDD
  6508                           plusw2	equ	0xFDB
  6509                           fsr2h	equ	0xFDA
  6510                           fsr2l	equ	0xFD9
  6511                           status	equ	0xFD8
  6512                           
  6513 ;; *************** function _lcd_shift_display *****************
  6514 ;; Defined at:
  6515 ;;		line 114 in file "lcd.c"
  6516 ;; Parameters:    Size  Location     Type
  6517 ;;  numChars        1    wreg     unsigned char 
  6518 ;;  direction       1    3[COMRAM] unsigned char 
  6519 ;; Auto vars:     Size  Location     Type
  6520 ;;  numChars        1    4[COMRAM] unsigned char 
  6521 ;;  n               1    5[COMRAM] unsigned char 
  6522 ;; Return value:  Size  Location     Type
  6523 ;;                  1    wreg      void 
  6524 ;; Registers used:
  6525 ;;		wreg, status,2, status,0, cstack
  6526 ;; Tracked objects:
  6527 ;;		On entry : 0/0
  6528 ;;		On exit  : 0/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6531 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6532 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6534 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6535 ;;Total ram usage:        3 bytes
  6536 ;; Hardware stack levels used:    1
  6537 ;; Hardware stack levels required when called:    2
  6538 ;; This function calls:
  6539 ;;		_lcdInst
  6540 ;; This function is called by:
  6541 ;;		_main
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545                           	psect	text20
  6546  00DDB4                     __ptext20:
  6547                           	opt stack 0
  6548  00DDB4                     _lcd_shift_display:
  6549                           	opt stack 28
  6550                           
  6551                           ;incstack = 0
  6552                           ;lcd_shift_display@numChars stored from wreg
  6553  00DDB4  6E05               	movwf	lcd_shift_display@numChars,c
  6554                           
  6555                           ;lcd.c: 126: for(unsigned char n = numChars; n > 0; n--){
  6556  00DDB6  C005  F006         	movff	lcd_shift_display@numChars,lcd_shift_display@n
  6557  00DDBA                     l2887:
  6558  00DDBA  5006               	movf	lcd_shift_display@n,w,c
  6559  00DDBC  B4D8               	btfsc	status,2,c
  6560  00DDBE  0012               	return	
  6561                           
  6562                           ;lcd.c: 129: lcdInst((unsigned char)(0x18 | (direction << 2)));
  6563  00DDC0  4404               	rlncf	lcd_shift_display@direction,w,c
  6564  00DDC2  46E8               	rlncf	wreg,f,c
  6565  00DDC4  0BFC               	andlw	252
  6566  00DDC6  0918               	iorlw	24
  6567  00DDC8  ECB8  F06E         	call	_lcdInst
  6568  00DDCC  0606               	decf	lcd_shift_display@n,f,c
  6569  00DDCE  D7F5               	goto	l2887
  6570  00DDD0                     __end_of_lcd_shift_display:
  6571                           	opt stack 0
  6572                           tblptru	equ	0xFF8
  6573                           tblptrh	equ	0xFF7
  6574                           tblptrl	equ	0xFF6
  6575                           tablat	equ	0xFF5
  6576                           prodh	equ	0xFF4
  6577                           prodl	equ	0xFF3
  6578                           indf0	equ	0xFEF
  6579                           postinc0	equ	0xFEE
  6580                           fsr0h	equ	0xFEA
  6581                           fsr0l	equ	0xFE9
  6582                           wreg	equ	0xFE8
  6583                           postdec1	equ	0xFE5
  6584                           plusw1	equ	0xFE3
  6585                           fsr1l	equ	0xFE1
  6586                           postinc2	equ	0xFDE
  6587                           postdec2	equ	0xFDD
  6588                           plusw2	equ	0xFDB
  6589                           fsr2h	equ	0xFDA
  6590                           fsr2l	equ	0xFD9
  6591                           status	equ	0xFD8
  6592                           
  6593 ;; *************** function _lcd_set_cursor *****************
  6594 ;; Defined at:
  6595 ;;		line 80 in file "lcd.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;  x               1    wreg     unsigned char 
  6598 ;;  y               1    6[COMRAM] unsigned char 
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  x               1    8[COMRAM] unsigned char 
  6601 ;;  i               1    9[COMRAM] unsigned char 
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1    wreg      void 
  6604 ;; Registers used:
  6605 ;;		wreg, status,2, status,0, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6611 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;Total ram usage:        4 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    3
  6618 ;; This function calls:
  6619 ;;		_lcdInst
  6620 ;;		_lcd_shift_cursor
  6621 ;; This function is called by:
  6622 ;;		_main
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           	psect	text21
  6627  00DE6E                     __ptext21:
  6628                           	opt stack 0
  6629  00DE6E                     _lcd_set_cursor:
  6630                           	opt stack 27
  6631                           
  6632                           ;incstack = 0
  6633                           ;lcd_set_cursor@x stored from wreg
  6634  00DE6E  6E09               	movwf	lcd_set_cursor@x,c
  6635                           
  6636                           ;lcd.c: 90: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  6637  00DE70  0E80               	movlw	128
  6638  00DE72  ECB8  F06E         	call	_lcdInst
  6639  00DE76  0E41               	movlw	65
  6640  00DE78  6E08               	movwf	??_lcd_set_cursor& (0+255),c
  6641  00DE7A  0EEE               	movlw	238
  6642  00DE7C                     u3287:
  6643  00DE7C  2EE8               	decfsz	wreg,f,c
  6644  00DE7E  D7FE               	bra	u3287
  6645  00DE80  2E08               	decfsz	??_lcd_set_cursor& (0+255),f,c
  6646  00DE82  D7FC               	bra	u3287
  6647  00DE84  D000               	nop2	
  6648                           
  6649                           ;lcd.c: 91: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  6650  00DE86  0E00               	movlw	0
  6651  00DE88  6E0A               	movwf	lcd_set_cursor@i,c
  6652  00DE8A  D004               	goto	l114
  6653  00DE8C  0EC0               	movlw	192
  6654  00DE8E  ECB8  F06E         	call	_lcdInst
  6655  00DE92  2A0A               	incf	lcd_set_cursor@i,f,c
  6656  00DE94                     l114:
  6657  00DE94  5007               	movf	lcd_set_cursor@y,w,c
  6658  00DE96  5C0A               	subwf	lcd_set_cursor@i,w,c
  6659  00DE98  A0D8               	btfss	status,0,c
  6660  00DE9A  D7F8               	goto	l115
  6661                           
  6662                           ;lcd.c: 92: lcd_shift_cursor(x, 1);
  6663  00DE9C  0E01               	movlw	1
  6664  00DE9E  6E04               	movwf	lcd_shift_cursor@direction,c
  6665  00DEA0  5009               	movf	lcd_set_cursor@x,w,c
  6666  00DEA2  ECCC  F06E         	call	_lcd_shift_cursor
  6667  00DEA6  0012               	return		;funcret
  6668  00DEA8                     __end_of_lcd_set_cursor:
  6669                           	opt stack 0
  6670                           tblptru	equ	0xFF8
  6671                           tblptrh	equ	0xFF7
  6672                           tblptrl	equ	0xFF6
  6673                           tablat	equ	0xFF5
  6674                           prodh	equ	0xFF4
  6675                           prodl	equ	0xFF3
  6676                           indf0	equ	0xFEF
  6677                           postinc0	equ	0xFEE
  6678                           fsr0h	equ	0xFEA
  6679                           fsr0l	equ	0xFE9
  6680                           wreg	equ	0xFE8
  6681                           postdec1	equ	0xFE5
  6682                           plusw1	equ	0xFE3
  6683                           fsr1l	equ	0xFE1
  6684                           postinc2	equ	0xFDE
  6685                           postdec2	equ	0xFDD
  6686                           plusw2	equ	0xFDB
  6687                           fsr2h	equ	0xFDA
  6688                           fsr2l	equ	0xFD9
  6689                           status	equ	0xFD8
  6690                           
  6691 ;; *************** function _lcd_shift_cursor *****************
  6692 ;; Defined at:
  6693 ;;		line 95 in file "lcd.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;  numChars        1    wreg     unsigned char 
  6696 ;;  direction       1    3[COMRAM] unsigned char 
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  numChars        1    4[COMRAM] unsigned char 
  6699 ;;  n               1    5[COMRAM] unsigned char 
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      void 
  6702 ;; Registers used:
  6703 ;;		wreg, status,2, status,0, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6709 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6710 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;Total ram usage:        3 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    2
  6716 ;; This function calls:
  6717 ;;		_lcdInst
  6718 ;; This function is called by:
  6719 ;;		_lcd_set_cursor
  6720 ;; This function uses a non-reentrant model
  6721 ;;
  6722                           
  6723                           	psect	text22
  6724  00DD98                     __ptext22:
  6725                           	opt stack 0
  6726  00DD98                     _lcd_shift_cursor:
  6727                           	opt stack 27
  6728                           
  6729                           ;incstack = 0
  6730                           ;lcd_shift_cursor@numChars stored from wreg
  6731  00DD98  6E05               	movwf	lcd_shift_cursor@numChars,c
  6732                           
  6733                           ;lcd.c: 107: for(unsigned char n = numChars; n > 0; n--){
  6734  00DD9A  C005  F006         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  6735  00DD9E                     l2329:
  6736  00DD9E  5006               	movf	lcd_shift_cursor@n,w,c
  6737  00DDA0  B4D8               	btfsc	status,2,c
  6738  00DDA2  0012               	return	
  6739                           
  6740                           ;lcd.c: 110: lcdInst((unsigned char)(0x10 | (direction << 2)));
  6741  00DDA4  4404               	rlncf	lcd_shift_cursor@direction,w,c
  6742  00DDA6  46E8               	rlncf	wreg,f,c
  6743  00DDA8  0BFC               	andlw	252
  6744  00DDAA  0910               	iorlw	16
  6745  00DDAC  ECB8  F06E         	call	_lcdInst
  6746  00DDB0  0606               	decf	lcd_shift_cursor@n,f,c
  6747  00DDB2  D7F5               	goto	l2329
  6748  00DDB4                     __end_of_lcd_shift_cursor:
  6749                           	opt stack 0
  6750                           tblptru	equ	0xFF8
  6751                           tblptrh	equ	0xFF7
  6752                           tblptrl	equ	0xFF6
  6753                           tablat	equ	0xFF5
  6754                           prodh	equ	0xFF4
  6755                           prodl	equ	0xFF3
  6756                           indf0	equ	0xFEF
  6757                           postinc0	equ	0xFEE
  6758                           fsr0h	equ	0xFEA
  6759                           fsr0l	equ	0xFE9
  6760                           wreg	equ	0xFE8
  6761                           postdec1	equ	0xFE5
  6762                           plusw1	equ	0xFE3
  6763                           fsr1l	equ	0xFE1
  6764                           postinc2	equ	0xFDE
  6765                           postdec2	equ	0xFDD
  6766                           plusw2	equ	0xFDB
  6767                           fsr2h	equ	0xFDA
  6768                           fsr2l	equ	0xFD9
  6769                           status	equ	0xFD8
  6770                           
  6771 ;; *************** function _initLCD *****************
  6772 ;; Defined at:
  6773 ;;		line 60 in file "lcd.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;		None
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;		None
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      void 
  6780 ;; Registers used:
  6781 ;;		wreg, status,2, status,0, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;Total ram usage:        1 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    2
  6794 ;; This function calls:
  6795 ;;		_lcdInst
  6796 ;; This function is called by:
  6797 ;;		_main
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text23
  6802  00DEE8                     __ptext23:
  6803                           	opt stack 0
  6804  00DEE8                     _initLCD:
  6805                           	opt stack 28
  6806                           
  6807                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  6808                           
  6809                           ;incstack = 0
  6810  00DEE8  0EC3               	movlw	195
  6811  00DEEA  6E04               	movwf	??_initLCD& (0+255),c
  6812  00DEEC  0ECD               	movlw	205
  6813  00DEEE                     u3297:
  6814  00DEEE  2EE8               	decfsz	wreg,f,c
  6815  00DEF0  D7FE               	bra	u3297
  6816  00DEF2  2E04               	decfsz	??_initLCD& (0+255),f,c
  6817  00DEF4  D7FC               	bra	u3297
  6818  00DEF6  F000               	nop	
  6819                           
  6820                           ;lcd.c: 69: lcdInst(0b00110011);
  6821  00DEF8  0E33               	movlw	51
  6822  00DEFA  ECB8  F06E         	call	_lcdInst
  6823                           
  6824                           ;lcd.c: 70: lcdInst(0b00110010);
  6825  00DEFE  0E32               	movlw	50
  6826  00DF00  ECB8  F06E         	call	_lcdInst
  6827                           
  6828                           ;lcd.c: 71: lcdInst(0b00101000);
  6829  00DF04  0E28               	movlw	40
  6830  00DF06  ECB8  F06E         	call	_lcdInst
  6831                           
  6832                           ;lcd.c: 72: lcdInst(0b00001111);
  6833  00DF0A  0E0F               	movlw	15
  6834  00DF0C  ECB8  F06E         	call	_lcdInst
  6835                           
  6836                           ;lcd.c: 73: lcdInst(0b00000110);
  6837  00DF10  0E06               	movlw	6
  6838  00DF12  ECB8  F06E         	call	_lcdInst
  6839                           
  6840                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6841  00DF16  0E01               	movlw	1
  6842  00DF18  ECB8  F06E         	call	_lcdInst
  6843  00DF1C  0EC3               	movlw	195
  6844  00DF1E  6E04               	movwf	??_initLCD& (0+255),c
  6845  00DF20  0ECD               	movlw	205
  6846  00DF22                     u3307:
  6847  00DF22  2EE8               	decfsz	wreg,f,c
  6848  00DF24  D7FE               	bra	u3307
  6849  00DF26  2E04               	decfsz	??_initLCD& (0+255),f,c
  6850  00DF28  D7FC               	bra	u3307
  6851  00DF2A  F000               	nop	
  6852                           
  6853                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  6854  00DF2C  0E0F               	movlw	15
  6855  00DF2E  ECB8  F06E         	call	_lcdInst
  6856  00DF32  0012               	return		;funcret
  6857  00DF34                     __end_of_initLCD:
  6858                           	opt stack 0
  6859                           tblptru	equ	0xFF8
  6860                           tblptrh	equ	0xFF7
  6861                           tblptrl	equ	0xFF6
  6862                           tablat	equ	0xFF5
  6863                           prodh	equ	0xFF4
  6864                           prodl	equ	0xFF3
  6865                           indf0	equ	0xFEF
  6866                           postinc0	equ	0xFEE
  6867                           fsr0h	equ	0xFEA
  6868                           fsr0l	equ	0xFE9
  6869                           wreg	equ	0xFE8
  6870                           postdec1	equ	0xFE5
  6871                           plusw1	equ	0xFE3
  6872                           fsr1l	equ	0xFE1
  6873                           postinc2	equ	0xFDE
  6874                           postdec2	equ	0xFDD
  6875                           plusw2	equ	0xFDB
  6876                           fsr2h	equ	0xFDA
  6877                           fsr2l	equ	0xFD9
  6878                           status	equ	0xFD8
  6879                           
  6880 ;; *************** function _lcdInst *****************
  6881 ;; Defined at:
  6882 ;;		line 11 in file "lcd.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;  data            1    wreg     unsigned char 
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;  data            1    2[COMRAM] unsigned char 
  6887 ;; Return value:  Size  Location     Type
  6888 ;;                  1    wreg      void 
  6889 ;; Registers used:
  6890 ;;		wreg, status,2, status,0, cstack
  6891 ;; Tracked objects:
  6892 ;;		On entry : 0/0
  6893 ;;		On exit  : 0/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6897 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6900 ;;Total ram usage:        1 bytes
  6901 ;; Hardware stack levels used:    1
  6902 ;; Hardware stack levels required when called:    1
  6903 ;; This function calls:
  6904 ;;		_lcdNibble
  6905 ;; This function is called by:
  6906 ;;		_main
  6907 ;;		_initLCD
  6908 ;;		_lcd_set_cursor
  6909 ;;		_lcd_shift_cursor
  6910 ;;		_lcd_shift_display
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	text24
  6915  00DD70                     __ptext24:
  6916                           	opt stack 0
  6917  00DD70                     _lcdInst:
  6918                           	opt stack 28
  6919                           
  6920                           ;incstack = 0
  6921                           ;lcdInst@data stored from wreg
  6922  00DD70  6E03               	movwf	lcdInst@data,c
  6923                           
  6924                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  6925  00DD72  948C               	bcf	3980,2,c	;volatile
  6926                           
  6927                           ;lcd.c: 20: lcdNibble(data);
  6928  00DD74  5003               	movf	lcdInst@data,w,c
  6929  00DD76  EC33  F070         	call	_lcdNibble
  6930                           
  6931                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  6932  00DD7A  0EC8               	movlw	200
  6933  00DD7C                     u3317:
  6934  00DD7C  D000               	nop2	
  6935  00DD7E  2EE8               	decfsz	wreg,f,c
  6936  00DD80  D7FD               	bra	u3317
  6937  00DD82  0012               	return		;funcret
  6938  00DD84                     __end_of_lcdInst:
  6939                           	opt stack 0
  6940                           tblptru	equ	0xFF8
  6941                           tblptrh	equ	0xFF7
  6942                           tblptrl	equ	0xFF6
  6943                           tablat	equ	0xFF5
  6944                           prodh	equ	0xFF4
  6945                           prodl	equ	0xFF3
  6946                           indf0	equ	0xFEF
  6947                           postinc0	equ	0xFEE
  6948                           fsr0h	equ	0xFEA
  6949                           fsr0l	equ	0xFE9
  6950                           wreg	equ	0xFE8
  6951                           postdec1	equ	0xFE5
  6952                           plusw1	equ	0xFE3
  6953                           fsr1l	equ	0xFE1
  6954                           postinc2	equ	0xFDE
  6955                           postdec2	equ	0xFDD
  6956                           plusw2	equ	0xFDB
  6957                           fsr2h	equ	0xFDA
  6958                           fsr2l	equ	0xFD9
  6959                           status	equ	0xFD8
  6960                           
  6961 ;; *************** function _lcdNibble *****************
  6962 ;; Defined at:
  6963 ;;		line 37 in file "lcd.c"
  6964 ;; Parameters:    Size  Location     Type
  6965 ;;  data            1    wreg     unsigned char 
  6966 ;; Auto vars:     Size  Location     Type
  6967 ;;  data            1    1[COMRAM] unsigned char 
  6968 ;;  temp            1    0[COMRAM] unsigned char 
  6969 ;; Return value:  Size  Location     Type
  6970 ;;                  1    wreg      void 
  6971 ;; Registers used:
  6972 ;;		wreg, status,2, status,0
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;Total ram usage:        2 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; This function calls:
  6985 ;;		Nothing
  6986 ;; This function is called by:
  6987 ;;		_lcdInst
  6988 ;;		_putch
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           	psect	text25
  6993  00E066                     __ptext25:
  6994                           	opt stack 0
  6995  00E066                     _lcdNibble:
  6996                           	opt stack 29
  6997                           
  6998                           ;incstack = 0
  6999                           ;lcdNibble@data stored from wreg
  7000  00E066  6E02               	movwf	lcdNibble@data,c
  7001                           
  7002                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  7003  00E068  5002               	movf	lcdNibble@data,w,c
  7004  00E06A  0BF0               	andlw	240
  7005  00E06C  6E01               	movwf	lcdNibble@temp,c
  7006                           
  7007                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  7008  00E06E  508C               	movf	3980,w,c	;volatile
  7009  00E070  0B0F               	andlw	15
  7010  00E072  6E8C               	movwf	3980,c	;volatile
  7011                           
  7012                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  7013  00E074  5001               	movf	lcdNibble@temp,w,c
  7014  00E076  108C               	iorwf	3980,w,c	;volatile
  7015  00E078  6E8C               	movwf	3980,c	;volatile
  7016                           
  7017                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  7018  00E07A  0E00               	movlw	0
  7019  00E07C  BEF2               	btfsc	intcon,7,c	;volatile
  7020  00E07E  0E01               	movlw	1
  7021  00E080  6E7C               	movwf	lcd@LCDinterruptState,c
  7022  00E082  9EF2               	bcf	intcon,7,c	;volatile
  7023  00E084  868C               	bsf	3980,3,c	;volatile
  7024  00E086  0E53               	movlw	83
  7025  00E088                     u3327:
  7026  00E088  2EE8               	decfsz	wreg,f,c
  7027  00E08A  D7FE               	bra	u3327
  7028  00E08C  F000               	nop	
  7029  00E08E  968C               	bcf	3980,3,c	;volatile
  7030  00E090  0EC8               	movlw	200
  7031  00E092                     u3337:
  7032  00E092  D000               	nop2	
  7033  00E094  2EE8               	decfsz	wreg,f,c
  7034  00E096  D7FD               	bra	u3337
  7035  00E098  B07C               	btfsc	lcd@LCDinterruptState,0,c
  7036  00E09A  D002               	bra	u1465
  7037  00E09C  9EF2               	bcf	intcon,7,c	;volatile
  7038  00E09E  D001               	bra	u1466
  7039  00E0A0                     u1465:
  7040  00E0A0  8EF2               	bsf	intcon,7,c	;volatile
  7041  00E0A2                     u1466:
  7042                           
  7043                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  7044  00E0A2  3802               	swapf	lcdNibble@data,w,c
  7045  00E0A4  0BF0               	andlw	240
  7046  00E0A6  6E02               	movwf	lcdNibble@data,c
  7047                           
  7048                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  7049  00E0A8  5002               	movf	lcdNibble@data,w,c
  7050  00E0AA  0BF0               	andlw	240
  7051  00E0AC  6E01               	movwf	lcdNibble@temp,c
  7052                           
  7053                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  7054  00E0AE  508C               	movf	3980,w,c	;volatile
  7055  00E0B0  0B0F               	andlw	15
  7056  00E0B2  6E8C               	movwf	3980,c	;volatile
  7057                           
  7058                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  7059  00E0B4  5001               	movf	lcdNibble@temp,w,c
  7060  00E0B6  108C               	iorwf	3980,w,c	;volatile
  7061  00E0B8  6E8C               	movwf	3980,c	;volatile
  7062                           
  7063                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  7064  00E0BA  0E00               	movlw	0
  7065  00E0BC  BEF2               	btfsc	intcon,7,c	;volatile
  7066  00E0BE  0E01               	movlw	1
  7067  00E0C0  6E7C               	movwf	lcd@LCDinterruptState,c
  7068  00E0C2  9EF2               	bcf	intcon,7,c	;volatile
  7069  00E0C4  868C               	bsf	3980,3,c	;volatile
  7070  00E0C6  0E53               	movlw	83
  7071  00E0C8                     u3347:
  7072  00E0C8  2EE8               	decfsz	wreg,f,c
  7073  00E0CA  D7FE               	bra	u3347
  7074  00E0CC  F000               	nop	
  7075  00E0CE  968C               	bcf	3980,3,c	;volatile
  7076  00E0D0  0EC8               	movlw	200
  7077  00E0D2                     u3357:
  7078  00E0D2  D000               	nop2	
  7079  00E0D4  2EE8               	decfsz	wreg,f,c
  7080  00E0D6  D7FD               	bra	u3357
  7081  00E0D8  B07C               	btfsc	lcd@LCDinterruptState,0,c
  7082  00E0DA  D002               	bra	u1475
  7083  00E0DC  9EF2               	bcf	intcon,7,c	;volatile
  7084  00E0DE  D001               	bra	u1476
  7085  00E0E0                     u1475:
  7086  00E0E0  8EF2               	bsf	intcon,7,c	;volatile
  7087  00E0E2                     u1476:
  7088  00E0E2  0012               	return		;funcret
  7089  00E0E4                     __end_of_lcdNibble:
  7090                           	opt stack 0
  7091                           tblptru	equ	0xFF8
  7092                           tblptrh	equ	0xFF7
  7093                           tblptrl	equ	0xFF6
  7094                           tablat	equ	0xFF5
  7095                           prodh	equ	0xFF4
  7096                           prodl	equ	0xFF3
  7097                           intcon	equ	0xFF2
  7098                           indf0	equ	0xFEF
  7099                           postinc0	equ	0xFEE
  7100                           fsr0h	equ	0xFEA
  7101                           fsr0l	equ	0xFE9
  7102                           wreg	equ	0xFE8
  7103                           postdec1	equ	0xFE5
  7104                           plusw1	equ	0xFE3
  7105                           fsr1l	equ	0xFE1
  7106                           postinc2	equ	0xFDE
  7107                           postdec2	equ	0xFDD
  7108                           plusw2	equ	0xFDB
  7109                           fsr2h	equ	0xFDA
  7110                           fsr2l	equ	0xFD9
  7111                           status	equ	0xFD8
  7112                           
  7113 ;; *************** function ___lbmod *****************
  7114 ;; Defined at:
  7115 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/lbmod.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;  dividend        1    wreg     unsigned char 
  7118 ;;  divisor         1    0[COMRAM] unsigned char 
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;  dividend        1    1[COMRAM] unsigned char 
  7121 ;;  rem             1    3[COMRAM] unsigned char 
  7122 ;;  counter         1    2[COMRAM] unsigned char 
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  1    wreg      unsigned char 
  7125 ;; Registers used:
  7126 ;;		wreg, status,2, status,0
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7132 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;Total ram usage:        4 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; This function calls:
  7139 ;;		Nothing
  7140 ;; This function is called by:
  7141 ;;		_main
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           	psect	text26
  7146  00DE1A                     __ptext26:
  7147                           	opt stack 0
  7148  00DE1A                     ___lbmod:
  7149                           	opt stack 30
  7150                           
  7151                           ;incstack = 0
  7152                           ;___lbmod@dividend stored from wreg
  7153  00DE1A  6E02               	movwf	___lbmod@dividend,c
  7154  00DE1C  0E08               	movlw	8
  7155  00DE1E  6E03               	movwf	___lbmod@counter,c
  7156  00DE20  0E00               	movlw	0
  7157  00DE22  6E04               	movwf	___lbmod@rem,c
  7158  00DE24  90D8               	bcf	status,0,c
  7159  00DE26  3402               	rlcf	___lbmod@dividend,w,c
  7160  00DE28  3404               	rlcf	___lbmod@rem,w,c
  7161  00DE2A  6E04               	movwf	___lbmod@rem,c
  7162  00DE2C  90D8               	bcf	status,0,c
  7163  00DE2E  3602               	rlcf	___lbmod@dividend,f,c
  7164  00DE30  5001               	movf	___lbmod@divisor,w,c
  7165  00DE32  5C04               	subwf	___lbmod@rem,w,c
  7166  00DE34  A0D8               	btfss	status,0,c
  7167  00DE36  D002               	goto	l607
  7168  00DE38  5001               	movf	___lbmod@divisor,w,c
  7169  00DE3A  5E04               	subwf	___lbmod@rem,f,c
  7170  00DE3C                     l607:
  7171  00DE3C  2E03               	decfsz	___lbmod@counter,f,c
  7172  00DE3E  D7F2               	goto	l606
  7173  00DE40  5004               	movf	___lbmod@rem,w,c
  7174  00DE42  0012               	return	
  7175  00DE44                     __end_of___lbmod:
  7176                           	opt stack 0
  7177                           tblptru	equ	0xFF8
  7178                           tblptrh	equ	0xFF7
  7179                           tblptrl	equ	0xFF6
  7180                           tablat	equ	0xFF5
  7181                           prodh	equ	0xFF4
  7182                           prodl	equ	0xFF3
  7183                           intcon	equ	0xFF2
  7184                           indf0	equ	0xFEF
  7185                           postinc0	equ	0xFEE
  7186                           fsr0h	equ	0xFEA
  7187                           fsr0l	equ	0xFE9
  7188                           wreg	equ	0xFE8
  7189                           postdec1	equ	0xFE5
  7190                           plusw1	equ	0xFE3
  7191                           fsr1l	equ	0xFE1
  7192                           postinc2	equ	0xFDE
  7193                           postdec2	equ	0xFDD
  7194                           plusw2	equ	0xFDB
  7195                           fsr2h	equ	0xFDA
  7196                           fsr2l	equ	0xFD9
  7197                           status	equ	0xFD8
  7198                           tblptru	equ	0xFF8
  7199                           tblptrh	equ	0xFF7
  7200                           tblptrl	equ	0xFF6
  7201                           tablat	equ	0xFF5
  7202                           prodh	equ	0xFF4
  7203                           prodl	equ	0xFF3
  7204                           intcon	equ	0xFF2
  7205                           indf0	equ	0xFEF
  7206                           postinc0	equ	0xFEE
  7207                           fsr0h	equ	0xFEA
  7208                           fsr0l	equ	0xFE9
  7209                           wreg	equ	0xFE8
  7210                           postdec1	equ	0xFE5
  7211                           plusw1	equ	0xFE3
  7212                           fsr1l	equ	0xFE1
  7213                           postinc2	equ	0xFDE
  7214                           postdec2	equ	0xFDD
  7215                           plusw2	equ	0xFDB
  7216                           fsr2h	equ	0xFDA
  7217                           fsr2l	equ	0xFD9
  7218                           status	equ	0xFD8
  7219                           
  7220                           	psect	rparam
  7221  0000                     tblptru	equ	0xFF8
  7222                           tblptrh	equ	0xFF7
  7223                           tblptrl	equ	0xFF6
  7224                           tablat	equ	0xFF5
  7225                           prodh	equ	0xFF4
  7226                           prodl	equ	0xFF3
  7227                           intcon	equ	0xFF2
  7228                           indf0	equ	0xFEF
  7229                           postinc0	equ	0xFEE
  7230                           fsr0h	equ	0xFEA
  7231                           fsr0l	equ	0xFE9
  7232                           wreg	equ	0xFE8
  7233                           postdec1	equ	0xFE5
  7234                           plusw1	equ	0xFE3
  7235                           fsr1l	equ	0xFE1
  7236                           postinc2	equ	0xFDE
  7237                           postdec2	equ	0xFDD
  7238                           plusw2	equ	0xFDB
  7239                           fsr2h	equ	0xFDA
  7240                           fsr2l	equ	0xFD9
  7241                           status	equ	0xFD8


Data Sizes:
    Strings     251
    Constant    124
    Data        7
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    116     125
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_22(CODE[17]), STR_21(CODE[8]), STR_20(CODE[15]), STR_19(CODE[3]), 
		 -> STR_18(CODE[3]), STR_17(CODE[17]), STR_16(CODE[16]), STR_15(CODE[16]), 
		 -> STR_14(CODE[14]), STR_13(CODE[8]), STR_12(CODE[11]), STR_11(CODE[8]), 
		 -> STR_10(CODE[11]), STR_9(CODE[11]), STR_8(CODE[17]), STR_7(CODE[11]), 
		 -> STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[12]), STR_3(CODE[15]), 
		 -> STR_2(CODE[15]), STR_1(CODE[13]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_23(CODE[7]), main@arr(COMRAM[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcdNibble
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _lcd_shift_display->_lcdInst
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0   55092
                                            100 COMRAM    16    16      0
                            ___awmod
                            ___lbmod
                            _initLCD
                            _lcdInst
                     _lcd_set_cursor
                  _lcd_shift_display
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    36      6   50518
                                             63 COMRAM    37    31      6
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   11829
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11631
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2591
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5007
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1968
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2572
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4042
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3697
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2427
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _lcd_shift_display                                    3     2      1     377
                                              3 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcd_set_cursor                                       4     3      1     960
                                              6 COMRAM     4     3      1
                            ___lbmod (ARG)
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (2) _lcd_shift_cursor                                     3     2      1     301
                                              3 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___lbmod                                              4     3      1     387
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   ___lbmod
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _lcd_set_cursor
     ___lbmod (ARG)
     _lcdInst (ARG)
       _lcdNibble
     _lcd_shift_cursor (ARG)
       _lcdInst
         _lcdNibble
   _lcd_shift_display
     _lcdInst
       _lcdNibble
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _putch
     _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     74      7D       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7D      34        0.0%
DATA                 0      0      7D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Jan 12 00:05:45 2018

                        l62 F4A8                          l63 F4F6                          l64 F5C2  
                        l65 F592                 __CFG_CPD$ON 000000                ___awdiv@sign 000C  
       ___wmul@multiplicand 0011                 __CFG_BORV$3 000000                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
              ___ftadd@exp1 0039                ___ftadd@exp2 0038                ___ftadd@sign 0037  
                       l114 DE94                         l210 FB64                         l115 DE8C  
                       l211 FB7C                         l203 FB26                         l212 FCAC  
                       l204 FA98                         l213 FBCC                         l230 FDD8  
                       l206 FB3C                         l223 FD4C                         l215 FCC2  
                       l207 FB30                         l152 EDB8                         l224 FD70  
                       l216 FCB6                         l401 E17A                         l153 ECD2  
                       l209 FB60                         l410 E1E0                         l402 E18A  
                       l146 EA6E                         l218 FD2C                         l170 F6AC  
                       l219 FCF0                         l171 F774                         l163 F68E  
                       l500 E7E6                         l404 E1A8                         l156 ED8E  
                       l228 FDCC                         l180 F72E                         l164 F69E  
                       l405 E1A0                         l421 E044                         l149 EB46  
                       l157 EEF6                         l229 FE5A                         l181 FCCC  
                       l510 E842                         l422 E04E                         l414 E00A  
                       l182 F7C4                         l166 F732                         l174 F6B0  
                       l511 E838                         l423 E05C                         l415 E016  
                       l159 EFB2                         l520 E876                         l440 E5EC  
                       l408 E1C8                         l192 F982                         l184 F854  
                       l176 F704                         l505 E84C                         l433 E52E  
                       l409 E1D2                         l417 E02C                         l185 F8B8  
                       l177 F6DA                         l169 F6A8                         l522 E8A4  
                       l418 E024                         l523 E8C0                         l435 E54C  
                       l187 F8DC                         l524 E8F0                         l436 E58E  
                       l540 E6CA                         l188 F91A                         l445 E620  
                       l437 E5BE                         l541 E6F2                         l189 F9D6  
                       l606 DE24                         l622 E146                         l446 E614  
                       l550 E746                         l198 FA3A                         l607 DE3C  
                       l471 E2FE                         l519 E880                         l623 E154  
                       l439 E5FC                         l543 E72E                         l472 E2F4  
                       l632 DFD6                         l640 DF3A                         l544 E71E  
                       l465 E2A2                         l633 DFE4                         l537 E664  
                       l561 E444                         l554 E21A                         l466 E298  
                       l618 E112                         l555 E24A                         l619 E106  
                       l539 E690                         l563 E46C                         l572 DDE6  
                       l468 E2D6                         l628 DFAE                         l564 E49E  
                       l469 E2C0                         l629 DFA2                         l549 E752  
                       l565 E4AE                         l590 E3EE                         l582 E354  
                       l591 E3E2                         l639 DF46                         l567 E4C6  
                       l496 E7BC                         l584 E3CA                         l568 E4D6  
                       l593 E40A                         l585 E3BA                         l578 DEBE  
              __CFG_CPB$OFF 000000                ___awmod@sign 0006                         wreg 000FE8  
           ?_lcd_set_cursor 0007                __CFG_LVP$OFF 000000                __CFG_WDT$OFF 000000  
                      l2033 E276                        l3133 F5F2                        l2329 DD9E  
                      l3149 F61E                        l3079 F40E                        l2741 F95E  
                      l2733 F91A                        l2761 FA3E                        l2845 FD74  
                      l2863 FDD8                        l2785 FB30                        l2887 DDBA  
                      STR_1 FF91                        STR_2 FF65                        STR_3 FF74  
                      STR_4 FF9E                        STR_5 FFCB                        STR_6 FFD5  
                      STR_7 FFC0                        STR_8 FF25                        STR_9 FFAA  
                      u2120 E758                        u2041 E648                        u2061 E674  
                      _LATA 000F89                        u2310 E3F4                        _LATB 000F8A  
                      u3007 F186                        _LATC 000F8B                        u1600 E7AE  
                      _LATD 000F8C                        u3017 F1A0                        _LATE 000F8D  
                      u1530 E308                        u2251 E338                        u3107 F2B6  
                      u3027 F1B6                        u1700 E854                        u2340 E116  
                      u2420 F6FC                        u3117 F2E8                        u3037 F1E8  
                      u1630 E7D8                        u2270 E372                        u2190 E626  
                      u2430 F726                        u3207 F400                        u3127 F306  
                      u3047 F206                        u2600 FA7C                        u2520 F8EC  
                      u1465 E0A0                        u1561 E77A                        u3217 F500  
                      u3137 F320                        u3057 F220                        u1466 E0A2  
                      u1490 E28A                        u1730 E888                        u2370 DFB2  
                      u2530 F92A                        u1475 E0E0                        u3307 DF22  
                      u1571 E78E                        u2275 E36A                        u2427 F6F2  
                      u3227 F56C                        u3147 F336                        u3067 F236  
                      u1476 E0E2                        u1660 E816                        u3317 DD7C  
                      u2437 F71C                        u3237 F5B4                        u3157 F36E  
                      u3077 F268                        u2630 FB4A                        u3327 E088  
                      u3247 F5D4                        u3167 F388                        u3087 F286  
                      u1920 E030                        u2640 FB5A                        u2560 F95E  
                      u2480 F7FC                        u3337 E092                        u3257 F656  
                      u3177 F39E                        u3097 F2A0                        u3347 E0C8  
                      u1771 E42C                        u3267 F676                        u3187 F3D0  
              printf@tmpval 005D                        u1860 E1AC                        u2740 FDB2  
                      u2900 F666                        u3357 E0D2                        u3277 DD90  
                      u2485 F7F2                        u3197 F3EA                        u2821 F160  
                      u3287 DE7C                        u1791 E454                        u2760 FE6A  
                      u3297 DEEE                        u2850 F510                        u2917 F022  
                      u2927 F03C                        u2880 F602                        u2937 F052  
                      u2947 F084                        u2957 F09E                        u2967 F0B4  
                      u2977 F0FA                        u2987 F114                        u2997 F12A  
                      _main EFDC                ___ftpack@arg 0001                ___ftpack@exp 0004  
                      fsr0h 000FEA                        indf0 000FEF                        fsr2h 000FDA  
                      fsr0l 000FE9                        fsr1l 000FE1                        fsr2l 000FD9  
                      prodh 000FF4                        prodl 000FF3                        start 0000  
             __CFG_IESO$OFF 000000               __CFG_MCLRE$ON 000000                ___ftmul@cntr 0022  
              ___param_bank 000000                ___ftmul@sign 0023            __end_of_LCD_LEFT FEFE  
              ___fttol@exp1 0039                ___fttol@lval 0035                       ?_main 0001  
           __end_of___awdiv E1EA             __end_of___ftadd E916                       STR_10 FFB5  
                     STR_11 FFDF                       STR_12 FFB5                       STR_20 FF56  
                     STR_13 FFEF                       STR_21 FFE7                       STR_14 FF83  
                     STR_22 FF03                       STR_23 FFF7                       STR_15 FF36  
                     STR_16 FF46                       STR_17 FF14                       STR_18 FFA7  
                     STR_19 FFA7             __end_of___awmod E066             __end_of___lbmod DE44  
           __end_of___ftneg DDF4             __end_of___lldiv E166             __end_of___ftmul E510  
           ___awdiv@divisor 0009             __end_of___llmod DFF6             __end_of___ftsub DEE8  
           __end_of___fttol E41C             ___awdiv@counter 000B                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94                       _TRISD 000F95  
                     _TRISE 000F96               __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
              ___lltoft@exp 0011             __end_of_lcdInst DD84              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000             __end_of_initLCD DF34              __CFG_EBTRB$OFF 000000  
           __end_of_dpowers FEAF                       _scale EB8C               ___ftpack@sign 0005  
                     _putch DD84                       main@i 006E                       main@x 0074  
                     tablat 000FF5           _LCDinterruptState 007D                       plusw1 000FE3  
                     plusw2 000FDB                       status 000FD8              __CFG_PBADEN$ON 000000  
           __initialization DE44                __end_of_main F684           ?_lcd_shift_cursor 0004  
            __CFG_OSC$HSPLL 000000           __end_of_LCD_RIGHT FEFF                      ??_main 0065  
             ___fttol@sign1 0034          ??_lcd_shift_cursor 0005               __activetblptr 000003  
      __size_of__tdiv_to_l_ 0132                      _ADCON0 000FC2                      _ADCON1 000FC1  
          ___llmod@dividend 000E                      ?_scale 0024            ___awdiv@dividend 0007  
                    ?_putch 0001            __end_of___ftpack E328            __end_of___lltoft DF90  
            __CFG_XINST$OFF 000000            __end_of__powers_ FED6                      ___ftge E1EA  
                    ___wmul DDF4                   ??___awdiv 000B                   ??___ftadd 0034  
            __CFG_STVREN$ON 000000                   ??___awmod 0005                   ??___lbmod 0002  
                 ??___ftneg 0004                   ??___lldiv 0009                   ??___ftmul 001B  
                 ??___llmod 0016                   ??___ftsub 0040                   ??___fttol 002F  
                    _fround E916               main@numShifts 0073            ___awdiv@quotient 000D  
           ___awmod@divisor 0003             ___awmod@counter 0005                   ??_lcdInst 0003  
                    _printf F684       ___ftmul@f3_as_product 001F                   ??_initLCD 0004  
              __pdataCOMRAM 0075                __mediumconst FE86                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8             ___lbmod@divisor 0001  
                __accesstop 0080     __end_of__initialization DE68             ___lbmod@counter 0003  
                ___ftadd@f1 002E                  ___ftadd@f2 0031                  ___ftge@ff1 0001  
                ___ftge@ff2 0004               ___rparam_used 000001                  ___ftneg@f1 0001  
                ___ftmul@f1 0015                  ___ftmul@f2 0018                  ___ftsub@f1 003A  
                ___ftsub@f2 003D                  ___fttol@f1 002B              __pcstackCOMRAM 0001  
                ___lltoft@c 0009               __end_of_scale EFDC           _lcd_shift_display DDB4  
             __end_of_putch DD98          ?_lcd_shift_display 0004            ??_lcd_set_cursor 0008  
        __size_of_lcdNibble 007E                  __div_to_l_ E510         ??_lcd_shift_display 0005  
           __div_to_l_@exp1 000C             __div_to_l_@cntr 000B                     ??_scale 0027  
           __div_to_l_@quot 0007                     ??_putch 0003               __div_to_l_@f1 0001  
             __div_to_l_@f2 0004                     ?___ftge 0001   __end_of_lcd_shift_display DDD0  
                   ?___wmul 000F                     ?_fround 0024                   ?___ftpack 0001  
                   ?_printf 0040                   ?___lltoft 0009        lcd@LCDinterruptState 007C  
         __end_of_lcdNibble E0E4           __end_of__npowers_ FEFD                     __Hparam 0000  
                   __Lparam 0000             __size_of___ftge 0090                     ___awdiv E166  
                   ___ftadd E76A                     ___awmod DFF6                     ___lbmod DE1A  
                   ___ftneg DDD0                     ___lldiv E0E4             __size_of___wmul 0026  
                   ___ftmul E41C                     ___llmod DF90                     ___ftsub DEA8  
                   ___fttol E328                  _fround$860 0027                  _fround$859 002A  
                   __pcinit DE44                  ??___ftpack 0006             __size_of_fround 0276  
                   __ramtop 1000                     _lcdInst DD70                  ??___lltoft 000D  
                   __ptext0 EFDC                     __ptext1 F684                     __ptext2 EB8C  
                   __ptext3 DD84                     __ptext4 E916                     __ptext5 DDF4  
                   __ptext6 E41C                     __ptext7 DFF6                     __ptext8 E166  
                   __ptext9 E638             __size_of_printf 0802                     _initLCD DEE8  
               ?__div_to_l_ 0001                     _dpowers FE87            ___awmod@dividend 0001  
                 _LCD_RIGHT FEFE                     main@arr 0067   __size_of_lcd_shift_cursor 001C  
      end_of_initialization DE68       __end_of_LCD_SIZE_HORZ FF01       __end_of_LCD_SIZE_VERT FF00  
           ___lldiv@divisor 0005             ___lldiv@counter 000D                     printf@c 0064  
                   printf@f 0040  __size_of_lcd_shift_display 001C                     postdec1 000FE5  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
            __tdiv_to_l_@f1 0001              __tdiv_to_l_@f2 0004                  _printf$862 004C  
             ??__tdiv_to_l_ 0007            ___lbmod@dividend 0002                 ___lbmod@rem 0004  
 lcd_shift_cursor@direction 0004         __size_of__div_to_l_ 0128                 ___ftmul@exp 001E  
            __end_of___ftge E27A              __end_of___wmul DE1A               __pidataCOMRAM DD69  
            __end_of_fround EB8C              __end_of_printf FE86         start_initialization DE44  
       __end_of__tdiv_to_l_ E76A             ___llmod@divisor 0012             ___llmod@counter 0016  
                  ??___ftge 0007                    ??___wmul 0013            __CFG_LPT1OSC$OFF 000000  
                  ??_fround 0027                    ??_printf 0046                  fround@prec 002D  
         __size_of___ftpack 00AE           __size_of___lltoft 005C                 __pbssCOMRAM 007C  
          _lcd_shift_cursor DD98           __CFG_CCP2MX$PORTC 000000               __pmediumconst FE86  
                 _lcdNibble E066                    ?___awdiv 0007                    ?___ftadd 002E  
                  ?___awmod 0001                    ?___lbmod 0001                    ?___ftneg 0001  
                  ?___lldiv 0001                    ?___ftmul 0015                    ?___llmod 000E  
                  ?___ftsub 003A                   __npowers_ FED6                    ?___fttol 002B  
                  ?_lcdInst 0001                 __tdiv_to_l_ E638                ??__div_to_l_ 0007  
                  ?_initLCD 0001   lcd_shift_display@numChars 0005                   _scale$861 0027  
            __size_of_scale 0450              __size_of_putch 0014                    _LCD_LEFT FEFD  
   __size_of_lcd_set_cursor 003A              ___wmul@product 0013                    _LATDbits 000F8C  
           lcd_set_cursor@i 000A             lcd_set_cursor@x 0009             lcd_set_cursor@y 0007  
        __end_of__div_to_l_ E638            __CFG_WDTPS$32768 000000                  ?_lcdNibble 0001  
                 main@F2986 0075                   main@i_110 0072                   main@i_108 0071  
         ___wmul@multiplier 000F               lcdNibble@data 0002          lcd_shift_display@n 0006  
                printf@flag 0051               lcdNibble@temp 0001                  printf@fval 0061  
                printf@prec 0055              _LCD_HORZ_LIMIT FF02                   copy_data0 DE58  
                  __Hrparam 0000                    __Lrparam 0000          __CFG_BOREN$SBORDIS 000000  
          __size_of___awdiv 0084            __size_of___ftadd 01AC            __size_of___awmod 0070  
          __size_of___lbmod 002A            __size_of___ftneg 0024            __size_of___lldiv 0082  
          __size_of___ftmul 00F4            __size_of___llmod 0066            __size_of___ftsub 0040  
          __size_of___fttol 00F4                    ___ftpack E27A                    ___lltoft DF34  
          __size_of_lcdInst 0014            __size_of_initLCD 004C      __end_of_LCD_HORZ_LIMIT FF03  
                  _main$858 006F                    __ptext10 E510                    __ptext11 DF34  
                  __ptext20 DDB4                    __ptext12 DF90                    __ptext21 DE6E  
                  __ptext13 E0E4                    __ptext22 DD98                    __ptext14 E328  
                  __ptext23 DEE8                    __ptext15 DEA8                    __ptext24 DD70  
                  __ptext16 E76A                    __ptext25 E066                    __ptext17 E27A  
                  __ptext26 DE1A                    __ptext18 DDD0                    __ptext19 E1EA  
                  __powers_ FEAF              _LCD_VERT_LIMIT FF01               __size_of_main 06A8  
               ??_lcdNibble 0001    __end_of_lcd_shift_cursor DDB4                   printf@exp 0057  
                 printf@val 0059           lcd_shift_cursor@n 0006                   putch@data 0003  
                _INTCONbits 000FF2      __end_of_LCD_VERT_LIMIT FF02                    scale@scl 002A  
            _lcd_set_cursor DE6E            __tdiv_to_l_@exp1 000F            __tdiv_to_l_@cntr 000E  
          __tdiv_to_l_@quot 000A               _LCD_SIZE_HORZ FF00               _LCD_SIZE_VERT FEFF  
          ___lldiv@dividend 0001  lcd_shift_display@direction 0004                    printf@ap 0053  
                  printf@cp 004F                 lcdInst@data 0003                ?__tdiv_to_l_ 0001  
          ___lldiv@quotient 0009      __end_of_lcd_set_cursor DEA8    lcd_shift_cursor@numChars 0005  
