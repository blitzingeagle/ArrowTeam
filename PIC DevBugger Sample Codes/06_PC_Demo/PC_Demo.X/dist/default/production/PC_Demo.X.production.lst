

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jan 29 00:40:45 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22  0000                     
    23                           ; Version 1.45
    24                           ; Generated 16/11/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4620 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  001504                     __pidataCOMRAM:
    60                           	opt stack 0
    61                           
    62                           ;initializer for _UART
    63  001504  41                 	db	low _uart
    64  001505  00                 	db	high _uart
    65                           
    66                           	psect	smallconst
    67  001000                     __psmallconst:
    68                           	opt stack 0
    69  001000  00                 	db	0
    70  001001                     _keys:
    71                           	opt stack 0
    72  001001  31                 	db	49
    73  001002  32                 	db	50
    74  001003  33                 	db	51
    75  001004  41                 	db	65
    76  001005  34                 	db	52
    77  001006  35                 	db	53
    78  001007  36                 	db	54
    79  001008  42                 	db	66
    80  001009  37                 	db	55
    81  00100A  38                 	db	56
    82  00100B  39                 	db	57
    83  00100C  43                 	db	67
    84  00100D  2A                 	db	42
    85  00100E  30                 	db	48
    86  00100F  23                 	db	35
    87  001010  44                 	db	68
    88  001011  00                 	db	0
    89  001012                     __end_of_keys:
    90                           	opt stack 0
    91  001012                     _LCD_LEFT:
    92                           	opt stack 0
    93  001012  00                 	db	0
    94  001013                     __end_of_LCD_LEFT:
    95                           	opt stack 0
    96  001013                     _LCD_RIGHT:
    97                           	opt stack 0
    98  001013  01                 	db	1
    99  001014                     __end_of_LCD_RIGHT:
   100                           	opt stack 0
   101  001014                     _LCD_SIZE_VERT:
   102                           	opt stack 0
   103  001014  02                 	db	2
   104  001015                     __end_of_LCD_SIZE_VERT:
   105                           	opt stack 0
   106  001015                     _LCD_SIZE_HORZ:
   107                           	opt stack 0
   108  001015  10                 	db	16
   109  001016                     __end_of_LCD_SIZE_HORZ:
   110                           	opt stack 0
   111  001016                     _LCD_VERT_LIMIT:
   112                           	opt stack 0
   113  001016  02                 	db	2
   114  001017                     __end_of_LCD_VERT_LIMIT:
   115                           	opt stack 0
   116  001017                     _LCD_HORZ_LIMIT:
   117                           	opt stack 0
   118  001017  28                 	db	40
   119  001018                     __end_of_LCD_HORZ_LIMIT:
   120                           	opt stack 0
   121  0000                     _INTCONbits	set	4082
   122  0000                     _LATDbits	set	3980
   123  0000                     _TXREG	set	4013
   124  0000                     _PORTB	set	3969
   125  0000                     _RCREG	set	4014
   126  0000                     _PORTBbits	set	3969
   127  0000                     _RCSTAbits	set	4011
   128  0000                     _TXSTAbits	set	4012
   129  0000                     _SPBRG	set	4015
   130  0000                     _ADCON1	set	4033
   131  0000                     _ADCON0	set	4034
   132  0000                     _TRISE	set	3990
   133  0000                     _TRISD	set	3989
   134  0000                     _TRISC	set	3988
   135  0000                     _TRISB	set	3987
   136  0000                     _TRISA	set	3986
   137  0000                     _LATE	set	3981
   138  0000                     _LATD	set	3980
   139  0000                     _LATC	set	3979
   140  0000                     _LATB	set	3978
   141  0000                     _LATA	set	3977
   142  0000                     _RCIE	set	31981
   143  0000                     _TXIE	set	31980
   144  0000                     _TRMT	set	32097
   145  0000                     _TXIF	set	31988
   146  0000                     _RCIF	set	31989
   147  0000                     _TRISC7	set	31911
   148  0000                     _TRISC6	set	31910
   149                           
   150                           ; #config settings
   151  001018  00                 	db	0	; dummy byte at the end
   152  0000                     
   153                           	psect	cinit
   154  0014A6                     __pcinit:
   155                           	opt stack 0
   156  0014A6                     start_initialization:
   157                           	opt stack 0
   158  0014A6                     __initialization:
   159                           	opt stack 0
   160                           
   161                           ; Initialize objects allocated to COMRAM (2 bytes)
   162                           ; load TBLPTR registers with __pidataCOMRAM
   163  0014A6  0E04               	movlw	low __pidataCOMRAM
   164  0014A8  6EF6               	movwf	tblptrl,c
   165  0014AA  0E15               	movlw	high __pidataCOMRAM
   166  0014AC  6EF7               	movwf	tblptrh,c
   167  0014AE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   168  0014B0  6EF8               	movwf	tblptru,c
   169  0014B2  0009               	tblrd		*+	;fetch initializer
   170  0014B4  CFF5 F04D          	movff	tablat,__pdataCOMRAM
   171  0014B8  0009               	tblrd		*+	;fetch initializer
   172  0014BA  CFF5 F04E          	movff	tablat,__pdataCOMRAM+1
   173                           
   174                           ; Clear objects allocated to COMRAM (31 bytes)
   175  0014BE  EE00  F02E         	lfsr	0,__pbssCOMRAM
   176  0014C2  0E1F               	movlw	31
   177  0014C4                     clear_0:
   178  0014C4  6AEE               	clrf	postinc0,c
   179  0014C6  06E8               	decf	wreg,f,c
   180  0014C8  E1FD               	bnz	clear_0
   181  0014CA                     end_of_initialization:
   182                           	opt stack 0
   183  0014CA                     __end_of__initialization:
   184                           	opt stack 0
   185  0014CA  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   186  0014CC  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   187  0014CE  0E00               	movlw	low (__Lsmallconst shr (0+16))
   188  0014D0  6EF8               	movwf	tblptru,c
   189  0014D2  0E10               	movlw	high __Lsmallconst
   190  0014D4  6EF7               	movwf	tblptrh,c
   191  0014D6  0100               	movlb	0
   192  0014D8  EF05  F009         	goto	_main	;jump to C main() function
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           
   200                           	psect	bssCOMRAM
   201  00002E                     __pbssCOMRAM:
   202                           	opt stack 0
   203  00002E                     lcd@LCDinterruptState:
   204                           	opt stack 0
   205  00002E                     	ds	1
   206  00002F                     _UARTinterruptState:
   207                           	opt stack 0
   208  00002F                     	ds	1
   209  000030                     	ds	1
   210  000031                     _arr_dataRX:
   211                           	opt stack 0
   212  000031                     	ds	16
   213  000041                     _uart:
   214                           	opt stack 0
   215  000041                     	ds	12
   216                           tblptru	equ	0xFF8
   217                           tblptrh	equ	0xFF7
   218                           tblptrl	equ	0xFF6
   219                           tablat	equ	0xFF5
   220                           postinc0	equ	0xFEE
   221                           wreg	equ	0xFE8
   222                           
   223                           	psect	dataCOMRAM
   224  00004D                     __pdataCOMRAM:
   225                           	opt stack 0
   226  00004D                     _UART:
   227                           	opt stack 0
   228  00004D                     	ds	2
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	cstackCOMRAM
   237  000001                     __pcstackCOMRAM:
   238                           	opt stack 0
   239  000001                     ??_interruptHandlerUART:
   240                           
   241                           ; 1 bytes @ 0x0
   242  000001                     	ds	21
   243  000016                     ?___aldiv:
   244                           	opt stack 0
   245  000016                     lcdNibble@temp:
   246                           	opt stack 0
   247  000016                     ___aldiv@dividend:
   248                           	opt stack 0
   249                           
   250                           ; 4 bytes @ 0x15
   251  000016                     	ds	1
   252  000017                     lcdNibble@data:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0x16
   256  000017                     	ds	1
   257  000018                     lcdInst@data:
   258                           	opt stack 0
   259  000018                     putch@data:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x17
   263  000018                     	ds	1
   264  000019                     ??_initLCD:
   265                           
   266                           ; 1 bytes @ 0x18
   267  000019                     	ds	1
   268  00001A                     ___aldiv@divisor:
   269                           	opt stack 0
   270                           
   271                           ; 4 bytes @ 0x19
   272  00001A                     	ds	4
   273  00001E                     ___aldiv@counter:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0x1D
   277  00001E                     	ds	1
   278  00001F                     ___aldiv@sign:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0x1E
   282  00001F                     	ds	1
   283  000020                     ___aldiv@quotient:
   284                           	opt stack 0
   285                           
   286                           ; 4 bytes @ 0x1F
   287  000020                     	ds	4
   288  000024                     ??_main:
   289                           
   290                           ; 1 bytes @ 0x23
   291  000024                     	ds	4
   292  000028                     main@baudRate:
   293                           	opt stack 0
   294                           
   295                           ; 4 bytes @ 0x27
   296  000028                     	ds	4
   297  00002C                     main@receivedByte:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0x2B
   301  00002C                     	ds	1
   302  00002D                     main@keypress:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x2C
   306  00002D                     	ds	1
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314 ;;
   315 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   316 ;;
   317 ;; *************** function _main *****************
   318 ;; Defined at:
   319 ;;		line 29 in file "main.c"
   320 ;; Parameters:    Size  Location     Type
   321 ;;		None
   322 ;; Auto vars:     Size  Location     Type
   323 ;;  keypress        1   44[COMRAM] unsigned char 
   324 ;;  baudRate        4   39[COMRAM] long 
   325 ;;  receivedByte    1   43[COMRAM] unsigned char 
   326 ;; Return value:  Size  Location     Type
   327 ;;                  1    wreg      void 
   328 ;; Registers used:
   329 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   330 ;; Tracked objects:
   331 ;;		On entry : 0/0
   332 ;;		On exit  : 0/0
   333 ;;		Unchanged: 0/0
   334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   336 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   337 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   338 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   339 ;;Total ram usage:       10 bytes
   340 ;; Hardware stack levels required when called:    4
   341 ;; This function calls:
   342 ;;		___aldiv
   343 ;;		_initLCD
   344 ;;		_putch
   345 ;; This function is called by:
   346 ;;		Startup code after reset
   347 ;; This function uses a non-reentrant model
   348 ;;
   349                           
   350                           	psect	text0
   351  00120A                     __ptext0:
   352                           	opt stack 0
   353  00120A                     _main:
   354                           	opt stack 27
   355                           
   356                           ;main.c: 35: LATA = 0x00;
   357                           
   358                           ;incstack = 0
   359  00120A  0E00               	movlw	0
   360  00120C  6E89               	movwf	3977,c	;volatile
   361                           
   362                           ;main.c: 36: LATB = 0x00;
   363  00120E  0E00               	movlw	0
   364  001210  6E8A               	movwf	3978,c	;volatile
   365                           
   366                           ;main.c: 37: LATC = 0x00;
   367  001212  0E00               	movlw	0
   368  001214  6E8B               	movwf	3979,c	;volatile
   369                           
   370                           ;main.c: 38: LATD = 0x00;
   371  001216  0E00               	movlw	0
   372  001218  6E8C               	movwf	3980,c	;volatile
   373                           
   374                           ;main.c: 39: LATE = 0x00;
   375  00121A  0E00               	movlw	0
   376  00121C  6E8D               	movwf	3981,c	;volatile
   377                           
   378                           ;main.c: 43: TRISA = 0xFF;
   379  00121E  6892               	setf	3986,c	;volatile
   380                           
   381                           ;main.c: 44: TRISB = 0xFF;
   382  001220  6893               	setf	3987,c	;volatile
   383                           
   384                           ;main.c: 45: TRISC = 0b10000000;
   385  001222  0E80               	movlw	128
   386  001224  6E94               	movwf	3988,c	;volatile
   387                           
   388                           ;main.c: 49: TRISD = 0x00;
   389  001226  0E00               	movlw	0
   390  001228  6E95               	movwf	3989,c	;volatile
   391                           
   392                           ;main.c: 50: TRISE = 0x00;
   393  00122A  0E00               	movlw	0
   394  00122C  6E96               	movwf	3990,c	;volatile
   395                           
   396                           ;main.c: 53: ADCON0 = 0x00;
   397  00122E  0E00               	movlw	0
   398  001230  6EC2               	movwf	4034,c	;volatile
   399                           
   400                           ;main.c: 54: ADCON1 = 0b00001111;
   401  001232  0E0F               	movlw	15
   402  001234  6EC1               	movwf	4033,c	;volatile
   403                           
   404                           ;main.c: 58: initLCD();
   405  001236  EC2D  F00A         	call	_initLCD	;wreg free
   406                           
   407                           ;main.c: 62: long baudRate = 9600;
   408  00123A  0E80               	movlw	128
   409  00123C  6E28               	movwf	main@baudRate,c
   410  00123E  0E25               	movlw	37
   411  001240  6E29               	movwf	main@baudRate+1,c
   412  001242  0E00               	movlw	0
   413  001244  6E2A               	movwf	main@baudRate+2,c
   414  001246  0E00               	movlw	0
   415  001248  6E2B               	movwf	main@baudRate+3,c
   416                           
   417                           ;main.c: 63: SPBRG = (unsigned char)((40000000 / (64 * baudRate)) - 1);
   418  00124A  0E00               	movlw	0
   419  00124C  6E16               	movwf	___aldiv@dividend,c
   420  00124E  0E5A               	movlw	90
   421  001250  6E17               	movwf	___aldiv@dividend+1,c
   422  001252  0E62               	movlw	98
   423  001254  6E18               	movwf	___aldiv@dividend+2,c
   424  001256  0E02               	movlw	2
   425  001258  6E19               	movwf	___aldiv@dividend+3,c
   426  00125A  C028  F024         	movff	main@baudRate,??_main
   427  00125E  C029  F025         	movff	main@baudRate+1,??_main+1
   428  001262  C02A  F026         	movff	main@baudRate+2,??_main+2
   429  001266  C02B  F027         	movff	main@baudRate+3,??_main+3
   430  00126A  0E06               	movlw	6
   431  00126C                     u515:
   432  00126C  90D8               	bcf	status,0,c
   433  00126E  3624               	rlcf	??_main,f,c
   434  001270  3625               	rlcf	??_main+1,f,c
   435  001272  3626               	rlcf	??_main+2,f,c
   436  001274  3627               	rlcf	??_main+3,f,c
   437  001276  2EE8               	decfsz	wreg,f,c
   438  001278  D7F9               	goto	u515
   439  00127A  C024  F01A         	movff	??_main,___aldiv@divisor
   440  00127E  C025  F01B         	movff	??_main+1,___aldiv@divisor+1
   441  001282  C026  F01C         	movff	??_main+2,___aldiv@divisor+2
   442  001286  C027  F01D         	movff	??_main+3,___aldiv@divisor+3
   443  00128A  EC88  F009         	call	___aldiv	;wreg free
   444  00128E  0416               	decf	?___aldiv,w,c
   445  001290  6EAF               	movwf	4015,c	;volatile
   446                           
   447                           ;main.c: 66: TXSTAbits.TX9 = 0;
   448  001292  9CAC               	bcf	4012,6,c	;volatile
   449                           
   450                           ;main.c: 67: TXSTAbits.SYNC = 0;
   451  001294  98AC               	bcf	4012,4,c	;volatile
   452                           
   453                           ;main.c: 68: TXSTAbits.TXEN = 1;
   454  001296  8AAC               	bsf	4012,5,c	;volatile
   455                           
   456                           ;main.c: 69: _delay((unsigned long)((5)*(40000000/4000.0)));
   457  001298  0E41               	movlw	65
   458  00129A  6E24               	movwf	??_main& (0+255),c
   459  00129C  0EEE               	movlw	238
   460  00129E                     u607:
   461  00129E  2EE8               	decfsz	wreg,f,c
   462  0012A0  D7FE               	bra	u607
   463  0012A2  2E24               	decfsz	??_main& (0+255),f,c
   464  0012A4  D7FC               	bra	u607
   465  0012A6  D000               	nop2	
   466                           
   467                           ;main.c: 72: RCSTAbits.RX9 = 0;
   468  0012A8  9CAB               	bcf	4011,6,c	;volatile
   469                           
   470                           ;main.c: 73: RCSTAbits.CREN = 1;
   471  0012AA  88AB               	bsf	4011,4,c	;volatile
   472                           
   473                           ;main.c: 76: TRISC6 = 0;
   474  0012AC  9C94               	bcf	3988,6,c	;volatile
   475                           
   476                           ;main.c: 77: TRISC7 = 1;
   477  0012AE  8E94               	bsf	3988,7,c	;volatile
   478                           
   479                           ;main.c: 80: RCSTAbits.SPEN = 1;
   480  0012B0  8EAB               	bsf	4011,7,c	;volatile
   481  0012B2                     
   482                           ;main.c: 93: while(!(PORTBbits.RB1 || RCIF)){ continue; }
   483  0012B2  B281               	btfsc	3969,1,c	;volatile
   484  0012B4  D002               	goto	u530
   485  0012B6  AA9E               	btfss	3998,5,c	;volatile
   486  0012B8  D7FC               	goto	l81
   487  0012BA                     u530:
   488                           
   489                           ;main.c: 97: if(RCIF){
   490  0012BA  AA9E               	btfss	3998,5,c	;volatile
   491  0012BC  D00A               	goto	l87
   492                           
   493                           ;main.c: 100: receivedByte = RCREG;
   494  0012BE  CFAE F02C          	movff	4014,main@receivedByte	;volatile
   495                           
   496                           ;main.c: 105: if(RCSTAbits.OERR){
   497  0012C2  A2AB               	btfss	4011,1,c	;volatile
   498  0012C4  D002               	goto	l88
   499                           
   500                           ;main.c: 107: RCSTAbits.CREN = 0;
   501  0012C6  98AB               	bcf	4011,4,c	;volatile
   502                           
   503                           ;main.c: 108: RCSTAbits.CREN = 1;
   504  0012C8  88AB               	bsf	4011,4,c	;volatile
   505  0012CA                     l88:
   506                           
   507                           ;main.c: 109: }
   508                           ;main.c: 110: putch(receivedByte);
   509  0012CA  502C               	movf	main@receivedByte,w,c
   510  0012CC  EC6E  F00A         	call	_putch
   511                           
   512                           ;main.c: 111: continue;
   513  0012D0  D7F0               	goto	l81
   514  0012D2                     l87:
   515                           
   516                           ;main.c: 112: }
   517                           ;main.c: 118: unsigned char keypress = (PORTB & 0xF0) >> 4;
   518  0012D2  3881               	swapf	3969,w,c	;volatile
   519  0012D4  0B0F               	andlw	15
   520  0012D6  0B0F               	andlw	15
   521  0012D8  6E2D               	movwf	main@keypress,c
   522  0012DA  B281               	btfsc	3969,1,c	;volatile
   523  0012DC  D7FE               	goto	l91
   524  0012DE                     l1330:
   525  0012DE  B2AC               	btfsc	4012,1,c	;volatile
   526  0012E0  D002               	goto	u570
   527  0012E2  0E01               	movlw	1
   528  0012E4  D001               	goto	u572
   529  0012E6                     u570:
   530  0012E6  0E00               	movlw	0
   531  0012E8                     u572:
   532  0012E8  6E24               	movwf	??_main& (0+255),c
   533  0012EA  B89E               	btfsc	3998,4,c	;volatile
   534  0012EC  D002               	goto	u580
   535  0012EE  0E01               	movlw	1
   536  0012F0  D001               	goto	u582
   537  0012F2                     u580:
   538  0012F2  0E00               	movlw	0
   539  0012F4                     u582:
   540  0012F4  1024               	iorwf	??_main,w,c
   541  0012F6  E1F3               	bnz	l1330
   542                           
   543                           ;main.c: 129: TXREG = keys[keypress];
   544  0012F8  502D               	movf	main@keypress,w,c
   545  0012FA  0D01               	mullw	1
   546  0012FC  0E01               	movlw	low _keys
   547  0012FE  24F3               	addwf	prodl,w,c
   548  001300  6EF6               	movwf	tblptrl,c
   549  001302  0E10               	movlw	high _keys
   550  001304  20F4               	addwfc	prodh,w,c
   551  001306  6EF7               	movwf	tblptrh,c
   552  001308                     	if	0	;There are less than 3 active tblptr bytes
   553  001308                     	endif
   554  001308  0008               	tblrd		*
   555  00130A  CFF5 FFAD          	movff	tablat,4013	;volatile
   556  00130E  D7D1               	goto	l81
   557  001310                     __end_of_main:
   558                           	opt stack 0
   559                           tblptru	equ	0xFF8
   560                           tblptrh	equ	0xFF7
   561                           tblptrl	equ	0xFF6
   562                           tablat	equ	0xFF5
   563                           prodh	equ	0xFF4
   564                           prodl	equ	0xFF3
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           status	equ	0xFD8
   568                           
   569 ;; *************** function _putch *****************
   570 ;; Defined at:
   571 ;;		line 24 in file "lcd.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;  data            1    wreg     unsigned char 
   574 ;; Auto vars:     Size  Location     Type
   575 ;;  data            1   23[COMRAM] unsigned char 
   576 ;; Return value:  Size  Location     Type
   577 ;;                  1    wreg      void 
   578 ;; Registers used:
   579 ;;		wreg, status,2, status,0, cstack
   580 ;; Tracked objects:
   581 ;;		On entry : 0/0
   582 ;;		On exit  : 0/0
   583 ;;		Unchanged: 0/0
   584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   586 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   588 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   589 ;;Total ram usage:        1 bytes
   590 ;; Hardware stack levels used:    1
   591 ;; Hardware stack levels required when called:    2
   592 ;; This function calls:
   593 ;;		_lcdNibble
   594 ;; This function is called by:
   595 ;;		_main
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           	psect	text1
   600  0014DC                     __ptext1:
   601                           	opt stack 0
   602  0014DC                     _putch:
   603                           	opt stack 28
   604                           
   605                           ;incstack = 0
   606                           ;putch@data stored from wreg
   607  0014DC  6E18               	movwf	putch@data,c
   608                           
   609                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   610  0014DE  848C               	bsf	3980,2,c	;volatile
   611                           
   612                           ;lcd.c: 33: lcdNibble(data);
   613  0014E0  5018               	movf	putch@data,w,c
   614  0014E2  ECEE  F009         	call	_lcdNibble
   615                           
   616                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
   617  0014E6  0EC8               	movlw	200
   618  0014E8                     u617:
   619  0014E8  D000               	nop2	
   620  0014EA  2EE8               	decfsz	wreg,f,c
   621  0014EC  D7FD               	bra	u617
   622  0014EE  0012               	return		;funcret
   623  0014F0                     __end_of_putch:
   624                           	opt stack 0
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           prodh	equ	0xFF4
   630                           prodl	equ	0xFF3
   631                           postinc0	equ	0xFEE
   632                           wreg	equ	0xFE8
   633                           status	equ	0xFD8
   634                           
   635 ;; *************** function _initLCD *****************
   636 ;; Defined at:
   637 ;;		line 60 in file "lcd.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;		None
   640 ;; Auto vars:     Size  Location     Type
   641 ;;		None
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      void 
   644 ;; Registers used:
   645 ;;		wreg, status,2, status,0, cstack
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   654 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   655 ;;Total ram usage:        1 bytes
   656 ;; Hardware stack levels used:    1
   657 ;; Hardware stack levels required when called:    3
   658 ;; This function calls:
   659 ;;		_lcdInst
   660 ;; This function is called by:
   661 ;;		_main
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           	psect	text2
   666  00145A                     __ptext2:
   667                           	opt stack 0
   668  00145A                     _initLCD:
   669                           	opt stack 27
   670                           
   671                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
   672                           
   673                           ;incstack = 0
   674  00145A  0EC3               	movlw	195
   675  00145C  6E19               	movwf	??_initLCD& (0+255),c
   676  00145E  0ECD               	movlw	205
   677  001460                     u627:
   678  001460  2EE8               	decfsz	wreg,f,c
   679  001462  D7FE               	bra	u627
   680  001464  2E19               	decfsz	??_initLCD& (0+255),f,c
   681  001466  D7FC               	bra	u627
   682  001468  F000               	nop	
   683                           
   684                           ;lcd.c: 69: lcdInst(0b00110011);
   685  00146A  0E33               	movlw	51
   686  00146C  EC78  F00A         	call	_lcdInst
   687                           
   688                           ;lcd.c: 70: lcdInst(0b00110010);
   689  001470  0E32               	movlw	50
   690  001472  EC78  F00A         	call	_lcdInst
   691                           
   692                           ;lcd.c: 71: lcdInst(0b00101000);
   693  001476  0E28               	movlw	40
   694  001478  EC78  F00A         	call	_lcdInst
   695                           
   696                           ;lcd.c: 72: lcdInst(0b00001111);
   697  00147C  0E0F               	movlw	15
   698  00147E  EC78  F00A         	call	_lcdInst
   699                           
   700                           ;lcd.c: 73: lcdInst(0b00000110);
   701  001482  0E06               	movlw	6
   702  001484  EC78  F00A         	call	_lcdInst
   703                           
   704                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
   705  001488  0E01               	movlw	1
   706  00148A  EC78  F00A         	call	_lcdInst
   707  00148E  0EC3               	movlw	195
   708  001490  6E19               	movwf	??_initLCD& (0+255),c
   709  001492  0ECD               	movlw	205
   710  001494                     u637:
   711  001494  2EE8               	decfsz	wreg,f,c
   712  001496  D7FE               	bra	u637
   713  001498  2E19               	decfsz	??_initLCD& (0+255),f,c
   714  00149A  D7FC               	bra	u637
   715  00149C  F000               	nop	
   716                           
   717                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
   718  00149E  0E0F               	movlw	15
   719  0014A0  EC78  F00A         	call	_lcdInst
   720  0014A4  0012               	return		;funcret
   721  0014A6                     __end_of_initLCD:
   722                           	opt stack 0
   723                           tblptru	equ	0xFF8
   724                           tblptrh	equ	0xFF7
   725                           tblptrl	equ	0xFF6
   726                           tablat	equ	0xFF5
   727                           prodh	equ	0xFF4
   728                           prodl	equ	0xFF3
   729                           postinc0	equ	0xFEE
   730                           wreg	equ	0xFE8
   731                           status	equ	0xFD8
   732                           
   733 ;; *************** function _lcdInst *****************
   734 ;; Defined at:
   735 ;;		line 11 in file "lcd.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;  data            1    wreg     unsigned char 
   738 ;; Auto vars:     Size  Location     Type
   739 ;;  data            1   23[COMRAM] unsigned char 
   740 ;; Return value:  Size  Location     Type
   741 ;;                  1    wreg      void 
   742 ;; Registers used:
   743 ;;		wreg, status,2, status,0, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   750 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   752 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   753 ;;Total ram usage:        1 bytes
   754 ;; Hardware stack levels used:    1
   755 ;; Hardware stack levels required when called:    2
   756 ;; This function calls:
   757 ;;		_lcdNibble
   758 ;; This function is called by:
   759 ;;		_initLCD
   760 ;;		_lcd_set_cursor
   761 ;;		_lcd_shift_cursor
   762 ;;		_lcd_shift_display
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           	psect	text3
   767  0014F0                     __ptext3:
   768                           	opt stack 0
   769  0014F0                     _lcdInst:
   770                           	opt stack 27
   771                           
   772                           ;incstack = 0
   773                           ;lcdInst@data stored from wreg
   774  0014F0  6E18               	movwf	lcdInst@data,c
   775                           
   776                           ;lcd.c: 19: LATDbits.LATD2 = 0;
   777  0014F2  948C               	bcf	3980,2,c	;volatile
   778                           
   779                           ;lcd.c: 20: lcdNibble(data);
   780  0014F4  5018               	movf	lcdInst@data,w,c
   781  0014F6  ECEE  F009         	call	_lcdNibble
   782                           
   783                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
   784  0014FA  0EC8               	movlw	200
   785  0014FC                     u647:
   786  0014FC  D000               	nop2	
   787  0014FE  2EE8               	decfsz	wreg,f,c
   788  001500  D7FD               	bra	u647
   789  001502  0012               	return		;funcret
   790  001504                     __end_of_lcdInst:
   791                           	opt stack 0
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           prodh	equ	0xFF4
   797                           prodl	equ	0xFF3
   798                           postinc0	equ	0xFEE
   799                           wreg	equ	0xFE8
   800                           status	equ	0xFD8
   801                           
   802 ;; *************** function _lcdNibble *****************
   803 ;; Defined at:
   804 ;;		line 37 in file "lcd.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;  data            1    wreg     unsigned char 
   807 ;; Auto vars:     Size  Location     Type
   808 ;;  data            1   22[COMRAM] unsigned char 
   809 ;;  temp            1   21[COMRAM] unsigned char 
   810 ;; Return value:  Size  Location     Type
   811 ;;                  1    wreg      void 
   812 ;; Registers used:
   813 ;;		wreg, status,2, status,0
   814 ;; Tracked objects:
   815 ;;		On entry : 0/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   820 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   822 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   823 ;;Total ram usage:        2 bytes
   824 ;; Hardware stack levels used:    1
   825 ;; Hardware stack levels required when called:    1
   826 ;; This function calls:
   827 ;;		Nothing
   828 ;; This function is called by:
   829 ;;		_lcdInst
   830 ;;		_putch
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834                           	psect	text4
   835  0013DC                     __ptext4:
   836                           	opt stack 0
   837  0013DC                     _lcdNibble:
   838                           	opt stack 28
   839                           
   840                           ;incstack = 0
   841                           ;lcdNibble@data stored from wreg
   842  0013DC  6E17               	movwf	lcdNibble@data,c
   843                           
   844                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
   845  0013DE  5017               	movf	lcdNibble@data,w,c
   846  0013E0  0BF0               	andlw	240
   847  0013E2  6E16               	movwf	lcdNibble@temp,c
   848                           
   849                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
   850  0013E4  508C               	movf	3980,w,c	;volatile
   851  0013E6  0B0F               	andlw	15
   852  0013E8  6E8C               	movwf	3980,c	;volatile
   853                           
   854                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
   855  0013EA  5016               	movf	lcdNibble@temp,w,c
   856  0013EC  108C               	iorwf	3980,w,c	;volatile
   857  0013EE  6E8C               	movwf	3980,c	;volatile
   858                           
   859                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   860  0013F0  0E00               	movlw	0
   861  0013F2  BEF2               	btfsc	intcon,7,c	;volatile
   862  0013F4  0E01               	movlw	1
   863  0013F6  6E2E               	movwf	lcd@LCDinterruptState,c
   864  0013F8  9EF2               	bcf	intcon,7,c	;volatile
   865  0013FA  868C               	bsf	3980,3,c	;volatile
   866  0013FC  0E53               	movlw	83
   867  0013FE                     u657:
   868  0013FE  2EE8               	decfsz	wreg,f,c
   869  001400  D7FE               	bra	u657
   870  001402  F000               	nop	
   871  001404  968C               	bcf	3980,3,c	;volatile
   872  001406  0EC8               	movlw	200
   873  001408                     u667:
   874  001408  D000               	nop2	
   875  00140A  2EE8               	decfsz	wreg,f,c
   876  00140C  D7FD               	bra	u667
   877  00140E  B02E               	btfsc	lcd@LCDinterruptState,0,c
   878  001410  D002               	bra	u15
   879  001412  9EF2               	bcf	intcon,7,c	;volatile
   880  001414  D001               	bra	u16
   881  001416                     u15:
   882  001416  8EF2               	bsf	intcon,7,c	;volatile
   883  001418                     u16:
   884                           
   885                           ;lcd.c: 52: data = (unsigned char) (data << 4);
   886  001418  3817               	swapf	lcdNibble@data,w,c
   887  00141A  0BF0               	andlw	240
   888  00141C  6E17               	movwf	lcdNibble@data,c
   889                           
   890                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
   891  00141E  5017               	movf	lcdNibble@data,w,c
   892  001420  0BF0               	andlw	240
   893  001422  6E16               	movwf	lcdNibble@temp,c
   894                           
   895                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
   896  001424  508C               	movf	3980,w,c	;volatile
   897  001426  0B0F               	andlw	15
   898  001428  6E8C               	movwf	3980,c	;volatile
   899                           
   900                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
   901  00142A  5016               	movf	lcdNibble@temp,w,c
   902  00142C  108C               	iorwf	3980,w,c	;volatile
   903  00142E  6E8C               	movwf	3980,c	;volatile
   904                           
   905                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   906  001430  0E00               	movlw	0
   907  001432  BEF2               	btfsc	intcon,7,c	;volatile
   908  001434  0E01               	movlw	1
   909  001436  6E2E               	movwf	lcd@LCDinterruptState,c
   910  001438  9EF2               	bcf	intcon,7,c	;volatile
   911  00143A  868C               	bsf	3980,3,c	;volatile
   912  00143C  0E53               	movlw	83
   913  00143E                     u677:
   914  00143E  2EE8               	decfsz	wreg,f,c
   915  001440  D7FE               	bra	u677
   916  001442  F000               	nop	
   917  001444  968C               	bcf	3980,3,c	;volatile
   918  001446  0EC8               	movlw	200
   919  001448                     u687:
   920  001448  D000               	nop2	
   921  00144A  2EE8               	decfsz	wreg,f,c
   922  00144C  D7FD               	bra	u687
   923  00144E  B02E               	btfsc	lcd@LCDinterruptState,0,c
   924  001450  D002               	bra	u25
   925  001452  9EF2               	bcf	intcon,7,c	;volatile
   926  001454  D001               	bra	u26
   927  001456                     u25:
   928  001456  8EF2               	bsf	intcon,7,c	;volatile
   929  001458                     u26:
   930  001458  0012               	return		;funcret
   931  00145A                     __end_of_lcdNibble:
   932                           	opt stack 0
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           prodh	equ	0xFF4
   938                           prodl	equ	0xFF3
   939                           intcon	equ	0xFF2
   940                           postinc0	equ	0xFEE
   941                           wreg	equ	0xFE8
   942                           status	equ	0xFD8
   943                           
   944 ;; *************** function ___aldiv *****************
   945 ;; Defined at:
   946 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;  dividend        4   21[COMRAM] long 
   949 ;;  divisor         4   25[COMRAM] long 
   950 ;; Auto vars:     Size  Location     Type
   951 ;;  quotient        4   31[COMRAM] long 
   952 ;;  sign            1   30[COMRAM] unsigned char 
   953 ;;  counter         1   29[COMRAM] unsigned char 
   954 ;; Return value:  Size  Location     Type
   955 ;;                  4   21[COMRAM] long 
   956 ;; Registers used:
   957 ;;		wreg, status,2, status,0
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   963 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   964 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   966 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   967 ;;Total ram usage:       14 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; Hardware stack levels required when called:    1
   970 ;; This function calls:
   971 ;;		Nothing
   972 ;; This function is called by:
   973 ;;		_main
   974 ;;		_UART_Init
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text5
   979  001310                     __ptext5:
   980                           	opt stack 0
   981  001310                     ___aldiv:
   982                           	opt stack 29
   983                           
   984                           ;incstack = 0
   985  001310  0E00               	movlw	0
   986  001312  6E1F               	movwf	___aldiv@sign,c
   987  001314  AE1D               	btfss	___aldiv@divisor+3,7,c
   988  001316  D00A               	goto	l324
   989  001318  1E1D               	comf	___aldiv@divisor+3,f,c
   990  00131A  1E1C               	comf	___aldiv@divisor+2,f,c
   991  00131C  1E1B               	comf	___aldiv@divisor+1,f,c
   992  00131E  6C1A               	negf	___aldiv@divisor,c
   993  001320  0E00               	movlw	0
   994  001322  221B               	addwfc	___aldiv@divisor+1,f,c
   995  001324  221C               	addwfc	___aldiv@divisor+2,f,c
   996  001326  221D               	addwfc	___aldiv@divisor+3,f,c
   997  001328  0E01               	movlw	1
   998  00132A  6E1F               	movwf	___aldiv@sign,c
   999  00132C                     l324:
  1000  00132C  AE19               	btfss	___aldiv@dividend+3,7,c
  1001  00132E  D00A               	goto	l325
  1002  001330  1E19               	comf	___aldiv@dividend+3,f,c
  1003  001332  1E18               	comf	___aldiv@dividend+2,f,c
  1004  001334  1E17               	comf	___aldiv@dividend+1,f,c
  1005  001336  6C16               	negf	___aldiv@dividend,c
  1006  001338  0E00               	movlw	0
  1007  00133A  2217               	addwfc	___aldiv@dividend+1,f,c
  1008  00133C  2218               	addwfc	___aldiv@dividend+2,f,c
  1009  00133E  2219               	addwfc	___aldiv@dividend+3,f,c
  1010  001340  0E01               	movlw	1
  1011  001342  1A1F               	xorwf	___aldiv@sign,f,c
  1012  001344                     l325:
  1013  001344  0E00               	movlw	0
  1014  001346  6E20               	movwf	___aldiv@quotient,c
  1015  001348  0E00               	movlw	0
  1016  00134A  6E21               	movwf	___aldiv@quotient+1,c
  1017  00134C  0E00               	movlw	0
  1018  00134E  6E22               	movwf	___aldiv@quotient+2,c
  1019  001350  0E00               	movlw	0
  1020  001352  6E23               	movwf	___aldiv@quotient+3,c
  1021  001354  501A               	movf	___aldiv@divisor,w,c
  1022  001356  101B               	iorwf	___aldiv@divisor+1,w,c
  1023  001358  101C               	iorwf	___aldiv@divisor+2,w,c
  1024  00135A  101D               	iorwf	___aldiv@divisor+3,w,c
  1025  00135C  B4D8               	btfsc	status,2,c
  1026  00135E  D02A               	goto	l332
  1027  001360  0E01               	movlw	1
  1028  001362  6E1E               	movwf	___aldiv@counter,c
  1029  001364  D006               	goto	l327
  1030  001366  90D8               	bcf	status,0,c
  1031  001368  361A               	rlcf	___aldiv@divisor,f,c
  1032  00136A  361B               	rlcf	___aldiv@divisor+1,f,c
  1033  00136C  361C               	rlcf	___aldiv@divisor+2,f,c
  1034  00136E  361D               	rlcf	___aldiv@divisor+3,f,c
  1035  001370  2A1E               	incf	___aldiv@counter,f,c
  1036  001372                     l327:
  1037  001372  AE1D               	btfss	___aldiv@divisor+3,7,c
  1038  001374  D7F8               	goto	l328
  1039  001376                     u480:
  1040  001376  90D8               	bcf	status,0,c
  1041  001378  3620               	rlcf	___aldiv@quotient,f,c
  1042  00137A  3621               	rlcf	___aldiv@quotient+1,f,c
  1043  00137C  3622               	rlcf	___aldiv@quotient+2,f,c
  1044  00137E  3623               	rlcf	___aldiv@quotient+3,f,c
  1045  001380  501A               	movf	___aldiv@divisor,w,c
  1046  001382  5C16               	subwf	___aldiv@dividend,w,c
  1047  001384  501B               	movf	___aldiv@divisor+1,w,c
  1048  001386  5817               	subwfb	___aldiv@dividend+1,w,c
  1049  001388  501C               	movf	___aldiv@divisor+2,w,c
  1050  00138A  5818               	subwfb	___aldiv@dividend+2,w,c
  1051  00138C  501D               	movf	___aldiv@divisor+3,w,c
  1052  00138E  5819               	subwfb	___aldiv@dividend+3,w,c
  1053  001390  A0D8               	btfss	status,0,c
  1054  001392  D009               	goto	l331
  1055  001394  501A               	movf	___aldiv@divisor,w,c
  1056  001396  5E16               	subwf	___aldiv@dividend,f,c
  1057  001398  501B               	movf	___aldiv@divisor+1,w,c
  1058  00139A  5A17               	subwfb	___aldiv@dividend+1,f,c
  1059  00139C  501C               	movf	___aldiv@divisor+2,w,c
  1060  00139E  5A18               	subwfb	___aldiv@dividend+2,f,c
  1061  0013A0  501D               	movf	___aldiv@divisor+3,w,c
  1062  0013A2  5A19               	subwfb	___aldiv@dividend+3,f,c
  1063  0013A4  8020               	bsf	___aldiv@quotient,0,c
  1064  0013A6                     l331:
  1065  0013A6  90D8               	bcf	status,0,c
  1066  0013A8  321D               	rrcf	___aldiv@divisor+3,f,c
  1067  0013AA  321C               	rrcf	___aldiv@divisor+2,f,c
  1068  0013AC  321B               	rrcf	___aldiv@divisor+1,f,c
  1069  0013AE  321A               	rrcf	___aldiv@divisor,f,c
  1070  0013B0  2E1E               	decfsz	___aldiv@counter,f,c
  1071  0013B2  D7E1               	goto	u480
  1072  0013B4                     l332:
  1073  0013B4  501F               	movf	___aldiv@sign,w,c
  1074  0013B6  B4D8               	btfsc	status,2,c
  1075  0013B8  D008               	goto	l333
  1076  0013BA  1E23               	comf	___aldiv@quotient+3,f,c
  1077  0013BC  1E22               	comf	___aldiv@quotient+2,f,c
  1078  0013BE  1E21               	comf	___aldiv@quotient+1,f,c
  1079  0013C0  6C20               	negf	___aldiv@quotient,c
  1080  0013C2  0E00               	movlw	0
  1081  0013C4  2221               	addwfc	___aldiv@quotient+1,f,c
  1082  0013C6  2222               	addwfc	___aldiv@quotient+2,f,c
  1083  0013C8  2223               	addwfc	___aldiv@quotient+3,f,c
  1084  0013CA                     l333:
  1085  0013CA  C020  F016         	movff	___aldiv@quotient,?___aldiv
  1086  0013CE  C021  F017         	movff	___aldiv@quotient+1,?___aldiv+1
  1087  0013D2  C022  F018         	movff	___aldiv@quotient+2,?___aldiv+2
  1088  0013D6  C023  F019         	movff	___aldiv@quotient+3,?___aldiv+3
  1089  0013DA  0012               	return	
  1090  0013DC                     __end_of___aldiv:
  1091                           	opt stack 0
  1092                           tblptru	equ	0xFF8
  1093                           tblptrh	equ	0xFF7
  1094                           tblptrl	equ	0xFF6
  1095                           tablat	equ	0xFF5
  1096                           prodh	equ	0xFF4
  1097                           prodl	equ	0xFF3
  1098                           intcon	equ	0xFF2
  1099                           postinc0	equ	0xFEE
  1100                           wreg	equ	0xFE8
  1101                           status	equ	0xFD8
  1102                           
  1103 ;; *************** function _interruptHandlerUART *****************
  1104 ;; Defined at:
  1105 ;;		line 10 in file "interruptUART.c"
  1106 ;; Parameters:    Size  Location     Type
  1107 ;;		None
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;		None
  1110 ;; Return value:  Size  Location     Type
  1111 ;;                  1    wreg      void 
  1112 ;; Registers used:
  1113 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1114 ;; Tracked objects:
  1115 ;;		On entry : 0/0
  1116 ;;		On exit  : 0/0
  1117 ;;		Unchanged: 0/0
  1118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Temps:         21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1123 ;;Total ram usage:       21 bytes
  1124 ;; Hardware stack levels used:    1
  1125 ;; This function calls:
  1126 ;;		Nothing
  1127 ;; This function is called by:
  1128 ;;		Interrupt level 2
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           	psect	intcode
  1133  000008                     __pintcode:
  1134                           	opt stack 0
  1135  000008                     _interruptHandlerUART:
  1136                           	opt stack 27
  1137                           
  1138                           ;incstack = 0
  1139  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1140  00000A  ED0D  F008         	call	int_func,f	;refresh shadow registers
  1141                           tblptru	equ	0xFF8
  1142                           tblptrh	equ	0xFF7
  1143                           tblptrl	equ	0xFF6
  1144                           tablat	equ	0xFF5
  1145                           prodh	equ	0xFF4
  1146                           prodl	equ	0xFF3
  1147                           intcon	equ	0xFF2
  1148                           postinc0	equ	0xFEE
  1149                           wreg	equ	0xFE8
  1150                           status	equ	0xFD8
  1151                           
  1152                           	psect	intcode_body
  1153  00101A                     __pintcode_body:
  1154                           	opt stack 27
  1155  00101A                     int_func:
  1156                           	opt stack 27
  1157  00101A  0006               	pop		; remove dummy address from shadow register refresh
  1158  00101C  CFFA F004          	movff	pclath,??_interruptHandlerUART+3
  1159  001020  CFFB F005          	movff	pclatu,??_interruptHandlerUART+4
  1160  001024  CFE9 F006          	movff	fsr0l,??_interruptHandlerUART+5
  1161  001028  CFEA F007          	movff	fsr0h,??_interruptHandlerUART+6
  1162  00102C  CFE1 F008          	movff	fsr1l,??_interruptHandlerUART+7
  1163  001030  CFE2 F009          	movff	fsr1h,??_interruptHandlerUART+8
  1164  001034  CFD9 F00A          	movff	fsr2l,??_interruptHandlerUART+9
  1165  001038  CFDA F00B          	movff	fsr2h,??_interruptHandlerUART+10
  1166  00103C  CFF3 F00C          	movff	prodl,??_interruptHandlerUART+11
  1167  001040  CFF4 F00D          	movff	prodh,??_interruptHandlerUART+12
  1168  001044  CFF6 F00E          	movff	tblptrl,??_interruptHandlerUART+13
  1169  001048  CFF7 F00F          	movff	tblptrh,??_interruptHandlerUART+14
  1170  00104C  CFF8 F010          	movff	tblptru,??_interruptHandlerUART+15
  1171  001050  CFF5 F011          	movff	tablat,??_interruptHandlerUART+16
  1172  001054  C04F  F012         	movff	btemp,??_interruptHandlerUART+17
  1173  001058  C050  F013         	movff	btemp+1,??_interruptHandlerUART+18
  1174  00105C  C051  F014         	movff	btemp+2,??_interruptHandlerUART+19
  1175  001060  C052  F015         	movff	btemp+3,??_interruptHandlerUART+20
  1176                           
  1177                           ;interruptUART.c: 17: if(TXIF){
  1178  001064  A89E               	btfss	3998,4,c	;volatile
  1179  001066  D044               	goto	i2l180
  1180                           
  1181                           ;interruptUART.c: 19: UARTinterruptState = INTCONbits.GIE;
  1182  001068  0E00               	movlw	0
  1183  00106A  BEF2               	btfsc	intcon,7,c	;volatile
  1184  00106C  0E01               	movlw	1
  1185  00106E  6E2F               	movwf	_UARTinterruptState,c	;volatile
  1186                           
  1187                           ;interruptUART.c: 20: (INTCONbits.GIE = 0);
  1188  001070  9EF2               	bcf	intcon,7,c	;volatile
  1189                           
  1190                           ;interruptUART.c: 21: TXREG = UART -> _dataTX[UART -> _numTransmits];
  1191  001072  EE20 F003          	lfsr	2,3
  1192  001076  504D               	movf	_UART,w,c
  1193  001078  26D9               	addwf	fsr2l,f,c
  1194  00107A  504E               	movf	_UART+1,w,c
  1195  00107C  22DA               	addwfc	fsr2h,f,c
  1196  00107E  50DF               	movf	indf2,w,c
  1197  001080  6E01               	movwf	??_interruptHandlerUART& (0+255),c
  1198  001082  5001               	movf	??_interruptHandlerUART,w,c
  1199  001084  0D01               	mullw	1
  1200  001086  C04D  FFD9         	movff	_UART,fsr2l
  1201  00108A  C04E  FFDA         	movff	_UART+1,fsr2h
  1202  00108E  CFDE F002          	movff	postinc2,??_interruptHandlerUART+1
  1203  001092  CFDD F003          	movff	postdec2,??_interruptHandlerUART+2
  1204  001096  50F3               	movf	prodl,w,c
  1205  001098  2402               	addwf	??_interruptHandlerUART+1,w,c
  1206  00109A  6ED9               	movwf	fsr2l,c
  1207  00109C  50F4               	movf	prodh,w,c
  1208  00109E  2003               	addwfc	??_interruptHandlerUART+2,w,c
  1209  0010A0  6EDA               	movwf	fsr2h,c
  1210  0010A2  50DF               	movf	indf2,w,c
  1211  0010A4  6EAD               	movwf	4013,c	;volatile
  1212                           
  1213                           ;interruptUART.c: 22: INTCONbits.GIE = UARTinterruptState;
  1214  0010A6  B02F               	btfsc	_UARTinterruptState,0,c	;volatile
  1215  0010A8  D002               	bra	i2u24_45
  1216  0010AA  9EF2               	bcf	intcon,7,c	;volatile
  1217  0010AC  D001               	bra	i2u24_46
  1218  0010AE                     i2u24_45:
  1219  0010AE  8EF2               	bsf	intcon,7,c	;volatile
  1220  0010B0                     i2u24_46:
  1221                           
  1222                           ;interruptUART.c: 24: UART -> _numTransmits++;
  1223  0010B0  EE20 F003          	lfsr	2,3
  1224  0010B4  504D               	movf	_UART,w,c
  1225  0010B6  26D9               	addwf	fsr2l,f,c
  1226  0010B8  504E               	movf	_UART+1,w,c
  1227  0010BA  22DA               	addwfc	fsr2h,f,c
  1228  0010BC  2ADF               	incf	indf2,f,c
  1229                           
  1230                           ;interruptUART.c: 27: if((UART -> _numTransmits) == (UART -> _numBytesTX)){
  1231  0010BE  EE20 F002          	lfsr	2,2
  1232  0010C2  504D               	movf	_UART,w,c
  1233  0010C4  26D9               	addwf	fsr2l,f,c
  1234  0010C6  504E               	movf	_UART+1,w,c
  1235  0010C8  22DA               	addwfc	fsr2h,f,c
  1236  0010CA  EE10 F003          	lfsr	1,3
  1237  0010CE  504D               	movf	_UART,w,c
  1238  0010D0  26E1               	addwf	fsr1l,f,c
  1239  0010D2  504E               	movf	_UART+1,w,c
  1240  0010D4  22E2               	addwfc	fsr1h,f,c
  1241  0010D6  50DE               	movf	postinc2,w,c
  1242  0010D8  18E6               	xorwf	postinc1,w,c
  1243  0010DA  A4D8               	btfss	status,2,c
  1244  0010DC  D009               	goto	i2l180
  1245                           
  1246                           ;interruptUART.c: 28: TXIE = 0;
  1247  0010DE  989D               	bcf	3997,4,c	;volatile
  1248                           
  1249                           ;interruptUART.c: 31: UART -> _stateTX = UART_STATE_READY;
  1250  0010E0  EE20 F008          	lfsr	2,8
  1251  0010E4  504D               	movf	_UART,w,c
  1252  0010E6  26D9               	addwf	fsr2l,f,c
  1253  0010E8  504E               	movf	_UART+1,w,c
  1254  0010EA  22DA               	addwfc	fsr2h,f,c
  1255  0010EC  0E01               	movlw	1
  1256  0010EE  6EDF               	movwf	indf2,c
  1257  0010F0                     i2l180:
  1258                           
  1259                           ;interruptUART.c: 32: }
  1260                           ;interruptUART.c: 33: }
  1261                           ;interruptUART.c: 36: if(RCIF){
  1262  0010F0  AA9E               	btfss	3998,5,c	;volatile
  1263  0010F2  D065               	goto	i2l186
  1264                           
  1265                           ;interruptUART.c: 39: if(RCSTAbits.FERR){
  1266  0010F4  A4AB               	btfss	4011,2,c	;volatile
  1267  0010F6  D008               	goto	i2l182
  1268                           
  1269                           ;interruptUART.c: 43: UART -> _lastReceiveFERR = 1;
  1270  0010F8  EE20 F00A          	lfsr	2,10
  1271  0010FC  504D               	movf	_UART,w,c
  1272  0010FE  26D9               	addwf	fsr2l,f,c
  1273  001100  504E               	movf	_UART+1,w,c
  1274  001102  22DA               	addwfc	fsr2h,f,c
  1275  001104  0E01               	movlw	1
  1276  001106  D007               	goto	L1
  1277  001108                     i2l182:
  1278                           
  1279                           ;interruptUART.c: 45: else{
  1280                           ;interruptUART.c: 46: UART -> _lastReceiveFERR = 0;
  1281  001108  EE20 F00A          	lfsr	2,10
  1282  00110C  504D               	movf	_UART,w,c
  1283  00110E  26D9               	addwf	fsr2l,f,c
  1284  001110  504E               	movf	_UART+1,w,c
  1285  001112  22DA               	addwfc	fsr2h,f,c
  1286  001114  0E00               	movlw	0
  1287  001116                     L1:
  1288  001116  6EDF               	movwf	indf2,c
  1289                           
  1290                           ;interruptUART.c: 47: }
  1291                           ;interruptUART.c: 50: UARTinterruptState = INTCONbits.GIE;
  1292  001118  0E00               	movlw	0
  1293  00111A  BEF2               	btfsc	intcon,7,c	;volatile
  1294  00111C  0E01               	movlw	1
  1295  00111E  6E2F               	movwf	_UARTinterruptState,c	;volatile
  1296                           
  1297                           ;interruptUART.c: 51: (INTCONbits.GIE = 0);
  1298  001120  9EF2               	bcf	intcon,7,c	;volatile
  1299                           
  1300                           ;interruptUART.c: 52: UART -> _dataRX[UART -> _numReceives] = RCREG;
  1301  001122  EE20 F007          	lfsr	2,7
  1302  001126  504D               	movf	_UART,w,c
  1303  001128  26D9               	addwf	fsr2l,f,c
  1304  00112A  504E               	movf	_UART+1,w,c
  1305  00112C  22DA               	addwfc	fsr2h,f,c
  1306  00112E  50DF               	movf	indf2,w,c
  1307  001130  6E01               	movwf	??_interruptHandlerUART& (0+255),c
  1308  001132  5001               	movf	??_interruptHandlerUART,w,c
  1309  001134  0D01               	mullw	1
  1310  001136  EE20 F004          	lfsr	2,4
  1311  00113A  504D               	movf	_UART,w,c
  1312  00113C  26D9               	addwf	fsr2l,f,c
  1313  00113E  504E               	movf	_UART+1,w,c
  1314  001140  22DA               	addwfc	fsr2h,f,c
  1315  001142  CFDE F002          	movff	postinc2,??_interruptHandlerUART+1
  1316  001146  CFDD F003          	movff	postdec2,??_interruptHandlerUART+2
  1317  00114A  50F3               	movf	prodl,w,c
  1318  00114C  2402               	addwf	??_interruptHandlerUART+1,w,c
  1319  00114E  6ED9               	movwf	fsr2l,c
  1320  001150  50F4               	movf	prodh,w,c
  1321  001152  2003               	addwfc	??_interruptHandlerUART+2,w,c
  1322  001154  6EDA               	movwf	fsr2h,c
  1323  001156  CFAE FFDF          	movff	4014,indf2	;volatile
  1324                           
  1325                           ;interruptUART.c: 53: INTCONbits.GIE = UARTinterruptState;
  1326  00115A  B02F               	btfsc	_UARTinterruptState,0,c	;volatile
  1327  00115C  D002               	bra	i2u28_45
  1328  00115E  9EF2               	bcf	intcon,7,c	;volatile
  1329  001160  D001               	bra	i2u28_46
  1330  001162                     i2u28_45:
  1331  001162  8EF2               	bsf	intcon,7,c	;volatile
  1332  001164                     i2u28_46:
  1333                           
  1334                           ;interruptUART.c: 57: if(RCSTAbits.OERR){
  1335  001164  A2AB               	btfss	4011,1,c	;volatile
  1336  001166  D003               	goto	i2l184
  1337                           
  1338                           ;interruptUART.c: 59: RCSTAbits.CREN = 0;
  1339  001168  98AB               	bcf	4011,4,c	;volatile
  1340                           
  1341                           ;interruptUART.c: 60: RCSTAbits.CREN = 1;
  1342  00116A  88AB               	bsf	4011,4,c	;volatile
  1343                           
  1344                           ;interruptUART.c: 61: }
  1345  00116C  D008               	goto	i2l185
  1346  00116E                     i2l184:
  1347                           
  1348                           ;interruptUART.c: 62: else{
  1349                           ;interruptUART.c: 63: UART -> _lastReceiveOERR = 0;
  1350  00116E  EE20 F00B          	lfsr	2,11
  1351  001172  504D               	movf	_UART,w,c
  1352  001174  26D9               	addwf	fsr2l,f,c
  1353  001176  504E               	movf	_UART+1,w,c
  1354  001178  22DA               	addwfc	fsr2h,f,c
  1355  00117A  0E00               	movlw	0
  1356  00117C  6EDF               	movwf	indf2,c
  1357  00117E                     i2l185:
  1358                           
  1359                           ;interruptUART.c: 64: }
  1360                           ;interruptUART.c: 66: UART -> _numReceives++;
  1361  00117E  EE20 F007          	lfsr	2,7
  1362  001182  504D               	movf	_UART,w,c
  1363  001184  26D9               	addwf	fsr2l,f,c
  1364  001186  504E               	movf	_UART+1,w,c
  1365  001188  22DA               	addwfc	fsr2h,f,c
  1366  00118A  2ADF               	incf	indf2,f,c
  1367                           
  1368                           ;interruptUART.c: 69: if(UART -> _numReceives >= UART -> _numBytesRX){
  1369  00118C  EE20 F006          	lfsr	2,6
  1370  001190  504D               	movf	_UART,w,c
  1371  001192  26D9               	addwf	fsr2l,f,c
  1372  001194  504E               	movf	_UART+1,w,c
  1373  001196  22DA               	addwfc	fsr2h,f,c
  1374  001198  EE10 F007          	lfsr	1,7
  1375  00119C  504D               	movf	_UART,w,c
  1376  00119E  26E1               	addwf	fsr1l,f,c
  1377  0011A0  504E               	movf	_UART+1,w,c
  1378  0011A2  22E2               	addwfc	fsr1h,f,c
  1379  0011A4  50DE               	movf	postinc2,w,c
  1380  0011A6  5CE6               	subwf	postinc1,w,c
  1381  0011A8  A0D8               	btfss	status,0,c
  1382  0011AA  D009               	goto	i2l186
  1383                           
  1384                           ;interruptUART.c: 70: RCIE = 0;
  1385  0011AC  9A9D               	bcf	3997,5,c	;volatile
  1386                           
  1387                           ;interruptUART.c: 73: UART -> _stateRX = UART_STATE_READY;
  1388  0011AE  EE20 F009          	lfsr	2,9
  1389  0011B2  504D               	movf	_UART,w,c
  1390  0011B4  26D9               	addwf	fsr2l,f,c
  1391  0011B6  504E               	movf	_UART+1,w,c
  1392  0011B8  22DA               	addwfc	fsr2h,f,c
  1393  0011BA  0E01               	movlw	1
  1394  0011BC  6EDF               	movwf	indf2,c
  1395  0011BE                     i2l186:
  1396  0011BE  C015  F052         	movff	??_interruptHandlerUART+20,btemp+3
  1397  0011C2  C014  F051         	movff	??_interruptHandlerUART+19,btemp+2
  1398  0011C6  C013  F050         	movff	??_interruptHandlerUART+18,btemp+1
  1399  0011CA  C012  F04F         	movff	??_interruptHandlerUART+17,btemp
  1400  0011CE  C011  FFF5         	movff	??_interruptHandlerUART+16,tablat
  1401  0011D2  C010  FFF8         	movff	??_interruptHandlerUART+15,tblptru
  1402  0011D6  C00F  FFF7         	movff	??_interruptHandlerUART+14,tblptrh
  1403  0011DA  C00E  FFF6         	movff	??_interruptHandlerUART+13,tblptrl
  1404  0011DE  C00D  FFF4         	movff	??_interruptHandlerUART+12,prodh
  1405  0011E2  C00C  FFF3         	movff	??_interruptHandlerUART+11,prodl
  1406  0011E6  C00B  FFDA         	movff	??_interruptHandlerUART+10,fsr2h
  1407  0011EA  C00A  FFD9         	movff	??_interruptHandlerUART+9,fsr2l
  1408  0011EE  C009  FFE2         	movff	??_interruptHandlerUART+8,fsr1h
  1409  0011F2  C008  FFE1         	movff	??_interruptHandlerUART+7,fsr1l
  1410  0011F6  C007  FFEA         	movff	??_interruptHandlerUART+6,fsr0h
  1411  0011FA  C006  FFE9         	movff	??_interruptHandlerUART+5,fsr0l
  1412  0011FE  C005  FFFB         	movff	??_interruptHandlerUART+4,pclatu
  1413  001202  C004  FFFA         	movff	??_interruptHandlerUART+3,pclath
  1414  001206  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1415  001208  0011               	retfie		f
  1416  00120A                     __end_of_interruptHandlerUART:
  1417                           	opt stack 0
  1418                           pclatu	equ	0xFFB
  1419                           pclath	equ	0xFFA
  1420                           tblptru	equ	0xFF8
  1421                           tblptrh	equ	0xFF7
  1422                           tblptrl	equ	0xFF6
  1423                           tablat	equ	0xFF5
  1424                           prodh	equ	0xFF4
  1425                           prodl	equ	0xFF3
  1426                           intcon	equ	0xFF2
  1427                           postinc0	equ	0xFEE
  1428                           fsr0h	equ	0xFEA
  1429                           fsr0l	equ	0xFE9
  1430                           wreg	equ	0xFE8
  1431                           postinc1	equ	0xFE6
  1432                           fsr1h	equ	0xFE2
  1433                           fsr1l	equ	0xFE1
  1434                           indf2	equ	0xFDF
  1435                           postinc2	equ	0xFDE
  1436                           postdec2	equ	0xFDD
  1437                           fsr2h	equ	0xFDA
  1438                           fsr2l	equ	0xFD9
  1439                           status	equ	0xFD8
  1440                           pclatu	equ	0xFFB
  1441                           pclath	equ	0xFFA
  1442                           tblptru	equ	0xFF8
  1443                           tblptrh	equ	0xFF7
  1444                           tblptrl	equ	0xFF6
  1445                           tablat	equ	0xFF5
  1446                           prodh	equ	0xFF4
  1447                           prodl	equ	0xFF3
  1448                           intcon	equ	0xFF2
  1449                           postinc0	equ	0xFEE
  1450                           fsr0h	equ	0xFEA
  1451                           fsr0l	equ	0xFE9
  1452                           wreg	equ	0xFE8
  1453                           postinc1	equ	0xFE6
  1454                           fsr1h	equ	0xFE2
  1455                           fsr1l	equ	0xFE1
  1456                           indf2	equ	0xFDF
  1457                           postinc2	equ	0xFDE
  1458                           postdec2	equ	0xFDD
  1459                           fsr2h	equ	0xFDA
  1460                           fsr2l	equ	0xFD9
  1461                           status	equ	0xFD8
  1462                           
  1463                           	psect	rparam
  1464  0000                     pclatu	equ	0xFFB
  1465                           pclath	equ	0xFFA
  1466                           tblptru	equ	0xFF8
  1467                           tblptrh	equ	0xFF7
  1468                           tblptrl	equ	0xFF6
  1469                           tablat	equ	0xFF5
  1470                           prodh	equ	0xFF4
  1471                           prodl	equ	0xFF3
  1472                           intcon	equ	0xFF2
  1473                           postinc0	equ	0xFEE
  1474                           fsr0h	equ	0xFEA
  1475                           fsr0l	equ	0xFE9
  1476                           wreg	equ	0xFE8
  1477                           postinc1	equ	0xFE6
  1478                           fsr1h	equ	0xFE2
  1479                           fsr1l	equ	0xFE1
  1480                           indf2	equ	0xFDF
  1481                           postinc2	equ	0xFDE
  1482                           postdec2	equ	0xFDD
  1483                           fsr2h	equ	0xFDA
  1484                           fsr2l	equ	0xFD9
  1485                           status	equ	0xFD8
  1486                           
  1487                           	psect	temp
  1488  00004F                     btemp:
  1489                           	opt stack 0
  1490  00004F                     	ds	1
  1491  0000                     int$flags	set	btemp
  1492  0000                     wtemp6	set	btemp+1
  1493                           pclatu	equ	0xFFB
  1494                           pclath	equ	0xFFA
  1495                           tblptru	equ	0xFF8
  1496                           tblptrh	equ	0xFF7
  1497                           tblptrl	equ	0xFF6
  1498                           tablat	equ	0xFF5
  1499                           prodh	equ	0xFF4
  1500                           prodl	equ	0xFF3
  1501                           intcon	equ	0xFF2
  1502                           postinc0	equ	0xFEE
  1503                           fsr0h	equ	0xFEA
  1504                           fsr0l	equ	0xFE9
  1505                           wreg	equ	0xFE8
  1506                           postinc1	equ	0xFE6
  1507                           fsr1h	equ	0xFE2
  1508                           fsr1l	equ	0xFE1
  1509                           indf2	equ	0xFDF
  1510                           postinc2	equ	0xFDE
  1511                           postdec2	equ	0xFDD
  1512                           fsr2h	equ	0xFDA
  1513                           fsr2l	equ	0xFD9
  1514                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    23
    Data        2
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     45      78
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S21$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    S21$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->___aldiv
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _interruptHandlerUART in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandlerUART in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandlerUART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandlerUART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandlerUART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandlerUART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandlerUART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandlerUART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandlerUART in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandlerUART in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandlerUART in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandlerUART in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandlerUART in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandlerUART in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandlerUART in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandlerUART in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandlerUART in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0     853
                                             35 COMRAM    10    10      0
                            ___aldiv
                            _initLCD
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      90
                                             23 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             24 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                             23 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0      75
                                             21 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     604
                                             21 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interruptHandlerUART                                21    21      0       0
                                              0 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _putch
     _lcdNibble

 _interruptHandlerUART (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     2D      4E       1       61.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4E      34        0.0%
DATA                 0      0      4E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jan 29 00:40:45 2018

                           l81 12B2                             l91 12DA                             l87 12D2  
                           l88 12CA                             u15 1416                             u16 1418  
                           u25 1456                             u26 1458                    __CFG_CPD$ON 000000  
                  __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                            l331 13A6  
                          l332 13B4                            l324 132C                            l333 13CA  
                          l325 1344                            l327 1372                            l328 1366  
                 __CFG_CPB$OFF 000000                            u530 12BA                            u515 126C  
                          u607 129E                            u480 1376                            u617 14E8  
                          u570 12E6                            u627 1460                            u580 12F2  
                          u572 12E8                            u637 1494                            u582 12F4  
                          u647 14FC                            u657 13FE                            u667 1408  
                          u677 143E                            u687 1448                            wreg 000FE8  
                 __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000                           l1330 12DE  
                         _LATA 000F89                           _LATB 000F8A                           _LATC 000F8B  
                         _LATD 000F8C                           _LATE 000F8D                           _RCIE 007CED  
                         _RCIF 007CF5                           _UART 004D                           _TRMT 007D61  
                         _TXIE 007CEC                           _TXIF 007CF4                           _main 120A  
                         _keys 1001                           _uart 0041                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 004F                           prodh 000FF4                           prodl 000FF3  
                         start 000E                  __CFG_IESO$OFF 000000                   main@baudRate 0028  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000               __end_of_LCD_LEFT 1013  
              __end_of___aldiv 13DC                          ?_main 0001                          i2l180 10F0  
                        i2l182 1108                          i2l184 116E                          i2l185 117E  
                        i2l186 11BE                          _RCREG 000FAE                          _SPBRG 000FAF  
                        _PORTB 000F81                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TRISD 000F95                          _TRISE 000F96  
                        _TXREG 000FAD                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
              __end_of_lcdInst 1504                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                   main@keypress 002D  
               __CFG_EBTR3$OFF 000000           _interruptHandlerUART 0008                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                __end_of_initLCD 14A6  
               __CFG_EBTRB$OFF 000000                          _putch 14DC                          pclath 000FFA  
                        tablat 000FF5              _LCDinterruptState 0030                          status 000FD8  
                        wtemp6 0050                 __CFG_PBADEN$ON 000000                __initialization 14A6  
                 __end_of_main 1310                   __end_of_keys 1012                 __CFG_OSC$HSPLL 000000  
            __end_of_LCD_RIGHT 1014                         ??_main 0024                  __activetblptr 000001  
        ?_interruptHandlerUART 0001                         _ADCON0 000FC2                         _ADCON1 000FC1  
                       ?_putch 0001                         _TRISC6 007CA6                         _TRISC7 007CA7  
               __CFG_XINST$OFF 000000                      ??___aldiv 001E                 __CFG_STVREN$ON 000000  
                       clear_0 14C4                      ??_lcdInst 0018                      ??_initLCD 0019  
                 __pdataCOMRAM 004D                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                     __accesstop 0080  
      __end_of__initialization 14CA                  ___rparam_used 000001                 __pcstackCOMRAM 0001  
                __end_of_putch 14F0             __size_of_lcdNibble 007E         ??_interruptHandlerUART 0001  
                      ??_putch 0018                     _arr_dataRX 0031                        i2u24_45 10AE  
                      i2u24_46 10B0                        i2u28_45 1162                        i2u28_46 1164  
         lcd@LCDinterruptState 002E              __end_of_lcdNibble 145A                        __Hparam 0000  
                      __Lparam 0000                        ___aldiv 1310                   __psmallconst 1000  
                      __pcinit 14A6                        __ramtop 1000                        _lcdInst 14F0  
                      __ptext0 120A                        __ptext1 14DC                        __ptext2 145A  
                      __ptext3 14F0                        __ptext4 13DC                        __ptext5 1310  
                      _initLCD 145A               ___aldiv@dividend 0016                      _LCD_RIGHT 1013  
               __pintcode_body 101A           end_of_initialization 14CA          __end_of_LCD_SIZE_HORZ 1016  
        __end_of_LCD_SIZE_VERT 1015                        int_func 101A                      _RCSTAbits 000FAB  
             ___aldiv@quotient 0020                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                      _PORTBbits 000F81  
                    _TXSTAbits 000FAC                  __pidataCOMRAM 1504            start_initialization 14A6  
             main@receivedByte 002C               __CFG_LPT1OSC$OFF 000000                    __pbssCOMRAM 002E  
__size_of_interruptHandlerUART 1202              __CFG_CCP2MX$PORTC 000000             _UARTinterruptState 002F  
                    __pintcode 0008                      _lcdNibble 13DC                       ?___aldiv 0016  
                     ?_lcdInst 0001                       ?_initLCD 0001                    __smallconst 1000  
               __size_of_putch 0014                       _LCD_LEFT 1012                ___aldiv@divisor 001A  
              ___aldiv@counter 001E                       _LATDbits 000F8C               __CFG_WDTPS$32768 000000  
                   ?_lcdNibble 0001                  lcdNibble@data 0017                  lcdNibble@temp 0016  
               _LCD_HORZ_LIMIT 1017                       __Hrparam 0000                       __Lrparam 0000  
                 __Lsmallconst 1000             __CFG_BOREN$SBORDIS 000000               __size_of___aldiv 00CC  
             __size_of_lcdInst 0014               __size_of_initLCD 004C         __end_of_LCD_HORZ_LIMIT 1018  
               _LCD_VERT_LIMIT 1016                  __size_of_main 0106                    ??_lcdNibble 0016  
                     int$flags 004F                      putch@data 0018                     _INTCONbits 000FF2  
       __end_of_LCD_VERT_LIMIT 1017                       intlevel2 0000                  _LCD_SIZE_HORZ 1015  
                _LCD_SIZE_VERT 1014   __end_of_interruptHandlerUART 120A                    lcdInst@data 0018  
                 ___aldiv@sign 001F  
