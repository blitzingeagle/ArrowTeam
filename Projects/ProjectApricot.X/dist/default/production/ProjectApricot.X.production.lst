

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Feb 22 21:11:34 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,inline
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31  0000                     
    32                           ; Version 1.45
    33                           ; Generated 16/11/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4620 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	idataCOMRAM
    68  003570                     __pidataCOMRAM:
    69                           	opt stack 0
    70                           
    71                           ;initializer for main@F3027
    72  003570  45                 	db	69
    73  003571  54                 	db	84
    74  003572  41                 	db	65
    75  003573  3A                 	db	58
    76  003574  20                 	db	32
    77  003575  20                 	db	32
    78  003576  20                 	db	32
    79  003577  20                 	db	32
    80  003578  20                 	db	32
    81  003579  2D                 	db	45
    82  00357A  20                 	db	32
    83  00357B  6D                 	db	109
    84  00357C  69                 	db	105
    85  00357D  6E                 	db	110
    86  00357E  20                 	db	32
    87  00357F  2D                 	db	45
    88  003580  2D                 	db	45
    89  003581  20                 	db	32
    90  003582  73                 	db	115
    91  003583  65                 	db	101
    92  003584  63                 	db	99
    93  003585  00                 	db	0
    94  003586  00                 	db	0
    95                           
    96                           	psect	smallconst
    97  001000                     __psmallconst:
    98                           	opt stack 0
    99  001000  00                 	db	0
   100  001001                     _VIOLET:
   101                           	opt stack 0
   102  001001  00D3               	dw	211
   103  001003  0094               	dw	148
   104  001005                     __end_of_VIOLET:
   105                           	opt stack 0
   106  001005                     _INDIGO:
   107                           	opt stack 0
   108  001005  0082               	dw	130
   109  001007  004B               	dw	75
   110  001009                     __end_of_INDIGO:
   111                           	opt stack 0
   112  001009                     _BLUE:
   113                           	opt stack 0
   114  001009  00FF               	dw	255
   115  00100B  0000               	dw	0
   116  00100D                     __end_of_BLUE:
   117                           	opt stack 0
   118  00100D                     _GREEN:
   119                           	opt stack 0
   120  00100D  FF00               	dw	65280
   121  00100F  0000               	dw	0
   122  001011                     __end_of_GREEN:
   123                           	opt stack 0
   124  001011                     _YELLOW:
   125                           	opt stack 0
   126  001011  FF00               	dw	65280
   127  001013  00FF               	dw	255
   128  001015                     __end_of_YELLOW:
   129                           	opt stack 0
   130  001015                     _ORANGE:
   131                           	opt stack 0
   132  001015  8C00               	dw	35840
   133  001017  00FF               	dw	255
   134  001019                     __end_of_ORANGE:
   135                           	opt stack 0
   136  001019                     _RED:
   137                           	opt stack 0
   138  001019  0000               	dw	0
   139  00101B  00FF               	dw	255
   140  00101D                     __end_of_RED:
   141                           	opt stack 0
   142  00101D                     _WHITE:
   143                           	opt stack 0
   144  00101D  FFFF               	dw	65535
   145  00101F  00FF               	dw	255
   146  001021                     __end_of_WHITE:
   147                           	opt stack 0
   148  001021                     _GREY:
   149                           	opt stack 0
   150  001021  8080               	dw	32896
   151  001023  0080               	dw	128
   152  001025                     __end_of_GREY:
   153                           	opt stack 0
   154  001025                     _BLACK:
   155                           	opt stack 0
   156  001025  0000               	dw	0
   157  001027  0000               	dw	0
   158  001029                     __end_of_BLACK:
   159                           	opt stack 0
   160  001029  C7                 	db	199
   161  00102A                     __end_ofGLCD_PIC@INST_VMOFCTR2:
   162                           	opt stack 0
   163  00102A                     GLCD_PIC@INST_VMCTR1:
   164                           	opt stack 0
   165  00102A  C5                 	db	197
   166  00102B                     __end_ofGLCD_PIC@INST_VMCTR1:
   167                           	opt stack 0
   168  00102B                     GLCD_PIC@INST_PWCTR5:
   169                           	opt stack 0
   170  00102B  C4                 	db	196
   171  00102C                     __end_ofGLCD_PIC@INST_PWCTR5:
   172                           	opt stack 0
   173  00102C                     GLCD_PIC@INST_PWCTR4:
   174                           	opt stack 0
   175  00102C  C3                 	db	195
   176  00102D                     __end_ofGLCD_PIC@INST_PWCTR4:
   177                           	opt stack 0
   178  00102D                     GLCD_PIC@INST_PWCTR3:
   179                           	opt stack 0
   180  00102D  C2                 	db	194
   181  00102E                     __end_ofGLCD_PIC@INST_PWCTR3:
   182                           	opt stack 0
   183  00102E                     GLCD_PIC@INST_PWCTR2:
   184                           	opt stack 0
   185  00102E  C1                 	db	193
   186  00102F                     __end_ofGLCD_PIC@INST_PWCTR2:
   187                           	opt stack 0
   188  00102F                     GLCD_PIC@INST_PWCTR1:
   189                           	opt stack 0
   190  00102F  C0                 	db	192
   191  001030                     __end_ofGLCD_PIC@INST_PWCTR1:
   192                           	opt stack 0
   193  001030                     GLCD_PIC@INST_INVCTR:
   194                           	opt stack 0
   195  001030  B4                 	db	180
   196  001031                     __end_ofGLCD_PIC@INST_INVCTR:
   197                           	opt stack 0
   198  001031                     GLCD_PIC@INST_FRMCTR3:
   199                           	opt stack 0
   200  001031  B3                 	db	179
   201  001032                     __end_ofGLCD_PIC@INST_FRMCTR3:
   202                           	opt stack 0
   203  001032                     GLCD_PIC@INST_FRMCTR2:
   204                           	opt stack 0
   205  001032  B2                 	db	178
   206  001033                     __end_ofGLCD_PIC@INST_FRMCTR2:
   207                           	opt stack 0
   208  001033                     GLCD_PIC@INST_FRMCTR1:
   209                           	opt stack 0
   210  001033  B1                 	db	177
   211  001034                     __end_ofGLCD_PIC@INST_FRMCTR1:
   212                           	opt stack 0
   213  001034                     GLCD_PIC@INST_COLMOD:
   214                           	opt stack 0
   215  001034  3A                 	db	58
   216  001035                     __end_ofGLCD_PIC@INST_COLMOD:
   217                           	opt stack 0
   218  001035  39                 	db	57
   219  001036                     __end_ofGLCD_PIC@INST_IDMON:
   220                           	opt stack 0
   221  001036                     GLCD_PIC@INST_IDMOFF:
   222                           	opt stack 0
   223  001036  38                 	db	56
   224  001037                     __end_ofGLCD_PIC@INST_IDMOFF:
   225                           	opt stack 0
   226  001037                     GLCD_PIC@INST_MADCTL:
   227                           	opt stack 0
   228  001037  36                 	db	54
   229  001038                     __end_ofGLCD_PIC@INST_MADCTL:
   230                           	opt stack 0
   231  001038  35                 	db	53
   232  001039                     __end_ofGLCD_PIC@INST_TEON:
   233                           	opt stack 0
   234  001039  34                 	db	52
   235  00103A                     __end_ofGLCD_PIC@INST_TEOFF:
   236                           	opt stack 0
   237  00103A  30                 	db	48
   238  00103B                     __end_ofGLCD_PIC@INST_PTLAR:
   239                           	opt stack 0
   240  00103B                     GLCD_PIC@INST_RAMWR:
   241                           	opt stack 0
   242  00103B  2C                 	db	44
   243  00103C                     __end_ofGLCD_PIC@INST_RAMWR:
   244                           	opt stack 0
   245  00103C                     GLCD_PIC@INST_RASET:
   246                           	opt stack 0
   247  00103C  2B                 	db	43
   248  00103D                     __end_ofGLCD_PIC@INST_RASET:
   249                           	opt stack 0
   250  00103D                     GLCD_PIC@INST_CASET:
   251                           	opt stack 0
   252  00103D  2A                 	db	42
   253  00103E                     __end_ofGLCD_PIC@INST_CASET:
   254                           	opt stack 0
   255  00103E                     GLCD_PIC@INST_DISPON:
   256                           	opt stack 0
   257  00103E  29                 	db	41
   258  00103F                     __end_ofGLCD_PIC@INST_DISPON:
   259                           	opt stack 0
   260  00103F  28                 	db	40
   261  001040                     __end_ofGLCD_PIC@INST_DISPOFF:
   262                           	opt stack 0
   263  001040                     GLCD_PIC@INST_GAMSET:
   264                           	opt stack 0
   265  001040  26                 	db	38
   266  001041                     __end_ofGLCD_PIC@INST_GAMSET:
   267                           	opt stack 0
   268  001041  21                 	db	33
   269  001042                     __end_ofGLCD_PIC@INST_INVON:
   270                           	opt stack 0
   271  001042                     GLCD_PIC@INST_INVOFF:
   272                           	opt stack 0
   273  001042  20                 	db	32
   274  001043                     __end_ofGLCD_PIC@INST_INVOFF:
   275                           	opt stack 0
   276  001043                     GLCD_PIC@INST_NORON:
   277                           	opt stack 0
   278  001043  13                 	db	19
   279  001044                     __end_ofGLCD_PIC@INST_NORON:
   280                           	opt stack 0
   281  001044  12                 	db	18
   282  001045                     __end_ofGLCD_PIC@INST_PTLON:
   283                           	opt stack 0
   284  001045                     GLCD_PIC@INST_SLPOUT:
   285                           	opt stack 0
   286  001045  11                 	db	17
   287  001046                     __end_ofGLCD_PIC@INST_SLPOUT:
   288                           	opt stack 0
   289  001046  10                 	db	16
   290  001047                     __end_ofGLCD_PIC@INST_SLPIN:
   291                           	opt stack 0
   292  001047                     GLCD_PIC@INST_SWRESET:
   293                           	opt stack 0
   294  001047  01                 	db	1
   295  001048                     __end_ofGLCD_PIC@INST_SWRESET:
   296                           	opt stack 0
   297  001048  00                 	db	0
   298  001049                     __end_ofGLCD_PIC@INST_NOP:
   299                           	opt stack 0
   300  001049  C7                 	db	199
   301  00104A                     __end_of_INST_VMOFCTR2:
   302                           	opt stack 0
   303  00104A  C5                 	db	197
   304  00104B                     __end_of_INST_VMCTR1:
   305                           	opt stack 0
   306  00104B  C4                 	db	196
   307  00104C                     __end_of_INST_PWCTR5:
   308                           	opt stack 0
   309  00104C  C3                 	db	195
   310  00104D                     __end_of_INST_PWCTR4:
   311                           	opt stack 0
   312  00104D  C2                 	db	194
   313  00104E                     __end_of_INST_PWCTR3:
   314                           	opt stack 0
   315  00104E  C1                 	db	193
   316  00104F                     __end_of_INST_PWCTR2:
   317                           	opt stack 0
   318  00104F  C0                 	db	192
   319  001050                     __end_of_INST_PWCTR1:
   320                           	opt stack 0
   321  001050  B4                 	db	180
   322  001051                     __end_of_INST_INVCTR:
   323                           	opt stack 0
   324  001051  B3                 	db	179
   325  001052                     __end_of_INST_FRMCTR3:
   326                           	opt stack 0
   327  001052  B2                 	db	178
   328  001053                     __end_of_INST_FRMCTR2:
   329                           	opt stack 0
   330  001053  B1                 	db	177
   331  001054                     __end_of_INST_FRMCTR1:
   332                           	opt stack 0
   333  001054  3A                 	db	58
   334  001055                     __end_of_INST_COLMOD:
   335                           	opt stack 0
   336  001055  39                 	db	57
   337  001056                     __end_of_INST_IDMON:
   338                           	opt stack 0
   339  001056  38                 	db	56
   340  001057                     __end_of_INST_IDMOFF:
   341                           	opt stack 0
   342  001057  36                 	db	54
   343  001058                     __end_of_INST_MADCTL:
   344                           	opt stack 0
   345  001058  35                 	db	53
   346  001059                     __end_of_INST_TEON:
   347                           	opt stack 0
   348  001059  34                 	db	52
   349  00105A                     __end_of_INST_TEOFF:
   350                           	opt stack 0
   351  00105A  30                 	db	48
   352  00105B                     __end_of_INST_PTLAR:
   353                           	opt stack 0
   354  00105B  2C                 	db	44
   355  00105C                     __end_of_INST_RAMWR:
   356                           	opt stack 0
   357  00105C  2B                 	db	43
   358  00105D                     __end_of_INST_RASET:
   359                           	opt stack 0
   360  00105D  2A                 	db	42
   361  00105E                     __end_of_INST_CASET:
   362                           	opt stack 0
   363  00105E  29                 	db	41
   364  00105F                     __end_of_INST_DISPON:
   365                           	opt stack 0
   366  00105F  28                 	db	40
   367  001060                     __end_of_INST_DISPOFF:
   368                           	opt stack 0
   369  001060  26                 	db	38
   370  001061                     __end_of_INST_GAMSET:
   371                           	opt stack 0
   372  001061  21                 	db	33
   373  001062                     __end_of_INST_INVON:
   374                           	opt stack 0
   375  001062  20                 	db	32
   376  001063                     __end_of_INST_INVOFF:
   377                           	opt stack 0
   378  001063  13                 	db	19
   379  001064                     __end_of_INST_NORON:
   380                           	opt stack 0
   381  001064  12                 	db	18
   382  001065                     __end_of_INST_PTLON:
   383                           	opt stack 0
   384  001065  11                 	db	17
   385  001066                     __end_of_INST_SLPOUT:
   386                           	opt stack 0
   387  001066  10                 	db	16
   388  001067                     __end_of_INST_SLPIN:
   389                           	opt stack 0
   390  001067  01                 	db	1
   391  001068                     __end_of_INST_SWRESET:
   392                           	opt stack 0
   393  001068  00                 	db	0
   394  001069                     __end_of_INST_NOP:
   395                           	opt stack 0
   396  001069                     _GLCD_SIZE_VERT:
   397                           	opt stack 0
   398  001069  80                 	db	128
   399  00106A                     __end_of_GLCD_SIZE_VERT:
   400                           	opt stack 0
   401  00106A                     _GLCD_SIZE_HORZ:
   402                           	opt stack 0
   403  00106A  80                 	db	128
   404  00106B                     __end_of_GLCD_SIZE_HORZ:
   405                           	opt stack 0
   406  00106B                     _GLCD_ADDRESSABLE_SIZE_VERT:
   407                           	opt stack 0
   408  00106B  A0                 	db	160
   409  00106C                     __end_of_GLCD_ADDRESSABLE_SIZE_VERT:
   410                           	opt stack 0
   411  00106C                     _GLCD_ADDRESSABLE_SIZE_HORZ:
   412                           	opt stack 0
   413  00106C  80                 	db	128
   414  00106D                     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ:
   415                           	opt stack 0
   416  0000                     _TRISDbits	set	3989
   417  0000                     _LATDbits	set	3980
   418  0000                     _TRISCbits	set	3988
   419  0000                     _SSPCON1	set	4038
   420  0000                     _SSPSTAT	set	4039
   421  0000                     _SSPCON1bits	set	4038
   422  0000                     _SSPSTATbits	set	4039
   423  0000                     _SSPBUF	set	4041
   424  0000                     _ADCON1	set	4033
   425  0000                     _ADCON0	set	4034
   426  0000                     _TRISE	set	3990
   427  0000                     _TRISD	set	3989
   428  0000                     _TRISC	set	3988
   429  0000                     _TRISB	set	3987
   430  0000                     _TRISA	set	3986
   431  0000                     _LATE	set	3981
   432  0000                     _LATD	set	3980
   433  0000                     _LATC	set	3979
   434  0000                     _LATB	set	3978
   435  0000                     _LATA	set	3977
   436  0000                     _SSPIF	set	31987
   437  00106D                     STR_1:
   438  00106D  4A                 	db	74	;'J'
   439  00106E  61                 	db	97	;'a'
   440  00106F  6E                 	db	110	;'n'
   441  001070  20                 	db	32
   442  001071  32                 	db	50	;'2'
   443  001072  38                 	db	56	;'8'
   444  001073  2C                 	db	44
   445  001074  20                 	db	32
   446  001075  32                 	db	50	;'2'
   447  001076  30                 	db	48	;'0'
   448  001077  31                 	db	49	;'1'
   449  001078  38                 	db	56	;'8'
   450  001079  20                 	db	32
   451  00107A  20                 	db	32
   452  00107B  31                 	db	49	;'1'
   453  00107C  31                 	db	49	;'1'
   454  00107D  3A                 	db	58	;':'
   455  00107E  35                 	db	53	;'5'
   456  00107F  30                 	db	48	;'0'
   457  001080  20                 	db	32
   458  001081  50                 	db	80	;'P'
   459  001082  4D                 	db	77	;'M'
   460  001083  00                 	db	0
   461                           
   462                           ; #config settings
   463  001084  00                 	db	0	; dummy byte at the end
   464  0000                     
   465                           	psect	cinit
   466  0034D2                     __pcinit:
   467                           	opt stack 0
   468  0034D2                     start_initialization:
   469                           	opt stack 0
   470  0034D2                     __initialization:
   471                           	opt stack 0
   472                           
   473                           ; Initialize objects allocated to COMRAM (23 bytes)
   474                           ; load TBLPTR registers with __pidataCOMRAM
   475  0034D2  0E70               	movlw	low __pidataCOMRAM
   476  0034D4  6EF6               	movwf	tblptrl,c
   477  0034D6  0E35               	movlw	high __pidataCOMRAM
   478  0034D8  6EF7               	movwf	tblptrh,c
   479  0034DA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   480  0034DC  6EF8               	movwf	tblptru,c
   481  0034DE  EE00  F065         	lfsr	0,__pdataCOMRAM
   482  0034E2  EE10 F017          	lfsr	1,23
   483  0034E6                     copy_data0:
   484  0034E6  0009               	tblrd		*+
   485  0034E8  CFF5 FFEE          	movff	tablat,postinc0
   486  0034EC  50E5               	movf	postdec1,w,c
   487  0034EE  50E1               	movf	fsr1l,w,c
   488  0034F0  E1FA               	bnz	copy_data0
   489                           
   490                           ; Clear objects allocated to COMRAM (1 bytes)
   491  0034F2  6A7C               	clrf	__pbssCOMRAM& (0+255),c
   492  0034F4                     end_of_initialization:
   493                           	opt stack 0
   494  0034F4                     __end_of__initialization:
   495                           	opt stack 0
   496  0034F4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   497  0034F6  6EF8               	movwf	tblptru,c
   498  0034F8  0100               	movlb	0
   499  0034FA  EF73  F016         	goto	_main	;jump to C main() function
   500                           tblptru	equ	0xFF8
   501                           tblptrh	equ	0xFF7
   502                           tblptrl	equ	0xFF6
   503                           tablat	equ	0xFF5
   504                           postinc0	equ	0xFEE
   505                           postdec1	equ	0xFE5
   506                           fsr1l	equ	0xFE1
   507                           
   508                           	psect	bssCOMRAM
   509  00007C                     __pbssCOMRAM:
   510                           	opt stack 0
   511  00007C                     _MADCTLbits:
   512                           	opt stack 0
   513  00007C                     	ds	1
   514                           tblptru	equ	0xFF8
   515                           tblptrh	equ	0xFF7
   516                           tblptrl	equ	0xFF6
   517                           tablat	equ	0xFF5
   518                           postinc0	equ	0xFEE
   519                           postdec1	equ	0xFE5
   520                           fsr1l	equ	0xFE1
   521                           
   522                           	psect	dataCOMRAM
   523  000065                     __pdataCOMRAM:
   524                           	opt stack 0
   525  000065                     main@F3027:
   526                           	opt stack 0
   527  000065                     	ds	23
   528                           tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           postdec1	equ	0xFE5
   534                           fsr1l	equ	0xFE1
   535                           
   536                           	psect	cstackCOMRAM
   537  000001                     __pcstackCOMRAM:
   538                           	opt stack 0
   539  000001                     ??_spiTransfer:
   540  000001                     ?___wmul:
   541                           	opt stack 0
   542  000001                     ?___awmod:
   543                           	opt stack 0
   544  000001                     ?_new_px_char:
   545                           	opt stack 0
   546  000001                     spiInit@divider:
   547                           	opt stack 0
   548  000001                     ___wmul@multiplier:
   549                           	opt stack 0
   550  000001                     ___awmod@dividend:
   551                           	opt stack 0
   552  000001                     new_px_char@a:
   553                           	opt stack 0
   554                           
   555                           ; 4 bytes @ 0x0
   556  000001                     	ds	1
   557  000002                     spiTransfer@byteToTransfer:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x1
   561  000002                     	ds	1
   562  000003                     spiSend@val:
   563                           	opt stack 0
   564  000003                     ___wmul@multiplicand:
   565                           	opt stack 0
   566  000003                     ___awmod@divisor:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x2
   570  000003                     	ds	1
   571  000004                     glcdTransfer@cmd:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x3
   575  000004                     	ds	1
   576  000005                     ??_glcdTransfer:
   577  000005                     ___awmod@counter:
   578                           	opt stack 0
   579  000005                     ___wmul@product:
   580                           	opt stack 0
   581  000005                     new_px_char@b:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0x4
   585  000005                     	ds	1
   586  000006                     glcdTransfer@byte:
   587                           	opt stack 0
   588  000006                     ___awmod@sign:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x5
   592  000006                     	ds	1
   593  000007                     ?___awdiv:
   594                           	opt stack 0
   595  000007                     glcdDrawRectangle@XE:
   596                           	opt stack 0
   597  000007                     glcdSetCOLMOD@numBitsPerPixel:
   598                           	opt stack 0
   599  000007                     ___awdiv@dividend:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x6
   603  000007                     	ds	1
   604  000008                     glcdDrawRectangle@YS:
   605                           	opt stack 0
   606  000008                     glcdSetCOLMOD@rawData:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x7
   610  000008                     	ds	1
   611  000009                     glcdDrawRectangle@YE:
   612                           	opt stack 0
   613  000009                     ___awdiv@divisor:
   614                           	opt stack 0
   615  000009                     new_px_char@p:
   616                           	opt stack 0
   617                           
   618                           ; 8 bytes @ 0x8
   619  000009                     	ds	1
   620  00000A                     glcdDrawRectangle@color:
   621                           	opt stack 0
   622                           
   623                           ; 4 bytes @ 0x9
   624  00000A                     	ds	1
   625  00000B                     ___awdiv@counter:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0xA
   629  00000B                     	ds	1
   630  00000C                     ___awdiv@sign:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0xB
   634  00000C                     	ds	1
   635  00000D                     ___awdiv@quotient:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0xC
   639  00000D                     	ds	1
   640  00000E                     ??_glcdDrawRectangle:
   641                           
   642                           ; 1 bytes @ 0xD
   643  00000E                     	ds	3
   644  000011                     ?_px_map:
   645                           	opt stack 0
   646                           
   647                           ; 8 bytes @ 0x10
   648  000011                     	ds	1
   649  000012                     glcdDrawRectangle@numLoops:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x11
   653  000012                     	ds	2
   654  000014                     glcdDrawRectangle@i:
   655                           	opt stack 0
   656                           
   657                           ; 2 bytes @ 0x13
   658  000014                     	ds	2
   659  000016                     glcdDrawRectangle@colorData:
   660                           	opt stack 0
   661                           
   662                           ; 3 bytes @ 0x15
   663  000016                     	ds	3
   664  000019                     glcdDrawRectangle@XS:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x18
   668  000019                     	ds	1
   669  00001A                     ??_initGLCD:
   670  00001A                     glcdDrawPixel@YS:
   671                           	opt stack 0
   672  00001A                     px_map@c:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0x19
   676  00001A                     	ds	1
   677  00001B                     glcdDrawPixel@color:
   678                           	opt stack 0
   679                           
   680                           ; 4 bytes @ 0x1A
   681  00001B                     	ds	1
   682  00001C                     
   683                           ; 1 bytes @ 0x1B
   684  00001C                     	ds	3
   685  00001F                     ??_glcdDrawPixel:
   686                           
   687                           ; 1 bytes @ 0x1E
   688  00001F                     	ds	1
   689  000020                     glcdDrawPixel@XS:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x1F
   693  000020                     	ds	1
   694  000021                     draw_px_char@x:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x20
   698  000021                     	ds	2
   699  000023                     draw_px_char@y:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x22
   703  000023                     	ds	2
   704  000025                     draw_px_char@p:
   705                           	opt stack 0
   706                           
   707                           ; 8 bytes @ 0x24
   708  000025                     	ds	8
   709  00002D                     ??_draw_px_char:
   710                           
   711                           ; 1 bytes @ 0x2C
   712  00002D                     	ds	4
   713  000031                     draw_px_char@m:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x30
   717  000031                     	ds	4
   718  000035                     draw_px_char@i:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x34
   722  000035                     	ds	2
   723  000037                     print_px_char@x:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x36
   727  000037                     	ds	2
   728  000039                     print_px_char@y:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x38
   732  000039                     	ds	2
   733  00003B                     print_px_char@c:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x3A
   737  00003B                     	ds	1
   738  00003C                     print_px_string@x:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x3B
   742  00003C                     	ds	2
   743  00003E                     print_px_string@y:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x3D
   747  00003E                     	ds	2
   748  000040                     print_px_string@s:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x3F
   752  000040                     	ds	2
   753  000042                     ??_print_px_string:
   754                           
   755                           ; 1 bytes @ 0x41
   756  000042                     	ds	2
   757  000044                     _print_px_string$1146:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x43
   761  000044                     	ds	2
   762  000046                     print_px_string@idx:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x45
   766  000046                     	ds	2
   767  000048                     ??_main:
   768                           
   769                           ; 1 bytes @ 0x47
   770  000048                     	ds	2
   771  00004A                     main@eta:
   772                           	opt stack 0
   773                           
   774                           ; 23 bytes @ 0x49
   775  00004A                     	ds	23
   776  000061                     _main$1145:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x60
   780  000061                     	ds	2
   781  000063                     main@sec:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x62
   785  000063                     	ds	2
   786                           tblptru	equ	0xFF8
   787                           tblptrh	equ	0xFF7
   788                           tblptrl	equ	0xFF6
   789                           tablat	equ	0xFF5
   790                           postinc0	equ	0xFEE
   791                           postdec1	equ	0xFE5
   792                           fsr1l	equ	0xFE1
   793                           
   794 ;;
   795 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   796 ;;
   797 ;; *************** function _main *****************
   798 ;; Defined at:
   799 ;;		line 123 in file "main.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;		None
   802 ;; Auto vars:     Size  Location     Type
   803 ;;  eta            23   73[COMRAM] unsigned char [23]
   804 ;;  sec             2   98[COMRAM] int 
   805 ;; Return value:  Size  Location     Type
   806 ;;                  1    wreg      void 
   807 ;; Registers used:
   808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   809 ;; Tracked objects:
   810 ;;		On entry : 0/0
   811 ;;		On exit  : 0/0
   812 ;;		Unchanged: 0/0
   813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   815 ;;      Locals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   816 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   817 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   818 ;;Total ram usage:       29 bytes
   819 ;; Hardware stack levels required when called:    8
   820 ;; This function calls:
   821 ;;		___awdiv
   822 ;;		___awmod
   823 ;;		_glcdDrawRectangle
   824 ;;		_init
   825 ;;		_print_px_string
   826 ;; This function is called by:
   827 ;;		Startup code after reset
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text0
   832  002CE6                     __ptext0:
   833                           	opt stack 0
   834  002CE6                     _main:
   835                           	opt stack 23
   836                           
   837                           ;main.c: 124: init();
   838                           
   839                           ;incstack = 0
   840  002CE6  EC50  F01A         	call	_init	;wreg free
   841                           
   842                           ;main.c: 127: glcdDrawRectangle(0, GLCD_SIZE_VERT, 0, 14, RED);
   843  002CEA  0E69               	movlw	low _GLCD_SIZE_VERT
   844  002CEC  6EF6               	movwf	tblptrl,c
   845  002CEE                     	if	1	;There is more than 1 active tblptr byte
   846  002CEE  0E10               	movlw	high _GLCD_SIZE_VERT
   847  002CF0  6EF7               	movwf	tblptrh,c
   848  002CF2                     	endif
   849  002CF2                     	if	0	;There are less than 3 active tblptr bytes
   850  002CF2                     	endif
   851  002CF2  0008               	tblrd		*
   852  002CF4  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
   853  002CF8  0E00               	movlw	0
   854  002CFA  6E08               	movwf	glcdDrawRectangle@YS,c
   855  002CFC  0E0E               	movlw	14
   856  002CFE  6E09               	movwf	glcdDrawRectangle@YE,c
   857  002D00  0E19               	movlw	low _RED
   858  002D02  6EF6               	movwf	tblptrl,c
   859  002D04                     	if	1	;There is more than 1 active tblptr byte
   860  002D04  0E10               	movlw	high _RED
   861  002D06  6EF7               	movwf	tblptrh,c
   862  002D08                     	endif
   863  002D08                     	if	0	;There are less than 3 active tblptr bytes
   864  002D08                     	endif
   865  002D08  0009               	tblrd		*+
   866  002D0A  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   867  002D0E  0009               	tblrd		*+
   868  002D10  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   869  002D14  0009               	tblrd		*+
   870  002D16  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   871  002D1A  000A               	tblrd		*-
   872  002D1C  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   873  002D20  0E00               	movlw	0
   874  002D22  EC73  F017         	call	_glcdDrawRectangle
   875                           
   876                           ;main.c: 128: glcdDrawRectangle(0, GLCD_SIZE_VERT, 14, 110, BLACK);
   877  002D26  0E69               	movlw	low _GLCD_SIZE_VERT
   878  002D28  6EF6               	movwf	tblptrl,c
   879  002D2A                     	if	1	;There is more than 1 active tblptr byte
   880  002D2A  0E10               	movlw	high _GLCD_SIZE_VERT
   881  002D2C  6EF7               	movwf	tblptrh,c
   882  002D2E                     	endif
   883  002D2E                     	if	0	;There are less than 3 active tblptr bytes
   884  002D2E                     	endif
   885  002D2E  0008               	tblrd		*
   886  002D30  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
   887  002D34  0E0E               	movlw	14
   888  002D36  6E08               	movwf	glcdDrawRectangle@YS,c
   889  002D38  0E6E               	movlw	110
   890  002D3A  6E09               	movwf	glcdDrawRectangle@YE,c
   891  002D3C  0E25               	movlw	low _BLACK
   892  002D3E  6EF6               	movwf	tblptrl,c
   893  002D40                     	if	1	;There is more than 1 active tblptr byte
   894  002D40  0E10               	movlw	high _BLACK
   895  002D42  6EF7               	movwf	tblptrh,c
   896  002D44                     	endif
   897  002D44                     	if	0	;There are less than 3 active tblptr bytes
   898  002D44                     	endif
   899  002D44  0009               	tblrd		*+
   900  002D46  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   901  002D4A  0009               	tblrd		*+
   902  002D4C  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   903  002D50  0009               	tblrd		*+
   904  002D52  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   905  002D56  000A               	tblrd		*-
   906  002D58  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   907  002D5C  0E00               	movlw	0
   908  002D5E  EC73  F017         	call	_glcdDrawRectangle
   909                           
   910                           ;main.c: 129: glcdDrawRectangle(0, GLCD_SIZE_VERT, 114, 128, WHITE);
   911  002D62  0E69               	movlw	low _GLCD_SIZE_VERT
   912  002D64  6EF6               	movwf	tblptrl,c
   913  002D66                     	if	1	;There is more than 1 active tblptr byte
   914  002D66  0E10               	movlw	high _GLCD_SIZE_VERT
   915  002D68  6EF7               	movwf	tblptrh,c
   916  002D6A                     	endif
   917  002D6A                     	if	0	;There are less than 3 active tblptr bytes
   918  002D6A                     	endif
   919  002D6A  0008               	tblrd		*
   920  002D6C  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
   921  002D70  0E72               	movlw	114
   922  002D72  6E08               	movwf	glcdDrawRectangle@YS,c
   923  002D74  0E80               	movlw	128
   924  002D76  6E09               	movwf	glcdDrawRectangle@YE,c
   925  002D78  0E1D               	movlw	low _WHITE
   926  002D7A  6EF6               	movwf	tblptrl,c
   927  002D7C                     	if	1	;There is more than 1 active tblptr byte
   928  002D7C  0E10               	movlw	high _WHITE
   929  002D7E  6EF7               	movwf	tblptrh,c
   930  002D80                     	endif
   931  002D80                     	if	0	;There are less than 3 active tblptr bytes
   932  002D80                     	endif
   933  002D80  0009               	tblrd		*+
   934  002D82  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   935  002D86  0009               	tblrd		*+
   936  002D88  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   937  002D8C  0009               	tblrd		*+
   938  002D8E  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   939  002D92  000A               	tblrd		*-
   940  002D94  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   941  002D98  0E00               	movlw	0
   942  002D9A  EC73  F017         	call	_glcdDrawRectangle
   943                           
   944                           ;main.c: 131: print_px_string(0, 0, "Jan 28, 2018  11:50 PM");
   945  002D9E  0E00               	movlw	0
   946  002DA0  6E3D               	movwf	print_px_string@x+1,c
   947  002DA2  0E00               	movlw	0
   948  002DA4  6E3C               	movwf	print_px_string@x,c
   949  002DA6  0E00               	movlw	0
   950  002DA8  6E3F               	movwf	print_px_string@y+1,c
   951  002DAA  0E00               	movlw	0
   952  002DAC  6E3E               	movwf	print_px_string@y,c
   953  002DAE  0E6D               	movlw	low STR_1
   954  002DB0  6E40               	movwf	print_px_string@s,c
   955  002DB2  0E10               	movlw	high STR_1
   956  002DB4  6E41               	movwf	print_px_string@s+1,c
   957  002DB6  ECD4  F018         	call	_print_px_string	;wreg free
   958                           
   959                           ;main.c: 133: char eta[] = "ETA:     - min -- sec\0";
   960  002DBA  EE20  F065         	lfsr	2,main@F3027
   961  002DBE  EE10  F04A         	lfsr	1,main@eta
   962  002DC2  0E16               	movlw	22
   963  002DC4                     u2631:
   964  002DC4  CFDB FFE3          	movff	plusw2,plusw1
   965  002DC8  06E8               	decf	wreg,f,c
   966  002DCA  E2FC               	bc	u2631
   967                           
   968                           ;main.c: 134: int sec = 180;
   969  002DCC  0E00               	movlw	0
   970  002DCE  6E64               	movwf	main@sec+1,c
   971  002DD0  0EB4               	movlw	180
   972  002DD2  6E63               	movwf	main@sec,c
   973                           
   974                           ;main.c: 136: while(sec-- > 0) {
   975  002DD4  D076               	goto	l143
   976  002DD6                     
   977                           ;main.c: 137: eta[9] = '0' + (sec/60);
   978  002DD6  C063  F007         	movff	main@sec,___awdiv@dividend
   979  002DDA  C064  F008         	movff	main@sec+1,___awdiv@dividend+1
   980  002DDE  0E00               	movlw	0
   981  002DE0  6E0A               	movwf	___awdiv@divisor+1,c
   982  002DE2  0E3C               	movlw	60
   983  002DE4  6E09               	movwf	___awdiv@divisor,c
   984  002DE6  EC28  F019         	call	___awdiv	;wreg free
   985  002DEA  5007               	movf	?___awdiv,w,c
   986  002DEC  0F30               	addlw	48
   987  002DEE  6E53               	movwf	main@eta+9,c
   988                           
   989                           ;main.c: 138: eta[15] = '0' + ((sec%60)/10);
   990  002DF0  0E00               	movlw	0
   991  002DF2  6E04               	movwf	___awmod@divisor+1,c
   992  002DF4  0E3C               	movlw	60
   993  002DF6  6E03               	movwf	___awmod@divisor,c
   994  002DF8  C063  F001         	movff	main@sec,___awmod@dividend
   995  002DFC  C064  F002         	movff	main@sec+1,___awmod@dividend+1
   996  002E00  EC6A  F019         	call	___awmod	;wreg free
   997  002E04  C001  F007         	movff	?___awmod,___awdiv@dividend
   998  002E08  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
   999  002E0C  0E00               	movlw	0
  1000  002E0E  6E0A               	movwf	___awdiv@divisor+1,c
  1001  002E10  0E0A               	movlw	10
  1002  002E12  6E09               	movwf	___awdiv@divisor,c
  1003  002E14  EC28  F019         	call	___awdiv	;wreg free
  1004  002E18  5007               	movf	?___awdiv,w,c
  1005  002E1A  0F30               	addlw	48
  1006  002E1C  6E59               	movwf	main@eta+15,c
  1007                           
  1008                           ;main.c: 139: eta[16] = '0' + ((sec%60)%10);
  1009  002E1E  0E00               	movlw	0
  1010  002E20  6E04               	movwf	___awmod@divisor+1,c
  1011  002E22  0E3C               	movlw	60
  1012  002E24  6E03               	movwf	___awmod@divisor,c
  1013  002E26  C063  F001         	movff	main@sec,___awmod@dividend
  1014  002E2A  C064  F002         	movff	main@sec+1,___awmod@dividend+1
  1015  002E2E  EC6A  F019         	call	___awmod	;wreg free
  1016  002E32  C001  F061         	movff	?___awmod,_main$1145
  1017  002E36  C002  F062         	movff	?___awmod+1,_main$1145+1
  1018                           
  1019                           ;main.c: 139: eta[16] = '0' + ((sec%60)%10);
  1020  002E3A  C061  F001         	movff	_main$1145,___awmod@dividend
  1021  002E3E  C062  F002         	movff	_main$1145+1,___awmod@dividend+1
  1022  002E42  0E00               	movlw	0
  1023  002E44  6E04               	movwf	___awmod@divisor+1,c
  1024  002E46  0E0A               	movlw	10
  1025  002E48  6E03               	movwf	___awmod@divisor,c
  1026  002E4A  EC6A  F019         	call	___awmod	;wreg free
  1027  002E4E  5001               	movf	?___awmod,w,c
  1028  002E50  0F30               	addlw	48
  1029  002E52  6E5A               	movwf	main@eta+16,c
  1030                           
  1031                           ;main.c: 140: glcdDrawRectangle(0, GLCD_SIZE_VERT, 114, 128, WHITE);
  1032  002E54  0E69               	movlw	low _GLCD_SIZE_VERT
  1033  002E56  6EF6               	movwf	tblptrl,c
  1034  002E58                     	if	1	;There is more than 1 active tblptr byte
  1035  002E58  0E10               	movlw	high _GLCD_SIZE_VERT
  1036  002E5A  6EF7               	movwf	tblptrh,c
  1037  002E5C                     	endif
  1038  002E5C                     	if	0	;There are less than 3 active tblptr bytes
  1039  002E5C                     	endif
  1040  002E5C  0008               	tblrd		*
  1041  002E5E  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
  1042  002E62  0E72               	movlw	114
  1043  002E64  6E08               	movwf	glcdDrawRectangle@YS,c
  1044  002E66  0E80               	movlw	128
  1045  002E68  6E09               	movwf	glcdDrawRectangle@YE,c
  1046  002E6A  0E1D               	movlw	low _WHITE
  1047  002E6C  6EF6               	movwf	tblptrl,c
  1048  002E6E                     	if	1	;There is more than 1 active tblptr byte
  1049  002E6E  0E10               	movlw	high _WHITE
  1050  002E70  6EF7               	movwf	tblptrh,c
  1051  002E72                     	endif
  1052  002E72                     	if	0	;There are less than 3 active tblptr bytes
  1053  002E72                     	endif
  1054  002E72  0009               	tblrd		*+
  1055  002E74  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  1056  002E78  0009               	tblrd		*+
  1057  002E7A  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  1058  002E7E  0009               	tblrd		*+
  1059  002E80  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  1060  002E84  000A               	tblrd		*-
  1061  002E86  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  1062  002E8A  0E00               	movlw	0
  1063  002E8C  EC73  F017         	call	_glcdDrawRectangle
  1064                           
  1065                           ;main.c: 141: print_px_string(0, 114, eta);
  1066  002E90  0E00               	movlw	0
  1067  002E92  6E3D               	movwf	print_px_string@x+1,c
  1068  002E94  0E00               	movlw	0
  1069  002E96  6E3C               	movwf	print_px_string@x,c
  1070  002E98  0E00               	movlw	0
  1071  002E9A  6E3F               	movwf	print_px_string@y+1,c
  1072  002E9C  0E72               	movlw	114
  1073  002E9E  6E3E               	movwf	print_px_string@y,c
  1074  002EA0  0E4A               	movlw	low main@eta
  1075  002EA2  6E40               	movwf	print_px_string@s,c
  1076  002EA4  0E00               	movlw	high main@eta
  1077  002EA6  6E41               	movwf	print_px_string@s+1,c
  1078  002EA8  ECD4  F018         	call	_print_px_string	;wreg free
  1079                           
  1080                           ;main.c: 142: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1081  002EAC  0E33               	movlw	51
  1082  002EAE  6E49               	movwf	(??_main+1)& (0+255),c
  1083  002EB0  0EBB               	movlw	187
  1084  002EB2  6E48               	movwf	??_main& (0+255),c
  1085  002EB4  0EE0               	movlw	224
  1086  002EB6                     u2657:
  1087  002EB6  2EE8               	decfsz	wreg,f,c
  1088  002EB8  D7FE               	bra	u2657
  1089  002EBA  2E48               	decfsz	??_main& (0+255),f,c
  1090  002EBC  D7FC               	bra	u2657
  1091  002EBE  2E49               	decfsz	(??_main+1)& (0+255),f,c
  1092  002EC0  D7FA               	bra	u2657
  1093  002EC2                     l143:
  1094  002EC2  5063               	movf	main@sec,w,c
  1095  002EC4  6E48               	movwf	??_main& (0+255),c
  1096  002EC6  5064               	movf	main@sec+1,w,c
  1097  002EC8  6E49               	movwf	(??_main+1)& (0+255),c
  1098  002ECA  0E01               	movlw	1
  1099  002ECC  5E63               	subwf	main@sec,f,c
  1100  002ECE  0E00               	movlw	0
  1101  002ED0  5A64               	subwfb	main@sec+1,f,c
  1102  002ED2  BE49               	btfsc	??_main+1,7,c
  1103  002ED4  EF00  F000         	goto	start
  1104  002ED8  5049               	movf	??_main+1,w,c
  1105  002EDA  E104               	bnz	u2641
  1106  002EDC  0448               	decf	??_main,w,c
  1107  002EDE  A0D8               	btfss	status,0,c
  1108  002EE0  EF00  F000         	goto	start
  1109  002EE4                     u2641:
  1110  002EE4  D778               	goto	l144
  1111  002EE6                     __end_of_main:
  1112                           	opt stack 0
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           postdec1	equ	0xFE5
  1120                           plusw1	equ	0xFE3
  1121                           fsr1l	equ	0xFE1
  1122                           plusw2	equ	0xFDB
  1123                           status	equ	0xFD8
  1124                           
  1125 ;; *************** function _print_px_string *****************
  1126 ;; Defined at:
  1127 ;;		line 126 in file "px_ascii.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;  x               2   59[COMRAM] int 
  1130 ;;  y               2   61[COMRAM] int 
  1131 ;;  s               2   63[COMRAM] PTR unsigned char 
  1132 ;;		 -> main@eta(23), STR_1(23), 
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;  idx             2   69[COMRAM] int 
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  1    wreg      void 
  1137 ;; Registers used:
  1138 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1144 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1147 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1148 ;;Total ram usage:       12 bytes
  1149 ;; Hardware stack levels used:    1
  1150 ;; Hardware stack levels required when called:    7
  1151 ;; This function calls:
  1152 ;;		___wmul
  1153 ;;		_print_px_char
  1154 ;; This function is called by:
  1155 ;;		_main
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           	psect	text1
  1160  0031A8                     __ptext1:
  1161                           	opt stack 0
  1162  0031A8                     _print_px_string:
  1163                           	opt stack 23
  1164                           
  1165                           ;px_ascii.c: 127: int idx = 0;
  1166                           
  1167                           ;incstack = 0
  1168  0031A8  0E00               	movlw	0
  1169  0031AA  6E47               	movwf	print_px_string@idx+1,c
  1170  0031AC  0E00               	movlw	0
  1171  0031AE  6E46               	movwf	print_px_string@idx,c
  1172                           
  1173                           ;px_ascii.c: 128: while(s[idx] != '\0') {
  1174  0031B0  D034               	goto	l441
  1175  0031B2                     
  1176                           ;px_ascii.c: 129: print_px_char(x+idx*(5+1), y, s[idx]);
  1177  0031B2  C046  F001         	movff	print_px_string@idx,___wmul@multiplier
  1178  0031B6  C047  F002         	movff	print_px_string@idx+1,___wmul@multiplier+1
  1179  0031BA  0E00               	movlw	0
  1180  0031BC  6E04               	movwf	___wmul@multiplicand+1,c
  1181  0031BE  0E06               	movlw	6
  1182  0031C0  6E03               	movwf	___wmul@multiplicand,c
  1183  0031C2  EC93  F01A         	call	___wmul	;wreg free
  1184  0031C6  503C               	movf	print_px_string@x,w,c
  1185  0031C8  2401               	addwf	?___wmul,w,c
  1186  0031CA  6E44               	movwf	_print_px_string$1146,c
  1187  0031CC  503D               	movf	print_px_string@x+1,w,c
  1188  0031CE  2002               	addwfc	?___wmul+1,w,c
  1189  0031D0  6E45               	movwf	_print_px_string$1146+1,c
  1190                           
  1191                           ;px_ascii.c: 129: print_px_char(x+idx*(5+1), y, s[idx]);
  1192  0031D2  C044  F037         	movff	_print_px_string$1146,print_px_char@x
  1193  0031D6  C045  F038         	movff	_print_px_string$1146+1,print_px_char@x+1
  1194  0031DA  C03E  F039         	movff	print_px_string@y,print_px_char@y
  1195  0031DE  C03F  F03A         	movff	print_px_string@y+1,print_px_char@y+1
  1196  0031E2  5046               	movf	print_px_string@idx,w,c
  1197  0031E4  2440               	addwf	print_px_string@s,w,c
  1198  0031E6  6E42               	movwf	??_print_px_string& (0+255),c
  1199  0031E8  5047               	movf	print_px_string@idx+1,w,c
  1200  0031EA  2041               	addwfc	print_px_string@s+1,w,c
  1201  0031EC  6E43               	movwf	(??_print_px_string+1)& (0+255),c
  1202  0031EE  C042  FFF6         	movff	??_print_px_string,tblptrl
  1203  0031F2  C043  FFF7         	movff	??_print_px_string+1,tblptrh
  1204  0031F6  0E00               	movlw	low (__smallconst shr (0+16))
  1205  0031F8  6EF8               	movwf	tblptru,c
  1206  0031FA  0E0F               	movlw	(high __ramtop+-1)
  1207  0031FC  64F7               	cpfsgt	tblptrh,c
  1208  0031FE  D003               	bra	u2607
  1209  003200  0008               	tblrd		*
  1210  003202  50F5               	movf	tablat,w,c
  1211  003204  D005               	bra	u2600
  1212  003206                     u2607:
  1213  003206  CFF6 FFE9          	movff	tblptrl,fsr0l
  1214  00320A  CFF7 FFEA          	movff	tblptrh,fsr0h
  1215  00320E  50EF               	movf	indf0,w,c
  1216  003210                     u2600:
  1217  003210  6E3B               	movwf	print_px_char@c,c
  1218  003212  EC37  F01A         	call	_print_px_char	;wreg free
  1219                           
  1220                           ;px_ascii.c: 131: idx++;
  1221  003216  4A46               	infsnz	print_px_string@idx,f,c
  1222  003218  2A47               	incf	print_px_string@idx+1,f,c
  1223  00321A                     l441:
  1224  00321A  5046               	movf	print_px_string@idx,w,c
  1225  00321C  2440               	addwf	print_px_string@s,w,c
  1226  00321E  6E42               	movwf	??_print_px_string& (0+255),c
  1227  003220  5047               	movf	print_px_string@idx+1,w,c
  1228  003222  2041               	addwfc	print_px_string@s+1,w,c
  1229  003224  6E43               	movwf	(??_print_px_string+1)& (0+255),c
  1230  003226  C042  FFF6         	movff	??_print_px_string,tblptrl
  1231  00322A  C043  FFF7         	movff	??_print_px_string+1,tblptrh
  1232  00322E  0E00               	movlw	low (__smallconst shr (0+16))
  1233  003230  6EF8               	movwf	tblptru,c
  1234  003232  0E0F               	movlw	(high __ramtop+-1)
  1235  003234  64F7               	cpfsgt	tblptrh,c
  1236  003236  D003               	bra	u2617
  1237  003238  0008               	tblrd		*
  1238  00323A  50F5               	movf	tablat,w,c
  1239  00323C  D005               	bra	u2610
  1240  00323E                     u2617:
  1241  00323E  CFF6 FFE9          	movff	tblptrl,fsr0l
  1242  003242  CFF7 FFEA          	movff	tblptrh,fsr0h
  1243  003246  50EF               	movf	indf0,w,c
  1244  003248                     u2610:
  1245  003248  0900               	iorlw	0
  1246  00324A  B4D8               	btfsc	status,2,c
  1247  00324C  0012               	return	
  1248  00324E  D7B1               	goto	l442
  1249  003250                     __end_of_print_px_string:
  1250                           	opt stack 0
  1251                           tblptru	equ	0xFF8
  1252                           tblptrh	equ	0xFF7
  1253                           tblptrl	equ	0xFF6
  1254                           tablat	equ	0xFF5
  1255                           indf0	equ	0xFEF
  1256                           postinc0	equ	0xFEE
  1257                           fsr0h	equ	0xFEA
  1258                           fsr0l	equ	0xFE9
  1259                           wreg	equ	0xFE8
  1260                           postdec1	equ	0xFE5
  1261                           plusw1	equ	0xFE3
  1262                           fsr1l	equ	0xFE1
  1263                           plusw2	equ	0xFDB
  1264                           status	equ	0xFD8
  1265                           
  1266 ;; *************** function _print_px_char *****************
  1267 ;; Defined at:
  1268 ;;		line 122 in file "px_ascii.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;  x               2   54[COMRAM] int 
  1271 ;;  y               2   56[COMRAM] int 
  1272 ;;  c               1   58[COMRAM] unsigned char 
  1273 ;; Auto vars:     Size  Location     Type
  1274 ;;		None
  1275 ;; Return value:  Size  Location     Type
  1276 ;;                  1    wreg      void 
  1277 ;; Registers used:
  1278 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1284 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1287 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1288 ;;Total ram usage:        5 bytes
  1289 ;; Hardware stack levels used:    1
  1290 ;; Hardware stack levels required when called:    6
  1291 ;; This function calls:
  1292 ;;		_draw_px_char
  1293 ;;		_px_map
  1294 ;; This function is called by:
  1295 ;;		_print_px_string
  1296 ;; This function uses a non-reentrant model
  1297 ;;
  1298                           
  1299                           	psect	text2
  1300  00346E                     __ptext2:
  1301                           	opt stack 0
  1302  00346E                     _print_px_char:
  1303                           	opt stack 23
  1304                           
  1305                           ;px_ascii.c: 123: draw_px_char(x, y, px_map(c));
  1306                           
  1307                           ;incstack = 0
  1308  00346E  C037  F021         	movff	print_px_char@x,draw_px_char@x
  1309  003472  C038  F022         	movff	print_px_char@x+1,draw_px_char@x+1
  1310  003476  C039  F023         	movff	print_px_char@y,draw_px_char@y
  1311  00347A  C03A  F024         	movff	print_px_char@y+1,draw_px_char@y+1
  1312  00347E  503B               	movf	print_px_char@c,w,c
  1313  003480  EC43  F008         	call	_px_map
  1314  003484  CFE9 FFD9          	movff	fsr0l,fsr2l
  1315  003488  CFEA FFDA          	movff	fsr0h,fsr2h
  1316  00348C  EE00  F025         	lfsr	0,draw_px_char@p
  1317  003490  0E07               	movlw	7
  1318  003492                     u2591:
  1319  003492  CFDB FFEB          	movff	plusw2,plusw0
  1320  003496  06E8               	decf	wreg,f,c
  1321  003498  E2FC               	bc	u2591
  1322  00349A  EC33  F018         	call	_draw_px_char	;wreg free
  1323  00349E  0012               	return		;funcret
  1324  0034A0                     __end_of_print_px_char:
  1325                           	opt stack 0
  1326                           tblptru	equ	0xFF8
  1327                           tblptrh	equ	0xFF7
  1328                           tblptrl	equ	0xFF6
  1329                           tablat	equ	0xFF5
  1330                           indf0	equ	0xFEF
  1331                           postinc0	equ	0xFEE
  1332                           plusw0	equ	0xFEB
  1333                           fsr0h	equ	0xFEA
  1334                           fsr0l	equ	0xFE9
  1335                           wreg	equ	0xFE8
  1336                           postdec1	equ	0xFE5
  1337                           plusw1	equ	0xFE3
  1338                           fsr1l	equ	0xFE1
  1339                           plusw2	equ	0xFDB
  1340                           fsr2h	equ	0xFDA
  1341                           fsr2l	equ	0xFD9
  1342                           status	equ	0xFD8
  1343                           
  1344 ;; *************** function _px_map *****************
  1345 ;; Defined at:
  1346 ;;		line 19 in file "px_ascii.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;  c               1    wreg     unsigned char 
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;  c               1   25[COMRAM] unsigned char 
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  8   16[COMRAM] struct .
  1353 ;; Registers used:
  1354 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1360 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1361 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1363 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1364 ;;Total ram usage:       10 bytes
  1365 ;; Hardware stack levels used:    1
  1366 ;; Hardware stack levels required when called:    1
  1367 ;; This function calls:
  1368 ;;		_new_px_char
  1369 ;; This function is called by:
  1370 ;;		_print_px_char
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           	psect	text3
  1375  001086                     __ptext3:
  1376                           	opt stack 0
  1377  001086                     _px_map:
  1378                           	opt stack 27
  1379                           
  1380                           ;incstack = 0
  1381                           ;px_map@c stored from wreg
  1382  001086  6E1A               	movwf	px_map@c,c
  1383                           
  1384                           ;px_ascii.c: 21: switch(c) {
  1385  001088  EF86  F013         	goto	l337
  1386  00108C  0E00               	movlw	0
  1387  00108E  6E01               	movwf	new_px_char@a,c
  1388  001090  0E00               	movlw	0
  1389  001092  6E02               	movwf	new_px_char@a+1,c
  1390  001094  0E00               	movlw	0
  1391  001096  6E03               	movwf	new_px_char@a+2,c
  1392  001098  0E00               	movlw	0
  1393  00109A  6E04               	movwf	new_px_char@a+3,c
  1394  00109C  0E00               	movlw	0
  1395  00109E  6E05               	movwf	new_px_char@b,c
  1396  0010A0  0E00               	movlw	0
  1397  0010A2  6E06               	movwf	new_px_char@b+1,c
  1398  0010A4  0E00               	movlw	0
  1399  0010A6  6E07               	movwf	new_px_char@b+2,c
  1400  0010A8  0E00               	movlw	0
  1401  0010AA  6E08               	movwf	new_px_char@b+3,c
  1402  0010AC  EC1D  F01A         	call	_new_px_char	;wreg free
  1403  0010B0  CFE9 FFD9          	movff	fsr0l,fsr2l
  1404  0010B4  CFEA FFDA          	movff	fsr0h,fsr2h
  1405  0010B8  EE00  F011         	lfsr	0,?_px_map
  1406  0010BC  0E07               	movlw	7
  1407  0010BE                     u1631:
  1408  0010BE  CFDB FFEB          	movff	plusw2,plusw0
  1409  0010C2  06E8               	decf	wreg,f,c
  1410  0010C4  E2FC               	bc	u1631
  1411  0010C6  0012               	return	
  1412  0010C8  0E21               	movlw	33
  1413  0010CA  6E01               	movwf	new_px_char@a,c
  1414  0010CC  0E80               	movlw	128
  1415  0010CE  6E02               	movwf	new_px_char@a+1,c
  1416  0010D0  0E00               	movlw	0
  1417  0010D2  6E03               	movwf	new_px_char@a+2,c
  1418  0010D4  0E00               	movlw	0
  1419  0010D6  6E04               	movwf	new_px_char@a+3,c
  1420  0010D8  0E00               	movlw	0
  1421  0010DA  6E05               	movwf	new_px_char@b,c
  1422  0010DC  0E10               	movlw	16
  1423  0010DE  6E06               	movwf	new_px_char@b+1,c
  1424  0010E0  0E42               	movlw	66
  1425  0010E2  6E07               	movwf	new_px_char@b+2,c
  1426  0010E4  0E08               	movlw	8
  1427  0010E6  6E08               	movwf	new_px_char@b+3,c
  1428  0010E8  EC1D  F01A         	call	_new_px_char	;wreg free
  1429  0010EC  CFE9 FFD9          	movff	fsr0l,fsr2l
  1430  0010F0  CFEA FFDA          	movff	fsr0h,fsr2h
  1431  0010F4  EE00  F011         	lfsr	0,?_px_map
  1432  0010F8  0E07               	movlw	7
  1433  0010FA                     u1641:
  1434  0010FA  CFDB FFEB          	movff	plusw2,plusw0
  1435  0010FE  06E8               	decf	wreg,f,c
  1436  001100  E2FC               	bc	u1641
  1437  001102  0012               	return	
  1438  001104  0E00               	movlw	0
  1439  001106  6E01               	movwf	new_px_char@a,c
  1440  001108  0E00               	movlw	0
  1441  00110A  6E02               	movwf	new_px_char@a+1,c
  1442  00110C  0E00               	movlw	0
  1443  00110E  6E03               	movwf	new_px_char@a+2,c
  1444  001110  0E00               	movlw	0
  1445  001112  6E04               	movwf	new_px_char@a+3,c
  1446  001114  0E00               	movlw	0
  1447  001116  6E05               	movwf	new_px_char@b,c
  1448  001118  0E28               	movlw	40
  1449  00111A  6E06               	movwf	new_px_char@b+1,c
  1450  00111C  0EA5               	movlw	165
  1451  00111E  6E07               	movwf	new_px_char@b+2,c
  1452  001120  0E00               	movlw	0
  1453  001122  6E08               	movwf	new_px_char@b+3,c
  1454  001124  EC1D  F01A         	call	_new_px_char	;wreg free
  1455  001128  CFE9 FFD9          	movff	fsr0l,fsr2l
  1456  00112C  CFEA FFDA          	movff	fsr0h,fsr2h
  1457  001130  EE00  F011         	lfsr	0,?_px_map
  1458  001134  0E07               	movlw	7
  1459  001136                     u1651:
  1460  001136  CFDB FFEB          	movff	plusw2,plusw0
  1461  00113A  06E8               	decf	wreg,f,c
  1462  00113C  E2FC               	bc	u1651
  1463  00113E  0012               	return	
  1464  001140  0EFA               	movlw	250
  1465  001142  6E01               	movwf	new_px_char@a,c
  1466  001144  0E4A               	movlw	74
  1467  001146  6E02               	movwf	new_px_char@a+1,c
  1468  001148  0E01               	movlw	1
  1469  00114A  6E03               	movwf	new_px_char@a+2,c
  1470  00114C  0E00               	movlw	0
  1471  00114E  6E04               	movwf	new_px_char@a+3,c
  1472  001150  0E00               	movlw	0
  1473  001152  6E05               	movwf	new_px_char@b,c
  1474  001154  0E00               	movlw	0
  1475  001156  6E06               	movwf	new_px_char@b+1,c
  1476  001158  0EA5               	movlw	165
  1477  00115A  6E07               	movwf	new_px_char@b+2,c
  1478  00115C  0EBE               	movlw	190
  1479  00115E  6E08               	movwf	new_px_char@b+3,c
  1480  001160  EC1D  F01A         	call	_new_px_char	;wreg free
  1481  001164  CFE9 FFD9          	movff	fsr0l,fsr2l
  1482  001168  CFEA FFDA          	movff	fsr0h,fsr2h
  1483  00116C  EE00  F011         	lfsr	0,?_px_map
  1484  001170  0E07               	movlw	7
  1485  001172                     u1661:
  1486  001172  CFDB FFEB          	movff	plusw2,plusw0
  1487  001176  06E8               	decf	wreg,f,c
  1488  001178  E2FC               	bc	u1661
  1489  00117A  0012               	return	
  1490  00117C  0EA3               	movlw	163
  1491  00117E  6E01               	movwf	new_px_char@a,c
  1492  001180  0EF4               	movlw	244
  1493  001182  6E02               	movwf	new_px_char@a+1,c
  1494  001184  0E11               	movlw	17
  1495  001186  6E03               	movwf	new_px_char@a+2,c
  1496  001188  0E00               	movlw	0
  1497  00118A  6E04               	movwf	new_px_char@a+3,c
  1498  00118C  0E00               	movlw	0
  1499  00118E  6E05               	movwf	new_px_char@b,c
  1500  001190  0E10               	movlw	16
  1501  001192  6E06               	movwf	new_px_char@b+1,c
  1502  001194  0E5F               	movlw	95
  1503  001196  6E07               	movwf	new_px_char@b+2,c
  1504  001198  0E8A               	movlw	138
  1505  00119A  6E08               	movwf	new_px_char@b+3,c
  1506  00119C  EC1D  F01A         	call	_new_px_char	;wreg free
  1507  0011A0  CFE9 FFD9          	movff	fsr0l,fsr2l
  1508  0011A4  CFEA FFDA          	movff	fsr0h,fsr2h
  1509  0011A8  EE00  F011         	lfsr	0,?_px_map
  1510  0011AC  0E07               	movlw	7
  1511  0011AE                     u1671:
  1512  0011AE  CFDB FFEB          	movff	plusw2,plusw0
  1513  0011B2  06E8               	decf	wreg,f,c
  1514  0011B4  E2FC               	bc	u1671
  1515  0011B6  0012               	return	
  1516  0011B8  0E11               	movlw	17
  1517  0011BA  6E01               	movwf	new_px_char@a,c
  1518  0011BC  0EAA               	movlw	170
  1519  0011BE  6E02               	movwf	new_px_char@a+1,c
  1520  0011C0  0E26               	movlw	38
  1521  0011C2  6E03               	movwf	new_px_char@a+2,c
  1522  0011C4  0E00               	movlw	0
  1523  0011C6  6E04               	movwf	new_px_char@a+3,c
  1524  0011C8  0E00               	movlw	0
  1525  0011CA  6E05               	movwf	new_px_char@b,c
  1526  0011CC  0EC8               	movlw	200
  1527  0011CE  6E06               	movwf	new_px_char@b+1,c
  1528  0011D0  0EAA               	movlw	170
  1529  0011D2  6E07               	movwf	new_px_char@b+2,c
  1530  0011D4  0E10               	movlw	16
  1531  0011D6  6E08               	movwf	new_px_char@b+3,c
  1532  0011D8  EC1D  F01A         	call	_new_px_char	;wreg free
  1533  0011DC  CFE9 FFD9          	movff	fsr0l,fsr2l
  1534  0011E0  CFEA FFDA          	movff	fsr0h,fsr2h
  1535  0011E4  EE00  F011         	lfsr	0,?_px_map
  1536  0011E8  0E07               	movlw	7
  1537  0011EA                     u1681:
  1538  0011EA  CFDB FFEB          	movff	plusw2,plusw0
  1539  0011EE  06E8               	decf	wreg,f,c
  1540  0011F0  E2FC               	bc	u1681
  1541  0011F2  0012               	return	
  1542  0011F4  0E28               	movlw	40
  1543  0011F6  6E01               	movwf	new_px_char@a,c
  1544  0011F8  0E39               	movlw	57
  1545  0011FA  6E02               	movwf	new_px_char@a+1,c
  1546  0011FC  0E59               	movlw	89
  1547  0011FE  6E03               	movwf	new_px_char@a+2,c
  1548  001200  0E00               	movlw	0
  1549  001202  6E04               	movwf	new_px_char@a+3,c
  1550  001204  0E00               	movlw	0
  1551  001206  6E05               	movwf	new_px_char@b,c
  1552  001208  0E00               	movlw	0
  1553  00120A  6E06               	movwf	new_px_char@b+1,c
  1554  00120C  0E51               	movlw	81
  1555  00120E  6E07               	movwf	new_px_char@b+2,c
  1556  001210  0E8A               	movlw	138
  1557  001212  6E08               	movwf	new_px_char@b+3,c
  1558  001214  EC1D  F01A         	call	_new_px_char	;wreg free
  1559  001218  CFE9 FFD9          	movff	fsr0l,fsr2l
  1560  00121C  CFEA FFDA          	movff	fsr0h,fsr2h
  1561  001220  EE00  F011         	lfsr	0,?_px_map
  1562  001224  0E07               	movlw	7
  1563  001226                     u1691:
  1564  001226  CFDB FFEB          	movff	plusw2,plusw0
  1565  00122A  06E8               	decf	wreg,f,c
  1566  00122C  E2FC               	bc	u1691
  1567  00122E  0012               	return	
  1568  001230  0E00               	movlw	0
  1569  001232  6E01               	movwf	new_px_char@a,c
  1570  001234  0E00               	movlw	0
  1571  001236  6E02               	movwf	new_px_char@a+1,c
  1572  001238  0E00               	movlw	0
  1573  00123A  6E03               	movwf	new_px_char@a+2,c
  1574  00123C  0E00               	movlw	0
  1575  00123E  6E04               	movwf	new_px_char@a+3,c
  1576  001240  0E00               	movlw	0
  1577  001242  6E05               	movwf	new_px_char@b,c
  1578  001244  0E10               	movlw	16
  1579  001246  6E06               	movwf	new_px_char@b+1,c
  1580  001248  0E42               	movlw	66
  1581  00124A  6E07               	movwf	new_px_char@b+2,c
  1582  00124C  0E00               	movlw	0
  1583  00124E  6E08               	movwf	new_px_char@b+3,c
  1584  001250  EC1D  F01A         	call	_new_px_char	;wreg free
  1585  001254  CFE9 FFD9          	movff	fsr0l,fsr2l
  1586  001258  CFEA FFDA          	movff	fsr0h,fsr2h
  1587  00125C  EE00  F011         	lfsr	0,?_px_map
  1588  001260  0E07               	movlw	7
  1589  001262                     u1701:
  1590  001262  CFDB FFEB          	movff	plusw2,plusw0
  1591  001266  06E8               	decf	wreg,f,c
  1592  001268  E2FC               	bc	u1701
  1593  00126A  0012               	return	
  1594  00126C  0E10               	movlw	16
  1595  00126E  6E01               	movwf	new_px_char@a,c
  1596  001270  0E82               	movlw	130
  1597  001272  6E02               	movwf	new_px_char@a+1,c
  1598  001274  0E10               	movlw	16
  1599  001276  6E03               	movwf	new_px_char@a+2,c
  1600  001278  0E04               	movlw	4
  1601  00127A  6E04               	movwf	new_px_char@a+3,c
  1602  00127C  0E00               	movlw	0
  1603  00127E  6E05               	movwf	new_px_char@b,c
  1604  001280  0E11               	movlw	17
  1605  001282  6E06               	movwf	new_px_char@b+1,c
  1606  001284  0E22               	movlw	34
  1607  001286  6E07               	movwf	new_px_char@b+2,c
  1608  001288  0E84               	movlw	132
  1609  00128A  6E08               	movwf	new_px_char@b+3,c
  1610  00128C  EC1D  F01A         	call	_new_px_char	;wreg free
  1611  001290  CFE9 FFD9          	movff	fsr0l,fsr2l
  1612  001294  CFEA FFDA          	movff	fsr0h,fsr2h
  1613  001298  EE00  F011         	lfsr	0,?_px_map
  1614  00129C  0E07               	movlw	7
  1615  00129E                     u1711:
  1616  00129E  CFDB FFEB          	movff	plusw2,plusw0
  1617  0012A2  06E8               	decf	wreg,f,c
  1618  0012A4  E2FC               	bc	u1711
  1619  0012A6  0012               	return	
  1620  0012A8  0E42               	movlw	66
  1621  0012AA  6E01               	movwf	new_px_char@a,c
  1622  0012AC  0E88               	movlw	136
  1623  0012AE  6E02               	movwf	new_px_char@a+1,c
  1624  0012B0  0E10               	movlw	16
  1625  0012B2  6E03               	movwf	new_px_char@a+2,c
  1626  0012B4  0E01               	movlw	1
  1627  0012B6  6E04               	movwf	new_px_char@a+3,c
  1628  0012B8  0E40               	movlw	64
  1629  0012BA  6E05               	movwf	new_px_char@b,c
  1630  0012BC  0E10               	movlw	16
  1631  0012BE  6E06               	movwf	new_px_char@b+1,c
  1632  0012C0  0E82               	movlw	130
  1633  0012C2  6E07               	movwf	new_px_char@b+2,c
  1634  0012C4  0E10               	movlw	16
  1635  0012C6  6E08               	movwf	new_px_char@b+3,c
  1636  0012C8  EC1D  F01A         	call	_new_px_char	;wreg free
  1637  0012CC  CFE9 FFD9          	movff	fsr0l,fsr2l
  1638  0012D0  CFEA FFDA          	movff	fsr0h,fsr2h
  1639  0012D4  EE00  F011         	lfsr	0,?_px_map
  1640  0012D8  0E07               	movlw	7
  1641  0012DA                     u1721:
  1642  0012DA  CFDB FFEB          	movff	plusw2,plusw0
  1643  0012DE  06E8               	decf	wreg,f,c
  1644  0012E0  E2FC               	bc	u1721
  1645  0012E2  0012               	return	
  1646  0012E4  0E01               	movlw	1
  1647  0012E6  6E01               	movwf	new_px_char@a,c
  1648  0012E8  0E00               	movlw	0
  1649  0012EA  6E02               	movwf	new_px_char@a+1,c
  1650  0012EC  0E00               	movlw	0
  1651  0012EE  6E03               	movwf	new_px_char@a+2,c
  1652  0012F0  0E00               	movlw	0
  1653  0012F2  6E04               	movwf	new_px_char@a+3,c
  1654  0012F4  0E00               	movlw	0
  1655  0012F6  6E05               	movwf	new_px_char@b,c
  1656  0012F8  0E90               	movlw	144
  1657  0012FA  6E06               	movwf	new_px_char@b+1,c
  1658  0012FC  0EEA               	movlw	234
  1659  0012FE  6E07               	movwf	new_px_char@b+2,c
  1660  001300  0E2A               	movlw	42
  1661  001302  6E08               	movwf	new_px_char@b+3,c
  1662  001304  EC1D  F01A         	call	_new_px_char	;wreg free
  1663  001308  CFE9 FFD9          	movff	fsr0l,fsr2l
  1664  00130C  CFEA FFDA          	movff	fsr0h,fsr2h
  1665  001310  EE00  F011         	lfsr	0,?_px_map
  1666  001314  0E07               	movlw	7
  1667  001316                     u1731:
  1668  001316  CFDB FFEB          	movff	plusw2,plusw0
  1669  00131A  06E8               	decf	wreg,f,c
  1670  00131C  E2FC               	bc	u1731
  1671  00131E  0012               	return	
  1672  001320  0E27               	movlw	39
  1673  001322  6E01               	movwf	new_px_char@a,c
  1674  001324  0E04               	movlw	4
  1675  001326  6E02               	movwf	new_px_char@a+1,c
  1676  001328  0E00               	movlw	0
  1677  00132A  6E03               	movwf	new_px_char@a+2,c
  1678  00132C  0E00               	movlw	0
  1679  00132E  6E04               	movwf	new_px_char@a+3,c
  1680  001330  0E00               	movlw	0
  1681  001332  6E05               	movwf	new_px_char@b,c
  1682  001334  0E00               	movlw	0
  1683  001336  6E06               	movwf	new_px_char@b+1,c
  1684  001338  0E40               	movlw	64
  1685  00133A  6E07               	movwf	new_px_char@b+2,c
  1686  00133C  0EC8               	movlw	200
  1687  00133E  6E08               	movwf	new_px_char@b+3,c
  1688  001340  EC1D  F01A         	call	_new_px_char	;wreg free
  1689  001344  CFE9 FFD9          	movff	fsr0l,fsr2l
  1690  001348  CFEA FFDA          	movff	fsr0h,fsr2h
  1691  00134C  EE00  F011         	lfsr	0,?_px_map
  1692  001350  0E07               	movlw	7
  1693  001352                     u1741:
  1694  001352  CFDB FFEB          	movff	plusw2,plusw0
  1695  001356  06E8               	decf	wreg,f,c
  1696  001358  E2FC               	bc	u1741
  1697  00135A  0012               	return	
  1698  00135C  0E00               	movlw	0
  1699  00135E  6E01               	movwf	new_px_char@a,c
  1700  001360  0E80               	movlw	128
  1701  001362  6E02               	movwf	new_px_char@a+1,c
  1702  001364  0E11               	movlw	17
  1703  001366  6E03               	movwf	new_px_char@a+2,c
  1704  001368  0E01               	movlw	1
  1705  00136A  6E04               	movwf	new_px_char@a+3,c
  1706  00136C  0E00               	movlw	0
  1707  00136E  6E05               	movwf	new_px_char@b,c
  1708  001370  0E00               	movlw	0
  1709  001372  6E06               	movwf	new_px_char@b+1,c
  1710  001374  0E00               	movlw	0
  1711  001376  6E07               	movwf	new_px_char@b+2,c
  1712  001378  0E00               	movlw	0
  1713  00137A  6E08               	movwf	new_px_char@b+3,c
  1714  00137C  EC1D  F01A         	call	_new_px_char	;wreg free
  1715  001380  CFE9 FFD9          	movff	fsr0l,fsr2l
  1716  001384  CFEA FFDA          	movff	fsr0h,fsr2h
  1717  001388  EE00  F011         	lfsr	0,?_px_map
  1718  00138C  0E07               	movlw	7
  1719  00138E                     u1751:
  1720  00138E  CFDB FFEB          	movff	plusw2,plusw0
  1721  001392  06E8               	decf	wreg,f,c
  1722  001394  E2FC               	bc	u1751
  1723  001396  0012               	return	
  1724  001398  0E07               	movlw	7
  1725  00139A  6E01               	movwf	new_px_char@a,c
  1726  00139C  0E00               	movlw	0
  1727  00139E  6E02               	movwf	new_px_char@a+1,c
  1728  0013A0  0E00               	movlw	0
  1729  0013A2  6E03               	movwf	new_px_char@a+2,c
  1730  0013A4  0E00               	movlw	0
  1731  0013A6  6E04               	movwf	new_px_char@a+3,c
  1732  0013A8  0E00               	movlw	0
  1733  0013AA  6E05               	movwf	new_px_char@b,c
  1734  0013AC  0E00               	movlw	0
  1735  0013AE  6E06               	movwf	new_px_char@b+1,c
  1736  0013B0  0E00               	movlw	0
  1737  0013B2  6E07               	movwf	new_px_char@b+2,c
  1738  0013B4  0EC0               	movlw	192
  1739  0013B6  6E08               	movwf	new_px_char@b+3,c
  1740  0013B8  EC1D  F01A         	call	_new_px_char	;wreg free
  1741  0013BC  CFE9 FFD9          	movff	fsr0l,fsr2l
  1742  0013C0  CFEA FFDA          	movff	fsr0h,fsr2h
  1743  0013C4  EE00  F011         	lfsr	0,?_px_map
  1744  0013C8  0E07               	movlw	7
  1745  0013CA                     u1761:
  1746  0013CA  CFDB FFEB          	movff	plusw2,plusw0
  1747  0013CE  06E8               	decf	wreg,f,c
  1748  0013D0  E2FC               	bc	u1761
  1749  0013D2  0012               	return	
  1750  0013D4  0E00               	movlw	0
  1751  0013D6  6E01               	movwf	new_px_char@a,c
  1752  0013D8  0E80               	movlw	128
  1753  0013DA  6E02               	movwf	new_px_char@a+1,c
  1754  0013DC  0E38               	movlw	56
  1755  0013DE  6E03               	movwf	new_px_char@a+2,c
  1756  0013E0  0E02               	movlw	2
  1757  0013E2  6E04               	movwf	new_px_char@a+3,c
  1758  0013E4  0E00               	movlw	0
  1759  0013E6  6E05               	movwf	new_px_char@b,c
  1760  0013E8  0E00               	movlw	0
  1761  0013EA  6E06               	movwf	new_px_char@b+1,c
  1762  0013EC  0E00               	movlw	0
  1763  0013EE  6E07               	movwf	new_px_char@b+2,c
  1764  0013F0  0E00               	movlw	0
  1765  0013F2  6E08               	movwf	new_px_char@b+3,c
  1766  0013F4  EC1D  F01A         	call	_new_px_char	;wreg free
  1767  0013F8  CFE9 FFD9          	movff	fsr0l,fsr2l
  1768  0013FC  CFEA FFDA          	movff	fsr0h,fsr2h
  1769  001400  EE00  F011         	lfsr	0,?_px_map
  1770  001404  0E07               	movlw	7
  1771  001406                     u1771:
  1772  001406  CFDB FFEB          	movff	plusw2,plusw0
  1773  00140A  06E8               	decf	wreg,f,c
  1774  00140C  E2FC               	bc	u1771
  1775  00140E  0012               	return	
  1776  001410  0E11               	movlw	17
  1777  001412  6E01               	movwf	new_px_char@a,c
  1778  001414  0E22               	movlw	34
  1779  001416  6E02               	movwf	new_px_char@a+1,c
  1780  001418  0E04               	movlw	4
  1781  00141A  6E03               	movwf	new_px_char@a+2,c
  1782  00141C  0E00               	movlw	0
  1783  00141E  6E04               	movwf	new_px_char@a+3,c
  1784  001420  0E00               	movlw	0
  1785  001422  6E05               	movwf	new_px_char@b,c
  1786  001424  0E40               	movlw	64
  1787  001426  6E06               	movwf	new_px_char@b+1,c
  1788  001428  0E88               	movlw	136
  1789  00142A  6E07               	movwf	new_px_char@b+2,c
  1790  00142C  0E10               	movlw	16
  1791  00142E  6E08               	movwf	new_px_char@b+3,c
  1792  001430  EC1D  F01A         	call	_new_px_char	;wreg free
  1793  001434  CFE9 FFD9          	movff	fsr0l,fsr2l
  1794  001438  CFEA FFDA          	movff	fsr0h,fsr2h
  1795  00143C  EE00  F011         	lfsr	0,?_px_map
  1796  001440  0E07               	movlw	7
  1797  001442                     u1781:
  1798  001442  CFDB FFEB          	movff	plusw2,plusw0
  1799  001446  06E8               	decf	wreg,f,c
  1800  001448  E2FC               	bc	u1781
  1801  00144A  0012               	return	
  1802  00144C  0E8C               	movlw	140
  1803  00144E  6E01               	movwf	new_px_char@a,c
  1804  001450  0E8A               	movlw	138
  1805  001452  6E02               	movwf	new_px_char@a+1,c
  1806  001454  0E00               	movlw	0
  1807  001456  6E03               	movwf	new_px_char@a+2,c
  1808  001458  0E00               	movlw	0
  1809  00145A  6E04               	movwf	new_px_char@a+3,c
  1810  00145C  0E80               	movlw	128
  1811  00145E  6E05               	movwf	new_px_char@b,c
  1812  001460  0EA8               	movlw	168
  1813  001462  6E06               	movwf	new_px_char@b+1,c
  1814  001464  0E18               	movlw	24
  1815  001466  6E07               	movwf	new_px_char@b+2,c
  1816  001468  0E63               	movlw	99
  1817  00146A  6E08               	movwf	new_px_char@b+3,c
  1818  00146C  EC1D  F01A         	call	_new_px_char	;wreg free
  1819  001470  CFE9 FFD9          	movff	fsr0l,fsr2l
  1820  001474  CFEA FFDA          	movff	fsr0h,fsr2h
  1821  001478  EE00  F011         	lfsr	0,?_px_map
  1822  00147C  0E07               	movlw	7
  1823  00147E                     u1791:
  1824  00147E  CFDB FFEB          	movff	plusw2,plusw0
  1825  001482  06E8               	decf	wreg,f,c
  1826  001484  E2FC               	bc	u1791
  1827  001486  0012               	return	
  1828  001488  0E21               	movlw	33
  1829  00148A  6E01               	movwf	new_px_char@a,c
  1830  00148C  0EE4               	movlw	228
  1831  00148E  6E02               	movwf	new_px_char@a+1,c
  1832  001490  0E03               	movlw	3
  1833  001492  6E03               	movwf	new_px_char@a+2,c
  1834  001494  0E00               	movlw	0
  1835  001496  6E04               	movwf	new_px_char@a+3,c
  1836  001498  0E80               	movlw	128
  1837  00149A  6E05               	movwf	new_px_char@b,c
  1838  00149C  0E98               	movlw	152
  1839  00149E  6E06               	movwf	new_px_char@b+1,c
  1840  0014A0  0E42               	movlw	66
  1841  0014A2  6E07               	movwf	new_px_char@b+2,c
  1842  0014A4  0E08               	movlw	8
  1843  0014A6  6E08               	movwf	new_px_char@b+3,c
  1844  0014A8  EC1D  F01A         	call	_new_px_char	;wreg free
  1845  0014AC  CFE9 FFD9          	movff	fsr0l,fsr2l
  1846  0014B0  CFEA FFDA          	movff	fsr0h,fsr2h
  1847  0014B4  EE00  F011         	lfsr	0,?_px_map
  1848  0014B8  0E07               	movlw	7
  1849  0014BA                     u1801:
  1850  0014BA  CFDB FFEB          	movff	plusw2,plusw0
  1851  0014BE  06E8               	decf	wreg,f,c
  1852  0014C0  E2FC               	bc	u1801
  1853  0014C2  0012               	return	
  1854  0014C4  0E11               	movlw	17
  1855  0014C6  6E01               	movwf	new_px_char@a,c
  1856  0014C8  0EE1               	movlw	225
  1857  0014CA  6E02               	movwf	new_px_char@a+1,c
  1858  0014CC  0E03               	movlw	3
  1859  0014CE  6E03               	movwf	new_px_char@a+2,c
  1860  0014D0  0E00               	movlw	0
  1861  0014D2  6E04               	movwf	new_px_char@a+3,c
  1862  0014D4  0EC0               	movlw	192
  1863  0014D6  6E05               	movwf	new_px_char@b,c
  1864  0014D8  0EC5               	movlw	197
  1865  0014DA  6E06               	movwf	new_px_char@b+1,c
  1866  0014DC  0E08               	movlw	8
  1867  0014DE  6E07               	movwf	new_px_char@b+2,c
  1868  0014E0  0E11               	movlw	17
  1869  0014E2  6E08               	movwf	new_px_char@b+3,c
  1870  0014E4  EC1D  F01A         	call	_new_px_char	;wreg free
  1871  0014E8  CFE9 FFD9          	movff	fsr0l,fsr2l
  1872  0014EC  CFEA FFDA          	movff	fsr0h,fsr2h
  1873  0014F0  EE00  F011         	lfsr	0,?_px_map
  1874  0014F4  0E07               	movlw	7
  1875  0014F6                     u1811:
  1876  0014F6  CFDB FFEB          	movff	plusw2,plusw0
  1877  0014FA  06E8               	decf	wreg,f,c
  1878  0014FC  E2FC               	bc	u1811
  1879  0014FE  0012               	return	
  1880  001500  0E84               	movlw	132
  1881  001502  6E01               	movwf	new_px_char@a,c
  1882  001504  0ED1               	movlw	209
  1883  001506  6E02               	movwf	new_px_char@a+1,c
  1884  001508  0E01               	movlw	1
  1885  00150A  6E03               	movwf	new_px_char@a+2,c
  1886  00150C  0E00               	movlw	0
  1887  00150E  6E04               	movwf	new_px_char@a+3,c
  1888  001510  0EE0               	movlw	224
  1889  001512  6E05               	movwf	new_px_char@b,c
  1890  001514  0E43               	movlw	67
  1891  001516  6E06               	movwf	new_px_char@b+1,c
  1892  001518  0E44               	movlw	68
  1893  00151A  6E07               	movwf	new_px_char@b+2,c
  1894  00151C  0E1C               	movlw	28
  1895  00151E  6E08               	movwf	new_px_char@b+3,c
  1896  001520  EC1D  F01A         	call	_new_px_char	;wreg free
  1897  001524  CFE9 FFD9          	movff	fsr0l,fsr2l
  1898  001528  CFEA FFDA          	movff	fsr0h,fsr2h
  1899  00152C  EE00  F011         	lfsr	0,?_px_map
  1900  001530  0E07               	movlw	7
  1901  001532                     u1821:
  1902  001532  CFDB FFEB          	movff	plusw2,plusw0
  1903  001536  06E8               	decf	wreg,f,c
  1904  001538  E2FC               	bc	u1821
  1905  00153A  0012               	return	
  1906  00153C  0EFA               	movlw	250
  1907  00153E  6E01               	movwf	new_px_char@a,c
  1908  001540  0E08               	movlw	8
  1909  001542  6E02               	movwf	new_px_char@a+1,c
  1910  001544  0E01               	movlw	1
  1911  001546  6E03               	movwf	new_px_char@a+2,c
  1912  001548  0E00               	movlw	0
  1913  00154A  6E04               	movwf	new_px_char@a+3,c
  1914  00154C  0E00               	movlw	0
  1915  00154E  6E05               	movwf	new_px_char@b,c
  1916  001550  0E21               	movlw	33
  1917  001552  6E06               	movwf	new_px_char@b+1,c
  1918  001554  0EA6               	movlw	166
  1919  001556  6E07               	movwf	new_px_char@b+2,c
  1920  001558  0E54               	movlw	84
  1921  00155A  6E08               	movwf	new_px_char@b+3,c
  1922  00155C  EC1D  F01A         	call	_new_px_char	;wreg free
  1923  001560  CFE9 FFD9          	movff	fsr0l,fsr2l
  1924  001564  CFEA FFDA          	movff	fsr0h,fsr2h
  1925  001568  EE00  F011         	lfsr	0,?_px_map
  1926  00156C  0E07               	movlw	7
  1927  00156E                     u1831:
  1928  00156E  CFDB FFEB          	movff	plusw2,plusw0
  1929  001572  06E8               	decf	wreg,f,c
  1930  001574  E2FC               	bc	u1831
  1931  001576  0012               	return	
  1932  001578  0E84               	movlw	132
  1933  00157A  6E01               	movwf	new_px_char@a,c
  1934  00157C  0ED1               	movlw	209
  1935  00157E  6E02               	movwf	new_px_char@a+1,c
  1936  001580  0E01               	movlw	1
  1937  001582  6E03               	movwf	new_px_char@a+2,c
  1938  001584  0E00               	movlw	0
  1939  001586  6E04               	movwf	new_px_char@a+3,c
  1940  001588  0EE0               	movlw	224
  1941  00158A  6E05               	movwf	new_px_char@b,c
  1942  00158C  0E87               	movlw	135
  1943  00158E  6E06               	movwf	new_px_char@b+1,c
  1944  001590  0ED0               	movlw	208
  1945  001592  6E07               	movwf	new_px_char@b+2,c
  1946  001594  0E26               	movlw	38
  1947  001596  6E08               	movwf	new_px_char@b+3,c
  1948  001598  EC1D  F01A         	call	_new_px_char	;wreg free
  1949  00159C  CFE9 FFD9          	movff	fsr0l,fsr2l
  1950  0015A0  CFEA FFDA          	movff	fsr0h,fsr2h
  1951  0015A4  EE00  F011         	lfsr	0,?_px_map
  1952  0015A8  0E07               	movlw	7
  1953  0015AA                     u1841:
  1954  0015AA  CFDB FFEB          	movff	plusw2,plusw0
  1955  0015AE  06E8               	decf	wreg,f,c
  1956  0015B0  E2FC               	bc	u1841
  1957  0015B2  0012               	return	
  1958  0015B4  0E8C               	movlw	140
  1959  0015B6  6E01               	movwf	new_px_char@a,c
  1960  0015B8  0ED1               	movlw	209
  1961  0015BA  6E02               	movwf	new_px_char@a+1,c
  1962  0015BC  0E01               	movlw	1
  1963  0015BE  6E03               	movwf	new_px_char@a+2,c
  1964  0015C0  0E00               	movlw	0
  1965  0015C2  6E04               	movwf	new_px_char@a+3,c
  1966  0015C4  0EC0               	movlw	192
  1967  0015C6  6E05               	movwf	new_px_char@b,c
  1968  0015C8  0EC5               	movlw	197
  1969  0015CA  6E06               	movwf	new_px_char@b+1,c
  1970  0015CC  0E10               	movlw	16
  1971  0015CE  6E07               	movwf	new_px_char@b+2,c
  1972  0015D0  0E5E               	movlw	94
  1973  0015D2  6E08               	movwf	new_px_char@b+3,c
  1974  0015D4  EC1D  F01A         	call	_new_px_char	;wreg free
  1975  0015D8  CFE9 FFD9          	movff	fsr0l,fsr2l
  1976  0015DC  CFEA FFDA          	movff	fsr0h,fsr2h
  1977  0015E0  EE00  F011         	lfsr	0,?_px_map
  1978  0015E4  0E07               	movlw	7
  1979  0015E6                     u1851:
  1980  0015E6  CFDB FFEB          	movff	plusw2,plusw0
  1981  0015EA  06E8               	decf	wreg,f,c
  1982  0015EC  E2FC               	bc	u1851
  1983  0015EE  0012               	return	
  1984  0015F0  0E11               	movlw	17
  1985  0015F2  6E01               	movwf	new_px_char@a,c
  1986  0015F4  0E42               	movlw	66
  1987  0015F6  6E02               	movwf	new_px_char@a+1,c
  1988  0015F8  0E00               	movlw	0
  1989  0015FA  6E03               	movwf	new_px_char@a+2,c
  1990  0015FC  0E00               	movlw	0
  1991  0015FE  6E04               	movwf	new_px_char@a+3,c
  1992  001600  0EE0               	movlw	224
  1993  001602  6E05               	movwf	new_px_char@b,c
  1994  001604  0E43               	movlw	67
  1995  001606  6E06               	movwf	new_px_char@b+1,c
  1996  001608  0E84               	movlw	132
  1997  00160A  6E07               	movwf	new_px_char@b+2,c
  1998  00160C  0E08               	movlw	8
  1999  00160E  6E08               	movwf	new_px_char@b+3,c
  2000  001610  EC1D  F01A         	call	_new_px_char	;wreg free
  2001  001614  CFE9 FFD9          	movff	fsr0l,fsr2l
  2002  001618  CFEA FFDA          	movff	fsr0h,fsr2h
  2003  00161C  EE00  F011         	lfsr	0,?_px_map
  2004  001620  0E07               	movlw	7
  2005  001622                     u1861:
  2006  001622  CFDB FFEB          	movff	plusw2,plusw0
  2007  001626  06E8               	decf	wreg,f,c
  2008  001628  E2FC               	bc	u1861
  2009  00162A  0012               	return	
  2010  00162C  0E8C               	movlw	140
  2011  00162E  6E01               	movwf	new_px_char@a,c
  2012  001630  0ED1               	movlw	209
  2013  001632  6E02               	movwf	new_px_char@a+1,c
  2014  001634  0E01               	movlw	1
  2015  001636  6E03               	movwf	new_px_char@a+2,c
  2016  001638  0E00               	movlw	0
  2017  00163A  6E04               	movwf	new_px_char@a+3,c
  2018  00163C  0EC0               	movlw	192
  2019  00163E  6E05               	movwf	new_px_char@b,c
  2020  001640  0EC5               	movlw	197
  2021  001642  6E06               	movwf	new_px_char@b+1,c
  2022  001644  0E18               	movlw	24
  2023  001646  6E07               	movwf	new_px_char@b+2,c
  2024  001648  0E5D               	movlw	93
  2025  00164A  6E08               	movwf	new_px_char@b+3,c
  2026  00164C  EC1D  F01A         	call	_new_px_char	;wreg free
  2027  001650  CFE9 FFD9          	movff	fsr0l,fsr2l
  2028  001654  CFEA FFDA          	movff	fsr0h,fsr2h
  2029  001658  EE00  F011         	lfsr	0,?_px_map
  2030  00165C  0E07               	movlw	7
  2031  00165E                     u1871:
  2032  00165E  CFDB FFEB          	movff	plusw2,plusw0
  2033  001662  06E8               	decf	wreg,f,c
  2034  001664  E2FC               	bc	u1871
  2035  001666  0012               	return	
  2036  001668  0E84               	movlw	132
  2037  00166A  6E01               	movwf	new_px_char@a,c
  2038  00166C  0ED1               	movlw	209
  2039  00166E  6E02               	movwf	new_px_char@a+1,c
  2040  001670  0E01               	movlw	1
  2041  001672  6E03               	movwf	new_px_char@a+2,c
  2042  001674  0E00               	movlw	0
  2043  001676  6E04               	movwf	new_px_char@a+3,c
  2044  001678  0EC0               	movlw	192
  2045  00167A  6E05               	movwf	new_px_char@b,c
  2046  00167C  0EC5               	movlw	197
  2047  00167E  6E06               	movwf	new_px_char@b+1,c
  2048  001680  0E18               	movlw	24
  2049  001682  6E07               	movwf	new_px_char@b+2,c
  2050  001684  0E3D               	movlw	61
  2051  001686  6E08               	movwf	new_px_char@b+3,c
  2052  001688  EC1D  F01A         	call	_new_px_char	;wreg free
  2053  00168C  CFE9 FFD9          	movff	fsr0l,fsr2l
  2054  001690  CFEA FFDA          	movff	fsr0h,fsr2h
  2055  001694  EE00  F011         	lfsr	0,?_px_map
  2056  001698  0E07               	movlw	7
  2057  00169A                     u1881:
  2058  00169A  CFDB FFEB          	movff	plusw2,plusw0
  2059  00169E  06E8               	decf	wreg,f,c
  2060  0016A0  E2FC               	bc	u1881
  2061  0016A2  0012               	return	
  2062  0016A4  0E20               	movlw	32
  2063  0016A6  6E01               	movwf	new_px_char@a,c
  2064  0016A8  0E8E               	movlw	142
  2065  0016AA  6E02               	movwf	new_px_char@a+1,c
  2066  0016AC  0E00               	movlw	0
  2067  0016AE  6E03               	movwf	new_px_char@a+2,c
  2068  0016B0  0E00               	movlw	0
  2069  0016B2  6E04               	movwf	new_px_char@a+3,c
  2070  0016B4  0E00               	movlw	0
  2071  0016B6  6E05               	movwf	new_px_char@b,c
  2072  0016B8  0E10               	movlw	16
  2073  0016BA  6E06               	movwf	new_px_char@b+1,c
  2074  0016BC  0E47               	movlw	71
  2075  0016BE  6E07               	movwf	new_px_char@b+2,c
  2076  0016C0  0E00               	movlw	0
  2077  0016C2  6E08               	movwf	new_px_char@b+3,c
  2078  0016C4  EC1D  F01A         	call	_new_px_char	;wreg free
  2079  0016C8  CFE9 FFD9          	movff	fsr0l,fsr2l
  2080  0016CC  CFEA FFDA          	movff	fsr0h,fsr2h
  2081  0016D0  EE00  F011         	lfsr	0,?_px_map
  2082  0016D4  0E07               	movlw	7
  2083  0016D6                     u1891:
  2084  0016D6  CFDB FFEB          	movff	plusw2,plusw0
  2085  0016DA  06E8               	decf	wreg,f,c
  2086  0016DC  E2FC               	bc	u1891
  2087  0016DE  0012               	return	
  2088  0016E0  0E01               	movlw	1
  2089  0016E2  6E01               	movwf	new_px_char@a,c
  2090  0016E4  0E80               	movlw	128
  2091  0016E6  6E02               	movwf	new_px_char@a+1,c
  2092  0016E8  0E11               	movlw	17
  2093  0016EA  6E03               	movwf	new_px_char@a+2,c
  2094  0016EC  0E01               	movlw	1
  2095  0016EE  6E04               	movwf	new_px_char@a+3,c
  2096  0016F0  0E00               	movlw	0
  2097  0016F2  6E05               	movwf	new_px_char@b,c
  2098  0016F4  0E00               	movlw	0
  2099  0016F6  6E06               	movwf	new_px_char@b+1,c
  2100  0016F8  0E40               	movlw	64
  2101  0016FA  6E07               	movwf	new_px_char@b+2,c
  2102  0016FC  0E1C               	movlw	28
  2103  0016FE  6E08               	movwf	new_px_char@b+3,c
  2104  001700  EC1D  F01A         	call	_new_px_char	;wreg free
  2105  001704  CFE9 FFD9          	movff	fsr0l,fsr2l
  2106  001708  CFEA FFDA          	movff	fsr0h,fsr2h
  2107  00170C  EE00  F011         	lfsr	0,?_px_map
  2108  001710  0E07               	movlw	7
  2109  001712                     u1901:
  2110  001712  CFDB FFEB          	movff	plusw2,plusw0
  2111  001716  06E8               	decf	wreg,f,c
  2112  001718  E2FC               	bc	u1901
  2113  00171A  0012               	return	
  2114  00171C  0E10               	movlw	16
  2115  00171E  6E01               	movwf	new_px_char@a,c
  2116  001720  0E04               	movlw	4
  2117  001722  6E02               	movwf	new_px_char@a+1,c
  2118  001724  0E41               	movlw	65
  2119  001726  6E03               	movwf	new_px_char@a+2,c
  2120  001728  0E00               	movlw	0
  2121  00172A  6E04               	movwf	new_px_char@a+3,c
  2122  00172C  0E00               	movlw	0
  2123  00172E  6E05               	movwf	new_px_char@b,c
  2124  001730  0E40               	movlw	64
  2125  001732  6E06               	movwf	new_px_char@b+1,c
  2126  001734  0E44               	movlw	68
  2127  001736  6E07               	movwf	new_px_char@b+2,c
  2128  001738  0E44               	movlw	68
  2129  00173A  6E08               	movwf	new_px_char@b+3,c
  2130  00173C  EC1D  F01A         	call	_new_px_char	;wreg free
  2131  001740  CFE9 FFD9          	movff	fsr0l,fsr2l
  2132  001744  CFEA FFDA          	movff	fsr0h,fsr2h
  2133  001748  EE00  F011         	lfsr	0,?_px_map
  2134  00174C  0E07               	movlw	7
  2135  00174E                     u1911:
  2136  00174E  CFDB FFEB          	movff	plusw2,plusw0
  2137  001752  06E8               	decf	wreg,f,c
  2138  001754  E2FC               	bc	u1911
  2139  001756  0012               	return	
  2140  001758  0E00               	movlw	0
  2141  00175A  6E01               	movwf	new_px_char@a,c
  2142  00175C  0E1F               	movlw	31
  2143  00175E  6E02               	movwf	new_px_char@a+1,c
  2144  001760  0E00               	movlw	0
  2145  001762  6E03               	movwf	new_px_char@a+2,c
  2146  001764  0E00               	movlw	0
  2147  001766  6E04               	movwf	new_px_char@a+3,c
  2148  001768  0E00               	movlw	0
  2149  00176A  6E05               	movwf	new_px_char@b,c
  2150  00176C  0E00               	movlw	0
  2151  00176E  6E06               	movwf	new_px_char@b+1,c
  2152  001770  0E00               	movlw	0
  2153  001772  6E07               	movwf	new_px_char@b+2,c
  2154  001774  0E3E               	movlw	62
  2155  001776  6E08               	movwf	new_px_char@b+3,c
  2156  001778  EC1D  F01A         	call	_new_px_char	;wreg free
  2157  00177C  CFE9 FFD9          	movff	fsr0l,fsr2l
  2158  001780  CFEA FFDA          	movff	fsr0h,fsr2h
  2159  001784  EE00  F011         	lfsr	0,?_px_map
  2160  001788  0E07               	movlw	7
  2161  00178A                     u1921:
  2162  00178A  CFDB FFEB          	movff	plusw2,plusw0
  2163  00178E  06E8               	decf	wreg,f,c
  2164  001790  E2FC               	bc	u1921
  2165  001792  0012               	return	
  2166  001794  0E44               	movlw	68
  2167  001796  6E01               	movwf	new_px_char@a,c
  2168  001798  0E44               	movlw	68
  2169  00179A  6E02               	movwf	new_px_char@a+1,c
  2170  00179C  0E04               	movlw	4
  2171  00179E  6E03               	movwf	new_px_char@a+2,c
  2172  0017A0  0E00               	movlw	0
  2173  0017A2  6E04               	movwf	new_px_char@a+3,c
  2174  0017A4  0E00               	movlw	0
  2175  0017A6  6E05               	movwf	new_px_char@b,c
  2176  0017A8  0E04               	movlw	4
  2177  0017AA  6E06               	movwf	new_px_char@b+1,c
  2178  0017AC  0E41               	movlw	65
  2179  0017AE  6E07               	movwf	new_px_char@b+2,c
  2180  0017B0  0E10               	movlw	16
  2181  0017B2  6E08               	movwf	new_px_char@b+3,c
  2182  0017B4  EC1D  F01A         	call	_new_px_char	;wreg free
  2183  0017B8  CFE9 FFD9          	movff	fsr0l,fsr2l
  2184  0017BC  CFEA FFDA          	movff	fsr0h,fsr2h
  2185  0017C0  EE00  F011         	lfsr	0,?_px_map
  2186  0017C4  0E07               	movlw	7
  2187  0017C6                     u1931:
  2188  0017C6  CFDB FFEB          	movff	plusw2,plusw0
  2189  0017CA  06E8               	decf	wreg,f,c
  2190  0017CC  E2FC               	bc	u1931
  2191  0017CE  0012               	return	
  2192  0017D0  0E22               	movlw	34
  2193  0017D2  6E01               	movwf	new_px_char@a,c
  2194  0017D4  0E04               	movlw	4
  2195  0017D6  6E02               	movwf	new_px_char@a+1,c
  2196  0017D8  0E10               	movlw	16
  2197  0017DA  6E03               	movwf	new_px_char@a+2,c
  2198  0017DC  0E00               	movlw	0
  2199  0017DE  6E04               	movwf	new_px_char@a+3,c
  2200  0017E0  0E00               	movlw	0
  2201  0017E2  6E05               	movwf	new_px_char@b,c
  2202  0017E4  0EB8               	movlw	184
  2203  0017E6  6E06               	movwf	new_px_char@b+1,c
  2204  0017E8  0E18               	movlw	24
  2205  0017EA  6E07               	movwf	new_px_char@b+2,c
  2206  0017EC  0E21               	movlw	33
  2207  0017EE  6E08               	movwf	new_px_char@b+3,c
  2208  0017F0  EC1D  F01A         	call	_new_px_char	;wreg free
  2209  0017F4  CFE9 FFD9          	movff	fsr0l,fsr2l
  2210  0017F8  CFEA FFDA          	movff	fsr0h,fsr2h
  2211  0017FC  EE00  F011         	lfsr	0,?_px_map
  2212  001800  0E07               	movlw	7
  2213  001802                     u1941:
  2214  001802  CFDB FFEB          	movff	plusw2,plusw0
  2215  001806  06E8               	decf	wreg,f,c
  2216  001808  E2FC               	bc	u1941
  2217  00180A  0012               	return	
  2218  00180C  0EAD               	movlw	173
  2219  00180E  6E01               	movwf	new_px_char@a,c
  2220  001810  0E2D               	movlw	45
  2221  001812  6E02               	movwf	new_px_char@a+1,c
  2222  001814  0E78               	movlw	120
  2223  001816  6E03               	movwf	new_px_char@a+2,c
  2224  001818  0E00               	movlw	0
  2225  00181A  6E04               	movwf	new_px_char@a+3,c
  2226  00181C  0E00               	movlw	0
  2227  00181E  6E05               	movwf	new_px_char@b,c
  2228  001820  0EB8               	movlw	184
  2229  001822  6E06               	movwf	new_px_char@b+1,c
  2230  001824  0E18               	movlw	24
  2231  001826  6E07               	movwf	new_px_char@b+2,c
  2232  001828  0E73               	movlw	115
  2233  00182A  6E08               	movwf	new_px_char@b+3,c
  2234  00182C  EC1D  F01A         	call	_new_px_char	;wreg free
  2235  001830  CFE9 FFD9          	movff	fsr0l,fsr2l
  2236  001834  CFEA FFDA          	movff	fsr0h,fsr2h
  2237  001838  EE00  F011         	lfsr	0,?_px_map
  2238  00183C  0E07               	movlw	7
  2239  00183E                     u1951:
  2240  00183E  CFDB FFEB          	movff	plusw2,plusw0
  2241  001842  06E8               	decf	wreg,f,c
  2242  001844  E2FC               	bc	u1951
  2243  001846  0012               	return	
  2244  001848  0E8F               	movlw	143
  2245  00184A  6E01               	movwf	new_px_char@a,c
  2246  00184C  0E31               	movlw	49
  2247  00184E  6E02               	movwf	new_px_char@a+1,c
  2248  001850  0E02               	movlw	2
  2249  001852  6E03               	movwf	new_px_char@a+2,c
  2250  001854  0E00               	movlw	0
  2251  001856  6E04               	movwf	new_px_char@a+3,c
  2252  001858  0E80               	movlw	128
  2253  00185A  6E05               	movwf	new_px_char@b,c
  2254  00185C  0EA8               	movlw	168
  2255  00185E  6E06               	movwf	new_px_char@b+1,c
  2256  001860  0E18               	movlw	24
  2257  001862  6E07               	movwf	new_px_char@b+2,c
  2258  001864  0EE3               	movlw	227
  2259  001866  6E08               	movwf	new_px_char@b+3,c
  2260  001868  EC1D  F01A         	call	_new_px_char	;wreg free
  2261  00186C  CFE9 FFD9          	movff	fsr0l,fsr2l
  2262  001870  CFEA FFDA          	movff	fsr0h,fsr2h
  2263  001874  EE00  F011         	lfsr	0,?_px_map
  2264  001878  0E07               	movlw	7
  2265  00187A                     u1961:
  2266  00187A  CFDB FFEB          	movff	plusw2,plusw0
  2267  00187E  06E8               	decf	wreg,f,c
  2268  001880  E2FC               	bc	u1961
  2269  001882  0012               	return	
  2270  001884  0E94               	movlw	148
  2271  001886  6E01               	movwf	new_px_char@a,c
  2272  001888  0EF2               	movlw	242
  2273  00188A  6E02               	movwf	new_px_char@a+1,c
  2274  00188C  0E01               	movlw	1
  2275  00188E  6E03               	movwf	new_px_char@a+2,c
  2276  001890  0E00               	movlw	0
  2277  001892  6E04               	movwf	new_px_char@a+3,c
  2278  001894  0EE0               	movlw	224
  2279  001896  6E05               	movwf	new_px_char@b,c
  2280  001898  0E49               	movlw	73
  2281  00189A  6E06               	movwf	new_px_char@b+1,c
  2282  00189C  0E29               	movlw	41
  2283  00189E  6E07               	movwf	new_px_char@b+2,c
  2284  0018A0  0E9D               	movlw	157
  2285  0018A2  6E08               	movwf	new_px_char@b+3,c
  2286  0018A4  EC1D  F01A         	call	_new_px_char	;wreg free
  2287  0018A8  CFE9 FFD9          	movff	fsr0l,fsr2l
  2288  0018AC  CFEA FFDA          	movff	fsr0h,fsr2h
  2289  0018B0  EE00  F011         	lfsr	0,?_px_map
  2290  0018B4  0E07               	movlw	7
  2291  0018B6                     u1971:
  2292  0018B6  CFDB FFEB          	movff	plusw2,plusw0
  2293  0018BA  06E8               	decf	wreg,f,c
  2294  0018BC  E2FC               	bc	u1971
  2295  0018BE  0012               	return	
  2296  0018C0  0E08               	movlw	8
  2297  0018C2  6E01               	movwf	new_px_char@a,c
  2298  0018C4  0ED1               	movlw	209
  2299  0018C6  6E02               	movwf	new_px_char@a+1,c
  2300  0018C8  0E01               	movlw	1
  2301  0018CA  6E03               	movwf	new_px_char@a+2,c
  2302  0018CC  0E00               	movlw	0
  2303  0018CE  6E04               	movwf	new_px_char@a+3,c
  2304  0018D0  0EC0               	movlw	192
  2305  0018D2  6E05               	movwf	new_px_char@b,c
  2306  0018D4  0EC5               	movlw	197
  2307  0018D6  6E06               	movwf	new_px_char@b+1,c
  2308  0018D8  0E10               	movlw	16
  2309  0018DA  6E07               	movwf	new_px_char@b+2,c
  2310  0018DC  0E42               	movlw	66
  2311  0018DE  6E08               	movwf	new_px_char@b+3,c
  2312  0018E0  EC1D  F01A         	call	_new_px_char	;wreg free
  2313  0018E4  CFE9 FFD9          	movff	fsr0l,fsr2l
  2314  0018E8  CFEA FFDA          	movff	fsr0h,fsr2h
  2315  0018EC  EE00  F011         	lfsr	0,?_px_map
  2316  0018F0  0E07               	movlw	7
  2317  0018F2                     u1981:
  2318  0018F2  CFDB FFEB          	movff	plusw2,plusw0
  2319  0018F6  06E8               	decf	wreg,f,c
  2320  0018F8  E2FC               	bc	u1981
  2321  0018FA  0012               	return	
  2322  0018FC  0E94               	movlw	148
  2323  0018FE  6E01               	movwf	new_px_char@a,c
  2324  001900  0EF2               	movlw	242
  2325  001902  6E02               	movwf	new_px_char@a+1,c
  2326  001904  0E01               	movlw	1
  2327  001906  6E03               	movwf	new_px_char@a+2,c
  2328  001908  0E00               	movlw	0
  2329  00190A  6E04               	movwf	new_px_char@a+3,c
  2330  00190C  0EE0               	movlw	224
  2331  00190E  6E05               	movwf	new_px_char@b,c
  2332  001910  0E49               	movlw	73
  2333  001912  6E06               	movwf	new_px_char@b+1,c
  2334  001914  0E29               	movlw	41
  2335  001916  6E07               	movwf	new_px_char@b+2,c
  2336  001918  0EA5               	movlw	165
  2337  00191A  6E08               	movwf	new_px_char@b+3,c
  2338  00191C  EC1D  F01A         	call	_new_px_char	;wreg free
  2339  001920  CFE9 FFD9          	movff	fsr0l,fsr2l
  2340  001924  CFEA FFDA          	movff	fsr0h,fsr2h
  2341  001928  EE00  F011         	lfsr	0,?_px_map
  2342  00192C  0E07               	movlw	7
  2343  00192E                     u1991:
  2344  00192E  CFDB FFEB          	movff	plusw2,plusw0
  2345  001932  06E8               	decf	wreg,f,c
  2346  001934  E2FC               	bc	u1991
  2347  001936  0012               	return	
  2348  001938  0E08               	movlw	8
  2349  00193A  6E01               	movwf	new_px_char@a,c
  2350  00193C  0EE1               	movlw	225
  2351  00193E  6E02               	movwf	new_px_char@a+1,c
  2352  001940  0E03               	movlw	3
  2353  001942  6E03               	movwf	new_px_char@a+2,c
  2354  001944  0E00               	movlw	0
  2355  001946  6E04               	movwf	new_px_char@a+3,c
  2356  001948  0EE0               	movlw	224
  2357  00194A  6E05               	movwf	new_px_char@b,c
  2358  00194C  0E87               	movlw	135
  2359  00194E  6E06               	movwf	new_px_char@b+1,c
  2360  001950  0E10               	movlw	16
  2361  001952  6E07               	movwf	new_px_char@b+2,c
  2362  001954  0E5E               	movlw	94
  2363  001956  6E08               	movwf	new_px_char@b+3,c
  2364  001958  EC1D  F01A         	call	_new_px_char	;wreg free
  2365  00195C  CFE9 FFD9          	movff	fsr0l,fsr2l
  2366  001960  CFEA FFDA          	movff	fsr0h,fsr2h
  2367  001964  EE00  F011         	lfsr	0,?_px_map
  2368  001968  0E07               	movlw	7
  2369  00196A                     u2001:
  2370  00196A  CFDB FFEB          	movff	plusw2,plusw0
  2371  00196E  06E8               	decf	wreg,f,c
  2372  001970  E2FC               	bc	u2001
  2373  001972  0012               	return	
  2374  001974  0E08               	movlw	8
  2375  001976  6E01               	movwf	new_px_char@a,c
  2376  001978  0E21               	movlw	33
  2377  00197A  6E02               	movwf	new_px_char@a+1,c
  2378  00197C  0E00               	movlw	0
  2379  00197E  6E03               	movwf	new_px_char@a+2,c
  2380  001980  0E00               	movlw	0
  2381  001982  6E04               	movwf	new_px_char@a+3,c
  2382  001984  0EE0               	movlw	224
  2383  001986  6E05               	movwf	new_px_char@b,c
  2384  001988  0E87               	movlw	135
  2385  00198A  6E06               	movwf	new_px_char@b+1,c
  2386  00198C  0E10               	movlw	16
  2387  00198E  6E07               	movwf	new_px_char@b+2,c
  2388  001990  0E5E               	movlw	94
  2389  001992  6E08               	movwf	new_px_char@b+3,c
  2390  001994  EC1D  F01A         	call	_new_px_char	;wreg free
  2391  001998  CFE9 FFD9          	movff	fsr0l,fsr2l
  2392  00199C  CFEA FFDA          	movff	fsr0h,fsr2h
  2393  0019A0  EE00  F011         	lfsr	0,?_px_map
  2394  0019A4  0E07               	movlw	7
  2395  0019A6                     u2011:
  2396  0019A6  CFDB FFEB          	movff	plusw2,plusw0
  2397  0019AA  06E8               	decf	wreg,f,c
  2398  0019AC  E2FC               	bc	u2011
  2399  0019AE  0012               	return	
  2400  0019B0  0E8E               	movlw	142
  2401  0019B2  6E01               	movwf	new_px_char@a,c
  2402  0019B4  0ED1               	movlw	209
  2403  0019B6  6E02               	movwf	new_px_char@a+1,c
  2404  0019B8  0E01               	movlw	1
  2405  0019BA  6E03               	movwf	new_px_char@a+2,c
  2406  0019BC  0E00               	movlw	0
  2407  0019BE  6E04               	movwf	new_px_char@a+3,c
  2408  0019C0  0EC0               	movlw	192
  2409  0019C2  6E05               	movwf	new_px_char@b,c
  2410  0019C4  0EC5               	movlw	197
  2411  0019C6  6E06               	movwf	new_px_char@b+1,c
  2412  0019C8  0E10               	movlw	16
  2413  0019CA  6E07               	movwf	new_px_char@b+2,c
  2414  0019CC  0E42               	movlw	66
  2415  0019CE  6E08               	movwf	new_px_char@b+3,c
  2416  0019D0  EC1D  F01A         	call	_new_px_char	;wreg free
  2417  0019D4  CFE9 FFD9          	movff	fsr0l,fsr2l
  2418  0019D8  CFEA FFDA          	movff	fsr0h,fsr2h
  2419  0019DC  EE00  F011         	lfsr	0,?_px_map
  2420  0019E0  0E07               	movlw	7
  2421  0019E2                     u2021:
  2422  0019E2  CFDB FFEB          	movff	plusw2,plusw0
  2423  0019E6  06E8               	decf	wreg,f,c
  2424  0019E8  E2FC               	bc	u2021
  2425  0019EA  0012               	return	
  2426  0019EC  0E8C               	movlw	140
  2427  0019EE  6E01               	movwf	new_px_char@a,c
  2428  0019F0  0E31               	movlw	49
  2429  0019F2  6E02               	movwf	new_px_char@a+1,c
  2430  0019F4  0E02               	movlw	2
  2431  0019F6  6E03               	movwf	new_px_char@a+2,c
  2432  0019F8  0E00               	movlw	0
  2433  0019FA  6E04               	movwf	new_px_char@a+3,c
  2434  0019FC  0E20               	movlw	32
  2435  0019FE  6E05               	movwf	new_px_char@b,c
  2436  001A00  0EC6               	movlw	198
  2437  001A02  6E06               	movwf	new_px_char@b+1,c
  2438  001A04  0E18               	movlw	24
  2439  001A06  6E07               	movwf	new_px_char@b+2,c
  2440  001A08  0E7F               	movlw	127
  2441  001A0A  6E08               	movwf	new_px_char@b+3,c
  2442  001A0C  EC1D  F01A         	call	_new_px_char	;wreg free
  2443  001A10  CFE9 FFD9          	movff	fsr0l,fsr2l
  2444  001A14  CFEA FFDA          	movff	fsr0h,fsr2h
  2445  001A18  EE00  F011         	lfsr	0,?_px_map
  2446  001A1C  0E07               	movlw	7
  2447  001A1E                     u2031:
  2448  001A1E  CFDB FFEB          	movff	plusw2,plusw0
  2449  001A22  06E8               	decf	wreg,f,c
  2450  001A24  E2FC               	bc	u2031
  2451  001A26  0012               	return	
  2452  001A28  0E21               	movlw	33
  2453  001A2A  6E01               	movwf	new_px_char@a,c
  2454  001A2C  0EC4               	movlw	196
  2455  001A2E  6E02               	movwf	new_px_char@a+1,c
  2456  001A30  0E01               	movlw	1
  2457  001A32  6E03               	movwf	new_px_char@a+2,c
  2458  001A34  0E00               	movlw	0
  2459  001A36  6E04               	movwf	new_px_char@a+3,c
  2460  001A38  0EC0               	movlw	192
  2461  001A3A  6E05               	movwf	new_px_char@b,c
  2462  001A3C  0E11               	movlw	17
  2463  001A3E  6E06               	movwf	new_px_char@b+1,c
  2464  001A40  0E42               	movlw	66
  2465  001A42  6E07               	movwf	new_px_char@b+2,c
  2466  001A44  0E08               	movlw	8
  2467  001A46  6E08               	movwf	new_px_char@b+3,c
  2468  001A48  EC1D  F01A         	call	_new_px_char	;wreg free
  2469  001A4C  CFE9 FFD9          	movff	fsr0l,fsr2l
  2470  001A50  CFEA FFDA          	movff	fsr0h,fsr2h
  2471  001A54  EE00  F011         	lfsr	0,?_px_map
  2472  001A58  0E07               	movlw	7
  2473  001A5A                     u2041:
  2474  001A5A  CFDB FFEB          	movff	plusw2,plusw0
  2475  001A5E  06E8               	decf	wreg,f,c
  2476  001A60  E2FC               	bc	u2041
  2477  001A62  0012               	return	
  2478  001A64  0E42               	movlw	66
  2479  001A66  6E01               	movwf	new_px_char@a,c
  2480  001A68  0EC9               	movlw	201
  2481  001A6A  6E02               	movwf	new_px_char@a+1,c
  2482  001A6C  0E00               	movlw	0
  2483  001A6E  6E03               	movwf	new_px_char@a+2,c
  2484  001A70  0E00               	movlw	0
  2485  001A72  6E04               	movwf	new_px_char@a+3,c
  2486  001A74  0E80               	movlw	128
  2487  001A76  6E05               	movwf	new_px_char@b,c
  2488  001A78  0E23               	movlw	35
  2489  001A7A  6E06               	movwf	new_px_char@b+1,c
  2490  001A7C  0E84               	movlw	132
  2491  001A7E  6E07               	movwf	new_px_char@b+2,c
  2492  001A80  0E10               	movlw	16
  2493  001A82  6E08               	movwf	new_px_char@b+3,c
  2494  001A84  EC1D  F01A         	call	_new_px_char	;wreg free
  2495  001A88  CFE9 FFD9          	movff	fsr0l,fsr2l
  2496  001A8C  CFEA FFDA          	movff	fsr0h,fsr2h
  2497  001A90  EE00  F011         	lfsr	0,?_px_map
  2498  001A94  0E07               	movlw	7
  2499  001A96                     u2051:
  2500  001A96  CFDB FFEB          	movff	plusw2,plusw0
  2501  001A9A  06E8               	decf	wreg,f,c
  2502  001A9C  E2FC               	bc	u2051
  2503  001A9E  0012               	return	
  2504  001AA0  0E49               	movlw	73
  2505  001AA2  6E01               	movwf	new_px_char@a,c
  2506  001AA4  0E31               	movlw	49
  2507  001AA6  6E02               	movwf	new_px_char@a+1,c
  2508  001AA8  0E02               	movlw	2
  2509  001AAA  6E03               	movwf	new_px_char@a+2,c
  2510  001AAC  0E00               	movlw	0
  2511  001AAE  6E04               	movwf	new_px_char@a+3,c
  2512  001AB0  0E20               	movlw	32
  2513  001AB2  6E05               	movwf	new_px_char@b,c
  2514  001AB4  0EC6               	movlw	198
  2515  001AB6  6E06               	movwf	new_px_char@b+1,c
  2516  001AB8  0E54               	movlw	84
  2517  001ABA  6E07               	movwf	new_px_char@b+2,c
  2518  001ABC  0E46               	movlw	70
  2519  001ABE  6E08               	movwf	new_px_char@b+3,c
  2520  001AC0  EC1D  F01A         	call	_new_px_char	;wreg free
  2521  001AC4  CFE9 FFD9          	movff	fsr0l,fsr2l
  2522  001AC8  CFEA FFDA          	movff	fsr0h,fsr2h
  2523  001ACC  EE00  F011         	lfsr	0,?_px_map
  2524  001AD0  0E07               	movlw	7
  2525  001AD2                     u2061:
  2526  001AD2  CFDB FFEB          	movff	plusw2,plusw0
  2527  001AD6  06E8               	decf	wreg,f,c
  2528  001AD8  E2FC               	bc	u2061
  2529  001ADA  0012               	return	
  2530  001ADC  0E08               	movlw	8
  2531  001ADE  6E01               	movwf	new_px_char@a,c
  2532  001AE0  0EE1               	movlw	225
  2533  001AE2  6E02               	movwf	new_px_char@a+1,c
  2534  001AE4  0E03               	movlw	3
  2535  001AE6  6E03               	movwf	new_px_char@a+2,c
  2536  001AE8  0E00               	movlw	0
  2537  001AEA  6E04               	movwf	new_px_char@a+3,c
  2538  001AEC  0E20               	movlw	32
  2539  001AEE  6E05               	movwf	new_px_char@b,c
  2540  001AF0  0E84               	movlw	132
  2541  001AF2  6E06               	movwf	new_px_char@b+1,c
  2542  001AF4  0E10               	movlw	16
  2543  001AF6  6E07               	movwf	new_px_char@b+2,c
  2544  001AF8  0E42               	movlw	66
  2545  001AFA  6E08               	movwf	new_px_char@b+3,c
  2546  001AFC  EC1D  F01A         	call	_new_px_char	;wreg free
  2547  001B00  CFE9 FFD9          	movff	fsr0l,fsr2l
  2548  001B04  CFEA FFDA          	movff	fsr0h,fsr2h
  2549  001B08  EE00  F011         	lfsr	0,?_px_map
  2550  001B0C  0E07               	movlw	7
  2551  001B0E                     u2071:
  2552  001B0E  CFDB FFEB          	movff	plusw2,plusw0
  2553  001B12  06E8               	decf	wreg,f,c
  2554  001B14  E2FC               	bc	u2071
  2555  001B16  0012               	return	
  2556  001B18  0E8C               	movlw	140
  2557  001B1A  6E01               	movwf	new_px_char@a,c
  2558  001B1C  0E31               	movlw	49
  2559  001B1E  6E02               	movwf	new_px_char@a+1,c
  2560  001B20  0E02               	movlw	2
  2561  001B22  6E03               	movwf	new_px_char@a+2,c
  2562  001B24  0E00               	movlw	0
  2563  001B26  6E04               	movwf	new_px_char@a+3,c
  2564  001B28  0E20               	movlw	32
  2565  001B2A  6E05               	movwf	new_px_char@b,c
  2566  001B2C  0EC6               	movlw	198
  2567  001B2E  6E06               	movwf	new_px_char@b+1,c
  2568  001B30  0E5D               	movlw	93
  2569  001B32  6E07               	movwf	new_px_char@b+2,c
  2570  001B34  0E6B               	movlw	107
  2571  001B36  6E08               	movwf	new_px_char@b+3,c
  2572  001B38  EC1D  F01A         	call	_new_px_char	;wreg free
  2573  001B3C  CFE9 FFD9          	movff	fsr0l,fsr2l
  2574  001B40  CFEA FFDA          	movff	fsr0h,fsr2h
  2575  001B44  EE00  F011         	lfsr	0,?_px_map
  2576  001B48  0E07               	movlw	7
  2577  001B4A                     u2081:
  2578  001B4A  CFDB FFEB          	movff	plusw2,plusw0
  2579  001B4E  06E8               	decf	wreg,f,c
  2580  001B50  E2FC               	bc	u2081
  2581  001B52  0012               	return	
  2582  001B54  0ECE               	movlw	206
  2583  001B56  6E01               	movwf	new_px_char@a,c
  2584  001B58  0E31               	movlw	49
  2585  001B5A  6E02               	movwf	new_px_char@a+1,c
  2586  001B5C  0E02               	movlw	2
  2587  001B5E  6E03               	movwf	new_px_char@a+2,c
  2588  001B60  0E00               	movlw	0
  2589  001B62  6E04               	movwf	new_px_char@a+3,c
  2590  001B64  0E20               	movlw	32
  2591  001B66  6E05               	movwf	new_px_char@b,c
  2592  001B68  0ECE               	movlw	206
  2593  001B6A  6E06               	movwf	new_px_char@b+1,c
  2594  001B6C  0E59               	movlw	89
  2595  001B6E  6E07               	movwf	new_px_char@b+2,c
  2596  001B70  0E6B               	movlw	107
  2597  001B72  6E08               	movwf	new_px_char@b+3,c
  2598  001B74  EC1D  F01A         	call	_new_px_char	;wreg free
  2599  001B78  CFE9 FFD9          	movff	fsr0l,fsr2l
  2600  001B7C  CFEA FFDA          	movff	fsr0h,fsr2h
  2601  001B80  EE00  F011         	lfsr	0,?_px_map
  2602  001B84  0E07               	movlw	7
  2603  001B86                     u2091:
  2604  001B86  CFDB FFEB          	movff	plusw2,plusw0
  2605  001B8A  06E8               	decf	wreg,f,c
  2606  001B8C  E2FC               	bc	u2091
  2607  001B8E  0012               	return	
  2608  001B90  0E8C               	movlw	140
  2609  001B92  6E01               	movwf	new_px_char@a,c
  2610  001B94  0ED1               	movlw	209
  2611  001B96  6E02               	movwf	new_px_char@a+1,c
  2612  001B98  0E01               	movlw	1
  2613  001B9A  6E03               	movwf	new_px_char@a+2,c
  2614  001B9C  0E00               	movlw	0
  2615  001B9E  6E04               	movwf	new_px_char@a+3,c
  2616  001BA0  0EC0               	movlw	192
  2617  001BA2  6E05               	movwf	new_px_char@b,c
  2618  001BA4  0EC5               	movlw	197
  2619  001BA6  6E06               	movwf	new_px_char@b+1,c
  2620  001BA8  0E18               	movlw	24
  2621  001BAA  6E07               	movwf	new_px_char@b+2,c
  2622  001BAC  0E63               	movlw	99
  2623  001BAE  6E08               	movwf	new_px_char@b+3,c
  2624  001BB0  EC1D  F01A         	call	_new_px_char	;wreg free
  2625  001BB4  CFE9 FFD9          	movff	fsr0l,fsr2l
  2626  001BB8  CFEA FFDA          	movff	fsr0h,fsr2h
  2627  001BBC  EE00  F011         	lfsr	0,?_px_map
  2628  001BC0  0E07               	movlw	7
  2629  001BC2                     u2101:
  2630  001BC2  CFDB FFEB          	movff	plusw2,plusw0
  2631  001BC6  06E8               	decf	wreg,f,c
  2632  001BC8  E2FC               	bc	u2101
  2633  001BCA  0012               	return	
  2634  001BCC  0E08               	movlw	8
  2635  001BCE  6E01               	movwf	new_px_char@a,c
  2636  001BD0  0E21               	movlw	33
  2637  001BD2  6E02               	movwf	new_px_char@a+1,c
  2638  001BD4  0E00               	movlw	0
  2639  001BD6  6E03               	movwf	new_px_char@a+2,c
  2640  001BD8  0E00               	movlw	0
  2641  001BDA  6E04               	movwf	new_px_char@a+3,c
  2642  001BDC  0EE0               	movlw	224
  2643  001BDE  6E05               	movwf	new_px_char@b,c
  2644  001BE0  0EC5               	movlw	197
  2645  001BE2  6E06               	movwf	new_px_char@b+1,c
  2646  001BE4  0E18               	movlw	24
  2647  001BE6  6E07               	movwf	new_px_char@b+2,c
  2648  001BE8  0E5F               	movlw	95
  2649  001BEA  6E08               	movwf	new_px_char@b+3,c
  2650  001BEC  EC1D  F01A         	call	_new_px_char	;wreg free
  2651  001BF0  CFE9 FFD9          	movff	fsr0l,fsr2l
  2652  001BF4  CFEA FFDA          	movff	fsr0h,fsr2h
  2653  001BF8  EE00  F011         	lfsr	0,?_px_map
  2654  001BFC  0E07               	movlw	7
  2655  001BFE                     u2111:
  2656  001BFE  CFDB FFEB          	movff	plusw2,plusw0
  2657  001C02  06E8               	decf	wreg,f,c
  2658  001C04  E2FC               	bc	u2111
  2659  001C06  0012               	return	
  2660  001C08  0E8C               	movlw	140
  2661  001C0A  6E01               	movwf	new_px_char@a,c
  2662  001C0C  0ED5               	movlw	213
  2663  001C0E  6E02               	movwf	new_px_char@a+1,c
  2664  001C10  0E41               	movlw	65
  2665  001C12  6E03               	movwf	new_px_char@a+2,c
  2666  001C14  0E00               	movlw	0
  2667  001C16  6E04               	movwf	new_px_char@a+3,c
  2668  001C18  0EC0               	movlw	192
  2669  001C1A  6E05               	movwf	new_px_char@b,c
  2670  001C1C  0EC5               	movlw	197
  2671  001C1E  6E06               	movwf	new_px_char@b+1,c
  2672  001C20  0E18               	movlw	24
  2673  001C22  6E07               	movwf	new_px_char@b+2,c
  2674  001C24  0E63               	movlw	99
  2675  001C26  6E08               	movwf	new_px_char@b+3,c
  2676  001C28  EC1D  F01A         	call	_new_px_char	;wreg free
  2677  001C2C  CFE9 FFD9          	movff	fsr0l,fsr2l
  2678  001C30  CFEA FFDA          	movff	fsr0h,fsr2h
  2679  001C34  EE00  F011         	lfsr	0,?_px_map
  2680  001C38  0E07               	movlw	7
  2681  001C3A                     u2121:
  2682  001C3A  CFDB FFEB          	movff	plusw2,plusw0
  2683  001C3E  06E8               	decf	wreg,f,c
  2684  001C40  E2FC               	bc	u2121
  2685  001C42  0012               	return	
  2686  001C44  0E49               	movlw	73
  2687  001C46  6E01               	movwf	new_px_char@a,c
  2688  001C48  0E31               	movlw	49
  2689  001C4A  6E02               	movwf	new_px_char@a+1,c
  2690  001C4C  0E02               	movlw	2
  2691  001C4E  6E03               	movwf	new_px_char@a+2,c
  2692  001C50  0E00               	movlw	0
  2693  001C52  6E04               	movwf	new_px_char@a+3,c
  2694  001C54  0EE0               	movlw	224
  2695  001C56  6E05               	movwf	new_px_char@b,c
  2696  001C58  0EC5               	movlw	197
  2697  001C5A  6E06               	movwf	new_px_char@b+1,c
  2698  001C5C  0E18               	movlw	24
  2699  001C5E  6E07               	movwf	new_px_char@b+2,c
  2700  001C60  0E5F               	movlw	95
  2701  001C62  6E08               	movwf	new_px_char@b+3,c
  2702  001C64  EC1D  F01A         	call	_new_px_char	;wreg free
  2703  001C68  CFE9 FFD9          	movff	fsr0l,fsr2l
  2704  001C6C  CFEA FFDA          	movff	fsr0h,fsr2h
  2705  001C70  EE00  F011         	lfsr	0,?_px_map
  2706  001C74  0E07               	movlw	7
  2707  001C76                     u2131:
  2708  001C76  CFDB FFEB          	movff	plusw2,plusw0
  2709  001C7A  06E8               	decf	wreg,f,c
  2710  001C7C  E2FC               	bc	u2131
  2711  001C7E  0012               	return	
  2712  001C80  0E84               	movlw	132
  2713  001C82  6E01               	movwf	new_px_char@a,c
  2714  001C84  0ED1               	movlw	209
  2715  001C86  6E02               	movwf	new_px_char@a+1,c
  2716  001C88  0E01               	movlw	1
  2717  001C8A  6E03               	movwf	new_px_char@a+2,c
  2718  001C8C  0E00               	movlw	0
  2719  001C8E  6E04               	movwf	new_px_char@a+3,c
  2720  001C90  0EC0               	movlw	192
  2721  001C92  6E05               	movwf	new_px_char@b,c
  2722  001C94  0EC5               	movlw	197
  2723  001C96  6E06               	movwf	new_px_char@b+1,c
  2724  001C98  0E10               	movlw	16
  2725  001C9A  6E07               	movwf	new_px_char@b+2,c
  2726  001C9C  0E1C               	movlw	28
  2727  001C9E  6E08               	movwf	new_px_char@b+3,c
  2728  001CA0  EC1D  F01A         	call	_new_px_char	;wreg free
  2729  001CA4  CFE9 FFD9          	movff	fsr0l,fsr2l
  2730  001CA8  CFEA FFDA          	movff	fsr0h,fsr2h
  2731  001CAC  EE00  F011         	lfsr	0,?_px_map
  2732  001CB0  0E07               	movlw	7
  2733  001CB2                     u2141:
  2734  001CB2  CFDB FFEB          	movff	plusw2,plusw0
  2735  001CB6  06E8               	decf	wreg,f,c
  2736  001CB8  E2FC               	bc	u2141
  2737  001CBA  0012               	return	
  2738  001CBC  0E21               	movlw	33
  2739  001CBE  6E01               	movwf	new_px_char@a,c
  2740  001CC0  0E84               	movlw	132
  2741  001CC2  6E02               	movwf	new_px_char@a+1,c
  2742  001CC4  0E00               	movlw	0
  2743  001CC6  6E03               	movwf	new_px_char@a+2,c
  2744  001CC8  0E00               	movlw	0
  2745  001CCA  6E04               	movwf	new_px_char@a+3,c
  2746  001CCC  0EE0               	movlw	224
  2747  001CCE  6E05               	movwf	new_px_char@b,c
  2748  001CD0  0E13               	movlw	19
  2749  001CD2  6E06               	movwf	new_px_char@b+1,c
  2750  001CD4  0E42               	movlw	66
  2751  001CD6  6E07               	movwf	new_px_char@b+2,c
  2752  001CD8  0E08               	movlw	8
  2753  001CDA  6E08               	movwf	new_px_char@b+3,c
  2754  001CDC  EC1D  F01A         	call	_new_px_char	;wreg free
  2755  001CE0  CFE9 FFD9          	movff	fsr0l,fsr2l
  2756  001CE4  CFEA FFDA          	movff	fsr0h,fsr2h
  2757  001CE8  EE00  F011         	lfsr	0,?_px_map
  2758  001CEC  0E07               	movlw	7
  2759  001CEE                     u2151:
  2760  001CEE  CFDB FFEB          	movff	plusw2,plusw0
  2761  001CF2  06E8               	decf	wreg,f,c
  2762  001CF4  E2FC               	bc	u2151
  2763  001CF6  0012               	return	
  2764  001CF8  0E8C               	movlw	140
  2765  001CFA  6E01               	movwf	new_px_char@a,c
  2766  001CFC  0ED1               	movlw	209
  2767  001CFE  6E02               	movwf	new_px_char@a+1,c
  2768  001D00  0E01               	movlw	1
  2769  001D02  6E03               	movwf	new_px_char@a+2,c
  2770  001D04  0E00               	movlw	0
  2771  001D06  6E04               	movwf	new_px_char@a+3,c
  2772  001D08  0E20               	movlw	32
  2773  001D0A  6E05               	movwf	new_px_char@b,c
  2774  001D0C  0EC6               	movlw	198
  2775  001D0E  6E06               	movwf	new_px_char@b+1,c
  2776  001D10  0E18               	movlw	24
  2777  001D12  6E07               	movwf	new_px_char@b+2,c
  2778  001D14  0E63               	movlw	99
  2779  001D16  6E08               	movwf	new_px_char@b+3,c
  2780  001D18  EC1D  F01A         	call	_new_px_char	;wreg free
  2781  001D1C  CFE9 FFD9          	movff	fsr0l,fsr2l
  2782  001D20  CFEA FFDA          	movff	fsr0h,fsr2h
  2783  001D24  EE00  F011         	lfsr	0,?_px_map
  2784  001D28  0E07               	movlw	7
  2785  001D2A                     u2161:
  2786  001D2A  CFDB FFEB          	movff	plusw2,plusw0
  2787  001D2E  06E8               	decf	wreg,f,c
  2788  001D30  E2FC               	bc	u2161
  2789  001D32  0012               	return	
  2790  001D34  0E52               	movlw	82
  2791  001D36  6E01               	movwf	new_px_char@a,c
  2792  001D38  0E84               	movlw	132
  2793  001D3A  6E02               	movwf	new_px_char@a+1,c
  2794  001D3C  0E00               	movlw	0
  2795  001D3E  6E03               	movwf	new_px_char@a+2,c
  2796  001D40  0E00               	movlw	0
  2797  001D42  6E04               	movwf	new_px_char@a+3,c
  2798  001D44  0E20               	movlw	32
  2799  001D46  6E05               	movwf	new_px_char@b,c
  2800  001D48  0EC6               	movlw	198
  2801  001D4A  6E06               	movwf	new_px_char@b+1,c
  2802  001D4C  0E18               	movlw	24
  2803  001D4E  6E07               	movwf	new_px_char@b+2,c
  2804  001D50  0EA3               	movlw	163
  2805  001D52  6E08               	movwf	new_px_char@b+3,c
  2806  001D54  EC1D  F01A         	call	_new_px_char	;wreg free
  2807  001D58  CFE9 FFD9          	movff	fsr0l,fsr2l
  2808  001D5C  CFEA FFDA          	movff	fsr0h,fsr2h
  2809  001D60  EE00  F011         	lfsr	0,?_px_map
  2810  001D64  0E07               	movlw	7
  2811  001D66                     u2171:
  2812  001D66  CFDB FFEB          	movff	plusw2,plusw0
  2813  001D6A  06E8               	decf	wreg,f,c
  2814  001D6C  E2FC               	bc	u2171
  2815  001D6E  0012               	return	
  2816  001D70  0EAD               	movlw	173
  2817  001D72  6E01               	movwf	new_px_char@a,c
  2818  001D74  0E55               	movlw	85
  2819  001D76  6E02               	movwf	new_px_char@a+1,c
  2820  001D78  0E01               	movlw	1
  2821  001D7A  6E03               	movwf	new_px_char@a+2,c
  2822  001D7C  0E00               	movlw	0
  2823  001D7E  6E04               	movwf	new_px_char@a+3,c
  2824  001D80  0E20               	movlw	32
  2825  001D82  6E05               	movwf	new_px_char@b,c
  2826  001D84  0EC6               	movlw	198
  2827  001D86  6E06               	movwf	new_px_char@b+1,c
  2828  001D88  0E18               	movlw	24
  2829  001D8A  6E07               	movwf	new_px_char@b+2,c
  2830  001D8C  0E6B               	movlw	107
  2831  001D8E  6E08               	movwf	new_px_char@b+3,c
  2832  001D90  EC1D  F01A         	call	_new_px_char	;wreg free
  2833  001D94  CFE9 FFD9          	movff	fsr0l,fsr2l
  2834  001D98  CFEA FFDA          	movff	fsr0h,fsr2h
  2835  001D9C  EE00  F011         	lfsr	0,?_px_map
  2836  001DA0  0E07               	movlw	7
  2837  001DA2                     u2181:
  2838  001DA2  CFDB FFEB          	movff	plusw2,plusw0
  2839  001DA6  06E8               	decf	wreg,f,c
  2840  001DA8  E2FC               	bc	u2181
  2841  001DAA  0012               	return	
  2842  001DAC  0E52               	movlw	82
  2843  001DAE  6E01               	movwf	new_px_char@a,c
  2844  001DB0  0E31               	movlw	49
  2845  001DB2  6E02               	movwf	new_px_char@a+1,c
  2846  001DB4  0E02               	movlw	2
  2847  001DB6  6E03               	movwf	new_px_char@a+2,c
  2848  001DB8  0E00               	movlw	0
  2849  001DBA  6E04               	movwf	new_px_char@a+3,c
  2850  001DBC  0E20               	movlw	32
  2851  001DBE  6E05               	movwf	new_px_char@b,c
  2852  001DC0  0E46               	movlw	70
  2853  001DC2  6E06               	movwf	new_px_char@b+1,c
  2854  001DC4  0EA5               	movlw	165
  2855  001DC6  6E07               	movwf	new_px_char@b+2,c
  2856  001DC8  0E88               	movlw	136
  2857  001DCA  6E08               	movwf	new_px_char@b+3,c
  2858  001DCC  EC1D  F01A         	call	_new_px_char	;wreg free
  2859  001DD0  CFE9 FFD9          	movff	fsr0l,fsr2l
  2860  001DD4  CFEA FFDA          	movff	fsr0h,fsr2h
  2861  001DD8  EE00  F011         	lfsr	0,?_px_map
  2862  001DDC  0E07               	movlw	7
  2863  001DDE                     u2191:
  2864  001DDE  CFDB FFEB          	movff	plusw2,plusw0
  2865  001DE2  06E8               	decf	wreg,f,c
  2866  001DE4  E2FC               	bc	u2191
  2867  001DE6  0012               	return	
  2868  001DE8  0E21               	movlw	33
  2869  001DEA  6E01               	movwf	new_px_char@a,c
  2870  001DEC  0E84               	movlw	132
  2871  001DEE  6E02               	movwf	new_px_char@a+1,c
  2872  001DF0  0E00               	movlw	0
  2873  001DF2  6E03               	movwf	new_px_char@a+2,c
  2874  001DF4  0E00               	movlw	0
  2875  001DF6  6E04               	movwf	new_px_char@a+3,c
  2876  001DF8  0E20               	movlw	32
  2877  001DFA  6E05               	movwf	new_px_char@b,c
  2878  001DFC  0E46               	movlw	70
  2879  001DFE  6E06               	movwf	new_px_char@b+1,c
  2880  001E00  0EA5               	movlw	165
  2881  001E02  6E07               	movwf	new_px_char@b+2,c
  2882  001E04  0E08               	movlw	8
  2883  001E06  6E08               	movwf	new_px_char@b+3,c
  2884  001E08  EC1D  F01A         	call	_new_px_char	;wreg free
  2885  001E0C  CFE9 FFD9          	movff	fsr0l,fsr2l
  2886  001E10  CFEA FFDA          	movff	fsr0h,fsr2h
  2887  001E14  EE00  F011         	lfsr	0,?_px_map
  2888  001E18  0E07               	movlw	7
  2889  001E1A                     u2201:
  2890  001E1A  CFDB FFEB          	movff	plusw2,plusw0
  2891  001E1E  06E8               	decf	wreg,f,c
  2892  001E20  E2FC               	bc	u2201
  2893  001E22  0012               	return	
  2894  001E24  0E10               	movlw	16
  2895  001E26  6E01               	movwf	new_px_char@a,c
  2896  001E28  0EE1               	movlw	225
  2897  001E2A  6E02               	movwf	new_px_char@a+1,c
  2898  001E2C  0E03               	movlw	3
  2899  001E2E  6E03               	movwf	new_px_char@a+2,c
  2900  001E30  0E00               	movlw	0
  2901  001E32  6E04               	movwf	new_px_char@a+3,c
  2902  001E34  0EE0               	movlw	224
  2903  001E36  6E05               	movwf	new_px_char@b,c
  2904  001E38  0E43               	movlw	67
  2905  001E3A  6E06               	movwf	new_px_char@b+1,c
  2906  001E3C  0E84               	movlw	132
  2907  001E3E  6E07               	movwf	new_px_char@b+2,c
  2908  001E40  0E88               	movlw	136
  2909  001E42  6E08               	movwf	new_px_char@b+3,c
  2910  001E44  EC1D  F01A         	call	_new_px_char	;wreg free
  2911  001E48  CFE9 FFD9          	movff	fsr0l,fsr2l
  2912  001E4C  CFEA FFDA          	movff	fsr0h,fsr2h
  2913  001E50  EE00  F011         	lfsr	0,?_px_map
  2914  001E54  0E07               	movlw	7
  2915  001E56                     u2211:
  2916  001E56  CFDB FFEB          	movff	plusw2,plusw0
  2917  001E5A  06E8               	decf	wreg,f,c
  2918  001E5C  E2FC               	bc	u2211
  2919  001E5E  0012               	return	
  2920  001E60  0E10               	movlw	16
  2921  001E62  6E01               	movwf	new_px_char@a,c
  2922  001E64  0E42               	movlw	66
  2923  001E66  6E02               	movwf	new_px_char@a+1,c
  2924  001E68  0E08               	movlw	8
  2925  001E6A  6E03               	movwf	new_px_char@a+2,c
  2926  001E6C  0E07               	movlw	7
  2927  001E6E  6E04               	movwf	new_px_char@a+3,c
  2928  001E70  0EC0               	movlw	192
  2929  001E72  6E05               	movwf	new_px_char@b,c
  2930  001E74  0E09               	movlw	9
  2931  001E76  6E06               	movwf	new_px_char@b+1,c
  2932  001E78  0E21               	movlw	33
  2933  001E7A  6E07               	movwf	new_px_char@b+2,c
  2934  001E7C  0E84               	movlw	132
  2935  001E7E  6E08               	movwf	new_px_char@b+3,c
  2936  001E80  EC1D  F01A         	call	_new_px_char	;wreg free
  2937  001E84  CFE9 FFD9          	movff	fsr0l,fsr2l
  2938  001E88  CFEA FFDA          	movff	fsr0h,fsr2h
  2939  001E8C  EE00  F011         	lfsr	0,?_px_map
  2940  001E90  0E07               	movlw	7
  2941  001E92                     u2221:
  2942  001E92  CFDB FFEB          	movff	plusw2,plusw0
  2943  001E96  06E8               	decf	wreg,f,c
  2944  001E98  E2FC               	bc	u2221
  2945  001E9A  0012               	return	
  2946  001E9C  0E41               	movlw	65
  2947  001E9E  6E01               	movwf	new_px_char@a,c
  2948  001EA0  0E08               	movlw	8
  2949  001EA2  6E02               	movwf	new_px_char@a+1,c
  2950  001EA4  0E42               	movlw	66
  2951  001EA6  6E03               	movwf	new_px_char@a+2,c
  2952  001EA8  0E00               	movlw	0
  2953  001EAA  6E04               	movwf	new_px_char@a+3,c
  2954  001EAC  0E00               	movlw	0
  2955  001EAE  6E05               	movwf	new_px_char@b,c
  2956  001EB0  0E84               	movlw	132
  2957  001EB2  6E06               	movwf	new_px_char@b+1,c
  2958  001EB4  0E20               	movlw	32
  2959  001EB6  6E07               	movwf	new_px_char@b+2,c
  2960  001EB8  0E04               	movlw	4
  2961  001EBA  6E08               	movwf	new_px_char@b+3,c
  2962  001EBC  EC1D  F01A         	call	_new_px_char	;wreg free
  2963  001EC0  CFE9 FFD9          	movff	fsr0l,fsr2l
  2964  001EC4  CFEA FFDA          	movff	fsr0h,fsr2h
  2965  001EC8  EE00  F011         	lfsr	0,?_px_map
  2966  001ECC  0E07               	movlw	7
  2967  001ECE                     u2231:
  2968  001ECE  CFDB FFEB          	movff	plusw2,plusw0
  2969  001ED2  06E8               	decf	wreg,f,c
  2970  001ED4  E2FC               	bc	u2231
  2971  001ED6  0012               	return	
  2972  001ED8  0E42               	movlw	66
  2973  001EDA  6E01               	movwf	new_px_char@a,c
  2974  001EDC  0E08               	movlw	8
  2975  001EDE  6E02               	movwf	new_px_char@a+1,c
  2976  001EE0  0E21               	movlw	33
  2977  001EE2  6E03               	movwf	new_px_char@a+2,c
  2978  001EE4  0E07               	movlw	7
  2979  001EE6  6E04               	movwf	new_px_char@a+3,c
  2980  001EE8  0EC0               	movlw	192
  2981  001EEA  6E05               	movwf	new_px_char@b,c
  2982  001EEC  0E21               	movlw	33
  2983  001EEE  6E06               	movwf	new_px_char@b+1,c
  2984  001EF0  0E84               	movlw	132
  2985  001EF2  6E07               	movwf	new_px_char@b+2,c
  2986  001EF4  0E10               	movlw	16
  2987  001EF6  6E08               	movwf	new_px_char@b+3,c
  2988  001EF8  EC1D  F01A         	call	_new_px_char	;wreg free
  2989  001EFC  CFE9 FFD9          	movff	fsr0l,fsr2l
  2990  001F00  CFEA FFDA          	movff	fsr0h,fsr2h
  2991  001F04  EE00  F011         	lfsr	0,?_px_map
  2992  001F08  0E07               	movlw	7
  2993  001F0A                     u2241:
  2994  001F0A  CFDB FFEB          	movff	plusw2,plusw0
  2995  001F0E  06E8               	decf	wreg,f,c
  2996  001F10  E2FC               	bc	u2241
  2997  001F12  0012               	return	
  2998  001F14  0E00               	movlw	0
  2999  001F16  6E01               	movwf	new_px_char@a,c
  3000  001F18  0E00               	movlw	0
  3001  001F1A  6E02               	movwf	new_px_char@a+1,c
  3002  001F1C  0E00               	movlw	0
  3003  001F1E  6E03               	movwf	new_px_char@a+2,c
  3004  001F20  0E00               	movlw	0
  3005  001F22  6E04               	movwf	new_px_char@a+3,c
  3006  001F24  0E00               	movlw	0
  3007  001F26  6E05               	movwf	new_px_char@b,c
  3008  001F28  0E10               	movlw	16
  3009  001F2A  6E06               	movwf	new_px_char@b+1,c
  3010  001F2C  0E15               	movlw	21
  3011  001F2E  6E07               	movwf	new_px_char@b+2,c
  3012  001F30  0E01               	movlw	1
  3013  001F32  6E08               	movwf	new_px_char@b+3,c
  3014  001F34  EC1D  F01A         	call	_new_px_char	;wreg free
  3015  001F38  CFE9 FFD9          	movff	fsr0l,fsr2l
  3016  001F3C  CFEA FFDA          	movff	fsr0h,fsr2h
  3017  001F40  EE00  F011         	lfsr	0,?_px_map
  3018  001F44  0E07               	movlw	7
  3019  001F46                     u2251:
  3020  001F46  CFDB FFEB          	movff	plusw2,plusw0
  3021  001F4A  06E8               	decf	wreg,f,c
  3022  001F4C  E2FC               	bc	u2251
  3023  001F4E  0012               	return	
  3024  001F50  0E00               	movlw	0
  3025  001F52  6E01               	movwf	new_px_char@a,c
  3026  001F54  0E00               	movlw	0
  3027  001F56  6E02               	movwf	new_px_char@a+1,c
  3028  001F58  0E80               	movlw	128
  3029  001F5A  6E03               	movwf	new_px_char@a+2,c
  3030  001F5C  0E0F               	movlw	15
  3031  001F5E  6E04               	movwf	new_px_char@a+3,c
  3032  001F60  0E00               	movlw	0
  3033  001F62  6E05               	movwf	new_px_char@b,c
  3034  001F64  0E00               	movlw	0
  3035  001F66  6E06               	movwf	new_px_char@b+1,c
  3036  001F68  0E00               	movlw	0
  3037  001F6A  6E07               	movwf	new_px_char@b+2,c
  3038  001F6C  0E00               	movlw	0
  3039  001F6E  6E08               	movwf	new_px_char@b+3,c
  3040  001F70  EC1D  F01A         	call	_new_px_char	;wreg free
  3041  001F74  CFE9 FFD9          	movff	fsr0l,fsr2l
  3042  001F78  CFEA FFDA          	movff	fsr0h,fsr2h
  3043  001F7C  EE00  F011         	lfsr	0,?_px_map
  3044  001F80  0E07               	movlw	7
  3045  001F82                     u2261:
  3046  001F82  CFDB FFEB          	movff	plusw2,plusw0
  3047  001F86  06E8               	decf	wreg,f,c
  3048  001F88  E2FC               	bc	u2261
  3049  001F8A  0012               	return	
  3050  001F8C  0E00               	movlw	0
  3051  001F8E  6E01               	movwf	new_px_char@a,c
  3052  001F90  0E00               	movlw	0
  3053  001F92  6E02               	movwf	new_px_char@a+1,c
  3054  001F94  0E00               	movlw	0
  3055  001F96  6E03               	movwf	new_px_char@a+2,c
  3056  001F98  0E00               	movlw	0
  3057  001F9A  6E04               	movwf	new_px_char@a+3,c
  3058  001F9C  0EC0               	movlw	192
  3059  001F9E  6E05               	movwf	new_px_char@b,c
  3060  001FA0  0E10               	movlw	16
  3061  001FA2  6E06               	movwf	new_px_char@b+1,c
  3062  001FA4  0E04               	movlw	4
  3063  001FA6  6E07               	movwf	new_px_char@b+2,c
  3064  001FA8  0E00               	movlw	0
  3065  001FAA  6E08               	movwf	new_px_char@b+3,c
  3066  001FAC  EC1D  F01A         	call	_new_px_char	;wreg free
  3067  001FB0  CFE9 FFD9          	movff	fsr0l,fsr2l
  3068  001FB4  CFEA FFDA          	movff	fsr0h,fsr2h
  3069  001FB8  EE00  F011         	lfsr	0,?_px_map
  3070  001FBC  0E07               	movlw	7
  3071  001FBE                     u2271:
  3072  001FBE  CFDB FFEB          	movff	plusw2,plusw0
  3073  001FC2  06E8               	decf	wreg,f,c
  3074  001FC4  E2FC               	bc	u2271
  3075  001FC6  0012               	return	
  3076  001FC8  0E8F               	movlw	143
  3077  001FCA  6E01               	movwf	new_px_char@a,c
  3078  001FCC  0ED9               	movlw	217
  3079  001FCE  6E02               	movwf	new_px_char@a+1,c
  3080  001FD0  0E02               	movlw	2
  3081  001FD2  6E03               	movwf	new_px_char@a+2,c
  3082  001FD4  0E00               	movlw	0
  3083  001FD6  6E04               	movwf	new_px_char@a+3,c
  3084  001FD8  0E00               	movlw	0
  3085  001FDA  6E05               	movwf	new_px_char@b,c
  3086  001FDC  0E00               	movlw	0
  3087  001FDE  6E06               	movwf	new_px_char@b+1,c
  3088  001FE0  0EE0               	movlw	224
  3089  001FE2  6E07               	movwf	new_px_char@b+2,c
  3090  001FE4  0EA0               	movlw	160
  3091  001FE6  6E08               	movwf	new_px_char@b+3,c
  3092  001FE8  EC1D  F01A         	call	_new_px_char	;wreg free
  3093  001FEC  CFE9 FFD9          	movff	fsr0l,fsr2l
  3094  001FF0  CFEA FFDA          	movff	fsr0h,fsr2h
  3095  001FF4  EE00  F011         	lfsr	0,?_px_map
  3096  001FF8  0E07               	movlw	7
  3097  001FFA                     u2281:
  3098  001FFA  CFDB FFEB          	movff	plusw2,plusw0
  3099  001FFE  06E8               	decf	wreg,f,c
  3100  002000  E2FC               	bc	u2281
  3101  002002  0012               	return	
  3102  002004  0E8C               	movlw	140
  3103  002006  6E01               	movwf	new_px_char@a,c
  3104  002008  0EF1               	movlw	241
  3105  00200A  6E02               	movwf	new_px_char@a+1,c
  3106  00200C  0E01               	movlw	1
  3107  00200E  6E03               	movwf	new_px_char@a+2,c
  3108  002010  0E00               	movlw	0
  3109  002012  6E04               	movwf	new_px_char@a+3,c
  3110  002014  0E20               	movlw	32
  3111  002016  6E05               	movwf	new_px_char@b,c
  3112  002018  0E84               	movlw	132
  3113  00201A  6E06               	movwf	new_px_char@b+1,c
  3114  00201C  0EF0               	movlw	240
  3115  00201E  6E07               	movwf	new_px_char@b+2,c
  3116  002020  0E62               	movlw	98
  3117  002022  6E08               	movwf	new_px_char@b+3,c
  3118  002024  EC1D  F01A         	call	_new_px_char	;wreg free
  3119  002028  CFE9 FFD9          	movff	fsr0l,fsr2l
  3120  00202C  CFEA FFDA          	movff	fsr0h,fsr2h
  3121  002030  EE00  F011         	lfsr	0,?_px_map
  3122  002034  0E07               	movlw	7
  3123  002036                     u2291:
  3124  002036  CFDB FFEB          	movff	plusw2,plusw0
  3125  00203A  06E8               	decf	wreg,f,c
  3126  00203C  E2FC               	bc	u2291
  3127  00203E  0012               	return	
  3128  002040  0E08               	movlw	8
  3129  002042  6E01               	movwf	new_px_char@a,c
  3130  002044  0ED1               	movlw	209
  3131  002046  6E02               	movwf	new_px_char@a+1,c
  3132  002048  0E01               	movlw	1
  3133  00204A  6E03               	movwf	new_px_char@a+2,c
  3134  00204C  0E00               	movlw	0
  3135  00204E  6E04               	movwf	new_px_char@a+3,c
  3136  002050  0E00               	movlw	0
  3137  002052  6E05               	movwf	new_px_char@b,c
  3138  002054  0E00               	movlw	0
  3139  002056  6E06               	movwf	new_px_char@b+1,c
  3140  002058  0EE0               	movlw	224
  3141  00205A  6E07               	movwf	new_px_char@b+2,c
  3142  00205C  0E62               	movlw	98
  3143  00205E  6E08               	movwf	new_px_char@b+3,c
  3144  002060  EC1D  F01A         	call	_new_px_char	;wreg free
  3145  002064  CFE9 FFD9          	movff	fsr0l,fsr2l
  3146  002068  CFEA FFDA          	movff	fsr0h,fsr2h
  3147  00206C  EE00  F011         	lfsr	0,?_px_map
  3148  002070  0E07               	movlw	7
  3149  002072                     u2301:
  3150  002072  CFDB FFEB          	movff	plusw2,plusw0
  3151  002076  06E8               	decf	wreg,f,c
  3152  002078  E2FC               	bc	u2301
  3153  00207A  0012               	return	
  3154  00207C  0E8C               	movlw	140
  3155  00207E  6E01               	movwf	new_px_char@a,c
  3156  002080  0ED1               	movlw	209
  3157  002082  6E02               	movwf	new_px_char@a+1,c
  3158  002084  0E03               	movlw	3
  3159  002086  6E03               	movwf	new_px_char@a+2,c
  3160  002088  0E00               	movlw	0
  3161  00208A  6E04               	movwf	new_px_char@a+3,c
  3162  00208C  0E00               	movlw	0
  3163  00208E  6E05               	movwf	new_px_char@b,c
  3164  002090  0E42               	movlw	66
  3165  002092  6E06               	movwf	new_px_char@b+1,c
  3166  002094  0EE8               	movlw	232
  3167  002096  6E07               	movwf	new_px_char@b+2,c
  3168  002098  0E63               	movlw	99
  3169  00209A  6E08               	movwf	new_px_char@b+3,c
  3170  00209C  EC1D  F01A         	call	_new_px_char	;wreg free
  3171  0020A0  CFE9 FFD9          	movff	fsr0l,fsr2l
  3172  0020A4  CFEA FFDA          	movff	fsr0h,fsr2h
  3173  0020A8  EE00  F011         	lfsr	0,?_px_map
  3174  0020AC  0E07               	movlw	7
  3175  0020AE                     u2311:
  3176  0020AE  CFDB FFEB          	movff	plusw2,plusw0
  3177  0020B2  06E8               	decf	wreg,f,c
  3178  0020B4  E2FC               	bc	u2311
  3179  0020B6  0012               	return	
  3180  0020B8  0E0F               	movlw	15
  3181  0020BA  6E01               	movwf	new_px_char@a,c
  3182  0020BC  0ED1               	movlw	209
  3183  0020BE  6E02               	movwf	new_px_char@a+1,c
  3184  0020C0  0E01               	movlw	1
  3185  0020C2  6E03               	movwf	new_px_char@a+2,c
  3186  0020C4  0E00               	movlw	0
  3187  0020C6  6E04               	movwf	new_px_char@a+3,c
  3188  0020C8  0E00               	movlw	0
  3189  0020CA  6E05               	movwf	new_px_char@b,c
  3190  0020CC  0E00               	movlw	0
  3191  0020CE  6E06               	movwf	new_px_char@b+1,c
  3192  0020D0  0EE0               	movlw	224
  3193  0020D2  6E07               	movwf	new_px_char@b+2,c
  3194  0020D4  0EE2               	movlw	226
  3195  0020D6  6E08               	movwf	new_px_char@b+3,c
  3196  0020D8  EC1D  F01A         	call	_new_px_char	;wreg free
  3197  0020DC  CFE9 FFD9          	movff	fsr0l,fsr2l
  3198  0020E0  CFEA FFDA          	movff	fsr0h,fsr2h
  3199  0020E4  EE00  F011         	lfsr	0,?_px_map
  3200  0020E8  0E07               	movlw	7
  3201  0020EA                     u2321:
  3202  0020EA  CFDB FFEB          	movff	plusw2,plusw0
  3203  0020EE  06E8               	decf	wreg,f,c
  3204  0020F0  E2FC               	bc	u2321
  3205  0020F2  0012               	return	
  3206  0020F4  0E10               	movlw	16
  3207  0020F6  6E01               	movwf	new_px_char@a,c
  3208  0020F8  0E42               	movlw	66
  3209  0020FA  6E02               	movwf	new_px_char@a+1,c
  3210  0020FC  0E00               	movlw	0
  3211  0020FE  6E03               	movwf	new_px_char@a+2,c
  3212  002100  0E00               	movlw	0
  3213  002102  6E04               	movwf	new_px_char@a+3,c
  3214  002104  0E80               	movlw	128
  3215  002106  6E05               	movwf	new_px_char@b,c
  3216  002108  0E49               	movlw	73
  3217  00210A  6E06               	movwf	new_px_char@b+1,c
  3218  00210C  0E21               	movlw	33
  3219  00210E  6E07               	movwf	new_px_char@b+2,c
  3220  002110  0E9E               	movlw	158
  3221  002112  6E08               	movwf	new_px_char@b+3,c
  3222  002114  EC1D  F01A         	call	_new_px_char	;wreg free
  3223  002118  CFE9 FFD9          	movff	fsr0l,fsr2l
  3224  00211C  CFEA FFDA          	movff	fsr0h,fsr2h
  3225  002120  EE00  F011         	lfsr	0,?_px_map
  3226  002124  0E07               	movlw	7
  3227  002126                     u2331:
  3228  002126  CFDB FFEB          	movff	plusw2,plusw0
  3229  00212A  06E8               	decf	wreg,f,c
  3230  00212C  E2FC               	bc	u2331
  3231  00212E  0012               	return	
  3232  002130  0E8C               	movlw	140
  3233  002132  6E01               	movwf	new_px_char@a,c
  3234  002134  0E1E               	movlw	30
  3235  002136  6E02               	movwf	new_px_char@a+1,c
  3236  002138  0E46               	movlw	70
  3237  00213A  6E03               	movwf	new_px_char@a+2,c
  3238  00213C  0E07               	movlw	7
  3239  00213E  6E04               	movwf	new_px_char@a+3,c
  3240  002140  0E00               	movlw	0
  3241  002142  6E05               	movwf	new_px_char@b,c
  3242  002144  0E00               	movlw	0
  3243  002146  6E06               	movwf	new_px_char@b+1,c
  3244  002148  0EE0               	movlw	224
  3245  00214A  6E07               	movwf	new_px_char@b+2,c
  3246  00214C  0E62               	movlw	98
  3247  00214E  6E08               	movwf	new_px_char@b+3,c
  3248  002150  EC1D  F01A         	call	_new_px_char	;wreg free
  3249  002154  CFE9 FFD9          	movff	fsr0l,fsr2l
  3250  002158  CFEA FFDA          	movff	fsr0h,fsr2h
  3251  00215C  EE00  F011         	lfsr	0,?_px_map
  3252  002160  0E07               	movlw	7
  3253  002162                     u2341:
  3254  002162  CFDB FFEB          	movff	plusw2,plusw0
  3255  002166  06E8               	decf	wreg,f,c
  3256  002168  E2FC               	bc	u2341
  3257  00216A  0012               	return	
  3258  00216C  0E8C               	movlw	140
  3259  00216E  6E01               	movwf	new_px_char@a,c
  3260  002170  0E31               	movlw	49
  3261  002172  6E02               	movwf	new_px_char@a+1,c
  3262  002174  0E02               	movlw	2
  3263  002176  6E03               	movwf	new_px_char@a+2,c
  3264  002178  0E00               	movlw	0
  3265  00217A  6E04               	movwf	new_px_char@a+3,c
  3266  00217C  0E20               	movlw	32
  3267  00217E  6E05               	movwf	new_px_char@b,c
  3268  002180  0E84               	movlw	132
  3269  002182  6E06               	movwf	new_px_char@b+1,c
  3270  002184  0ED0               	movlw	208
  3271  002186  6E07               	movwf	new_px_char@b+2,c
  3272  002188  0E66               	movlw	102
  3273  00218A  6E08               	movwf	new_px_char@b+3,c
  3274  00218C  EC1D  F01A         	call	_new_px_char	;wreg free
  3275  002190  CFE9 FFD9          	movff	fsr0l,fsr2l
  3276  002194  CFEA FFDA          	movff	fsr0h,fsr2h
  3277  002198  EE00  F011         	lfsr	0,?_px_map
  3278  00219C  0E07               	movlw	7
  3279  00219E                     u2351:
  3280  00219E  CFDB FFEB          	movff	plusw2,plusw0
  3281  0021A2  06E8               	decf	wreg,f,c
  3282  0021A4  E2FC               	bc	u2351
  3283  0021A6  0012               	return	
  3284  0021A8  0E21               	movlw	33
  3285  0021AA  6E01               	movwf	new_px_char@a,c
  3286  0021AC  0EC4               	movlw	196
  3287  0021AE  6E02               	movwf	new_px_char@a+1,c
  3288  0021B0  0E01               	movlw	1
  3289  0021B2  6E03               	movwf	new_px_char@a+2,c
  3290  0021B4  0E00               	movlw	0
  3291  0021B6  6E04               	movwf	new_px_char@a+3,c
  3292  0021B8  0E00               	movlw	0
  3293  0021BA  6E05               	movwf	new_px_char@b,c
  3294  0021BC  0E10               	movlw	16
  3295  0021BE  6E06               	movwf	new_px_char@b+1,c
  3296  0021C0  0E60               	movlw	96
  3297  0021C2  6E07               	movwf	new_px_char@b+2,c
  3298  0021C4  0E08               	movlw	8
  3299  0021C6  6E08               	movwf	new_px_char@b+3,c
  3300  0021C8  EC1D  F01A         	call	_new_px_char	;wreg free
  3301  0021CC  CFE9 FFD9          	movff	fsr0l,fsr2l
  3302  0021D0  CFEA FFDA          	movff	fsr0h,fsr2h
  3303  0021D4  EE00  F011         	lfsr	0,?_px_map
  3304  0021D8  0E07               	movlw	7
  3305  0021DA                     u2361:
  3306  0021DA  CFDB FFEB          	movff	plusw2,plusw0
  3307  0021DE  06E8               	decf	wreg,f,c
  3308  0021E0  E2FC               	bc	u2361
  3309  0021E2  0012               	return	
  3310  0021E4  0E42               	movlw	66
  3311  0021E6  6E01               	movwf	new_px_char@a,c
  3312  0021E8  0E28               	movlw	40
  3313  0021EA  6E02               	movwf	new_px_char@a+1,c
  3314  0021EC  0E25               	movlw	37
  3315  0021EE  6E03               	movwf	new_px_char@a+2,c
  3316  0021F0  0E03               	movlw	3
  3317  0021F2  6E04               	movwf	new_px_char@a+3,c
  3318  0021F4  0E00               	movlw	0
  3319  0021F6  6E05               	movwf	new_px_char@b,c
  3320  0021F8  0E01               	movlw	1
  3321  0021FA  6E06               	movwf	new_px_char@b+1,c
  3322  0021FC  0E86               	movlw	134
  3323  0021FE  6E07               	movwf	new_px_char@b+2,c
  3324  002200  0E10               	movlw	16
  3325  002202  6E08               	movwf	new_px_char@b+3,c
  3326  002204  EC1D  F01A         	call	_new_px_char	;wreg free
  3327  002208  CFE9 FFD9          	movff	fsr0l,fsr2l
  3328  00220C  CFEA FFDA          	movff	fsr0h,fsr2h
  3329  002210  EE00  F011         	lfsr	0,?_px_map
  3330  002214  0E07               	movlw	7
  3331  002216                     u2371:
  3332  002216  CFDB FFEB          	movff	plusw2,plusw0
  3333  00221A  06E8               	decf	wreg,f,c
  3334  00221C  E2FC               	bc	u2371
  3335  00221E  0012               	return	
  3336  002220  0E28               	movlw	40
  3337  002222  6E01               	movwf	new_px_char@a,c
  3338  002224  0E29               	movlw	41
  3339  002226  6E02               	movwf	new_px_char@a+1,c
  3340  002228  0E02               	movlw	2
  3341  00222A  6E03               	movwf	new_px_char@a+2,c
  3342  00222C  0E00               	movlw	0
  3343  00222E  6E04               	movwf	new_px_char@a+3,c
  3344  002230  0E20               	movlw	32
  3345  002232  6E05               	movwf	new_px_char@b,c
  3346  002234  0E84               	movlw	132
  3347  002236  6E06               	movwf	new_px_char@b+1,c
  3348  002238  0E90               	movlw	144
  3349  00223A  6E07               	movwf	new_px_char@b+2,c
  3350  00223C  0ECA               	movlw	202
  3351  00223E  6E08               	movwf	new_px_char@b+3,c
  3352  002240  EC1D  F01A         	call	_new_px_char	;wreg free
  3353  002244  CFE9 FFD9          	movff	fsr0l,fsr2l
  3354  002248  CFEA FFDA          	movff	fsr0h,fsr2h
  3355  00224C  EE00  F011         	lfsr	0,?_px_map
  3356  002250  0E07               	movlw	7
  3357  002252                     u2381:
  3358  002252  CFDB FFEB          	movff	plusw2,plusw0
  3359  002256  06E8               	decf	wreg,f,c
  3360  002258  E2FC               	bc	u2381
  3361  00225A  0012               	return	
  3362  00225C  0E21               	movlw	33
  3363  00225E  6E01               	movwf	new_px_char@a,c
  3364  002260  0EC4               	movlw	196
  3365  002262  6E02               	movwf	new_px_char@a+1,c
  3366  002264  0E01               	movlw	1
  3367  002266  6E03               	movwf	new_px_char@a+2,c
  3368  002268  0E00               	movlw	0
  3369  00226A  6E04               	movwf	new_px_char@a+3,c
  3370  00226C  0EC0               	movlw	192
  3371  00226E  6E05               	movwf	new_px_char@b,c
  3372  002270  0E10               	movlw	16
  3373  002272  6E06               	movwf	new_px_char@b+1,c
  3374  002274  0E42               	movlw	66
  3375  002276  6E07               	movwf	new_px_char@b+2,c
  3376  002278  0E08               	movlw	8
  3377  00227A  6E08               	movwf	new_px_char@b+3,c
  3378  00227C  EC1D  F01A         	call	_new_px_char	;wreg free
  3379  002280  CFE9 FFD9          	movff	fsr0l,fsr2l
  3380  002284  CFEA FFDA          	movff	fsr0h,fsr2h
  3381  002288  EE00  F011         	lfsr	0,?_px_map
  3382  00228C  0E07               	movlw	7
  3383  00228E                     u2391:
  3384  00228E  CFDB FFEB          	movff	plusw2,plusw0
  3385  002292  06E8               	decf	wreg,f,c
  3386  002294  E2FC               	bc	u2391
  3387  002296  0012               	return	
  3388  002298  0EAD               	movlw	173
  3389  00229A  6E01               	movwf	new_px_char@a,c
  3390  00229C  0E35               	movlw	53
  3391  00229E  6E02               	movwf	new_px_char@a+1,c
  3392  0022A0  0E02               	movlw	2
  3393  0022A2  6E03               	movwf	new_px_char@a+2,c
  3394  0022A4  0E00               	movlw	0
  3395  0022A6  6E04               	movwf	new_px_char@a+3,c
  3396  0022A8  0E00               	movlw	0
  3397  0022AA  6E05               	movwf	new_px_char@b,c
  3398  0022AC  0E00               	movlw	0
  3399  0022AE  6E06               	movwf	new_px_char@b+1,c
  3400  0022B0  0EB0               	movlw	176
  3401  0022B2  6E07               	movwf	new_px_char@b+2,c
  3402  0022B4  0E6A               	movlw	106
  3403  0022B6  6E08               	movwf	new_px_char@b+3,c
  3404  0022B8  EC1D  F01A         	call	_new_px_char	;wreg free
  3405  0022BC  CFE9 FFD9          	movff	fsr0l,fsr2l
  3406  0022C0  CFEA FFDA          	movff	fsr0h,fsr2h
  3407  0022C4  EE00  F011         	lfsr	0,?_px_map
  3408  0022C8  0E07               	movlw	7
  3409  0022CA                     u2401:
  3410  0022CA  CFDB FFEB          	movff	plusw2,plusw0
  3411  0022CE  06E8               	decf	wreg,f,c
  3412  0022D0  E2FC               	bc	u2401
  3413  0022D2  0012               	return	
  3414  0022D4  0E8C               	movlw	140
  3415  0022D6  6E01               	movwf	new_px_char@a,c
  3416  0022D8  0E31               	movlw	49
  3417  0022DA  6E02               	movwf	new_px_char@a+1,c
  3418  0022DC  0E02               	movlw	2
  3419  0022DE  6E03               	movwf	new_px_char@a+2,c
  3420  0022E0  0E00               	movlw	0
  3421  0022E2  6E04               	movwf	new_px_char@a+3,c
  3422  0022E4  0E00               	movlw	0
  3423  0022E6  6E05               	movwf	new_px_char@b,c
  3424  0022E8  0E00               	movlw	0
  3425  0022EA  6E06               	movwf	new_px_char@b+1,c
  3426  0022EC  0ED0               	movlw	208
  3427  0022EE  6E07               	movwf	new_px_char@b+2,c
  3428  0022F0  0E66               	movlw	102
  3429  0022F2  6E08               	movwf	new_px_char@b+3,c
  3430  0022F4  EC1D  F01A         	call	_new_px_char	;wreg free
  3431  0022F8  CFE9 FFD9          	movff	fsr0l,fsr2l
  3432  0022FC  CFEA FFDA          	movff	fsr0h,fsr2h
  3433  002300  EE00  F011         	lfsr	0,?_px_map
  3434  002304  0E07               	movlw	7
  3435  002306                     u2411:
  3436  002306  CFDB FFEB          	movff	plusw2,plusw0
  3437  00230A  06E8               	decf	wreg,f,c
  3438  00230C  E2FC               	bc	u2411
  3439  00230E  0012               	return	
  3440  002310  0E8C               	movlw	140
  3441  002312  6E01               	movwf	new_px_char@a,c
  3442  002314  0ED1               	movlw	209
  3443  002316  6E02               	movwf	new_px_char@a+1,c
  3444  002318  0E01               	movlw	1
  3445  00231A  6E03               	movwf	new_px_char@a+2,c
  3446  00231C  0E00               	movlw	0
  3447  00231E  6E04               	movwf	new_px_char@a+3,c
  3448  002320  0E00               	movlw	0
  3449  002322  6E05               	movwf	new_px_char@b,c
  3450  002324  0E00               	movlw	0
  3451  002326  6E06               	movwf	new_px_char@b+1,c
  3452  002328  0EE0               	movlw	224
  3453  00232A  6E07               	movwf	new_px_char@b+2,c
  3454  00232C  0E62               	movlw	98
  3455  00232E  6E08               	movwf	new_px_char@b+3,c
  3456  002330  EC1D  F01A         	call	_new_px_char	;wreg free
  3457  002334  CFE9 FFD9          	movff	fsr0l,fsr2l
  3458  002338  CFEA FFDA          	movff	fsr0h,fsr2h
  3459  00233C  EE00  F011         	lfsr	0,?_px_map
  3460  002340  0E07               	movlw	7
  3461  002342                     u2421:
  3462  002342  CFDB FFEB          	movff	plusw2,plusw0
  3463  002346  06E8               	decf	wreg,f,c
  3464  002348  E2FC               	bc	u2421
  3465  00234A  0012               	return	
  3466  00234C  0E84               	movlw	132
  3467  00234E  6E01               	movwf	new_px_char@a,c
  3468  002350  0E2F               	movlw	47
  3469  002352  6E02               	movwf	new_px_char@a+1,c
  3470  002354  0E84               	movlw	132
  3471  002356  6E03               	movwf	new_px_char@a+2,c
  3472  002358  0E00               	movlw	0
  3473  00235A  6E04               	movwf	new_px_char@a+3,c
  3474  00235C  0E00               	movlw	0
  3475  00235E  6E05               	movwf	new_px_char@b,c
  3476  002360  0E00               	movlw	0
  3477  002362  6E06               	movwf	new_px_char@b+1,c
  3478  002364  0EF0               	movlw	240
  3479  002366  6E07               	movwf	new_px_char@b+2,c
  3480  002368  0E20               	movlw	32
  3481  00236A  6E08               	movwf	new_px_char@b+3,c
  3482  00236C  EC1D  F01A         	call	_new_px_char	;wreg free
  3483  002370  CFE9 FFD9          	movff	fsr0l,fsr2l
  3484  002374  CFEA FFDA          	movff	fsr0h,fsr2h
  3485  002378  EE00  F011         	lfsr	0,?_px_map
  3486  00237C  0E07               	movlw	7
  3487  00237E                     u2431:
  3488  00237E  CFDB FFEB          	movff	plusw2,plusw0
  3489  002382  06E8               	decf	wreg,f,c
  3490  002384  E2FC               	bc	u2431
  3491  002386  0012               	return	
  3492  002388  0E8C               	movlw	140
  3493  00238A  6E01               	movwf	new_px_char@a,c
  3494  00238C  0E1E               	movlw	30
  3495  00238E  6E02               	movwf	new_px_char@a+1,c
  3496  002390  0E42               	movlw	66
  3497  002392  6E03               	movwf	new_px_char@a+2,c
  3498  002394  0E08               	movlw	8
  3499  002396  6E04               	movwf	new_px_char@a+3,c
  3500  002398  0E00               	movlw	0
  3501  00239A  6E05               	movwf	new_px_char@b,c
  3502  00239C  0E00               	movlw	0
  3503  00239E  6E06               	movwf	new_px_char@b+1,c
  3504  0023A0  0EE0               	movlw	224
  3505  0023A2  6E07               	movwf	new_px_char@b+2,c
  3506  0023A4  0E63               	movlw	99
  3507  0023A6  6E08               	movwf	new_px_char@b+3,c
  3508  0023A8  EC1D  F01A         	call	_new_px_char	;wreg free
  3509  0023AC  CFE9 FFD9          	movff	fsr0l,fsr2l
  3510  0023B0  CFEA FFDA          	movff	fsr0h,fsr2h
  3511  0023B4  EE00  F011         	lfsr	0,?_px_map
  3512  0023B8  0E07               	movlw	7
  3513  0023BA                     u2441:
  3514  0023BA  CFDB FFEB          	movff	plusw2,plusw0
  3515  0023BE  06E8               	decf	wreg,f,c
  3516  0023C0  E2FC               	bc	u2441
  3517  0023C2  0012               	return	
  3518  0023C4  0E08               	movlw	8
  3519  0023C6  6E01               	movwf	new_px_char@a,c
  3520  0023C8  0E21               	movlw	33
  3521  0023CA  6E02               	movwf	new_px_char@a+1,c
  3522  0023CC  0E00               	movlw	0
  3523  0023CE  6E03               	movwf	new_px_char@a+2,c
  3524  0023D0  0E00               	movlw	0
  3525  0023D2  6E04               	movwf	new_px_char@a+3,c
  3526  0023D4  0E00               	movlw	0
  3527  0023D6  6E05               	movwf	new_px_char@b,c
  3528  0023D8  0E00               	movlw	0
  3529  0023DA  6E06               	movwf	new_px_char@b+1,c
  3530  0023DC  0ED0               	movlw	208
  3531  0023DE  6E07               	movwf	new_px_char@b+2,c
  3532  0023E0  0E66               	movlw	102
  3533  0023E2  6E08               	movwf	new_px_char@b+3,c
  3534  0023E4  EC1D  F01A         	call	_new_px_char	;wreg free
  3535  0023E8  CFE9 FFD9          	movff	fsr0l,fsr2l
  3536  0023EC  CFEA FFDA          	movff	fsr0h,fsr2h
  3537  0023F0  EE00  F011         	lfsr	0,?_px_map
  3538  0023F4  0E07               	movlw	7
  3539  0023F6                     u2451:
  3540  0023F6  CFDB FFEB          	movff	plusw2,plusw0
  3541  0023FA  06E8               	decf	wreg,f,c
  3542  0023FC  E2FC               	bc	u2451
  3543  0023FE  0012               	return	
  3544  002400  0E41               	movlw	65
  3545  002402  6E01               	movwf	new_px_char@a,c
  3546  002404  0ED1               	movlw	209
  3547  002406  6E02               	movwf	new_px_char@a+1,c
  3548  002408  0E01               	movlw	1
  3549  00240A  6E03               	movwf	new_px_char@a+2,c
  3550  00240C  0E00               	movlw	0
  3551  00240E  6E04               	movwf	new_px_char@a+3,c
  3552  002410  0E00               	movlw	0
  3553  002412  6E05               	movwf	new_px_char@b,c
  3554  002414  0E00               	movlw	0
  3555  002416  6E06               	movwf	new_px_char@b+1,c
  3556  002418  0EE0               	movlw	224
  3557  00241A  6E07               	movwf	new_px_char@b+2,c
  3558  00241C  0EA2               	movlw	162
  3559  00241E  6E08               	movwf	new_px_char@b+3,c
  3560  002420  EC1D  F01A         	call	_new_px_char	;wreg free
  3561  002424  CFE9 FFD9          	movff	fsr0l,fsr2l
  3562  002428  CFEA FFDA          	movff	fsr0h,fsr2h
  3563  00242C  EE00  F011         	lfsr	0,?_px_map
  3564  002430  0E07               	movlw	7
  3565  002432                     u2461:
  3566  002432  CFDB FFEB          	movff	plusw2,plusw0
  3567  002436  06E8               	decf	wreg,f,c
  3568  002438  E2FC               	bc	u2461
  3569  00243A  0012               	return	
  3570  00243C  0E10               	movlw	16
  3571  00243E  6E01               	movwf	new_px_char@a,c
  3572  002440  0E92               	movlw	146
  3573  002442  6E02               	movwf	new_px_char@a+1,c
  3574  002444  0E01               	movlw	1
  3575  002446  6E03               	movwf	new_px_char@a+2,c
  3576  002448  0E00               	movlw	0
  3577  00244A  6E04               	movwf	new_px_char@a+3,c
  3578  00244C  0E00               	movlw	0
  3579  00244E  6E05               	movwf	new_px_char@b,c
  3580  002450  0E08               	movlw	8
  3581  002452  6E06               	movwf	new_px_char@b+1,c
  3582  002454  0EF1               	movlw	241
  3583  002456  6E07               	movwf	new_px_char@b+2,c
  3584  002458  0E84               	movlw	132
  3585  00245A  6E08               	movwf	new_px_char@b+3,c
  3586  00245C  EC1D  F01A         	call	_new_px_char	;wreg free
  3587  002460  CFE9 FFD9          	movff	fsr0l,fsr2l
  3588  002464  CFEA FFDA          	movff	fsr0h,fsr2h
  3589  002468  EE00  F011         	lfsr	0,?_px_map
  3590  00246C  0E07               	movlw	7
  3591  00246E                     u2471:
  3592  00246E  CFDB FFEB          	movff	plusw2,plusw0
  3593  002472  06E8               	decf	wreg,f,c
  3594  002474  E2FC               	bc	u2471
  3595  002476  0012               	return	
  3596  002478  0E8C               	movlw	140
  3597  00247A  6E01               	movwf	new_px_char@a,c
  3598  00247C  0ED9               	movlw	217
  3599  00247E  6E02               	movwf	new_px_char@a+1,c
  3600  002480  0E02               	movlw	2
  3601  002482  6E03               	movwf	new_px_char@a+2,c
  3602  002484  0E00               	movlw	0
  3603  002486  6E04               	movwf	new_px_char@a+3,c
  3604  002488  0E00               	movlw	0
  3605  00248A  6E05               	movwf	new_px_char@b,c
  3606  00248C  0E00               	movlw	0
  3607  00248E  6E06               	movwf	new_px_char@b+1,c
  3608  002490  0E10               	movlw	16
  3609  002492  6E07               	movwf	new_px_char@b+2,c
  3610  002494  0E63               	movlw	99
  3611  002496  6E08               	movwf	new_px_char@b+3,c
  3612  002498  EC1D  F01A         	call	_new_px_char	;wreg free
  3613  00249C  CFE9 FFD9          	movff	fsr0l,fsr2l
  3614  0024A0  CFEA FFDA          	movff	fsr0h,fsr2h
  3615  0024A4  EE00  F011         	lfsr	0,?_px_map
  3616  0024A8  0E07               	movlw	7
  3617  0024AA                     u2481:
  3618  0024AA  CFDB FFEB          	movff	plusw2,plusw0
  3619  0024AE  06E8               	decf	wreg,f,c
  3620  0024B0  E2FC               	bc	u2481
  3621  0024B2  0012               	return	
  3622  0024B4  0E54               	movlw	84
  3623  0024B6  6E01               	movwf	new_px_char@a,c
  3624  0024B8  0E8A               	movlw	138
  3625  0024BA  6E02               	movwf	new_px_char@a+1,c
  3626  0024BC  0E00               	movlw	0
  3627  0024BE  6E03               	movwf	new_px_char@a+2,c
  3628  0024C0  0E00               	movlw	0
  3629  0024C2  6E04               	movwf	new_px_char@a+3,c
  3630  0024C4  0E00               	movlw	0
  3631  0024C6  6E05               	movwf	new_px_char@b,c
  3632  0024C8  0E00               	movlw	0
  3633  0024CA  6E06               	movwf	new_px_char@b+1,c
  3634  0024CC  0E10               	movlw	16
  3635  0024CE  6E07               	movwf	new_px_char@b+2,c
  3636  0024D0  0E63               	movlw	99
  3637  0024D2  6E08               	movwf	new_px_char@b+3,c
  3638  0024D4  EC1D  F01A         	call	_new_px_char	;wreg free
  3639  0024D8  CFE9 FFD9          	movff	fsr0l,fsr2l
  3640  0024DC  CFEA FFDA          	movff	fsr0h,fsr2h
  3641  0024E0  EE00  F011         	lfsr	0,?_px_map
  3642  0024E4  0E07               	movlw	7
  3643  0024E6                     u2491:
  3644  0024E6  CFDB FFEB          	movff	plusw2,plusw0
  3645  0024EA  06E8               	decf	wreg,f,c
  3646  0024EC  E2FC               	bc	u2491
  3647  0024EE  0012               	return	
  3648  0024F0  0EAD               	movlw	173
  3649  0024F2  6E01               	movwf	new_px_char@a,c
  3650  0024F4  0E55               	movlw	85
  3651  0024F6  6E02               	movwf	new_px_char@a+1,c
  3652  0024F8  0E01               	movlw	1
  3653  0024FA  6E03               	movwf	new_px_char@a+2,c
  3654  0024FC  0E00               	movlw	0
  3655  0024FE  6E04               	movwf	new_px_char@a+3,c
  3656  002500  0E00               	movlw	0
  3657  002502  6E05               	movwf	new_px_char@b,c
  3658  002504  0E00               	movlw	0
  3659  002506  6E06               	movwf	new_px_char@b+1,c
  3660  002508  0E10               	movlw	16
  3661  00250A  6E07               	movwf	new_px_char@b+2,c
  3662  00250C  0E63               	movlw	99
  3663  00250E  6E08               	movwf	new_px_char@b+3,c
  3664  002510  EC1D  F01A         	call	_new_px_char	;wreg free
  3665  002514  CFE9 FFD9          	movff	fsr0l,fsr2l
  3666  002518  CFEA FFDA          	movff	fsr0h,fsr2h
  3667  00251C  EE00  F011         	lfsr	0,?_px_map
  3668  002520  0E07               	movlw	7
  3669  002522                     u2501:
  3670  002522  CFDB FFEB          	movff	plusw2,plusw0
  3671  002526  06E8               	decf	wreg,f,c
  3672  002528  E2FC               	bc	u2501
  3673  00252A  0012               	return	
  3674  00252C  0E21               	movlw	33
  3675  00252E  6E01               	movwf	new_px_char@a,c
  3676  002530  0E2A               	movlw	42
  3677  002532  6E02               	movwf	new_px_char@a+1,c
  3678  002534  0E02               	movlw	2
  3679  002536  6E03               	movwf	new_px_char@a+2,c
  3680  002538  0E00               	movlw	0
  3681  00253A  6E04               	movwf	new_px_char@a+3,c
  3682  00253C  0E00               	movlw	0
  3683  00253E  6E05               	movwf	new_px_char@b,c
  3684  002540  0E00               	movlw	0
  3685  002542  6E06               	movwf	new_px_char@b+1,c
  3686  002544  0E10               	movlw	16
  3687  002546  6E07               	movwf	new_px_char@b+2,c
  3688  002548  0E15               	movlw	21
  3689  00254A  6E08               	movwf	new_px_char@b+3,c
  3690  00254C  EC1D  F01A         	call	_new_px_char	;wreg free
  3691  002550  CFE9 FFD9          	movff	fsr0l,fsr2l
  3692  002554  CFEA FFDA          	movff	fsr0h,fsr2h
  3693  002558  EE00  F011         	lfsr	0,?_px_map
  3694  00255C  0E07               	movlw	7
  3695  00255E                     u2511:
  3696  00255E  CFDB FFEB          	movff	plusw2,plusw0
  3697  002562  06E8               	decf	wreg,f,c
  3698  002564  E2FC               	bc	u2511
  3699  002566  0012               	return	
  3700  002568  0ECC               	movlw	204
  3701  00256A  6E01               	movwf	new_px_char@a,c
  3702  00256C  0E16               	movlw	22
  3703  00256E  6E02               	movwf	new_px_char@a+1,c
  3704  002570  0E46               	movlw	70
  3705  002572  6E03               	movwf	new_px_char@a+2,c
  3706  002574  0E07               	movlw	7
  3707  002576  6E04               	movwf	new_px_char@a+3,c
  3708  002578  0E00               	movlw	0
  3709  00257A  6E05               	movwf	new_px_char@b,c
  3710  00257C  0E00               	movlw	0
  3711  00257E  6E06               	movwf	new_px_char@b+1,c
  3712  002580  0E10               	movlw	16
  3713  002582  6E07               	movwf	new_px_char@b+2,c
  3714  002584  0E63               	movlw	99
  3715  002586  6E08               	movwf	new_px_char@b+3,c
  3716  002588  EC1D  F01A         	call	_new_px_char	;wreg free
  3717  00258C  CFE9 FFD9          	movff	fsr0l,fsr2l
  3718  002590  CFEA FFDA          	movff	fsr0h,fsr2h
  3719  002594  EE00  F011         	lfsr	0,?_px_map
  3720  002598  0E07               	movlw	7
  3721  00259A                     u2521:
  3722  00259A  CFDB FFEB          	movff	plusw2,plusw0
  3723  00259E  06E8               	decf	wreg,f,c
  3724  0025A0  E2FC               	bc	u2521
  3725  0025A2  0012               	return	
  3726  0025A4  0E11               	movlw	17
  3727  0025A6  6E01               	movwf	new_px_char@a,c
  3728  0025A8  0EE1               	movlw	225
  3729  0025AA  6E02               	movwf	new_px_char@a+1,c
  3730  0025AC  0E03               	movlw	3
  3731  0025AE  6E03               	movwf	new_px_char@a+2,c
  3732  0025B0  0E00               	movlw	0
  3733  0025B2  6E04               	movwf	new_px_char@a+3,c
  3734  0025B4  0E00               	movlw	0
  3735  0025B6  6E05               	movwf	new_px_char@b,c
  3736  0025B8  0E00               	movlw	0
  3737  0025BA  6E06               	movwf	new_px_char@b+1,c
  3738  0025BC  0EF0               	movlw	240
  3739  0025BE  6E07               	movwf	new_px_char@b+2,c
  3740  0025C0  0E11               	movlw	17
  3741  0025C2  6E08               	movwf	new_px_char@b+3,c
  3742  0025C4  EC1D  F01A         	call	_new_px_char	;wreg free
  3743  0025C8  CFE9 FFD9          	movff	fsr0l,fsr2l
  3744  0025CC  CFEA FFDA          	movff	fsr0h,fsr2h
  3745  0025D0  EE00  F011         	lfsr	0,?_px_map
  3746  0025D4  0E07               	movlw	7
  3747  0025D6                     u2531:
  3748  0025D6  CFDB FFEB          	movff	plusw2,plusw0
  3749  0025DA  06E8               	decf	wreg,f,c
  3750  0025DC  E2FC               	bc	u2531
  3751  0025DE  0012               	return	
  3752  0025E0  0E20               	movlw	32
  3753  0025E2  6E01               	movwf	new_px_char@a,c
  3754  0025E4  0E84               	movlw	132
  3755  0025E6  6E02               	movwf	new_px_char@a+1,c
  3756  0025E8  0E10               	movlw	16
  3757  0025EA  6E03               	movwf	new_px_char@a+2,c
  3758  0025EC  0E0C               	movlw	12
  3759  0025EE  6E04               	movwf	new_px_char@a+3,c
  3760  0025F0  0E00               	movlw	0
  3761  0025F2  6E05               	movwf	new_px_char@b,c
  3762  0025F4  0E13               	movlw	19
  3763  0025F6  6E06               	movwf	new_px_char@b+1,c
  3764  0025F8  0E42               	movlw	66
  3765  0025FA  6E07               	movwf	new_px_char@b+2,c
  3766  0025FC  0EC8               	movlw	200
  3767  0025FE  6E08               	movwf	new_px_char@b+3,c
  3768  002600  EC1D  F01A         	call	_new_px_char	;wreg free
  3769  002604  CFE9 FFD9          	movff	fsr0l,fsr2l
  3770  002608  CFEA FFDA          	movff	fsr0h,fsr2h
  3771  00260C  EE00  F011         	lfsr	0,?_px_map
  3772  002610  0E07               	movlw	7
  3773  002612                     u2541:
  3774  002612  CFDB FFEB          	movff	plusw2,plusw0
  3775  002616  06E8               	decf	wreg,f,c
  3776  002618  E2FC               	bc	u2541
  3777  00261A  0012               	return	
  3778  00261C  0E21               	movlw	33
  3779  00261E  6E01               	movwf	new_px_char@a,c
  3780  002620  0E84               	movlw	132
  3781  002622  6E02               	movwf	new_px_char@a+1,c
  3782  002624  0E10               	movlw	16
  3783  002626  6E03               	movwf	new_px_char@a+2,c
  3784  002628  0E00               	movlw	0
  3785  00262A  6E04               	movwf	new_px_char@a+3,c
  3786  00262C  0E00               	movlw	0
  3787  00262E  6E05               	movwf	new_px_char@b,c
  3788  002630  0E10               	movlw	16
  3789  002632  6E06               	movwf	new_px_char@b+1,c
  3790  002634  0E42               	movlw	66
  3791  002636  6E07               	movwf	new_px_char@b+2,c
  3792  002638  0E08               	movlw	8
  3793  00263A  6E08               	movwf	new_px_char@b+3,c
  3794  00263C  EC1D  F01A         	call	_new_px_char	;wreg free
  3795  002640  CFE9 FFD9          	movff	fsr0l,fsr2l
  3796  002644  CFEA FFDA          	movff	fsr0h,fsr2h
  3797  002648  EE00  F011         	lfsr	0,?_px_map
  3798  00264C  0E07               	movlw	7
  3799  00264E                     u2551:
  3800  00264E  CFDB FFEB          	movff	plusw2,plusw0
  3801  002652  06E8               	decf	wreg,f,c
  3802  002654  E2FC               	bc	u2551
  3803  002656  0012               	return	
  3804  002658  0E26               	movlw	38
  3805  00265A  6E01               	movwf	new_px_char@a,c
  3806  00265C  0E84               	movlw	132
  3807  00265E  6E02               	movwf	new_px_char@a+1,c
  3808  002660  0E90               	movlw	144
  3809  002662  6E03               	movwf	new_px_char@a+2,c
  3810  002664  0E01               	movlw	1
  3811  002666  6E04               	movwf	new_px_char@a+3,c
  3812  002668  0E60               	movlw	96
  3813  00266A  6E05               	movwf	new_px_char@b,c
  3814  00266C  0E10               	movlw	16
  3815  00266E  6E06               	movwf	new_px_char@b+1,c
  3816  002670  0E42               	movlw	66
  3817  002672  6E07               	movwf	new_px_char@b+2,c
  3818  002674  0E08               	movlw	8
  3819  002676  6E08               	movwf	new_px_char@b+3,c
  3820  002678  EC1D  F01A         	call	_new_px_char	;wreg free
  3821  00267C  CFE9 FFD9          	movff	fsr0l,fsr2l
  3822  002680  CFEA FFDA          	movff	fsr0h,fsr2h
  3823  002684  EE00  F011         	lfsr	0,?_px_map
  3824  002688  0E07               	movlw	7
  3825  00268A                     u2561:
  3826  00268A  CFDB FFEB          	movff	plusw2,plusw0
  3827  00268E  06E8               	decf	wreg,f,c
  3828  002690  E2FC               	bc	u2561
  3829  002692  0012               	return	
  3830  002694  0E00               	movlw	0
  3831  002696  6E01               	movwf	new_px_char@a,c
  3832  002698  0E00               	movlw	0
  3833  00269A  6E02               	movwf	new_px_char@a+1,c
  3834  00269C  0E00               	movlw	0
  3835  00269E  6E03               	movwf	new_px_char@a+2,c
  3836  0026A0  0E00               	movlw	0
  3837  0026A2  6E04               	movwf	new_px_char@a+3,c
  3838  0026A4  0E00               	movlw	0
  3839  0026A6  6E05               	movwf	new_px_char@b,c
  3840  0026A8  0EC8               	movlw	200
  3841  0026AA  6E06               	movwf	new_px_char@b+1,c
  3842  0026AC  0E9A               	movlw	154
  3843  0026AE  6E07               	movwf	new_px_char@b+2,c
  3844  0026B0  0E00               	movlw	0
  3845  0026B2  6E08               	movwf	new_px_char@b+3,c
  3846  0026B4  EC1D  F01A         	call	_new_px_char	;wreg free
  3847  0026B8  CFE9 FFD9          	movff	fsr0l,fsr2l
  3848  0026BC  CFEA FFDA          	movff	fsr0h,fsr2h
  3849  0026C0  EE00  F011         	lfsr	0,?_px_map
  3850  0026C4  0E07               	movlw	7
  3851  0026C6                     u2571:
  3852  0026C6  CFDB FFEB          	movff	plusw2,plusw0
  3853  0026CA  06E8               	decf	wreg,f,c
  3854  0026CC  E2FC               	bc	u2571
  3855  0026CE  0012               	return	
  3856  0026D0  0E00               	movlw	0
  3857  0026D2  6E01               	movwf	new_px_char@a,c
  3858  0026D4  0E00               	movlw	0
  3859  0026D6  6E02               	movwf	new_px_char@a+1,c
  3860  0026D8  0E00               	movlw	0
  3861  0026DA  6E03               	movwf	new_px_char@a+2,c
  3862  0026DC  0E00               	movlw	0
  3863  0026DE  6E04               	movwf	new_px_char@a+3,c
  3864  0026E0  0E00               	movlw	0
  3865  0026E2  6E05               	movwf	new_px_char@b,c
  3866  0026E4  0E00               	movlw	0
  3867  0026E6  6E06               	movwf	new_px_char@b+1,c
  3868  0026E8  0E00               	movlw	0
  3869  0026EA  6E07               	movwf	new_px_char@b+2,c
  3870  0026EC  0E00               	movlw	0
  3871  0026EE  6E08               	movwf	new_px_char@b+3,c
  3872  0026F0  EC1D  F01A         	call	_new_px_char	;wreg free
  3873  0026F4  CFE9 FFD9          	movff	fsr0l,fsr2l
  3874  0026F8  CFEA FFDA          	movff	fsr0h,fsr2h
  3875  0026FC  EE00  F011         	lfsr	0,?_px_map
  3876  002700  0E07               	movlw	7
  3877  002702                     u2581:
  3878  002702  CFDB FFEB          	movff	plusw2,plusw0
  3879  002706  06E8               	decf	wreg,f,c
  3880  002708  E2FC               	bc	u2581
  3881                           
  3882                           ;px_ascii.c: 118: }
  3883  00270A  0012               	return	
  3884  00270C                     l337:
  3885  00270C  501A               	movf	px_map@c,w,c
  3886                           
  3887                           ; Switch size 1, requested type "space"
  3888                           ; Number of cases is 95, Range of values is 32 to 126
  3889                           ; switch strategies available:
  3890                           ; Name         Instructions Cycles
  3891                           ; simple_byte          286   144 (average)
  3892                           ;	Chosen strategy is simple_byte
  3893  00270E  0A20               	xorlw	32	; case 32
  3894  002710  B4D8               	btfsc	status,2,c
  3895  002712  EF46  F008         	goto	l338
  3896  002716  0A01               	xorlw	1	; case 33
  3897  002718  B4D8               	btfsc	status,2,c
  3898  00271A  EF64  F008         	goto	l340
  3899  00271E  0A03               	xorlw	3	; case 34
  3900  002720  B4D8               	btfsc	status,2,c
  3901  002722  EF82  F008         	goto	l341
  3902  002726  0A01               	xorlw	1	; case 35
  3903  002728  B4D8               	btfsc	status,2,c
  3904  00272A  EFA0  F008         	goto	l342
  3905  00272E  0A07               	xorlw	7	; case 36
  3906  002730  B4D8               	btfsc	status,2,c
  3907  002732  EFBE  F008         	goto	l343
  3908  002736  0A01               	xorlw	1	; case 37
  3909  002738  B4D8               	btfsc	status,2,c
  3910  00273A  EFDC  F008         	goto	l344
  3911  00273E  0A03               	xorlw	3	; case 38
  3912  002740  B4D8               	btfsc	status,2,c
  3913  002742  EFFA  F008         	goto	l345
  3914  002746  0A01               	xorlw	1	; case 39
  3915  002748  B4D8               	btfsc	status,2,c
  3916  00274A  EF18  F009         	goto	l346
  3917  00274E  0A0F               	xorlw	15	; case 40
  3918  002750  B4D8               	btfsc	status,2,c
  3919  002752  EF36  F009         	goto	l347
  3920  002756  0A01               	xorlw	1	; case 41
  3921  002758  B4D8               	btfsc	status,2,c
  3922  00275A  EF54  F009         	goto	l348
  3923  00275E  0A03               	xorlw	3	; case 42
  3924  002760  B4D8               	btfsc	status,2,c
  3925  002762  EF72  F009         	goto	l349
  3926  002766  0A01               	xorlw	1	; case 43
  3927  002768  B4D8               	btfsc	status,2,c
  3928  00276A  EF90  F009         	goto	l350
  3929  00276E  0A07               	xorlw	7	; case 44
  3930  002770  B4D8               	btfsc	status,2,c
  3931  002772  EFAE  F009         	goto	l351
  3932  002776  0A01               	xorlw	1	; case 45
  3933  002778  B4D8               	btfsc	status,2,c
  3934  00277A  EFCC  F009         	goto	l352
  3935  00277E  0A03               	xorlw	3	; case 46
  3936  002780  B4D8               	btfsc	status,2,c
  3937  002782  EFEA  F009         	goto	l353
  3938  002786  0A01               	xorlw	1	; case 47
  3939  002788  B4D8               	btfsc	status,2,c
  3940  00278A  EF08  F00A         	goto	l354
  3941  00278E  0A1F               	xorlw	31	; case 48
  3942  002790  B4D8               	btfsc	status,2,c
  3943  002792  EF26  F00A         	goto	l355
  3944  002796  0A01               	xorlw	1	; case 49
  3945  002798  B4D8               	btfsc	status,2,c
  3946  00279A  EF44  F00A         	goto	l356
  3947  00279E  0A03               	xorlw	3	; case 50
  3948  0027A0  B4D8               	btfsc	status,2,c
  3949  0027A2  EF62  F00A         	goto	l357
  3950  0027A6  0A01               	xorlw	1	; case 51
  3951  0027A8  B4D8               	btfsc	status,2,c
  3952  0027AA  EF80  F00A         	goto	l358
  3953  0027AE  0A07               	xorlw	7	; case 52
  3954  0027B0  B4D8               	btfsc	status,2,c
  3955  0027B2  EF9E  F00A         	goto	l359
  3956  0027B6  0A01               	xorlw	1	; case 53
  3957  0027B8  B4D8               	btfsc	status,2,c
  3958  0027BA  EFBC  F00A         	goto	l360
  3959  0027BE  0A03               	xorlw	3	; case 54
  3960  0027C0  B4D8               	btfsc	status,2,c
  3961  0027C2  EFDA  F00A         	goto	l361
  3962  0027C6  0A01               	xorlw	1	; case 55
  3963  0027C8  B4D8               	btfsc	status,2,c
  3964  0027CA  EFF8  F00A         	goto	l362
  3965  0027CE  0A0F               	xorlw	15	; case 56
  3966  0027D0  B4D8               	btfsc	status,2,c
  3967  0027D2  EF16  F00B         	goto	l363
  3968  0027D6  0A01               	xorlw	1	; case 57
  3969  0027D8  B4D8               	btfsc	status,2,c
  3970  0027DA  EF34  F00B         	goto	l364
  3971  0027DE  0A03               	xorlw	3	; case 58
  3972  0027E0  B4D8               	btfsc	status,2,c
  3973  0027E2  EF52  F00B         	goto	l365
  3974  0027E6  0A01               	xorlw	1	; case 59
  3975  0027E8  B4D8               	btfsc	status,2,c
  3976  0027EA  EF70  F00B         	goto	l366
  3977  0027EE  0A07               	xorlw	7	; case 60
  3978  0027F0  B4D8               	btfsc	status,2,c
  3979  0027F2  EF8E  F00B         	goto	l367
  3980  0027F6  0A01               	xorlw	1	; case 61
  3981  0027F8  B4D8               	btfsc	status,2,c
  3982  0027FA  EFAC  F00B         	goto	l368
  3983  0027FE  0A03               	xorlw	3	; case 62
  3984  002800  B4D8               	btfsc	status,2,c
  3985  002802  EFCA  F00B         	goto	l369
  3986  002806  0A01               	xorlw	1	; case 63
  3987  002808  B4D8               	btfsc	status,2,c
  3988  00280A  EFE8  F00B         	goto	l370
  3989  00280E  0A7F               	xorlw	127	; case 64
  3990  002810  B4D8               	btfsc	status,2,c
  3991  002812  EF06  F00C         	goto	l371
  3992  002816  0A01               	xorlw	1	; case 65
  3993  002818  B4D8               	btfsc	status,2,c
  3994  00281A  EF24  F00C         	goto	l372
  3995  00281E  0A03               	xorlw	3	; case 66
  3996  002820  B4D8               	btfsc	status,2,c
  3997  002822  EF42  F00C         	goto	l373
  3998  002826  0A01               	xorlw	1	; case 67
  3999  002828  B4D8               	btfsc	status,2,c
  4000  00282A  EF60  F00C         	goto	l374
  4001  00282E  0A07               	xorlw	7	; case 68
  4002  002830  B4D8               	btfsc	status,2,c
  4003  002832  EF7E  F00C         	goto	l375
  4004  002836  0A01               	xorlw	1	; case 69
  4005  002838  B4D8               	btfsc	status,2,c
  4006  00283A  EF9C  F00C         	goto	l376
  4007  00283E  0A03               	xorlw	3	; case 70
  4008  002840  B4D8               	btfsc	status,2,c
  4009  002842  EFBA  F00C         	goto	l377
  4010  002846  0A01               	xorlw	1	; case 71
  4011  002848  B4D8               	btfsc	status,2,c
  4012  00284A  EFD8  F00C         	goto	l378
  4013  00284E  0A0F               	xorlw	15	; case 72
  4014  002850  B4D8               	btfsc	status,2,c
  4015  002852  EFF6  F00C         	goto	l379
  4016  002856  0A01               	xorlw	1	; case 73
  4017  002858  B4D8               	btfsc	status,2,c
  4018  00285A  EF14  F00D         	goto	l380
  4019  00285E  0A03               	xorlw	3	; case 74
  4020  002860  B4D8               	btfsc	status,2,c
  4021  002862  EF32  F00D         	goto	l381
  4022  002866  0A01               	xorlw	1	; case 75
  4023  002868  B4D8               	btfsc	status,2,c
  4024  00286A  EF50  F00D         	goto	l382
  4025  00286E  0A07               	xorlw	7	; case 76
  4026  002870  B4D8               	btfsc	status,2,c
  4027  002872  EF6E  F00D         	goto	l383
  4028  002876  0A01               	xorlw	1	; case 77
  4029  002878  B4D8               	btfsc	status,2,c
  4030  00287A  EF8C  F00D         	goto	l384
  4031  00287E  0A03               	xorlw	3	; case 78
  4032  002880  B4D8               	btfsc	status,2,c
  4033  002882  EFAA  F00D         	goto	l385
  4034  002886  0A01               	xorlw	1	; case 79
  4035  002888  B4D8               	btfsc	status,2,c
  4036  00288A  EFC8  F00D         	goto	l386
  4037  00288E  0A1F               	xorlw	31	; case 80
  4038  002890  B4D8               	btfsc	status,2,c
  4039  002892  EFE6  F00D         	goto	l387
  4040  002896  0A01               	xorlw	1	; case 81
  4041  002898  B4D8               	btfsc	status,2,c
  4042  00289A  EF04  F00E         	goto	l388
  4043  00289E  0A03               	xorlw	3	; case 82
  4044  0028A0  B4D8               	btfsc	status,2,c
  4045  0028A2  EF22  F00E         	goto	l389
  4046  0028A6  0A01               	xorlw	1	; case 83
  4047  0028A8  B4D8               	btfsc	status,2,c
  4048  0028AA  EF40  F00E         	goto	l390
  4049  0028AE  0A07               	xorlw	7	; case 84
  4050  0028B0  B4D8               	btfsc	status,2,c
  4051  0028B2  EF5E  F00E         	goto	l391
  4052  0028B6  0A01               	xorlw	1	; case 85
  4053  0028B8  B4D8               	btfsc	status,2,c
  4054  0028BA  EF7C  F00E         	goto	l392
  4055  0028BE  0A03               	xorlw	3	; case 86
  4056  0028C0  B4D8               	btfsc	status,2,c
  4057  0028C2  EF9A  F00E         	goto	l393
  4058  0028C6  0A01               	xorlw	1	; case 87
  4059  0028C8  B4D8               	btfsc	status,2,c
  4060  0028CA  EFB8  F00E         	goto	l394
  4061  0028CE  0A0F               	xorlw	15	; case 88
  4062  0028D0  B4D8               	btfsc	status,2,c
  4063  0028D2  EFD6  F00E         	goto	l395
  4064  0028D6  0A01               	xorlw	1	; case 89
  4065  0028D8  B4D8               	btfsc	status,2,c
  4066  0028DA  EFF4  F00E         	goto	l396
  4067  0028DE  0A03               	xorlw	3	; case 90
  4068  0028E0  B4D8               	btfsc	status,2,c
  4069  0028E2  EF12  F00F         	goto	l397
  4070  0028E6  0A01               	xorlw	1	; case 91
  4071  0028E8  B4D8               	btfsc	status,2,c
  4072  0028EA  EF30  F00F         	goto	l398
  4073  0028EE  0A07               	xorlw	7	; case 92
  4074  0028F0  B4D8               	btfsc	status,2,c
  4075  0028F2  EF4E  F00F         	goto	l399
  4076  0028F6  0A01               	xorlw	1	; case 93
  4077  0028F8  B4D8               	btfsc	status,2,c
  4078  0028FA  EF6C  F00F         	goto	l400
  4079  0028FE  0A03               	xorlw	3	; case 94
  4080  002900  B4D8               	btfsc	status,2,c
  4081  002902  EF8A  F00F         	goto	l401
  4082  002906  0A01               	xorlw	1	; case 95
  4083  002908  B4D8               	btfsc	status,2,c
  4084  00290A  EFA8  F00F         	goto	l402
  4085  00290E  0A3F               	xorlw	63	; case 96
  4086  002910  B4D8               	btfsc	status,2,c
  4087  002912  EFC6  F00F         	goto	l403
  4088  002916  0A01               	xorlw	1	; case 97
  4089  002918  B4D8               	btfsc	status,2,c
  4090  00291A  EFE4  F00F         	goto	l404
  4091  00291E  0A03               	xorlw	3	; case 98
  4092  002920  B4D8               	btfsc	status,2,c
  4093  002922  EF02  F010         	goto	l405
  4094  002926  0A01               	xorlw	1	; case 99
  4095  002928  B4D8               	btfsc	status,2,c
  4096  00292A  EF20  F010         	goto	l406
  4097  00292E  0A07               	xorlw	7	; case 100
  4098  002930  B4D8               	btfsc	status,2,c
  4099  002932  EF3E  F010         	goto	l407
  4100  002936  0A01               	xorlw	1	; case 101
  4101  002938  B4D8               	btfsc	status,2,c
  4102  00293A  EF5C  F010         	goto	l408
  4103  00293E  0A03               	xorlw	3	; case 102
  4104  002940  B4D8               	btfsc	status,2,c
  4105  002942  EF7A  F010         	goto	l409
  4106  002946  0A01               	xorlw	1	; case 103
  4107  002948  B4D8               	btfsc	status,2,c
  4108  00294A  EF98  F010         	goto	l410
  4109  00294E  0A0F               	xorlw	15	; case 104
  4110  002950  B4D8               	btfsc	status,2,c
  4111  002952  D40C               	goto	l411
  4112  002954  0A01               	xorlw	1	; case 105
  4113  002956  B4D8               	btfsc	status,2,c
  4114  002958  D427               	goto	l412
  4115  00295A  0A03               	xorlw	3	; case 106
  4116  00295C  B4D8               	btfsc	status,2,c
  4117  00295E  D442               	goto	l413
  4118  002960  0A01               	xorlw	1	; case 107
  4119  002962  B4D8               	btfsc	status,2,c
  4120  002964  D45D               	goto	l414
  4121  002966  0A07               	xorlw	7	; case 108
  4122  002968  B4D8               	btfsc	status,2,c
  4123  00296A  D478               	goto	l415
  4124  00296C  0A01               	xorlw	1	; case 109
  4125  00296E  B4D8               	btfsc	status,2,c
  4126  002970  D493               	goto	l416
  4127  002972  0A03               	xorlw	3	; case 110
  4128  002974  B4D8               	btfsc	status,2,c
  4129  002976  D4AE               	goto	l417
  4130  002978  0A01               	xorlw	1	; case 111
  4131  00297A  B4D8               	btfsc	status,2,c
  4132  00297C  D4C9               	goto	l418
  4133  00297E  0A1F               	xorlw	31	; case 112
  4134  002980  B4D8               	btfsc	status,2,c
  4135  002982  D4E4               	goto	l419
  4136  002984  0A01               	xorlw	1	; case 113
  4137  002986  B4D8               	btfsc	status,2,c
  4138  002988  D4FF               	goto	l420
  4139  00298A  0A03               	xorlw	3	; case 114
  4140  00298C  B4D8               	btfsc	status,2,c
  4141  00298E  D51A               	goto	l421
  4142  002990  0A01               	xorlw	1	; case 115
  4143  002992  B4D8               	btfsc	status,2,c
  4144  002994  D535               	goto	l422
  4145  002996  0A07               	xorlw	7	; case 116
  4146  002998  B4D8               	btfsc	status,2,c
  4147  00299A  D550               	goto	l423
  4148  00299C  0A01               	xorlw	1	; case 117
  4149  00299E  B4D8               	btfsc	status,2,c
  4150  0029A0  D56B               	goto	l424
  4151  0029A2  0A03               	xorlw	3	; case 118
  4152  0029A4  B4D8               	btfsc	status,2,c
  4153  0029A6  D586               	goto	l425
  4154  0029A8  0A01               	xorlw	1	; case 119
  4155  0029AA  B4D8               	btfsc	status,2,c
  4156  0029AC  D5A1               	goto	l426
  4157  0029AE  0A0F               	xorlw	15	; case 120
  4158  0029B0  B4D8               	btfsc	status,2,c
  4159  0029B2  D5BC               	goto	l427
  4160  0029B4  0A01               	xorlw	1	; case 121
  4161  0029B6  B4D8               	btfsc	status,2,c
  4162  0029B8  D5D7               	goto	l428
  4163  0029BA  0A03               	xorlw	3	; case 122
  4164  0029BC  B4D8               	btfsc	status,2,c
  4165  0029BE  D5F2               	goto	l429
  4166  0029C0  0A01               	xorlw	1	; case 123
  4167  0029C2  B4D8               	btfsc	status,2,c
  4168  0029C4  D60D               	goto	l430
  4169  0029C6  0A07               	xorlw	7	; case 124
  4170  0029C8  B4D8               	btfsc	status,2,c
  4171  0029CA  D628               	goto	l431
  4172  0029CC  0A01               	xorlw	1	; case 125
  4173  0029CE  B4D8               	btfsc	status,2,c
  4174  0029D0  D643               	goto	l432
  4175  0029D2  0A03               	xorlw	3	; case 126
  4176  0029D4  B4D8               	btfsc	status,2,c
  4177  0029D6  D65E               	goto	l433
  4178  0029D8  D67B               	goto	l434
  4179  0029DA                     __end_of_px_map:
  4180                           	opt stack 0
  4181                           tblptru	equ	0xFF8
  4182                           tblptrh	equ	0xFF7
  4183                           tblptrl	equ	0xFF6
  4184                           tablat	equ	0xFF5
  4185                           indf0	equ	0xFEF
  4186                           postinc0	equ	0xFEE
  4187                           plusw0	equ	0xFEB
  4188                           fsr0h	equ	0xFEA
  4189                           fsr0l	equ	0xFE9
  4190                           wreg	equ	0xFE8
  4191                           postdec1	equ	0xFE5
  4192                           plusw1	equ	0xFE3
  4193                           fsr1l	equ	0xFE1
  4194                           plusw2	equ	0xFDB
  4195                           fsr2h	equ	0xFDA
  4196                           fsr2l	equ	0xFD9
  4197                           status	equ	0xFD8
  4198                           
  4199 ;; *************** function _new_px_char *****************
  4200 ;; Defined at:
  4201 ;;		line 12 in file "px_ascii.c"
  4202 ;; Parameters:    Size  Location     Type
  4203 ;;  a               4    0[COMRAM] unsigned long 
  4204 ;;  b               4    4[COMRAM] unsigned long 
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  p               8    8[COMRAM] struct .
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  8    0[COMRAM] struct .
  4209 ;; Registers used:
  4210 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4216 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;Total ram usage:       16 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; This function calls:
  4223 ;;		Nothing
  4224 ;; This function is called by:
  4225 ;;		_px_map
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           	psect	text4
  4230  00343A                     __ptext4:
  4231                           	opt stack 0
  4232  00343A                     _new_px_char:
  4233                           	opt stack 27
  4234                           
  4235                           ;px_ascii.c: 13: px_char p;
  4236                           ;px_ascii.c: 14: p.part[1] = a;
  4237                           
  4238                           ;incstack = 0
  4239  00343A  C001  F00D         	movff	new_px_char@a,new_px_char@p+4
  4240  00343E  C002  F00E         	movff	new_px_char@a+1,new_px_char@p+5
  4241  003442  C003  F00F         	movff	new_px_char@a+2,new_px_char@p+6
  4242  003446  C004  F010         	movff	new_px_char@a+3,new_px_char@p+7
  4243                           
  4244                           ;px_ascii.c: 15: p.part[0] = b;
  4245  00344A  C005  F009         	movff	new_px_char@b,new_px_char@p
  4246  00344E  C006  F00A         	movff	new_px_char@b+1,new_px_char@p+1
  4247  003452  C007  F00B         	movff	new_px_char@b+2,new_px_char@p+2
  4248  003456  C008  F00C         	movff	new_px_char@b+3,new_px_char@p+3
  4249                           
  4250                           ;px_ascii.c: 16: return p;
  4251  00345A  EE20  F009         	lfsr	2,new_px_char@p
  4252  00345E  EE00  F001         	lfsr	0,?_new_px_char
  4253  003462  0E07               	movlw	7
  4254  003464                     u1461:
  4255  003464  CFDB FFEB          	movff	plusw2,plusw0
  4256  003468  06E8               	decf	wreg,f,c
  4257  00346A  E2FC               	bc	u1461
  4258  00346C  0012               	return	
  4259  00346E                     __end_of_new_px_char:
  4260                           	opt stack 0
  4261                           tblptru	equ	0xFF8
  4262                           tblptrh	equ	0xFF7
  4263                           tblptrl	equ	0xFF6
  4264                           tablat	equ	0xFF5
  4265                           indf0	equ	0xFEF
  4266                           postinc0	equ	0xFEE
  4267                           plusw0	equ	0xFEB
  4268                           fsr0h	equ	0xFEA
  4269                           fsr0l	equ	0xFE9
  4270                           wreg	equ	0xFE8
  4271                           postdec1	equ	0xFE5
  4272                           plusw1	equ	0xFE3
  4273                           fsr1l	equ	0xFE1
  4274                           plusw2	equ	0xFDB
  4275                           fsr2h	equ	0xFDA
  4276                           fsr2l	equ	0xFD9
  4277                           status	equ	0xFD8
  4278                           
  4279 ;; *************** function _draw_px_char *****************
  4280 ;; Defined at:
  4281 ;;		line 60 in file "main.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;  x               2   32[COMRAM] int 
  4284 ;;  y               2   34[COMRAM] int 
  4285 ;;  p               8   36[COMRAM] struct .
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;  i               2   52[COMRAM] int 
  4288 ;;  m               4   48[COMRAM] unsigned long 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  1    wreg      void 
  4291 ;; Registers used:
  4292 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4298 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;Total ram usage:       22 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    5
  4305 ;; This function calls:
  4306 ;;		___awdiv
  4307 ;;		___awmod
  4308 ;;		_glcdDrawPixel
  4309 ;; This function is called by:
  4310 ;;		_print_px_char
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text5
  4315  003066                     __ptext5:
  4316                           	opt stack 0
  4317  003066                     _draw_px_char:
  4318                           	opt stack 23
  4319                           
  4320                           ;main.c: 61: uint32_t m = 0b1;
  4321                           
  4322                           ;incstack = 0
  4323  003066  0E01               	movlw	1
  4324  003068  6E31               	movwf	draw_px_char@m,c
  4325  00306A  0E00               	movlw	0
  4326  00306C  6E32               	movwf	draw_px_char@m+1,c
  4327  00306E  0E00               	movlw	0
  4328  003070  6E33               	movwf	draw_px_char@m+2,c
  4329  003072  0E00               	movlw	0
  4330  003074  6E34               	movwf	draw_px_char@m+3,c
  4331                           
  4332                           ;main.c: 62: for(int i = 0; i < 32; i++) {
  4333  003076  0E00               	movlw	0
  4334  003078  6E36               	movwf	draw_px_char@i+1,c
  4335  00307A  0E00               	movlw	0
  4336  00307C  6E35               	movwf	draw_px_char@i,c
  4337  00307E  BE36               	btfsc	draw_px_char@i+1,7,c
  4338  003080  D008               	goto	l132
  4339  003082  5036               	movf	draw_px_char@i+1,w,c
  4340  003084  E105               	bnz	u1590
  4341  003086  0E20               	movlw	32
  4342  003088  5C35               	subwf	draw_px_char@i,w,c
  4343  00308A  B0D8               	btfsc	status,0,c
  4344  00308C  0012               	return	
  4345  00308E  D001               	goto	l132
  4346  003090                     u1590:
  4347  003090  0012               	return	
  4348  003092                     l132:
  4349                           
  4350                           ;main.c: 63: if(m & p.part[0]) glcdDrawPixel(x+i%5, y+i/5, BLACK);
  4351  003092  5031               	movf	draw_px_char@m,w,c
  4352  003094  1425               	andwf	draw_px_char@p,w,c
  4353  003096  6E2D               	movwf	??_draw_px_char& (0+255),c
  4354  003098  5032               	movf	draw_px_char@m+1,w,c
  4355  00309A  1426               	andwf	draw_px_char@p+1,w,c
  4356  00309C  6E2E               	movwf	(??_draw_px_char+1)& (0+255),c
  4357  00309E  5033               	movf	draw_px_char@m+2,w,c
  4358  0030A0  1427               	andwf	draw_px_char@p+2,w,c
  4359  0030A2  6E2F               	movwf	(??_draw_px_char+2)& (0+255),c
  4360  0030A4  5034               	movf	draw_px_char@m+3,w,c
  4361  0030A6  1428               	andwf	draw_px_char@p+3,w,c
  4362  0030A8  6E30               	movwf	(??_draw_px_char+3)& (0+255),c
  4363  0030AA  502D               	movf	??_draw_px_char,w,c
  4364  0030AC  102E               	iorwf	??_draw_px_char+1,w,c
  4365  0030AE  102F               	iorwf	??_draw_px_char+2,w,c
  4366  0030B0  1030               	iorwf	??_draw_px_char+3,w,c
  4367  0030B2  B4D8               	btfsc	status,2,c
  4368  0030B4  D02B               	goto	l134
  4369  0030B6  C035  F007         	movff	draw_px_char@i,___awdiv@dividend
  4370  0030BA  C036  F008         	movff	draw_px_char@i+1,___awdiv@dividend+1
  4371  0030BE  0E00               	movlw	0
  4372  0030C0  6E0A               	movwf	___awdiv@divisor+1,c
  4373  0030C2  0E05               	movlw	5
  4374  0030C4  6E09               	movwf	___awdiv@divisor,c
  4375  0030C6  EC28  F019         	call	___awdiv	;wreg free
  4376  0030CA  5007               	movf	?___awdiv,w,c
  4377  0030CC  2423               	addwf	draw_px_char@y,w,c
  4378  0030CE  6E1A               	movwf	glcdDrawPixel@YS,c
  4379  0030D0  0E25               	movlw	low _BLACK
  4380  0030D2  6EF6               	movwf	tblptrl,c
  4381  0030D4                     	if	1	;There is more than 1 active tblptr byte
  4382  0030D4  0E10               	movlw	high _BLACK
  4383  0030D6  6EF7               	movwf	tblptrh,c
  4384  0030D8                     	endif
  4385  0030D8                     	if	0	;There are less than 3 active tblptr bytes
  4386  0030D8                     	endif
  4387  0030D8  0009               	tblrd		*+
  4388  0030DA  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  4389  0030DE  0009               	tblrd		*+
  4390  0030E0  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  4391  0030E4  0009               	tblrd		*+
  4392  0030E6  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  4393  0030EA  000A               	tblrd		*-
  4394  0030EC  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  4395  0030F0  C035  F001         	movff	draw_px_char@i,___awmod@dividend
  4396  0030F4  C036  F002         	movff	draw_px_char@i+1,___awmod@dividend+1
  4397  0030F8  0E00               	movlw	0
  4398  0030FA  6E04               	movwf	___awmod@divisor+1,c
  4399  0030FC  0E05               	movlw	5
  4400  0030FE  6E03               	movwf	___awmod@divisor,c
  4401  003100  EC6A  F019         	call	___awmod	;wreg free
  4402  003104  5001               	movf	?___awmod,w,c
  4403  003106  2421               	addwf	draw_px_char@x,w,c
  4404  003108  ECA2  F019         	call	_glcdDrawPixel
  4405  00310C                     l134:
  4406                           
  4407                           ;main.c: 64: if(m & p.part[1]) glcdDrawPixel(x+(i+32)%5, y+(i+32)/5, BLACK);
  4408  00310C  5031               	movf	draw_px_char@m,w,c
  4409  00310E  1429               	andwf	draw_px_char@p+4,w,c
  4410  003110  6E2D               	movwf	??_draw_px_char& (0+255),c
  4411  003112  5032               	movf	draw_px_char@m+1,w,c
  4412  003114  142A               	andwf	draw_px_char@p+5,w,c
  4413  003116  6E2E               	movwf	(??_draw_px_char+1)& (0+255),c
  4414  003118  5033               	movf	draw_px_char@m+2,w,c
  4415  00311A  142B               	andwf	draw_px_char@p+6,w,c
  4416  00311C  6E2F               	movwf	(??_draw_px_char+2)& (0+255),c
  4417  00311E  5034               	movf	draw_px_char@m+3,w,c
  4418  003120  142C               	andwf	draw_px_char@p+7,w,c
  4419  003122  6E30               	movwf	(??_draw_px_char+3)& (0+255),c
  4420  003124  502D               	movf	??_draw_px_char,w,c
  4421  003126  102E               	iorwf	??_draw_px_char+1,w,c
  4422  003128  102F               	iorwf	??_draw_px_char+2,w,c
  4423  00312A  1030               	iorwf	??_draw_px_char+3,w,c
  4424  00312C  B4D8               	btfsc	status,2,c
  4425  00312E  D02F               	goto	l135
  4426  003130  0E20               	movlw	32
  4427  003132  2435               	addwf	draw_px_char@i,w,c
  4428  003134  6E07               	movwf	___awdiv@dividend,c
  4429  003136  0E00               	movlw	0
  4430  003138  2036               	addwfc	draw_px_char@i+1,w,c
  4431  00313A  6E08               	movwf	___awdiv@dividend+1,c
  4432  00313C  0E00               	movlw	0
  4433  00313E  6E0A               	movwf	___awdiv@divisor+1,c
  4434  003140  0E05               	movlw	5
  4435  003142  6E09               	movwf	___awdiv@divisor,c
  4436  003144  EC28  F019         	call	___awdiv	;wreg free
  4437  003148  5007               	movf	?___awdiv,w,c
  4438  00314A  2423               	addwf	draw_px_char@y,w,c
  4439  00314C  6E1A               	movwf	glcdDrawPixel@YS,c
  4440  00314E  0E25               	movlw	low _BLACK
  4441  003150  6EF6               	movwf	tblptrl,c
  4442  003152                     	if	1	;There is more than 1 active tblptr byte
  4443  003152  0E10               	movlw	high _BLACK
  4444  003154  6EF7               	movwf	tblptrh,c
  4445  003156                     	endif
  4446  003156                     	if	0	;There are less than 3 active tblptr bytes
  4447  003156                     	endif
  4448  003156  0009               	tblrd		*+
  4449  003158  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  4450  00315C  0009               	tblrd		*+
  4451  00315E  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  4452  003162  0009               	tblrd		*+
  4453  003164  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  4454  003168  000A               	tblrd		*-
  4455  00316A  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  4456  00316E  0E20               	movlw	32
  4457  003170  2435               	addwf	draw_px_char@i,w,c
  4458  003172  6E01               	movwf	___awmod@dividend,c
  4459  003174  0E00               	movlw	0
  4460  003176  2036               	addwfc	draw_px_char@i+1,w,c
  4461  003178  6E02               	movwf	___awmod@dividend+1,c
  4462  00317A  0E00               	movlw	0
  4463  00317C  6E04               	movwf	___awmod@divisor+1,c
  4464  00317E  0E05               	movlw	5
  4465  003180  6E03               	movwf	___awmod@divisor,c
  4466  003182  EC6A  F019         	call	___awmod	;wreg free
  4467  003186  5001               	movf	?___awmod,w,c
  4468  003188  2421               	addwf	draw_px_char@x,w,c
  4469  00318A  ECA2  F019         	call	_glcdDrawPixel
  4470  00318E                     l135:
  4471                           
  4472                           ;main.c: 66: m <<= 1;
  4473  00318E  90D8               	bcf	status,0,c
  4474  003190  3631               	rlcf	draw_px_char@m,f,c
  4475  003192  3632               	rlcf	draw_px_char@m+1,f,c
  4476  003194  3633               	rlcf	draw_px_char@m+2,f,c
  4477  003196  3634               	rlcf	draw_px_char@m+3,f,c
  4478  003198  4A35               	infsnz	draw_px_char@i,f,c
  4479  00319A  2A36               	incf	draw_px_char@i+1,f,c
  4480  00319C  BE36               	btfsc	draw_px_char@i+1,7,c
  4481  00319E  D779               	goto	l132
  4482  0031A0  5036               	movf	draw_px_char@i+1,w,c
  4483  0031A2  E101               	bnz	l136
  4484  0031A4  D770               	goto	L1
  4485  0031A6                     l136:
  4486  0031A6  0012               	return		;funcret
  4487  0031A8                     __end_of_draw_px_char:
  4488                           	opt stack 0
  4489                           tblptru	equ	0xFF8
  4490                           tblptrh	equ	0xFF7
  4491                           tblptrl	equ	0xFF6
  4492                           tablat	equ	0xFF5
  4493                           indf0	equ	0xFEF
  4494                           postinc0	equ	0xFEE
  4495                           plusw0	equ	0xFEB
  4496                           fsr0h	equ	0xFEA
  4497                           fsr0l	equ	0xFE9
  4498                           wreg	equ	0xFE8
  4499                           postdec1	equ	0xFE5
  4500                           plusw1	equ	0xFE3
  4501                           fsr1l	equ	0xFE1
  4502                           plusw2	equ	0xFDB
  4503                           fsr2h	equ	0xFDA
  4504                           fsr2l	equ	0xFD9
  4505                           status	equ	0xFD8
  4506                           
  4507 ;; *************** function _glcdDrawPixel *****************
  4508 ;; Defined at:
  4509 ;;		line 147 in file "GLCD_PIC_V1.1.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;  XS              1    wreg     unsigned char 
  4512 ;;  YS              1   25[COMRAM] unsigned char 
  4513 ;;  color           4   26[COMRAM] unsigned long 
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;  XS              1   31[COMRAM] unsigned char 
  4516 ;; Return value:  Size  Location     Type
  4517 ;;                  1    wreg      void 
  4518 ;; Registers used:
  4519 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4525 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;Total ram usage:        7 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; Hardware stack levels required when called:    4
  4532 ;; This function calls:
  4533 ;;		_glcdDrawRectangle
  4534 ;; This function is called by:
  4535 ;;		_draw_px_char
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           	psect	text6
  4540  003344                     __ptext6:
  4541                           	opt stack 0
  4542  003344                     _glcdDrawPixel:
  4543                           	opt stack 23
  4544                           
  4545                           ;incstack = 0
  4546                           ;glcdDrawPixel@XS stored from wreg
  4547  003344  6E20               	movwf	glcdDrawPixel@XS,c
  4548                           
  4549                           ;GLCD_PIC_V1.1.c: 160: if(XS >= GLCD_SIZE_HORZ){ XS = GLCD_SIZE_HORZ - 1; }
  4550  003346  0E6A               	movlw	low _GLCD_SIZE_HORZ
  4551  003348  6EF6               	movwf	tblptrl,c
  4552  00334A                     	if	1	;There is more than 1 active tblptr byte
  4553  00334A  0E10               	movlw	high _GLCD_SIZE_HORZ
  4554  00334C  6EF7               	movwf	tblptrh,c
  4555  00334E                     	endif
  4556  00334E                     	if	0	;There are less than 3 active tblptr bytes
  4557  00334E                     	endif
  4558  00334E  0009               	tblrd		*+
  4559  003350  50F5               	movf	tablat,w,c
  4560  003352  5C20               	subwf	glcdDrawPixel@XS,w,c
  4561  003354  A0D8               	btfss	status,0,c
  4562  003356  D009               	goto	l305
  4563  003358  0E6A               	movlw	low _GLCD_SIZE_HORZ
  4564  00335A  6EF6               	movwf	tblptrl,c
  4565  00335C                     	if	1	;There is more than 1 active tblptr byte
  4566  00335C  0E10               	movlw	high _GLCD_SIZE_HORZ
  4567  00335E  6EF7               	movwf	tblptrh,c
  4568  003360                     	endif
  4569  003360                     	if	0	;There are less than 3 active tblptr bytes
  4570  003360                     	endif
  4571  003360  0008               	tblrd		*
  4572  003362  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  4573  003366  041F               	decf	??_glcdDrawPixel,w,c
  4574  003368  6E20               	movwf	glcdDrawPixel@XS,c
  4575  00336A                     l305:
  4576                           
  4577                           ;GLCD_PIC_V1.1.c: 161: if(YS >= GLCD_SIZE_VERT){ YS = GLCD_SIZE_HORZ - 1; }
  4578  00336A  0E69               	movlw	low _GLCD_SIZE_VERT
  4579  00336C  6EF6               	movwf	tblptrl,c
  4580  00336E                     	if	1	;There is more than 1 active tblptr byte
  4581  00336E  0E10               	movlw	high _GLCD_SIZE_VERT
  4582  003370  6EF7               	movwf	tblptrh,c
  4583  003372                     	endif
  4584  003372                     	if	0	;There are less than 3 active tblptr bytes
  4585  003372                     	endif
  4586  003372  0009               	tblrd		*+
  4587  003374  50F5               	movf	tablat,w,c
  4588  003376  5C1A               	subwf	glcdDrawPixel@YS,w,c
  4589  003378  A0D8               	btfss	status,0,c
  4590  00337A  D009               	goto	l306
  4591  00337C  0E6A               	movlw	low _GLCD_SIZE_HORZ
  4592  00337E  6EF6               	movwf	tblptrl,c
  4593  003380                     	if	1	;There is more than 1 active tblptr byte
  4594  003380  0E10               	movlw	high _GLCD_SIZE_HORZ
  4595  003382  6EF7               	movwf	tblptrh,c
  4596  003384                     	endif
  4597  003384                     	if	0	;There are less than 3 active tblptr bytes
  4598  003384                     	endif
  4599  003384  0008               	tblrd		*
  4600  003386  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  4601  00338A  041F               	decf	??_glcdDrawPixel,w,c
  4602  00338C  6E1A               	movwf	glcdDrawPixel@YS,c
  4603  00338E                     l306:
  4604                           
  4605                           ;GLCD_PIC_V1.1.c: 164: glcdDrawRectangle(XS, XS, YS, YS, color);
  4606  00338E  C020  F007         	movff	glcdDrawPixel@XS,glcdDrawRectangle@XE
  4607  003392  C01A  F008         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YS
  4608  003396  C01A  F009         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YE
  4609  00339A  C01B  F00A         	movff	glcdDrawPixel@color,glcdDrawRectangle@color
  4610  00339E  C01C  F00B         	movff	glcdDrawPixel@color+1,glcdDrawRectangle@color+1
  4611  0033A2  C01D  F00C         	movff	glcdDrawPixel@color+2,glcdDrawRectangle@color+2
  4612  0033A6  C01E  F00D         	movff	glcdDrawPixel@color+3,glcdDrawRectangle@color+3
  4613  0033AA  5020               	movf	glcdDrawPixel@XS,w,c
  4614  0033AC  EC73  F017         	call	_glcdDrawRectangle
  4615  0033B0  0012               	return		;funcret
  4616  0033B2                     __end_of_glcdDrawPixel:
  4617                           	opt stack 0
  4618                           tblptru	equ	0xFF8
  4619                           tblptrh	equ	0xFF7
  4620                           tblptrl	equ	0xFF6
  4621                           tablat	equ	0xFF5
  4622                           indf0	equ	0xFEF
  4623                           postinc0	equ	0xFEE
  4624                           plusw0	equ	0xFEB
  4625                           fsr0h	equ	0xFEA
  4626                           fsr0l	equ	0xFE9
  4627                           wreg	equ	0xFE8
  4628                           postdec1	equ	0xFE5
  4629                           plusw1	equ	0xFE3
  4630                           fsr1l	equ	0xFE1
  4631                           plusw2	equ	0xFDB
  4632                           fsr2h	equ	0xFDA
  4633                           fsr2l	equ	0xFD9
  4634                           status	equ	0xFD8
  4635                           
  4636 ;; *************** function ___awmod *****************
  4637 ;; Defined at:
  4638 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;  dividend        2    0[COMRAM] int 
  4641 ;;  divisor         2    2[COMRAM] int 
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;  sign            1    5[COMRAM] unsigned char 
  4644 ;;  counter         1    4[COMRAM] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  2    0[COMRAM] int 
  4647 ;; Registers used:
  4648 ;;		wreg, status,2, status,0
  4649 ;; Tracked objects:
  4650 ;;		On entry : 0/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4654 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;Total ram usage:        6 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; This function calls:
  4661 ;;		Nothing
  4662 ;; This function is called by:
  4663 ;;		_draw_px_char
  4664 ;;		_main
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           	psect	text7
  4669  0032D4                     __ptext7:
  4670                           	opt stack 0
  4671  0032D4                     ___awmod:
  4672                           	opt stack 27
  4673                           
  4674                           ;incstack = 0
  4675  0032D4  0E00               	movlw	0
  4676  0032D6  6E06               	movwf	___awmod@sign,c
  4677  0032D8  AE02               	btfss	___awmod@dividend+1,7,c
  4678  0032DA  D006               	goto	l625
  4679  0032DC  6C01               	negf	___awmod@dividend,c
  4680  0032DE  1E02               	comf	___awmod@dividend+1,f,c
  4681  0032E0  B0D8               	btfsc	status,0,c
  4682  0032E2  2A02               	incf	___awmod@dividend+1,f,c
  4683  0032E4  0E01               	movlw	1
  4684  0032E6  6E06               	movwf	___awmod@sign,c
  4685  0032E8                     l625:
  4686  0032E8  AE04               	btfss	___awmod@divisor+1,7,c
  4687  0032EA  D004               	goto	l626
  4688  0032EC  6C03               	negf	___awmod@divisor,c
  4689  0032EE  1E04               	comf	___awmod@divisor+1,f,c
  4690  0032F0  B0D8               	btfsc	status,0,c
  4691  0032F2  2A04               	incf	___awmod@divisor+1,f,c
  4692  0032F4                     l626:
  4693  0032F4  5003               	movf	___awmod@divisor,w,c
  4694  0032F6  1004               	iorwf	___awmod@divisor+1,w,c
  4695  0032F8  B4D8               	btfsc	status,2,c
  4696  0032FA  D018               	goto	l633
  4697  0032FC  0E01               	movlw	1
  4698  0032FE  6E05               	movwf	___awmod@counter,c
  4699  003300  D004               	goto	l628
  4700  003302  90D8               	bcf	status,0,c
  4701  003304  3603               	rlcf	___awmod@divisor,f,c
  4702  003306  3604               	rlcf	___awmod@divisor+1,f,c
  4703  003308  2A05               	incf	___awmod@counter,f,c
  4704  00330A                     l628:
  4705  00330A  AE04               	btfss	___awmod@divisor+1,7,c
  4706  00330C  D7FA               	goto	l629
  4707  00330E                     u1560:
  4708  00330E  5003               	movf	___awmod@divisor,w,c
  4709  003310  5C01               	subwf	___awmod@dividend,w,c
  4710  003312  5004               	movf	___awmod@divisor+1,w,c
  4711  003314  5802               	subwfb	___awmod@dividend+1,w,c
  4712  003316  A0D8               	btfss	status,0,c
  4713  003318  D004               	goto	l632
  4714  00331A  5003               	movf	___awmod@divisor,w,c
  4715  00331C  5E01               	subwf	___awmod@dividend,f,c
  4716  00331E  5004               	movf	___awmod@divisor+1,w,c
  4717  003320  5A02               	subwfb	___awmod@dividend+1,f,c
  4718  003322                     l632:
  4719  003322  90D8               	bcf	status,0,c
  4720  003324  3204               	rrcf	___awmod@divisor+1,f,c
  4721  003326  3203               	rrcf	___awmod@divisor,f,c
  4722  003328  2E05               	decfsz	___awmod@counter,f,c
  4723  00332A  D7F1               	goto	u1560
  4724  00332C                     l633:
  4725  00332C  5006               	movf	___awmod@sign,w,c
  4726  00332E  B4D8               	btfsc	status,2,c
  4727  003330  D004               	goto	l634
  4728  003332  6C01               	negf	___awmod@dividend,c
  4729  003334  1E02               	comf	___awmod@dividend+1,f,c
  4730  003336  B0D8               	btfsc	status,0,c
  4731  003338  2A02               	incf	___awmod@dividend+1,f,c
  4732  00333A                     l634:
  4733  00333A  C001  F001         	movff	___awmod@dividend,?___awmod
  4734  00333E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4735  003342  0012               	return	
  4736  003344                     __end_of___awmod:
  4737                           	opt stack 0
  4738                           tblptru	equ	0xFF8
  4739                           tblptrh	equ	0xFF7
  4740                           tblptrl	equ	0xFF6
  4741                           tablat	equ	0xFF5
  4742                           indf0	equ	0xFEF
  4743                           postinc0	equ	0xFEE
  4744                           plusw0	equ	0xFEB
  4745                           fsr0h	equ	0xFEA
  4746                           fsr0l	equ	0xFE9
  4747                           wreg	equ	0xFE8
  4748                           postdec1	equ	0xFE5
  4749                           plusw1	equ	0xFE3
  4750                           fsr1l	equ	0xFE1
  4751                           plusw2	equ	0xFDB
  4752                           fsr2h	equ	0xFDA
  4753                           fsr2l	equ	0xFD9
  4754                           status	equ	0xFD8
  4755                           
  4756 ;; *************** function ___awdiv *****************
  4757 ;; Defined at:
  4758 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;  dividend        2    6[COMRAM] int 
  4761 ;;  divisor         2    8[COMRAM] int 
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;  quotient        2   12[COMRAM] int 
  4764 ;;  sign            1   11[COMRAM] unsigned char 
  4765 ;;  counter         1   10[COMRAM] unsigned char 
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  2    6[COMRAM] int 
  4768 ;; Registers used:
  4769 ;;		wreg, status,2, status,0
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4775 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4776 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;Total ram usage:        8 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; This function calls:
  4782 ;;		Nothing
  4783 ;; This function is called by:
  4784 ;;		_draw_px_char
  4785 ;;		_main
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           	psect	text8
  4790  003250                     __ptext8:
  4791                           	opt stack 0
  4792  003250                     ___awdiv:
  4793                           	opt stack 27
  4794                           
  4795                           ;incstack = 0
  4796  003250  0E00               	movlw	0
  4797  003252  6E0C               	movwf	___awdiv@sign,c
  4798  003254  AE0A               	btfss	___awdiv@divisor+1,7,c
  4799  003256  D006               	goto	l612
  4800  003258  6C09               	negf	___awdiv@divisor,c
  4801  00325A  1E0A               	comf	___awdiv@divisor+1,f,c
  4802  00325C  B0D8               	btfsc	status,0,c
  4803  00325E  2A0A               	incf	___awdiv@divisor+1,f,c
  4804  003260  0E01               	movlw	1
  4805  003262  6E0C               	movwf	___awdiv@sign,c
  4806  003264                     l612:
  4807  003264  AE08               	btfss	___awdiv@dividend+1,7,c
  4808  003266  D006               	goto	l613
  4809  003268  6C07               	negf	___awdiv@dividend,c
  4810  00326A  1E08               	comf	___awdiv@dividend+1,f,c
  4811  00326C  B0D8               	btfsc	status,0,c
  4812  00326E  2A08               	incf	___awdiv@dividend+1,f,c
  4813  003270  0E01               	movlw	1
  4814  003272  1A0C               	xorwf	___awdiv@sign,f,c
  4815  003274                     l613:
  4816  003274  0E00               	movlw	0
  4817  003276  6E0E               	movwf	___awdiv@quotient+1,c
  4818  003278  0E00               	movlw	0
  4819  00327A  6E0D               	movwf	___awdiv@quotient,c
  4820  00327C  5009               	movf	___awdiv@divisor,w,c
  4821  00327E  100A               	iorwf	___awdiv@divisor+1,w,c
  4822  003280  B4D8               	btfsc	status,2,c
  4823  003282  D01C               	goto	l620
  4824  003284  0E01               	movlw	1
  4825  003286  6E0B               	movwf	___awdiv@counter,c
  4826  003288  D004               	goto	l615
  4827  00328A  90D8               	bcf	status,0,c
  4828  00328C  3609               	rlcf	___awdiv@divisor,f,c
  4829  00328E  360A               	rlcf	___awdiv@divisor+1,f,c
  4830  003290  2A0B               	incf	___awdiv@counter,f,c
  4831  003292                     l615:
  4832  003292  AE0A               	btfss	___awdiv@divisor+1,7,c
  4833  003294  D7FA               	goto	l616
  4834  003296                     u1500:
  4835  003296  90D8               	bcf	status,0,c
  4836  003298  360D               	rlcf	___awdiv@quotient,f,c
  4837  00329A  360E               	rlcf	___awdiv@quotient+1,f,c
  4838  00329C  5009               	movf	___awdiv@divisor,w,c
  4839  00329E  5C07               	subwf	___awdiv@dividend,w,c
  4840  0032A0  500A               	movf	___awdiv@divisor+1,w,c
  4841  0032A2  5808               	subwfb	___awdiv@dividend+1,w,c
  4842  0032A4  A0D8               	btfss	status,0,c
  4843  0032A6  D005               	goto	l619
  4844  0032A8  5009               	movf	___awdiv@divisor,w,c
  4845  0032AA  5E07               	subwf	___awdiv@dividend,f,c
  4846  0032AC  500A               	movf	___awdiv@divisor+1,w,c
  4847  0032AE  5A08               	subwfb	___awdiv@dividend+1,f,c
  4848  0032B0  800D               	bsf	___awdiv@quotient,0,c
  4849  0032B2                     l619:
  4850  0032B2  90D8               	bcf	status,0,c
  4851  0032B4  320A               	rrcf	___awdiv@divisor+1,f,c
  4852  0032B6  3209               	rrcf	___awdiv@divisor,f,c
  4853  0032B8  2E0B               	decfsz	___awdiv@counter,f,c
  4854  0032BA  D7ED               	goto	u1500
  4855  0032BC                     l620:
  4856  0032BC  500C               	movf	___awdiv@sign,w,c
  4857  0032BE  B4D8               	btfsc	status,2,c
  4858  0032C0  D004               	goto	l621
  4859  0032C2  6C0D               	negf	___awdiv@quotient,c
  4860  0032C4  1E0E               	comf	___awdiv@quotient+1,f,c
  4861  0032C6  B0D8               	btfsc	status,0,c
  4862  0032C8  2A0E               	incf	___awdiv@quotient+1,f,c
  4863  0032CA                     l621:
  4864  0032CA  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4865  0032CE  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4866  0032D2  0012               	return	
  4867  0032D4                     __end_of___awdiv:
  4868                           	opt stack 0
  4869                           tblptru	equ	0xFF8
  4870                           tblptrh	equ	0xFF7
  4871                           tblptrl	equ	0xFF6
  4872                           tablat	equ	0xFF5
  4873                           indf0	equ	0xFEF
  4874                           postinc0	equ	0xFEE
  4875                           plusw0	equ	0xFEB
  4876                           fsr0h	equ	0xFEA
  4877                           fsr0l	equ	0xFE9
  4878                           wreg	equ	0xFE8
  4879                           postdec1	equ	0xFE5
  4880                           plusw1	equ	0xFE3
  4881                           fsr1l	equ	0xFE1
  4882                           plusw2	equ	0xFDB
  4883                           fsr2h	equ	0xFDA
  4884                           fsr2l	equ	0xFD9
  4885                           status	equ	0xFD8
  4886                           
  4887 ;; *************** function _init *****************
  4888 ;; Defined at:
  4889 ;;		line 20 in file "main.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;		None
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;		None
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      void 
  4896 ;; Registers used:
  4897 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4907 ;;Total ram usage:        0 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    5
  4910 ;; This function calls:
  4911 ;;		_initGLCD
  4912 ;; This function is called by:
  4913 ;;		_main
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           	psect	text9
  4918  0034A0                     __ptext9:
  4919                           	opt stack 0
  4920  0034A0                     _init:
  4921                           	opt stack 25
  4922                           
  4923                           ;main.c: 25: LATA = 0x00;
  4924                           
  4925                           ;incstack = 0
  4926  0034A0  0E00               	movlw	0
  4927  0034A2  6E89               	movwf	3977,c	;volatile
  4928                           
  4929                           ;main.c: 26: LATB = 0x00;
  4930  0034A4  0E00               	movlw	0
  4931  0034A6  6E8A               	movwf	3978,c	;volatile
  4932                           
  4933                           ;main.c: 27: LATC = 0x00;
  4934  0034A8  0E00               	movlw	0
  4935  0034AA  6E8B               	movwf	3979,c	;volatile
  4936                           
  4937                           ;main.c: 28: LATD = 0x00;
  4938  0034AC  0E00               	movlw	0
  4939  0034AE  6E8C               	movwf	3980,c	;volatile
  4940                           
  4941                           ;main.c: 29: LATE = 0x00;
  4942  0034B0  0E00               	movlw	0
  4943  0034B2  6E8D               	movwf	3981,c	;volatile
  4944                           
  4945                           ;main.c: 33: TRISA = 0xFF;
  4946  0034B4  6892               	setf	3986,c	;volatile
  4947                           
  4948                           ;main.c: 34: TRISB = 0xFF;
  4949  0034B6  6893               	setf	3987,c	;volatile
  4950                           
  4951                           ;main.c: 35: TRISC = 0b10000000;
  4952  0034B8  0E80               	movlw	128
  4953  0034BA  6E94               	movwf	3988,c	;volatile
  4954                           
  4955                           ;main.c: 39: TRISD = 0b00000001;
  4956  0034BC  0E01               	movlw	1
  4957  0034BE  6E95               	movwf	3989,c	;volatile
  4958                           
  4959                           ;main.c: 45: TRISE = 0b00000100;
  4960  0034C0  0E04               	movlw	4
  4961  0034C2  6E96               	movwf	3990,c	;volatile
  4962                           
  4963                           ;main.c: 52: ADCON0 = 0x00;
  4964  0034C4  0E00               	movlw	0
  4965  0034C6  6EC2               	movwf	4034,c	;volatile
  4966                           
  4967                           ;main.c: 53: ADCON1 = 0b00001111;
  4968  0034C8  0E0F               	movlw	15
  4969  0034CA  6EC1               	movwf	4033,c	;volatile
  4970                           
  4971                           ;main.c: 57: initGLCD();
  4972  0034CC  ECED  F014         	call	_initGLCD	;wreg free
  4973  0034D0  0012               	return		;funcret
  4974  0034D2                     __end_of_init:
  4975                           	opt stack 0
  4976                           tblptru	equ	0xFF8
  4977                           tblptrh	equ	0xFF7
  4978                           tblptrl	equ	0xFF6
  4979                           tablat	equ	0xFF5
  4980                           indf0	equ	0xFEF
  4981                           postinc0	equ	0xFEE
  4982                           plusw0	equ	0xFEB
  4983                           fsr0h	equ	0xFEA
  4984                           fsr0l	equ	0xFE9
  4985                           wreg	equ	0xFE8
  4986                           postdec1	equ	0xFE5
  4987                           plusw1	equ	0xFE3
  4988                           fsr1l	equ	0xFE1
  4989                           plusw2	equ	0xFDB
  4990                           fsr2h	equ	0xFDA
  4991                           fsr2l	equ	0xFD9
  4992                           status	equ	0xFD8
  4993                           
  4994 ;; *************** function _initGLCD *****************
  4995 ;; Defined at:
  4996 ;;		line 238 in file "GLCD_PIC_V1.1.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;		None
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;		None
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  1    wreg      void 
  5003 ;; Registers used:
  5004 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;Total ram usage:        2 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    4
  5017 ;; This function calls:
  5018 ;;		_glcdDrawRectangle
  5019 ;;		_glcdSetCOLMOD
  5020 ;;		_glcdTransfer
  5021 ;;		_spiInit
  5022 ;; This function is called by:
  5023 ;;		_init
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text10
  5028  0029DA                     __ptext10:
  5029                           	opt stack 0
  5030  0029DA                     _initGLCD:
  5031                           	opt stack 25
  5032                           
  5033                           ;GLCD_PIC_V1.1.c: 262: LATDbits.LATD0 = 1;
  5034                           
  5035                           ;incstack = 0
  5036  0029DA  808C               	bsf	3980,0,c	;volatile
  5037                           
  5038                           ;GLCD_PIC_V1.1.c: 263: LATDbits.LATD1 = 1;
  5039  0029DC  828C               	bsf	3980,1,c	;volatile
  5040                           
  5041                           ;GLCD_PIC_V1.1.c: 264: TRISDbits.TRISD0 = 0;
  5042  0029DE  9095               	bcf	3989,0,c	;volatile
  5043                           
  5044                           ;GLCD_PIC_V1.1.c: 265: TRISDbits.TRISD1 = 0;
  5045  0029E0  9295               	bcf	3989,1,c	;volatile
  5046                           
  5047                           ;GLCD_PIC_V1.1.c: 268: spiInit(4);
  5048  0029E2  0E04               	movlw	4
  5049  0029E4  EC01  F01A         	call	_spiInit
  5050                           
  5051                           ;GLCD_PIC_V1.1.c: 272: _delay((unsigned long)((20)*(40000000/4000.0)));
  5052  0029E8  0E02               	movlw	2
  5053  0029EA  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  5054  0029EC  0E04               	movlw	4
  5055  0029EE  6E1A               	movwf	??_initGLCD& (0+255),c
  5056  0029F0  0EBA               	movlw	186
  5057  0029F2                     u2667:
  5058  0029F2  2EE8               	decfsz	wreg,f,c
  5059  0029F4  D7FE               	bra	u2667
  5060  0029F6  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  5061  0029F8  D7FC               	bra	u2667
  5062  0029FA  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  5063  0029FC  D7FA               	bra	u2667
  5064  0029FE  D000               	nop2	
  5065                           
  5066                           ;GLCD_PIC_V1.1.c: 275: { glcdTransfer(INST_SWRESET, 1); _delay((unsigned long)((130)*(40
      +                          000000/4000.0))); };
  5067  002A00  0E01               	movlw	1
  5068  002A02  6E04               	movwf	glcdTransfer@cmd,c
  5069  002A04  0E47               	movlw	low GLCD_PIC@INST_SWRESET
  5070  002A06  6EF6               	movwf	tblptrl,c
  5071  002A08                     	if	1	;There is more than 1 active tblptr byte
  5072  002A08  0E10               	movlw	high GLCD_PIC@INST_SWRESET
  5073  002A0A  6EF7               	movwf	tblptrh,c
  5074  002A0C                     	endif
  5075  002A0C                     	if	0	;There are less than 3 active tblptr bytes
  5076  002A0C                     	endif
  5077  002A0C  0008               	tblrd		*
  5078  002A0E  50F5               	movf	tablat,w,c
  5079  002A10  EC7F  F01A         	call	_glcdTransfer
  5080  002A14  0E07               	movlw	7
  5081  002A16  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  5082  002A18  0E99               	movlw	153
  5083  002A1A  6E1A               	movwf	??_initGLCD& (0+255),c
  5084  002A1C  0E49               	movlw	73
  5085  002A1E                     u2677:
  5086  002A1E  2EE8               	decfsz	wreg,f,c
  5087  002A20  D7FE               	bra	u2677
  5088  002A22  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  5089  002A24  D7FC               	bra	u2677
  5090  002A26  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  5091  002A28  D7FA               	bra	u2677
  5092  002A2A  F000               	nop	
  5093                           
  5094                           ;GLCD_PIC_V1.1.c: 277: { glcdTransfer(INST_SLPOUT, 1); _delay((unsigned long)((130)*(400
      +                          00000/4000.0))); };
  5095  002A2C  0E01               	movlw	1
  5096  002A2E  6E04               	movwf	glcdTransfer@cmd,c
  5097  002A30  0E45               	movlw	low GLCD_PIC@INST_SLPOUT
  5098  002A32  6EF6               	movwf	tblptrl,c
  5099  002A34                     	if	1	;There is more than 1 active tblptr byte
  5100  002A34  0E10               	movlw	high GLCD_PIC@INST_SLPOUT
  5101  002A36  6EF7               	movwf	tblptrh,c
  5102  002A38                     	endif
  5103  002A38                     	if	0	;There are less than 3 active tblptr bytes
  5104  002A38                     	endif
  5105  002A38  0008               	tblrd		*
  5106  002A3A  50F5               	movf	tablat,w,c
  5107  002A3C  EC7F  F01A         	call	_glcdTransfer
  5108  002A40  0E07               	movlw	7
  5109  002A42  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  5110  002A44  0E99               	movlw	153
  5111  002A46  6E1A               	movwf	??_initGLCD& (0+255),c
  5112  002A48  0E49               	movlw	73
  5113  002A4A                     u2687:
  5114  002A4A  2EE8               	decfsz	wreg,f,c
  5115  002A4C  D7FE               	bra	u2687
  5116  002A4E  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  5117  002A50  D7FC               	bra	u2687
  5118  002A52  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  5119  002A54  D7FA               	bra	u2687
  5120  002A56  F000               	nop	
  5121                           
  5122                           ;GLCD_PIC_V1.1.c: 280: glcdTransfer(INST_FRMCTR1, 1);
  5123  002A58  0E01               	movlw	1
  5124  002A5A  6E04               	movwf	glcdTransfer@cmd,c
  5125  002A5C  0E33               	movlw	low GLCD_PIC@INST_FRMCTR1
  5126  002A5E  6EF6               	movwf	tblptrl,c
  5127  002A60                     	if	1	;There is more than 1 active tblptr byte
  5128  002A60  0E10               	movlw	high GLCD_PIC@INST_FRMCTR1
  5129  002A62  6EF7               	movwf	tblptrh,c
  5130  002A64                     	endif
  5131  002A64                     	if	0	;There are less than 3 active tblptr bytes
  5132  002A64                     	endif
  5133  002A64  0008               	tblrd		*
  5134  002A66  50F5               	movf	tablat,w,c
  5135  002A68  EC7F  F01A         	call	_glcdTransfer
  5136                           
  5137                           ;GLCD_PIC_V1.1.c: 281: glcdTransfer(0x00, 0);
  5138  002A6C  0E00               	movlw	0
  5139  002A6E  6E04               	movwf	glcdTransfer@cmd,c
  5140  002A70  0E00               	movlw	0
  5141  002A72  EC7F  F01A         	call	_glcdTransfer
  5142                           
  5143                           ;GLCD_PIC_V1.1.c: 282: glcdTransfer(0x06, 0);
  5144  002A76  0E00               	movlw	0
  5145  002A78  6E04               	movwf	glcdTransfer@cmd,c
  5146  002A7A  0E06               	movlw	6
  5147  002A7C  EC7F  F01A         	call	_glcdTransfer
  5148                           
  5149                           ;GLCD_PIC_V1.1.c: 283: glcdTransfer(0x03, 0);
  5150  002A80  0E00               	movlw	0
  5151  002A82  6E04               	movwf	glcdTransfer@cmd,c
  5152  002A84  0E03               	movlw	3
  5153  002A86  EC7F  F01A         	call	_glcdTransfer
  5154                           
  5155                           ;GLCD_PIC_V1.1.c: 285: glcdTransfer(INST_FRMCTR2, 1);
  5156  002A8A  0E01               	movlw	1
  5157  002A8C  6E04               	movwf	glcdTransfer@cmd,c
  5158  002A8E  0E32               	movlw	low GLCD_PIC@INST_FRMCTR2
  5159  002A90  6EF6               	movwf	tblptrl,c
  5160  002A92                     	if	1	;There is more than 1 active tblptr byte
  5161  002A92  0E10               	movlw	high GLCD_PIC@INST_FRMCTR2
  5162  002A94  6EF7               	movwf	tblptrh,c
  5163  002A96                     	endif
  5164  002A96                     	if	0	;There are less than 3 active tblptr bytes
  5165  002A96                     	endif
  5166  002A96  0008               	tblrd		*
  5167  002A98  50F5               	movf	tablat,w,c
  5168  002A9A  EC7F  F01A         	call	_glcdTransfer
  5169                           
  5170                           ;GLCD_PIC_V1.1.c: 286: glcdTransfer(0x01, 0);
  5171  002A9E  0E00               	movlw	0
  5172  002AA0  6E04               	movwf	glcdTransfer@cmd,c
  5173  002AA2  0E01               	movlw	1
  5174  002AA4  EC7F  F01A         	call	_glcdTransfer
  5175                           
  5176                           ;GLCD_PIC_V1.1.c: 287: glcdTransfer(0x2C, 0);
  5177  002AA8  0E00               	movlw	0
  5178  002AAA  6E04               	movwf	glcdTransfer@cmd,c
  5179  002AAC  0E2C               	movlw	44
  5180  002AAE  EC7F  F01A         	call	_glcdTransfer
  5181                           
  5182                           ;GLCD_PIC_V1.1.c: 288: glcdTransfer(0x2D, 0);
  5183  002AB2  0E00               	movlw	0
  5184  002AB4  6E04               	movwf	glcdTransfer@cmd,c
  5185  002AB6  0E2D               	movlw	45
  5186  002AB8  EC7F  F01A         	call	_glcdTransfer
  5187                           
  5188                           ;GLCD_PIC_V1.1.c: 290: glcdTransfer(INST_FRMCTR3, 1);
  5189  002ABC  0E01               	movlw	1
  5190  002ABE  6E04               	movwf	glcdTransfer@cmd,c
  5191  002AC0  0E31               	movlw	low GLCD_PIC@INST_FRMCTR3
  5192  002AC2  6EF6               	movwf	tblptrl,c
  5193  002AC4                     	if	1	;There is more than 1 active tblptr byte
  5194  002AC4  0E10               	movlw	high GLCD_PIC@INST_FRMCTR3
  5195  002AC6  6EF7               	movwf	tblptrh,c
  5196  002AC8                     	endif
  5197  002AC8                     	if	0	;There are less than 3 active tblptr bytes
  5198  002AC8                     	endif
  5199  002AC8  0008               	tblrd		*
  5200  002ACA  50F5               	movf	tablat,w,c
  5201  002ACC  EC7F  F01A         	call	_glcdTransfer
  5202                           
  5203                           ;GLCD_PIC_V1.1.c: 291: glcdTransfer(0x01, 0);
  5204  002AD0  0E00               	movlw	0
  5205  002AD2  6E04               	movwf	glcdTransfer@cmd,c
  5206  002AD4  0E01               	movlw	1
  5207  002AD6  EC7F  F01A         	call	_glcdTransfer
  5208                           
  5209                           ;GLCD_PIC_V1.1.c: 292: glcdTransfer(0x2C, 0);
  5210  002ADA  0E00               	movlw	0
  5211  002ADC  6E04               	movwf	glcdTransfer@cmd,c
  5212  002ADE  0E2C               	movlw	44
  5213  002AE0  EC7F  F01A         	call	_glcdTransfer
  5214                           
  5215                           ;GLCD_PIC_V1.1.c: 293: glcdTransfer(0x2D, 0);
  5216  002AE4  0E00               	movlw	0
  5217  002AE6  6E04               	movwf	glcdTransfer@cmd,c
  5218  002AE8  0E2D               	movlw	45
  5219  002AEA  EC7F  F01A         	call	_glcdTransfer
  5220                           
  5221                           ;GLCD_PIC_V1.1.c: 295: glcdTransfer(INST_INVCTR, 1);
  5222  002AEE  0E01               	movlw	1
  5223  002AF0  6E04               	movwf	glcdTransfer@cmd,c
  5224  002AF2  0E30               	movlw	low GLCD_PIC@INST_INVCTR
  5225  002AF4  6EF6               	movwf	tblptrl,c
  5226  002AF6                     	if	1	;There is more than 1 active tblptr byte
  5227  002AF6  0E10               	movlw	high GLCD_PIC@INST_INVCTR
  5228  002AF8  6EF7               	movwf	tblptrh,c
  5229  002AFA                     	endif
  5230  002AFA                     	if	0	;There are less than 3 active tblptr bytes
  5231  002AFA                     	endif
  5232  002AFA  0008               	tblrd		*
  5233  002AFC  50F5               	movf	tablat,w,c
  5234  002AFE  EC7F  F01A         	call	_glcdTransfer
  5235                           
  5236                           ;GLCD_PIC_V1.1.c: 296: glcdTransfer(0x00, 0);
  5237  002B02  0E00               	movlw	0
  5238  002B04  6E04               	movwf	glcdTransfer@cmd,c
  5239  002B06  0E00               	movlw	0
  5240  002B08  EC7F  F01A         	call	_glcdTransfer
  5241                           
  5242                           ;GLCD_PIC_V1.1.c: 299: glcdTransfer(INST_PWCTR1, 1);
  5243  002B0C  0E01               	movlw	1
  5244  002B0E  6E04               	movwf	glcdTransfer@cmd,c
  5245  002B10  0E2F               	movlw	low GLCD_PIC@INST_PWCTR1
  5246  002B12  6EF6               	movwf	tblptrl,c
  5247  002B14                     	if	1	;There is more than 1 active tblptr byte
  5248  002B14  0E10               	movlw	high GLCD_PIC@INST_PWCTR1
  5249  002B16  6EF7               	movwf	tblptrh,c
  5250  002B18                     	endif
  5251  002B18                     	if	0	;There are less than 3 active tblptr bytes
  5252  002B18                     	endif
  5253  002B18  0008               	tblrd		*
  5254  002B1A  50F5               	movf	tablat,w,c
  5255  002B1C  EC7F  F01A         	call	_glcdTransfer
  5256                           
  5257                           ;GLCD_PIC_V1.1.c: 300: glcdTransfer(0xA2, 0);
  5258  002B20  0E00               	movlw	0
  5259  002B22  6E04               	movwf	glcdTransfer@cmd,c
  5260  002B24  0EA2               	movlw	162
  5261  002B26  EC7F  F01A         	call	_glcdTransfer
  5262                           
  5263                           ;GLCD_PIC_V1.1.c: 301: glcdTransfer(0x02, 0);
  5264  002B2A  0E00               	movlw	0
  5265  002B2C  6E04               	movwf	glcdTransfer@cmd,c
  5266  002B2E  0E02               	movlw	2
  5267  002B30  EC7F  F01A         	call	_glcdTransfer
  5268                           
  5269                           ;GLCD_PIC_V1.1.c: 302: glcdTransfer(0x84, 0);
  5270  002B34  0E00               	movlw	0
  5271  002B36  6E04               	movwf	glcdTransfer@cmd,c
  5272  002B38  0E84               	movlw	132
  5273  002B3A  EC7F  F01A         	call	_glcdTransfer
  5274                           
  5275                           ;GLCD_PIC_V1.1.c: 304: glcdTransfer(INST_PWCTR2, 1);
  5276  002B3E  0E01               	movlw	1
  5277  002B40  6E04               	movwf	glcdTransfer@cmd,c
  5278  002B42  0E2E               	movlw	low GLCD_PIC@INST_PWCTR2
  5279  002B44  6EF6               	movwf	tblptrl,c
  5280  002B46                     	if	1	;There is more than 1 active tblptr byte
  5281  002B46  0E10               	movlw	high GLCD_PIC@INST_PWCTR2
  5282  002B48  6EF7               	movwf	tblptrh,c
  5283  002B4A                     	endif
  5284  002B4A                     	if	0	;There are less than 3 active tblptr bytes
  5285  002B4A                     	endif
  5286  002B4A  0008               	tblrd		*
  5287  002B4C  50F5               	movf	tablat,w,c
  5288  002B4E  EC7F  F01A         	call	_glcdTransfer
  5289                           
  5290                           ;GLCD_PIC_V1.1.c: 305: glcdTransfer(0xC5, 0);
  5291  002B52  0E00               	movlw	0
  5292  002B54  6E04               	movwf	glcdTransfer@cmd,c
  5293  002B56  0EC5               	movlw	197
  5294  002B58  EC7F  F01A         	call	_glcdTransfer
  5295                           
  5296                           ;GLCD_PIC_V1.1.c: 307: glcdTransfer(INST_PWCTR3, 1);
  5297  002B5C  0E01               	movlw	1
  5298  002B5E  6E04               	movwf	glcdTransfer@cmd,c
  5299  002B60  0E2D               	movlw	low GLCD_PIC@INST_PWCTR3
  5300  002B62  6EF6               	movwf	tblptrl,c
  5301  002B64                     	if	1	;There is more than 1 active tblptr byte
  5302  002B64  0E10               	movlw	high GLCD_PIC@INST_PWCTR3
  5303  002B66  6EF7               	movwf	tblptrh,c
  5304  002B68                     	endif
  5305  002B68                     	if	0	;There are less than 3 active tblptr bytes
  5306  002B68                     	endif
  5307  002B68  0008               	tblrd		*
  5308  002B6A  50F5               	movf	tablat,w,c
  5309  002B6C  EC7F  F01A         	call	_glcdTransfer
  5310                           
  5311                           ;GLCD_PIC_V1.1.c: 308: glcdTransfer(0x0A, 0);
  5312  002B70  0E00               	movlw	0
  5313  002B72  6E04               	movwf	glcdTransfer@cmd,c
  5314  002B74  0E0A               	movlw	10
  5315  002B76  EC7F  F01A         	call	_glcdTransfer
  5316                           
  5317                           ;GLCD_PIC_V1.1.c: 309: glcdTransfer(0x00, 0);
  5318  002B7A  0E00               	movlw	0
  5319  002B7C  6E04               	movwf	glcdTransfer@cmd,c
  5320  002B7E  0E00               	movlw	0
  5321  002B80  EC7F  F01A         	call	_glcdTransfer
  5322                           
  5323                           ;GLCD_PIC_V1.1.c: 311: glcdTransfer(INST_PWCTR4, 1);
  5324  002B84  0E01               	movlw	1
  5325  002B86  6E04               	movwf	glcdTransfer@cmd,c
  5326  002B88  0E2C               	movlw	low GLCD_PIC@INST_PWCTR4
  5327  002B8A  6EF6               	movwf	tblptrl,c
  5328  002B8C                     	if	1	;There is more than 1 active tblptr byte
  5329  002B8C  0E10               	movlw	high GLCD_PIC@INST_PWCTR4
  5330  002B8E  6EF7               	movwf	tblptrh,c
  5331  002B90                     	endif
  5332  002B90                     	if	0	;There are less than 3 active tblptr bytes
  5333  002B90                     	endif
  5334  002B90  0008               	tblrd		*
  5335  002B92  50F5               	movf	tablat,w,c
  5336  002B94  EC7F  F01A         	call	_glcdTransfer
  5337                           
  5338                           ;GLCD_PIC_V1.1.c: 312: glcdTransfer(0x8A, 0);
  5339  002B98  0E00               	movlw	0
  5340  002B9A  6E04               	movwf	glcdTransfer@cmd,c
  5341  002B9C  0E8A               	movlw	138
  5342  002B9E  EC7F  F01A         	call	_glcdTransfer
  5343                           
  5344                           ;GLCD_PIC_V1.1.c: 313: glcdTransfer(0x2A, 0);
  5345  002BA2  0E00               	movlw	0
  5346  002BA4  6E04               	movwf	glcdTransfer@cmd,c
  5347  002BA6  0E2A               	movlw	42
  5348  002BA8  EC7F  F01A         	call	_glcdTransfer
  5349                           
  5350                           ;GLCD_PIC_V1.1.c: 315: glcdTransfer(INST_PWCTR5, 1);
  5351  002BAC  0E01               	movlw	1
  5352  002BAE  6E04               	movwf	glcdTransfer@cmd,c
  5353  002BB0  0E2B               	movlw	low GLCD_PIC@INST_PWCTR5
  5354  002BB2  6EF6               	movwf	tblptrl,c
  5355  002BB4                     	if	1	;There is more than 1 active tblptr byte
  5356  002BB4  0E10               	movlw	high GLCD_PIC@INST_PWCTR5
  5357  002BB6  6EF7               	movwf	tblptrh,c
  5358  002BB8                     	endif
  5359  002BB8                     	if	0	;There are less than 3 active tblptr bytes
  5360  002BB8                     	endif
  5361  002BB8  0008               	tblrd		*
  5362  002BBA  50F5               	movf	tablat,w,c
  5363  002BBC  EC7F  F01A         	call	_glcdTransfer
  5364                           
  5365                           ;GLCD_PIC_V1.1.c: 316: glcdTransfer(0x8A, 0);
  5366  002BC0  0E00               	movlw	0
  5367  002BC2  6E04               	movwf	glcdTransfer@cmd,c
  5368  002BC4  0E8A               	movlw	138
  5369  002BC6  EC7F  F01A         	call	_glcdTransfer
  5370                           
  5371                           ;GLCD_PIC_V1.1.c: 317: glcdTransfer(0x2A, 0);
  5372  002BCA  0E00               	movlw	0
  5373  002BCC  6E04               	movwf	glcdTransfer@cmd,c
  5374  002BCE  0E2A               	movlw	42
  5375  002BD0  EC7F  F01A         	call	_glcdTransfer
  5376                           
  5377                           ;GLCD_PIC_V1.1.c: 320: glcdTransfer(INST_VMCTR1, 1);
  5378  002BD4  0E01               	movlw	1
  5379  002BD6  6E04               	movwf	glcdTransfer@cmd,c
  5380  002BD8  0E2A               	movlw	low GLCD_PIC@INST_VMCTR1
  5381  002BDA  6EF6               	movwf	tblptrl,c
  5382  002BDC                     	if	1	;There is more than 1 active tblptr byte
  5383  002BDC  0E10               	movlw	high GLCD_PIC@INST_VMCTR1
  5384  002BDE  6EF7               	movwf	tblptrh,c
  5385  002BE0                     	endif
  5386  002BE0                     	if	0	;There are less than 3 active tblptr bytes
  5387  002BE0                     	endif
  5388  002BE0  0008               	tblrd		*
  5389  002BE2  50F5               	movf	tablat,w,c
  5390  002BE4  EC7F  F01A         	call	_glcdTransfer
  5391                           
  5392                           ;GLCD_PIC_V1.1.c: 321: glcdTransfer(0x3C, 0);
  5393  002BE8  0E00               	movlw	0
  5394  002BEA  6E04               	movwf	glcdTransfer@cmd,c
  5395  002BEC  0E3C               	movlw	60
  5396  002BEE  EC7F  F01A         	call	_glcdTransfer
  5397                           
  5398                           ;GLCD_PIC_V1.1.c: 323: glcdTransfer(INST_INVOFF, 1);
  5399  002BF2  0E01               	movlw	1
  5400  002BF4  6E04               	movwf	glcdTransfer@cmd,c
  5401  002BF6  0E42               	movlw	low GLCD_PIC@INST_INVOFF
  5402  002BF8  6EF6               	movwf	tblptrl,c
  5403  002BFA                     	if	1	;There is more than 1 active tblptr byte
  5404  002BFA  0E10               	movlw	high GLCD_PIC@INST_INVOFF
  5405  002BFC  6EF7               	movwf	tblptrh,c
  5406  002BFE                     	endif
  5407  002BFE                     	if	0	;There are less than 3 active tblptr bytes
  5408  002BFE                     	endif
  5409  002BFE  0008               	tblrd		*
  5410  002C00  50F5               	movf	tablat,w,c
  5411  002C02  EC7F  F01A         	call	_glcdTransfer
  5412                           
  5413                           ;GLCD_PIC_V1.1.c: 331: glcdSetCOLMOD(18);
  5414  002C06  0E12               	movlw	18
  5415  002C08  ECD9  F019         	call	_glcdSetCOLMOD
  5416                           
  5417                           ;GLCD_PIC_V1.1.c: 334: glcdTransfer(INST_GAMSET, 1);
  5418  002C0C  0E01               	movlw	1
  5419  002C0E  6E04               	movwf	glcdTransfer@cmd,c
  5420  002C10  0E40               	movlw	low GLCD_PIC@INST_GAMSET
  5421  002C12  6EF6               	movwf	tblptrl,c
  5422  002C14                     	if	1	;There is more than 1 active tblptr byte
  5423  002C14  0E10               	movlw	high GLCD_PIC@INST_GAMSET
  5424  002C16  6EF7               	movwf	tblptrh,c
  5425  002C18                     	endif
  5426  002C18                     	if	0	;There are less than 3 active tblptr bytes
  5427  002C18                     	endif
  5428  002C18  0008               	tblrd		*
  5429  002C1A  50F5               	movf	tablat,w,c
  5430  002C1C  EC7F  F01A         	call	_glcdTransfer
  5431                           
  5432                           ;GLCD_PIC_V1.1.c: 335: glcdTransfer(0x01, 0);
  5433  002C20  0E00               	movlw	0
  5434  002C22  6E04               	movwf	glcdTransfer@cmd,c
  5435  002C24  0E01               	movlw	1
  5436  002C26  EC7F  F01A         	call	_glcdTransfer
  5437                           
  5438                           ;GLCD_PIC_V1.1.c: 337: glcdTransfer(INST_IDMOFF, 1);
  5439  002C2A  0E01               	movlw	1
  5440  002C2C  6E04               	movwf	glcdTransfer@cmd,c
  5441  002C2E  0E36               	movlw	low GLCD_PIC@INST_IDMOFF
  5442  002C30  6EF6               	movwf	tblptrl,c
  5443  002C32                     	if	1	;There is more than 1 active tblptr byte
  5444  002C32  0E10               	movlw	high GLCD_PIC@INST_IDMOFF
  5445  002C34  6EF7               	movwf	tblptrh,c
  5446  002C36                     	endif
  5447  002C36                     	if	0	;There are less than 3 active tblptr bytes
  5448  002C36                     	endif
  5449  002C36  0008               	tblrd		*
  5450  002C38  50F5               	movf	tablat,w,c
  5451  002C3A  EC7F  F01A         	call	_glcdTransfer
  5452                           
  5453                           ;GLCD_PIC_V1.1.c: 339: glcdTransfer(INST_NORON, 1);
  5454  002C3E  0E01               	movlw	1
  5455  002C40  6E04               	movwf	glcdTransfer@cmd,c
  5456  002C42  0E43               	movlw	low GLCD_PIC@INST_NORON
  5457  002C44  6EF6               	movwf	tblptrl,c
  5458  002C46                     	if	1	;There is more than 1 active tblptr byte
  5459  002C46  0E10               	movlw	high GLCD_PIC@INST_NORON
  5460  002C48  6EF7               	movwf	tblptrh,c
  5461  002C4A                     	endif
  5462  002C4A                     	if	0	;There are less than 3 active tblptr bytes
  5463  002C4A                     	endif
  5464  002C4A  0008               	tblrd		*
  5465  002C4C  50F5               	movf	tablat,w,c
  5466  002C4E  EC7F  F01A         	call	_glcdTransfer
  5467                           
  5468                           ;GLCD_PIC_V1.1.c: 342: MADCTLbits.MX = 1;
  5469  002C52  8C7C               	bsf	_MADCTLbits,6,c
  5470                           
  5471                           ;GLCD_PIC_V1.1.c: 343: MADCTLbits.MY = 1;
  5472  002C54  8E7C               	bsf	_MADCTLbits,7,c
  5473                           
  5474                           ;GLCD_PIC_V1.1.c: 344: MADCTLbits.MV = 1;
  5475  002C56  8A7C               	bsf	_MADCTLbits,5,c
  5476                           
  5477                           ;GLCD_PIC_V1.1.c: 345: MADCTLbits.ML = 0;
  5478  002C58  987C               	bcf	_MADCTLbits,4,c
  5479                           
  5480                           ;GLCD_PIC_V1.1.c: 346: MADCTLbits.RGB = 0;
  5481  002C5A  967C               	bcf	_MADCTLbits,3,c
  5482                           
  5483                           ;GLCD_PIC_V1.1.c: 347: MADCTLbits.MH = 0;
  5484  002C5C  947C               	bcf	_MADCTLbits,2,c
  5485                           
  5486                           ;GLCD_PIC_V1.1.c: 348: { glcdTransfer(INST_MADCTL, 1); glcdTransfer(MADCTLbits.reg, 0);}
      +                          ;
  5487  002C5E  0E01               	movlw	1
  5488  002C60  6E04               	movwf	glcdTransfer@cmd,c
  5489  002C62  0E37               	movlw	low GLCD_PIC@INST_MADCTL
  5490  002C64  6EF6               	movwf	tblptrl,c
  5491  002C66                     	if	1	;There is more than 1 active tblptr byte
  5492  002C66  0E10               	movlw	high GLCD_PIC@INST_MADCTL
  5493  002C68  6EF7               	movwf	tblptrh,c
  5494  002C6A                     	endif
  5495  002C6A                     	if	0	;There are less than 3 active tblptr bytes
  5496  002C6A                     	endif
  5497  002C6A  0008               	tblrd		*
  5498  002C6C  50F5               	movf	tablat,w,c
  5499  002C6E  EC7F  F01A         	call	_glcdTransfer
  5500  002C72  0E00               	movlw	0
  5501  002C74  6E04               	movwf	glcdTransfer@cmd,c
  5502  002C76  507C               	movf	_MADCTLbits,w,c
  5503  002C78  EC7F  F01A         	call	_glcdTransfer
  5504                           
  5505                           ;GLCD_PIC_V1.1.c: 352: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  5506  002C7C  0E6A               	movlw	low _GLCD_SIZE_HORZ
  5507  002C7E  6EF6               	movwf	tblptrl,c
  5508  002C80                     	if	1	;There is more than 1 active tblptr byte
  5509  002C80  0E10               	movlw	high _GLCD_SIZE_HORZ
  5510  002C82  6EF7               	movwf	tblptrh,c
  5511  002C84                     	endif
  5512  002C84                     	if	0	;There are less than 3 active tblptr bytes
  5513  002C84                     	endif
  5514  002C84  0008               	tblrd		*
  5515  002C86  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
  5516  002C8A  0E00               	movlw	0
  5517  002C8C  6E08               	movwf	glcdDrawRectangle@YS,c
  5518  002C8E  0E69               	movlw	low _GLCD_SIZE_VERT
  5519  002C90  6EF6               	movwf	tblptrl,c
  5520  002C92                     	if	1	;There is more than 1 active tblptr byte
  5521  002C92  0E10               	movlw	high _GLCD_SIZE_VERT
  5522  002C94  6EF7               	movwf	tblptrh,c
  5523  002C96                     	endif
  5524  002C96                     	if	0	;There are less than 3 active tblptr bytes
  5525  002C96                     	endif
  5526  002C96  0008               	tblrd		*
  5527  002C98  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
  5528  002C9C  0E25               	movlw	low _BLACK
  5529  002C9E  6EF6               	movwf	tblptrl,c
  5530  002CA0                     	if	1	;There is more than 1 active tblptr byte
  5531  002CA0  0E10               	movlw	high _BLACK
  5532  002CA2  6EF7               	movwf	tblptrh,c
  5533  002CA4                     	endif
  5534  002CA4                     	if	0	;There are less than 3 active tblptr bytes
  5535  002CA4                     	endif
  5536  002CA4  0009               	tblrd		*+
  5537  002CA6  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  5538  002CAA  0009               	tblrd		*+
  5539  002CAC  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  5540  002CB0  0009               	tblrd		*+
  5541  002CB2  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  5542  002CB6  000A               	tblrd		*-
  5543  002CB8  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  5544  002CBC  0E00               	movlw	0
  5545  002CBE  EC73  F017         	call	_glcdDrawRectangle
  5546                           
  5547                           ;GLCD_PIC_V1.1.c: 354: glcdTransfer(INST_DISPON, 1);
  5548  002CC2  0E01               	movlw	1
  5549  002CC4  6E04               	movwf	glcdTransfer@cmd,c
  5550  002CC6  0E3E               	movlw	low GLCD_PIC@INST_DISPON
  5551  002CC8  6EF6               	movwf	tblptrl,c
  5552  002CCA                     	if	1	;There is more than 1 active tblptr byte
  5553  002CCA  0E10               	movlw	high GLCD_PIC@INST_DISPON
  5554  002CCC  6EF7               	movwf	tblptrh,c
  5555  002CCE                     	endif
  5556  002CCE                     	if	0	;There are less than 3 active tblptr bytes
  5557  002CCE                     	endif
  5558  002CCE  0008               	tblrd		*
  5559  002CD0  50F5               	movf	tablat,w,c
  5560  002CD2  EC7F  F01A         	call	_glcdTransfer
  5561                           
  5562                           ;GLCD_PIC_V1.1.c: 355: _delay((unsigned long)((10)*(40000000/4000.0)));
  5563  002CD6  0E82               	movlw	130
  5564  002CD8  6E1A               	movwf	??_initGLCD& (0+255),c
  5565  002CDA  0EDE               	movlw	222
  5566  002CDC                     u2697:
  5567  002CDC  2EE8               	decfsz	wreg,f,c
  5568  002CDE  D7FE               	bra	u2697
  5569  002CE0  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  5570  002CE2  D7FC               	bra	u2697
  5571  002CE4  0012               	return		;funcret
  5572  002CE6                     __end_of_initGLCD:
  5573                           	opt stack 0
  5574                           tblptru	equ	0xFF8
  5575                           tblptrh	equ	0xFF7
  5576                           tblptrl	equ	0xFF6
  5577                           tablat	equ	0xFF5
  5578                           indf0	equ	0xFEF
  5579                           postinc0	equ	0xFEE
  5580                           plusw0	equ	0xFEB
  5581                           fsr0h	equ	0xFEA
  5582                           fsr0l	equ	0xFE9
  5583                           wreg	equ	0xFE8
  5584                           postdec1	equ	0xFE5
  5585                           plusw1	equ	0xFE3
  5586                           fsr1l	equ	0xFE1
  5587                           plusw2	equ	0xFDB
  5588                           fsr2h	equ	0xFDA
  5589                           fsr2l	equ	0xFD9
  5590                           status	equ	0xFD8
  5591                           
  5592 ;; *************** function _spiInit *****************
  5593 ;; Defined at:
  5594 ;;		line 54 in file "SPI_PIC.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;  divider         1    wreg     unsigned char 
  5597 ;; Auto vars:     Size  Location     Type
  5598 ;;  divider         1    0[COMRAM] unsigned char 
  5599 ;; Return value:  Size  Location     Type
  5600 ;;                  1    wreg      void 
  5601 ;; Registers used:
  5602 ;;		wreg, status,2, status,0
  5603 ;; Tracked objects:
  5604 ;;		On entry : 0/0
  5605 ;;		On exit  : 0/0
  5606 ;;		Unchanged: 0/0
  5607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5609 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5611 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5612 ;;Total ram usage:        1 bytes
  5613 ;; Hardware stack levels used:    1
  5614 ;; This function calls:
  5615 ;;		Nothing
  5616 ;; This function is called by:
  5617 ;;		_initGLCD
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           	psect	text11
  5622  003402                     __ptext11:
  5623                           	opt stack 0
  5624  003402                     _spiInit:
  5625                           	opt stack 28
  5626                           
  5627                           ;incstack = 0
  5628                           ;spiInit@divider stored from wreg
  5629  003402  6E01               	movwf	spiInit@divider,c
  5630                           
  5631                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
  5632  003404  9AC6               	bcf	4038,5,c	;volatile
  5633                           
  5634                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
  5635  003406  0E00               	movlw	0
  5636  003408  6EC7               	movwf	4039,c	;volatile
  5637                           
  5638                           ;SPI_PIC.c: 71: switch(divider){
  5639  00340A  D007               	goto	l175
  5640  00340C                     
  5641                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
  5642  00340C  0E11               	movlw	17
  5643  00340E  D003               	goto	L4
  5644  003410                     
  5645                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
  5646  003410  0E12               	movlw	18
  5647  003412  D001               	goto	L4
  5648  003414                     
  5649                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
  5650  003414  0E10               	movlw	16
  5651  003416                     L4:
  5652  003416  6EC6               	movwf	4038,c	;volatile
  5653                           
  5654                           ;SPI_PIC.c: 83: }
  5655  003418  D00B               	goto	l177
  5656  00341A                     l175:
  5657  00341A  5001               	movf	spiInit@divider,w,c
  5658                           
  5659                           ; Switch size 1, requested type "space"
  5660                           ; Number of cases is 3, Range of values is 4 to 64
  5661                           ; switch strategies available:
  5662                           ; Name         Instructions Cycles
  5663                           ; simple_byte           10     6 (average)
  5664                           ;	Chosen strategy is simple_byte
  5665  00341C  0A04               	xorlw	4	; case 4
  5666  00341E  B4D8               	btfsc	status,2,c
  5667  003420  D7F9               	goto	l180
  5668  003422  0A14               	xorlw	20	; case 16
  5669  003424  B4D8               	btfsc	status,2,c
  5670  003426  D7F2               	goto	l178
  5671  003428  0A50               	xorlw	80	; case 64
  5672  00342A  B4D8               	btfsc	status,2,c
  5673  00342C  D7F1               	goto	l179
  5674  00342E  D7F2               	goto	l180
  5675  003430                     l177:
  5676                           
  5677                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
  5678  003430  9A94               	bcf	3988,5,c	;volatile
  5679                           
  5680                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
  5681  003432  8894               	bsf	3988,4,c	;volatile
  5682                           
  5683                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
  5684  003434  9694               	bcf	3988,3,c	;volatile
  5685                           
  5686                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
  5687  003436  8AC6               	bsf	4038,5,c	;volatile
  5688  003438  0012               	return		;funcret
  5689  00343A                     __end_of_spiInit:
  5690                           	opt stack 0
  5691                           tblptru	equ	0xFF8
  5692                           tblptrh	equ	0xFF7
  5693                           tblptrl	equ	0xFF6
  5694                           tablat	equ	0xFF5
  5695                           indf0	equ	0xFEF
  5696                           postinc0	equ	0xFEE
  5697                           plusw0	equ	0xFEB
  5698                           fsr0h	equ	0xFEA
  5699                           fsr0l	equ	0xFE9
  5700                           wreg	equ	0xFE8
  5701                           postdec1	equ	0xFE5
  5702                           plusw1	equ	0xFE3
  5703                           fsr1l	equ	0xFE1
  5704                           plusw2	equ	0xFDB
  5705                           fsr2h	equ	0xFDA
  5706                           fsr2l	equ	0xFD9
  5707                           status	equ	0xFD8
  5708                           
  5709 ;; *************** function _glcdSetCOLMOD *****************
  5710 ;; Defined at:
  5711 ;;		line 167 in file "GLCD_PIC_V1.1.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;  numBitsPerPi    1    wreg     unsigned char 
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;  numBitsPerPi    1    6[COMRAM] unsigned char 
  5716 ;;  rawData         2    7[COMRAM] unsigned short 
  5717 ;; Return value:  Size  Location     Type
  5718 ;;                  1    wreg      void 
  5719 ;; Registers used:
  5720 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5730 ;;Total ram usage:        3 bytes
  5731 ;; Hardware stack levels used:    1
  5732 ;; Hardware stack levels required when called:    3
  5733 ;; This function calls:
  5734 ;;		_glcdTransfer
  5735 ;; This function is called by:
  5736 ;;		_initGLCD
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740                           	psect	text12
  5741  0033B2                     __ptext12:
  5742                           	opt stack 0
  5743  0033B2                     _glcdSetCOLMOD:
  5744                           	opt stack 25
  5745                           
  5746                           ;incstack = 0
  5747                           ;glcdSetCOLMOD@numBitsPerPixel stored from wreg
  5748  0033B2  6E07               	movwf	glcdSetCOLMOD@numBitsPerPixel,c
  5749                           
  5750                           ;GLCD_PIC_V1.1.c: 176: unsigned short rawData;
  5751                           ;GLCD_PIC_V1.1.c: 177: switch(numBitsPerPixel){
  5752  0033B4  D00D               	goto	l310
  5753  0033B6                     
  5754                           ;GLCD_PIC_V1.1.c: 179: rawData = 0b00000011;
  5755  0033B6  0E00               	movlw	0
  5756  0033B8  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  5757  0033BA  0E03               	movlw	3
  5758  0033BC  D003               	goto	L6
  5759  0033BE                     
  5760                           ;GLCD_PIC_V1.1.c: 182: rawData = 0b00000101;
  5761  0033BE  0E00               	movlw	0
  5762  0033C0  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  5763  0033C2  0E05               	movlw	5
  5764  0033C4                     L6:
  5765  0033C4  6E08               	movwf	glcdSetCOLMOD@rawData,c
  5766                           
  5767                           ;GLCD_PIC_V1.1.c: 186: break;
  5768  0033C6  D00D               	goto	l312
  5769  0033C8                     
  5770                           ;GLCD_PIC_V1.1.c: 188: rawData = 0b00000110;
  5771  0033C8  0E00               	movlw	0
  5772  0033CA  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  5773  0033CC  0E06               	movlw	6
  5774  0033CE  D7FA               	goto	L6
  5775  0033D0                     l310:
  5776  0033D0  5007               	movf	glcdSetCOLMOD@numBitsPerPixel,w,c
  5777                           
  5778                           ; Switch size 1, requested type "space"
  5779                           ; Number of cases is 3, Range of values is 12 to 18
  5780                           ; switch strategies available:
  5781                           ; Name         Instructions Cycles
  5782                           ; simple_byte           10     6 (average)
  5783                           ;	Chosen strategy is simple_byte
  5784  0033D2  0A0C               	xorlw	12	; case 12
  5785  0033D4  B4D8               	btfsc	status,2,c
  5786  0033D6  D7EF               	goto	l311
  5787  0033D8  0A1C               	xorlw	28	; case 16
  5788  0033DA  B4D8               	btfsc	status,2,c
  5789  0033DC  D7F0               	goto	l313
  5790  0033DE  0A02               	xorlw	2	; case 18
  5791  0033E0  D7F3               	goto	l315
  5792  0033E2                     l312:
  5793                           
  5794                           ;GLCD_PIC_V1.1.c: 191: glcdTransfer(INST_COLMOD, 1);
  5795  0033E2  0E01               	movlw	1
  5796  0033E4  6E04               	movwf	glcdTransfer@cmd,c
  5797  0033E6  0E34               	movlw	low GLCD_PIC@INST_COLMOD
  5798  0033E8  6EF6               	movwf	tblptrl,c
  5799  0033EA                     	if	1	;There is more than 1 active tblptr byte
  5800  0033EA  0E10               	movlw	high GLCD_PIC@INST_COLMOD
  5801  0033EC  6EF7               	movwf	tblptrh,c
  5802  0033EE                     	endif
  5803  0033EE                     	if	0	;There are less than 3 active tblptr bytes
  5804  0033EE                     	endif
  5805  0033EE  0008               	tblrd		*
  5806  0033F0  50F5               	movf	tablat,w,c
  5807  0033F2  EC7F  F01A         	call	_glcdTransfer
  5808                           
  5809                           ;GLCD_PIC_V1.1.c: 192: glcdTransfer(rawData, 0);
  5810  0033F6  0E00               	movlw	0
  5811  0033F8  6E04               	movwf	glcdTransfer@cmd,c
  5812  0033FA  5008               	movf	glcdSetCOLMOD@rawData,w,c
  5813  0033FC  EC7F  F01A         	call	_glcdTransfer
  5814  003400  0012               	return		;funcret
  5815  003402                     __end_of_glcdSetCOLMOD:
  5816                           	opt stack 0
  5817                           tblptru	equ	0xFF8
  5818                           tblptrh	equ	0xFF7
  5819                           tblptrl	equ	0xFF6
  5820                           tablat	equ	0xFF5
  5821                           indf0	equ	0xFEF
  5822                           postinc0	equ	0xFEE
  5823                           plusw0	equ	0xFEB
  5824                           fsr0h	equ	0xFEA
  5825                           fsr0l	equ	0xFE9
  5826                           wreg	equ	0xFE8
  5827                           postdec1	equ	0xFE5
  5828                           plusw1	equ	0xFE3
  5829                           fsr1l	equ	0xFE1
  5830                           plusw2	equ	0xFDB
  5831                           fsr2h	equ	0xFDA
  5832                           fsr2l	equ	0xFD9
  5833                           status	equ	0xFD8
  5834                           
  5835 ;; *************** function _glcdDrawRectangle *****************
  5836 ;; Defined at:
  5837 ;;		line 38 in file "GLCD_PIC_V1.1.c"
  5838 ;; Parameters:    Size  Location     Type
  5839 ;;  XS              1    wreg     unsigned char 
  5840 ;;  XE              1    6[COMRAM] unsigned char 
  5841 ;;  YS              1    7[COMRAM] unsigned char 
  5842 ;;  YE              1    8[COMRAM] unsigned char 
  5843 ;;  color           4    9[COMRAM] unsigned long 
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;  XS              1   24[COMRAM] unsigned char 
  5846 ;;  i               2   19[COMRAM] unsigned short 
  5847 ;;  colorData       3   21[COMRAM] unsigned char [3]
  5848 ;;  numLoops        2   17[COMRAM] unsigned short 
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  1    wreg      void 
  5851 ;; Registers used:
  5852 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5858 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5861 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5862 ;;Total ram usage:       19 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:    3
  5865 ;; This function calls:
  5866 ;;		___wmul
  5867 ;;		_glcdTransfer
  5868 ;;		_spiSend
  5869 ;; This function is called by:
  5870 ;;		_main
  5871 ;;		_glcdDrawPixel
  5872 ;;		_initGLCD
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           	psect	text13
  5877  002EE6                     __ptext13:
  5878                           	opt stack 0
  5879  002EE6                     _glcdDrawRectangle:
  5880                           	opt stack 23
  5881                           
  5882                           ;incstack = 0
  5883                           ;glcdDrawRectangle@XS stored from wreg
  5884  002EE6  6E19               	movwf	glcdDrawRectangle@XS,c
  5885                           
  5886                           ;GLCD_PIC_V1.1.c: 58: if(MADCTLbits.MX == 1 && MADCTLbits.MV ==1){
  5887  002EE8  BC7C               	btfsc	_MADCTLbits,6,c
  5888  002EEA  AA7C               	btfss	_MADCTLbits,5,c
  5889  002EEC  D005               	goto	l291
  5890                           
  5891                           ;GLCD_PIC_V1.1.c: 60: YS += 3;
  5892  002EEE  0E03               	movlw	3
  5893  002EF0  2608               	addwf	glcdDrawRectangle@YS,f,c
  5894                           
  5895                           ;GLCD_PIC_V1.1.c: 61: YE += 3;
  5896  002EF2  0E03               	movlw	3
  5897  002EF4  2609               	addwf	glcdDrawRectangle@YE,f,c
  5898  002EF6  D015               	goto	l1896
  5899  002EF8                     l291:
  5900                           
  5901                           ;GLCD_PIC_V1.1.c: 65: else if(MADCTLbits.MY == 1){
  5902  002EF8  AE7C               	btfss	_MADCTLbits,7,c
  5903  002EFA  D008               	goto	l293
  5904                           
  5905                           ;GLCD_PIC_V1.1.c: 67: YS += 2;
  5906  002EFC  0E02               	movlw	2
  5907  002EFE  2608               	addwf	glcdDrawRectangle@YS,f,c
  5908                           
  5909                           ;GLCD_PIC_V1.1.c: 68: YE += 2;
  5910  002F00  0E02               	movlw	2
  5911  002F02  2609               	addwf	glcdDrawRectangle@YE,f,c
  5912                           
  5913                           ;GLCD_PIC_V1.1.c: 69: XS += 3;
  5914  002F04  0E03               	movlw	3
  5915  002F06  2619               	addwf	glcdDrawRectangle@XS,f,c
  5916                           
  5917                           ;GLCD_PIC_V1.1.c: 70: XE += 3;
  5918  002F08  0E03               	movlw	3
  5919  002F0A  D00E               	goto	L8
  5920  002F0C                     l293:
  5921                           
  5922                           ;GLCD_PIC_V1.1.c: 72: else if(MADCTLbits.MX == 1){
  5923  002F0C  AC7C               	btfss	_MADCTLbits,6,c
  5924  002F0E  D007               	goto	l295
  5925                           
  5926                           ;GLCD_PIC_V1.1.c: 74: YS += 2;
  5927  002F10  0E02               	movlw	2
  5928  002F12  2608               	addwf	glcdDrawRectangle@YS,f,c
  5929                           
  5930                           ;GLCD_PIC_V1.1.c: 75: YE += 2;
  5931  002F14  0E02               	movlw	2
  5932  002F16  2609               	addwf	glcdDrawRectangle@YE,f,c
  5933                           
  5934                           ;GLCD_PIC_V1.1.c: 76: XS += 1;
  5935  002F18  2A19               	incf	glcdDrawRectangle@XS,f,c
  5936                           
  5937                           ;GLCD_PIC_V1.1.c: 77: XE += 1;
  5938  002F1A  2A07               	incf	glcdDrawRectangle@XE,f,c
  5939                           
  5940                           ;GLCD_PIC_V1.1.c: 78: }
  5941  002F1C  D006               	goto	l296
  5942  002F1E                     l295:
  5943                           
  5944                           ;GLCD_PIC_V1.1.c: 79: else{
  5945                           ;GLCD_PIC_V1.1.c: 81: YS += 1;
  5946  002F1E  2A08               	incf	glcdDrawRectangle@YS,f,c
  5947                           
  5948                           ;GLCD_PIC_V1.1.c: 82: YE += 1;
  5949  002F20  2A09               	incf	glcdDrawRectangle@YE,f,c
  5950  002F22                     l1896:
  5951                           
  5952                           ;GLCD_PIC_V1.1.c: 83: XS += 2;
  5953  002F22  0E02               	movlw	2
  5954  002F24  2619               	addwf	glcdDrawRectangle@XS,f,c
  5955                           
  5956                           ;GLCD_PIC_V1.1.c: 84: XE += 2;
  5957  002F26  0E02               	movlw	2
  5958  002F28                     L8:
  5959  002F28  2607               	addwf	glcdDrawRectangle@XE,f,c
  5960  002F2A                     l296:
  5961                           
  5962                           ;GLCD_PIC_V1.1.c: 85: }
  5963                           ;GLCD_PIC_V1.1.c: 89: glcdTransfer(INST_RASET, 1);
  5964  002F2A  0E01               	movlw	1
  5965  002F2C  6E04               	movwf	glcdTransfer@cmd,c
  5966  002F2E  0E3C               	movlw	low GLCD_PIC@INST_RASET
  5967  002F30  6EF6               	movwf	tblptrl,c
  5968  002F32                     	if	1	;There is more than 1 active tblptr byte
  5969  002F32  0E10               	movlw	high GLCD_PIC@INST_RASET
  5970  002F34  6EF7               	movwf	tblptrh,c
  5971  002F36                     	endif
  5972  002F36                     	if	0	;There are less than 3 active tblptr bytes
  5973  002F36                     	endif
  5974  002F36  0008               	tblrd		*
  5975  002F38  50F5               	movf	tablat,w,c
  5976  002F3A  EC7F  F01A         	call	_glcdTransfer
  5977                           
  5978                           ;GLCD_PIC_V1.1.c: 90: glcdTransfer(0x00, 0);
  5979  002F3E  0E00               	movlw	0
  5980  002F40  6E04               	movwf	glcdTransfer@cmd,c
  5981  002F42  0E00               	movlw	0
  5982  002F44  EC7F  F01A         	call	_glcdTransfer
  5983                           
  5984                           ;GLCD_PIC_V1.1.c: 91: glcdTransfer(XS, 0);
  5985  002F48  0E00               	movlw	0
  5986  002F4A  6E04               	movwf	glcdTransfer@cmd,c
  5987  002F4C  5019               	movf	glcdDrawRectangle@XS,w,c
  5988  002F4E  EC7F  F01A         	call	_glcdTransfer
  5989                           
  5990                           ;GLCD_PIC_V1.1.c: 92: glcdTransfer(0x00, 0);
  5991  002F52  0E00               	movlw	0
  5992  002F54  6E04               	movwf	glcdTransfer@cmd,c
  5993  002F56  0E00               	movlw	0
  5994  002F58  EC7F  F01A         	call	_glcdTransfer
  5995                           
  5996                           ;GLCD_PIC_V1.1.c: 93: glcdTransfer(XE - 1, 0);
  5997  002F5C  0E00               	movlw	0
  5998  002F5E  6E04               	movwf	glcdTransfer@cmd,c
  5999  002F60  0407               	decf	glcdDrawRectangle@XE,w,c
  6000  002F62  EC7F  F01A         	call	_glcdTransfer
  6001                           
  6002                           ;GLCD_PIC_V1.1.c: 97: glcdTransfer(INST_CASET, 1);
  6003  002F66  0E01               	movlw	1
  6004  002F68  6E04               	movwf	glcdTransfer@cmd,c
  6005  002F6A  0E3D               	movlw	low GLCD_PIC@INST_CASET
  6006  002F6C  6EF6               	movwf	tblptrl,c
  6007  002F6E                     	if	1	;There is more than 1 active tblptr byte
  6008  002F6E  0E10               	movlw	high GLCD_PIC@INST_CASET
  6009  002F70  6EF7               	movwf	tblptrh,c
  6010  002F72                     	endif
  6011  002F72                     	if	0	;There are less than 3 active tblptr bytes
  6012  002F72                     	endif
  6013  002F72  0008               	tblrd		*
  6014  002F74  50F5               	movf	tablat,w,c
  6015  002F76  EC7F  F01A         	call	_glcdTransfer
  6016                           
  6017                           ;GLCD_PIC_V1.1.c: 98: glcdTransfer(0x00, 0);
  6018  002F7A  0E00               	movlw	0
  6019  002F7C  6E04               	movwf	glcdTransfer@cmd,c
  6020  002F7E  0E00               	movlw	0
  6021  002F80  EC7F  F01A         	call	_glcdTransfer
  6022                           
  6023                           ;GLCD_PIC_V1.1.c: 99: glcdTransfer(YS, 0);
  6024  002F84  0E00               	movlw	0
  6025  002F86  6E04               	movwf	glcdTransfer@cmd,c
  6026  002F88  5008               	movf	glcdDrawRectangle@YS,w,c
  6027  002F8A  EC7F  F01A         	call	_glcdTransfer
  6028                           
  6029                           ;GLCD_PIC_V1.1.c: 100: glcdTransfer(0x00, 0);
  6030  002F8E  0E00               	movlw	0
  6031  002F90  6E04               	movwf	glcdTransfer@cmd,c
  6032  002F92  0E00               	movlw	0
  6033  002F94  EC7F  F01A         	call	_glcdTransfer
  6034                           
  6035                           ;GLCD_PIC_V1.1.c: 101: glcdTransfer(YE - 1, 0);
  6036  002F98  0E00               	movlw	0
  6037  002F9A  6E04               	movwf	glcdTransfer@cmd,c
  6038  002F9C  0409               	decf	glcdDrawRectangle@YE,w,c
  6039  002F9E  EC7F  F01A         	call	_glcdTransfer
  6040                           
  6041                           ;GLCD_PIC_V1.1.c: 103: glcdTransfer(INST_RAMWR, 1);
  6042  002FA2  0E01               	movlw	1
  6043  002FA4  6E04               	movwf	glcdTransfer@cmd,c
  6044  002FA6  0E3B               	movlw	low GLCD_PIC@INST_RAMWR
  6045  002FA8  6EF6               	movwf	tblptrl,c
  6046  002FAA                     	if	1	;There is more than 1 active tblptr byte
  6047  002FAA  0E10               	movlw	high GLCD_PIC@INST_RAMWR
  6048  002FAC  6EF7               	movwf	tblptrh,c
  6049  002FAE                     	endif
  6050  002FAE                     	if	0	;There are less than 3 active tblptr bytes
  6051  002FAE                     	endif
  6052  002FAE  0008               	tblrd		*
  6053  002FB0  50F5               	movf	tablat,w,c
  6054  002FB2  EC7F  F01A         	call	_glcdTransfer
  6055                           
  6056                           ;GLCD_PIC_V1.1.c: 107: if((XE == XS) && (YE == YS)){
  6057  002FB6  5019               	movf	glcdDrawRectangle@XS,w,c
  6058  002FB8  1807               	xorwf	glcdDrawRectangle@XE,w,c
  6059  002FBA  A4D8               	btfss	status,2,c
  6060  002FBC  D014               	goto	l297
  6061  002FBE  5008               	movf	glcdDrawRectangle@YS,w,c
  6062  002FC0  1809               	xorwf	glcdDrawRectangle@YE,w,c
  6063  002FC2  A4D8               	btfss	status,2,c
  6064  002FC4  D010               	goto	l297
  6065                           
  6066                           ;GLCD_PIC_V1.1.c: 114: glcdTransfer(color & 0xFF, 0);
  6067  002FC6  0E00               	movlw	0
  6068  002FC8  6E04               	movwf	glcdTransfer@cmd,c
  6069  002FCA  500A               	movf	glcdDrawRectangle@color,w,c
  6070  002FCC  EC7F  F01A         	call	_glcdTransfer
  6071                           
  6072                           ;GLCD_PIC_V1.1.c: 115: glcdTransfer((color >> 8) & 0xFF, 0);
  6073  002FD0  0E00               	movlw	0
  6074  002FD2  6E04               	movwf	glcdTransfer@cmd,c
  6075  002FD4  500B               	movf	glcdDrawRectangle@color+1,w,c
  6076  002FD6  EC7F  F01A         	call	_glcdTransfer
  6077                           
  6078                           ;GLCD_PIC_V1.1.c: 116: glcdTransfer((color >> 16) & 0xFF, 0);
  6079  002FDA  0E00               	movlw	0
  6080  002FDC  6E04               	movwf	glcdTransfer@cmd,c
  6081  002FDE  500C               	movf	glcdDrawRectangle@color+2,w,c
  6082  002FE0  EC7F  F01A         	call	_glcdTransfer
  6083                           
  6084                           ;GLCD_PIC_V1.1.c: 117: }
  6085  002FE4  0012               	return	
  6086  002FE6                     l297:
  6087                           
  6088                           ;GLCD_PIC_V1.1.c: 118: else{
  6089                           ;GLCD_PIC_V1.1.c: 130: unsigned short numLoops = (XE - XS) * (YE - YS);
  6090  002FE6  5019               	movf	glcdDrawRectangle@XS,w,c
  6091  002FE8  6E0E               	movwf	??_glcdDrawRectangle& (0+255),c
  6092  002FEA  6A0F               	clrf	(??_glcdDrawRectangle+1)& (0+255),c
  6093  002FEC  1E0E               	comf	??_glcdDrawRectangle,f,c
  6094  002FEE  1E0F               	comf	??_glcdDrawRectangle+1,f,c
  6095  002FF0  4A0E               	infsnz	??_glcdDrawRectangle,f,c
  6096  002FF2  2A0F               	incf	??_glcdDrawRectangle+1,f,c
  6097  002FF4  5007               	movf	glcdDrawRectangle@XE,w,c
  6098  002FF6  240E               	addwf	??_glcdDrawRectangle,w,c
  6099  002FF8  6E01               	movwf	___wmul@multiplier,c
  6100  002FFA  0E00               	movlw	0
  6101  002FFC  200F               	addwfc	??_glcdDrawRectangle+1,w,c
  6102  002FFE  6E02               	movwf	___wmul@multiplier+1,c
  6103  003000  5008               	movf	glcdDrawRectangle@YS,w,c
  6104  003002  6E10               	movwf	(??_glcdDrawRectangle+2)& (0+255),c
  6105  003004  6A11               	clrf	(??_glcdDrawRectangle+3)& (0+255),c
  6106  003006  1E10               	comf	??_glcdDrawRectangle+2,f,c
  6107  003008  1E11               	comf	??_glcdDrawRectangle+3,f,c
  6108  00300A  4A10               	infsnz	??_glcdDrawRectangle+2,f,c
  6109  00300C  2A11               	incf	??_glcdDrawRectangle+3,f,c
  6110  00300E  5009               	movf	glcdDrawRectangle@YE,w,c
  6111  003010  2410               	addwf	??_glcdDrawRectangle+2,w,c
  6112  003012  6E03               	movwf	___wmul@multiplicand,c
  6113  003014  0E00               	movlw	0
  6114  003016  2011               	addwfc	??_glcdDrawRectangle+3,w,c
  6115  003018  6E04               	movwf	___wmul@multiplicand+1,c
  6116  00301A  EC93  F01A         	call	___wmul	;wreg free
  6117  00301E  C001  F012         	movff	?___wmul,glcdDrawRectangle@numLoops
  6118  003022  C002  F013         	movff	?___wmul+1,glcdDrawRectangle@numLoops+1
  6119                           
  6120                           ;GLCD_PIC_V1.1.c: 131: unsigned char colorData[3];
  6121                           ;GLCD_PIC_V1.1.c: 132: colorData[0] = color & 0xFF;
  6122  003026  C00A  F016         	movff	glcdDrawRectangle@color,glcdDrawRectangle@colorData
  6123                           
  6124                           ;GLCD_PIC_V1.1.c: 133: colorData[1] = (color >> 8) & 0xFF;
  6125  00302A  C00B  F017         	movff	glcdDrawRectangle@color+1,glcdDrawRectangle@colorData+1
  6126                           
  6127                           ;GLCD_PIC_V1.1.c: 134: colorData[2] = (color >> 16) & 0xFF;
  6128  00302E  C00C  F018         	movff	glcdDrawRectangle@color+2,glcdDrawRectangle@colorData+2
  6129                           
  6130                           ;GLCD_PIC_V1.1.c: 136: LATDbits.LATD0 = 0;
  6131  003032  908C               	bcf	3980,0,c	;volatile
  6132                           
  6133                           ;GLCD_PIC_V1.1.c: 137: LATDbits.LATD1 = 1;
  6134  003034  828C               	bsf	3980,1,c	;volatile
  6135                           
  6136                           ;GLCD_PIC_V1.1.c: 138: for(unsigned short i = 0; i < numLoops; i++){
  6137  003036  0E00               	movlw	0
  6138  003038  6E15               	movwf	glcdDrawRectangle@i+1,c
  6139  00303A  0E00               	movlw	0
  6140  00303C  6E14               	movwf	glcdDrawRectangle@i,c
  6141  00303E  D00B               	goto	l299
  6142  003040                     
  6143                           ;GLCD_PIC_V1.1.c: 139: spiSend(colorData[0]);
  6144  003040  5016               	movf	glcdDrawRectangle@colorData,w,c
  6145  003042  ECC4  F01A         	call	_spiSend
  6146                           
  6147                           ;GLCD_PIC_V1.1.c: 140: spiSend(colorData[1]);
  6148  003046  5017               	movf	glcdDrawRectangle@colorData+1,w,c
  6149  003048  ECC4  F01A         	call	_spiSend
  6150                           
  6151                           ;GLCD_PIC_V1.1.c: 141: spiSend(colorData[2]);
  6152  00304C  5018               	movf	glcdDrawRectangle@colorData+2,w,c
  6153  00304E  ECC4  F01A         	call	_spiSend
  6154  003052  4A14               	infsnz	glcdDrawRectangle@i,f,c
  6155  003054  2A15               	incf	glcdDrawRectangle@i+1,f,c
  6156  003056                     l299:
  6157  003056  5012               	movf	glcdDrawRectangle@numLoops,w,c
  6158  003058  5C14               	subwf	glcdDrawRectangle@i,w,c
  6159  00305A  5013               	movf	glcdDrawRectangle@numLoops+1,w,c
  6160  00305C  5815               	subwfb	glcdDrawRectangle@i+1,w,c
  6161  00305E  A0D8               	btfss	status,0,c
  6162  003060  D7EF               	goto	l300
  6163                           
  6164                           ;GLCD_PIC_V1.1.c: 142: }
  6165                           ;GLCD_PIC_V1.1.c: 143: LATDbits.LATD0 = 1;
  6166  003062  808C               	bsf	3980,0,c	;volatile
  6167  003064  0012               	return	
  6168  003066                     __end_of_glcdDrawRectangle:
  6169                           	opt stack 0
  6170                           tblptru	equ	0xFF8
  6171                           tblptrh	equ	0xFF7
  6172                           tblptrl	equ	0xFF6
  6173                           tablat	equ	0xFF5
  6174                           indf0	equ	0xFEF
  6175                           postinc0	equ	0xFEE
  6176                           plusw0	equ	0xFEB
  6177                           fsr0h	equ	0xFEA
  6178                           fsr0l	equ	0xFE9
  6179                           wreg	equ	0xFE8
  6180                           postdec1	equ	0xFE5
  6181                           plusw1	equ	0xFE3
  6182                           fsr1l	equ	0xFE1
  6183                           plusw2	equ	0xFDB
  6184                           fsr2h	equ	0xFDA
  6185                           fsr2l	equ	0xFD9
  6186                           status	equ	0xFD8
  6187                           
  6188 ;; *************** function _glcdTransfer *****************
  6189 ;; Defined at:
  6190 ;;		line 18 in file "GLCD_PIC_V1.1.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;  byte            1    wreg     unsigned char 
  6193 ;;  cmd             1    3[COMRAM] unsigned char 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;  byte            1    5[COMRAM] unsigned char 
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  1    wreg      void 
  6198 ;; Registers used:
  6199 ;;		wreg, status,2, status,0, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6205 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6207 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6208 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6209 ;;Total ram usage:        3 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    2
  6212 ;; This function calls:
  6213 ;;		_spiSend
  6214 ;; This function is called by:
  6215 ;;		_glcdDrawRectangle
  6216 ;;		_glcdSetCOLMOD
  6217 ;;		_initGLCD
  6218 ;;		_glcdSetOrigin
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222                           	psect	text14
  6223  0034FE                     __ptext14:
  6224                           	opt stack 0
  6225  0034FE                     _glcdTransfer:
  6226                           	opt stack 23
  6227                           
  6228                           ;incstack = 0
  6229                           ;glcdTransfer@byte stored from wreg
  6230  0034FE  6E06               	movwf	glcdTransfer@byte,c
  6231                           
  6232                           ;GLCD_PIC_V1.1.c: 27: LATDbits.LATD1 = (cmd == 1) ? 0 : 1;
  6233  003500  0404               	decf	glcdTransfer@cmd,w,c
  6234  003502  B4D8               	btfsc	status,2,c
  6235  003504  D003               	goto	u1350
  6236  003506  6A05               	clrf	??_glcdTransfer& (0+255),c
  6237  003508  2A05               	incf	??_glcdTransfer& (0+255),f,c
  6238  00350A  D001               	goto	u1368
  6239  00350C                     u1350:
  6240  00350C  6A05               	clrf	??_glcdTransfer& (0+255),c
  6241  00350E                     u1368:
  6242  00350E  4605               	rlncf	??_glcdTransfer,f,c
  6243  003510  508C               	movf	3980,w,c	;volatile
  6244  003512  1805               	xorwf	??_glcdTransfer,w,c
  6245  003514  0BFD               	andlw	-3
  6246  003516  1805               	xorwf	??_glcdTransfer,w,c
  6247  003518  6E8C               	movwf	3980,c	;volatile
  6248                           
  6249                           ;GLCD_PIC_V1.1.c: 31: LATDbits.LATD0 = 0;
  6250  00351A  908C               	bcf	3980,0,c	;volatile
  6251                           
  6252                           ;GLCD_PIC_V1.1.c: 33: spiSend(byte);
  6253  00351C  5006               	movf	glcdTransfer@byte,w,c
  6254  00351E  ECC4  F01A         	call	_spiSend
  6255                           
  6256                           ;GLCD_PIC_V1.1.c: 35: LATDbits.LATD0 = 1;
  6257  003522  808C               	bsf	3980,0,c	;volatile
  6258  003524  0012               	return		;funcret
  6259  003526                     __end_of_glcdTransfer:
  6260                           	opt stack 0
  6261                           tblptru	equ	0xFF8
  6262                           tblptrh	equ	0xFF7
  6263                           tblptrl	equ	0xFF6
  6264                           tablat	equ	0xFF5
  6265                           indf0	equ	0xFEF
  6266                           postinc0	equ	0xFEE
  6267                           plusw0	equ	0xFEB
  6268                           fsr0h	equ	0xFEA
  6269                           fsr0l	equ	0xFE9
  6270                           wreg	equ	0xFE8
  6271                           postdec1	equ	0xFE5
  6272                           plusw1	equ	0xFE3
  6273                           fsr1l	equ	0xFE1
  6274                           plusw2	equ	0xFDB
  6275                           fsr2h	equ	0xFDA
  6276                           fsr2l	equ	0xFD9
  6277                           status	equ	0xFD8
  6278                           
  6279 ;; *************** function _spiSend *****************
  6280 ;; Defined at:
  6281 ;;		line 33 in file "SPI_PIC.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;  val             1    wreg     unsigned char 
  6284 ;; Auto vars:     Size  Location     Type
  6285 ;;  val             1    2[COMRAM] unsigned char 
  6286 ;; Return value:  Size  Location     Type
  6287 ;;                  1    wreg      void 
  6288 ;; Registers used:
  6289 ;;		wreg, status,2, cstack
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6296 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6298 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6299 ;;Total ram usage:        1 bytes
  6300 ;; Hardware stack levels used:    1
  6301 ;; Hardware stack levels required when called:    1
  6302 ;; This function calls:
  6303 ;;		_spiTransfer
  6304 ;; This function is called by:
  6305 ;;		_glcdTransfer
  6306 ;;		_glcdDrawRectangle
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310                           	psect	text15
  6311  003588                     __ptext15:
  6312                           	opt stack 0
  6313  003588                     _spiSend:
  6314                           	opt stack 24
  6315                           
  6316                           ;incstack = 0
  6317                           ;spiSend@val stored from wreg
  6318  003588  6E03               	movwf	spiSend@val,c
  6319                           
  6320                           ;SPI_PIC.c: 41: spiTransfer(val);
  6321  00358A  5003               	movf	spiSend@val,w,c
  6322  00358C  ECA6  F01A         	call	_spiTransfer
  6323  003590  0012               	return		;funcret
  6324  003592                     __end_of_spiSend:
  6325                           	opt stack 0
  6326                           tblptru	equ	0xFF8
  6327                           tblptrh	equ	0xFF7
  6328                           tblptrl	equ	0xFF6
  6329                           tablat	equ	0xFF5
  6330                           indf0	equ	0xFEF
  6331                           postinc0	equ	0xFEE
  6332                           plusw0	equ	0xFEB
  6333                           fsr0h	equ	0xFEA
  6334                           fsr0l	equ	0xFE9
  6335                           wreg	equ	0xFE8
  6336                           postdec1	equ	0xFE5
  6337                           plusw1	equ	0xFE3
  6338                           fsr1l	equ	0xFE1
  6339                           plusw2	equ	0xFDB
  6340                           fsr2h	equ	0xFDA
  6341                           fsr2l	equ	0xFD9
  6342                           status	equ	0xFD8
  6343                           
  6344 ;; *************** function _spiTransfer *****************
  6345 ;; Defined at:
  6346 ;;		line 12 in file "SPI_PIC.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;  byteToTransf    1    wreg     unsigned char 
  6349 ;; Auto vars:     Size  Location     Type
  6350 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  1    wreg      unsigned char 
  6353 ;; Registers used:
  6354 ;;		wreg, status,2
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6363 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6364 ;;Total ram usage:        2 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; This function calls:
  6367 ;;		Nothing
  6368 ;; This function is called by:
  6369 ;;		_spiSend
  6370 ;;		_spiReceive
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           	psect	text16
  6375  00354C                     __ptext16:
  6376                           	opt stack 0
  6377  00354C                     _spiTransfer:
  6378                           	opt stack 24
  6379                           
  6380                           ;incstack = 0
  6381                           ;spiTransfer@byteToTransfer stored from wreg
  6382  00354C  6E02               	movwf	spiTransfer@byteToTransfer,c
  6383                           
  6384                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
  6385  00354E  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  6386  003552                     l1858:
  6387  003552  B69E               	btfsc	3998,3,c	;volatile
  6388  003554  D002               	goto	u1330
  6389  003556  0E01               	movlw	1
  6390  003558  D001               	goto	u1332
  6391  00355A                     u1330:
  6392  00355A  0E00               	movlw	0
  6393  00355C                     u1332:
  6394  00355C  6E01               	movwf	??_spiTransfer& (0+255),c
  6395  00355E  B0C7               	btfsc	4039,0,c	;volatile
  6396  003560  D002               	goto	u1340
  6397  003562  0E01               	movlw	1
  6398  003564  D001               	goto	u1342
  6399  003566                     u1340:
  6400  003566  0E00               	movlw	0
  6401  003568                     u1342:
  6402  003568  1001               	iorwf	??_spiTransfer,w,c
  6403  00356A  E1F3               	bnz	l1858
  6404                           
  6405                           ;SPI_PIC.c: 30: return SSPBUF;
  6406  00356C  50C9               	movf	4041,w,c	;volatile
  6407  00356E  0012               	return	
  6408  003570                     __end_of_spiTransfer:
  6409                           	opt stack 0
  6410                           tblptru	equ	0xFF8
  6411                           tblptrh	equ	0xFF7
  6412                           tblptrl	equ	0xFF6
  6413                           tablat	equ	0xFF5
  6414                           indf0	equ	0xFEF
  6415                           postinc0	equ	0xFEE
  6416                           plusw0	equ	0xFEB
  6417                           fsr0h	equ	0xFEA
  6418                           fsr0l	equ	0xFE9
  6419                           wreg	equ	0xFE8
  6420                           postdec1	equ	0xFE5
  6421                           plusw1	equ	0xFE3
  6422                           fsr1l	equ	0xFE1
  6423                           plusw2	equ	0xFDB
  6424                           fsr2h	equ	0xFDA
  6425                           fsr2l	equ	0xFD9
  6426                           status	equ	0xFD8
  6427                           
  6428 ;; *************** function ___wmul *****************
  6429 ;; Defined at:
  6430 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;  multiplier      2    0[COMRAM] unsigned int 
  6433 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  product         2    4[COMRAM] unsigned int 
  6436 ;; Return value:  Size  Location     Type
  6437 ;;                  2    0[COMRAM] unsigned int 
  6438 ;; Registers used:
  6439 ;;		wreg, status,2, status,0, prodl, prodh
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6445 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;Total ram usage:        6 bytes
  6450 ;; Hardware stack levels used:    1
  6451 ;; This function calls:
  6452 ;;		Nothing
  6453 ;; This function is called by:
  6454 ;;		_glcdDrawRectangle
  6455 ;;		_print_px_string
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text17
  6460  003526                     __ptext17:
  6461                           	opt stack 0
  6462  003526                     ___wmul:
  6463                           	opt stack 25
  6464                           
  6465                           ;incstack = 0
  6466  003526  5001               	movf	___wmul@multiplier,w,c
  6467  003528  0203               	mulwf	___wmul@multiplicand,c
  6468  00352A  CFF3 F005          	movff	prodl,___wmul@product
  6469  00352E  CFF4 F006          	movff	prodh,___wmul@product+1
  6470  003532  5001               	movf	___wmul@multiplier,w,c
  6471  003534  0204               	mulwf	___wmul@multiplicand+1,c
  6472  003536  50F3               	movf	prodl,w,c
  6473  003538  2606               	addwf	___wmul@product+1,f,c
  6474  00353A  5002               	movf	___wmul@multiplier+1,w,c
  6475  00353C  0203               	mulwf	___wmul@multiplicand,c
  6476  00353E  50F3               	movf	prodl,w,c
  6477  003540  2606               	addwf	___wmul@product+1,f,c
  6478  003542  C005  F001         	movff	___wmul@product,?___wmul
  6479  003546  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6480  00354A  0012               	return	
  6481  00354C                     __end_of___wmul:
  6482                           	opt stack 0
  6483                           tblptru	equ	0xFF8
  6484                           tblptrh	equ	0xFF7
  6485                           tblptrl	equ	0xFF6
  6486                           tablat	equ	0xFF5
  6487                           prodh	equ	0xFF4
  6488                           prodl	equ	0xFF3
  6489                           indf0	equ	0xFEF
  6490                           postinc0	equ	0xFEE
  6491                           plusw0	equ	0xFEB
  6492                           fsr0h	equ	0xFEA
  6493                           fsr0l	equ	0xFE9
  6494                           wreg	equ	0xFE8
  6495                           postdec1	equ	0xFE5
  6496                           plusw1	equ	0xFE3
  6497                           fsr1l	equ	0xFE1
  6498                           plusw2	equ	0xFDB
  6499                           fsr2h	equ	0xFDA
  6500                           fsr2l	equ	0xFD9
  6501                           status	equ	0xFD8
  6502                           tblptru	equ	0xFF8
  6503                           tblptrh	equ	0xFF7
  6504                           tblptrl	equ	0xFF6
  6505                           tablat	equ	0xFF5
  6506                           prodh	equ	0xFF4
  6507                           prodl	equ	0xFF3
  6508                           indf0	equ	0xFEF
  6509                           postinc0	equ	0xFEE
  6510                           plusw0	equ	0xFEB
  6511                           fsr0h	equ	0xFEA
  6512                           fsr0l	equ	0xFE9
  6513                           wreg	equ	0xFE8
  6514                           postdec1	equ	0xFE5
  6515                           plusw1	equ	0xFE3
  6516                           fsr1l	equ	0xFE1
  6517                           plusw2	equ	0xFDB
  6518                           fsr2h	equ	0xFDA
  6519                           fsr2l	equ	0xFD9
  6520                           status	equ	0xFD8
  6521                           
  6522                           	psect	rparam
  6523  0000                     tblptru	equ	0xFF8
  6524                           tblptrh	equ	0xFF7
  6525                           tblptrl	equ	0xFF6
  6526                           tablat	equ	0xFF5
  6527                           prodh	equ	0xFF4
  6528                           prodl	equ	0xFF3
  6529                           indf0	equ	0xFEF
  6530                           postinc0	equ	0xFEE
  6531                           plusw0	equ	0xFEB
  6532                           fsr0h	equ	0xFEA
  6533                           fsr0l	equ	0xFE9
  6534                           wreg	equ	0xFE8
  6535                           postdec1	equ	0xFE5
  6536                           plusw1	equ	0xFE3
  6537                           fsr1l	equ	0xFE1
  6538                           plusw2	equ	0xFDB
  6539                           fsr2h	equ	0xFDA
  6540                           fsr2l	equ	0xFD9
  6541                           status	equ	0xFD8


Data Sizes:
    Strings     23
    Constant    108
    Data        23
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    100     124
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    print_px_string@s	PTR unsigned char  size(2) Largest target is 23
		 -> main@eta(COMRAM[23]), STR_1(CODE[23]), 


Critical Paths under _main in COMRAM

    _main->_print_px_string
    _print_px_string->_print_px_char
    _print_px_char->_draw_px_char
    _px_map->_new_px_char
    _draw_px_char->_glcdDrawPixel
    _glcdDrawPixel->_glcdDrawRectangle
    ___awdiv->___awmod
    _init->_initGLCD
    _initGLCD->_glcdDrawRectangle
    _glcdSetCOLMOD->_glcdTransfer
    _glcdDrawRectangle->___wmul
    _glcdDrawRectangle->_glcdTransfer
    _glcdTransfer->_spiSend
    _spiSend->_spiTransfer

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0   52886
                                             71 COMRAM    29    29      0
                            ___awdiv
                            ___awmod
                  _glcdDrawRectangle
                               _init
                    _print_px_string
 ---------------------------------------------------------------------------------
 (1) _print_px_string                                     12     6      6   26541
                                             59 COMRAM    12     6      6
                             ___wmul
                      _print_px_char
 ---------------------------------------------------------------------------------
 (2) _print_px_char                                        5     0      5   25443
                                             54 COMRAM     5     0      5
                       _draw_px_char
                             _px_map
 ---------------------------------------------------------------------------------
 (3) _px_map                                              10     1      9   14705
                                             16 COMRAM    10     1      9
                        _new_px_char
 ---------------------------------------------------------------------------------
 (4) _new_px_char                                         16     8      8   14683
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) _draw_px_char                                        22    10     12   10444
                                             32 COMRAM    22    10     12
                            ___awdiv
                            ___awmod
                      _glcdDrawPixel
                             _px_map (ARG)
 ---------------------------------------------------------------------------------
 (4) _glcdDrawPixel                                        7     2      5    7939
                                             25 COMRAM     7     2      5
                            ___awdiv (ARG)
                            ___awmod (ARG)
                  _glcdDrawRectangle
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1056
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     908
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   16693
                           _initGLCD
 ---------------------------------------------------------------------------------
 (2) _initGLCD                                             2     2      0   16693
                                             25 COMRAM     2     2      0
                  _glcdDrawRectangle
                      _glcdSetCOLMOD
                       _glcdTransfer
                            _spiInit
 ---------------------------------------------------------------------------------
 (3) _spiInit                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _glcdSetCOLMOD                                        3     3      0    4620
                                              6 COMRAM     3     3      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (5) _glcdDrawRectangle                                   19    12      7    7479
                                              6 COMRAM    19    12      7
                             ___wmul
                       _glcdTransfer
                            _spiSend
 ---------------------------------------------------------------------------------
 (6) _glcdTransfer                                         3     2      1    4572
                                              3 COMRAM     3     2      1
                            _spiSend
 ---------------------------------------------------------------------------------
 (6) _spiSend                                              1     1      0      44
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (7) _spiTransfer                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
     ___awmod (ARG)
   ___awmod
   _glcdDrawRectangle
     ___wmul
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiSend
       _spiTransfer
   _init
     _initGLCD
       _glcdDrawRectangle
         ___wmul
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _glcdSetCOLMOD
         _glcdTransfer
           _spiSend
             _spiTransfer
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiInit
   _print_px_string
     ___wmul
     _print_px_char
       _draw_px_char
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _glcdDrawPixel
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           _glcdDrawRectangle (ARG)
             ___wmul
             _glcdTransfer
               _spiSend
                 _spiTransfer
             _spiSend
               _spiTransfer
         _px_map (ARG)
           _new_px_char
       _px_map
         _new_px_char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     64      7C       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7C      34        0.0%
DATA                 0      0      7C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Feb 22 21:11:34 2018

              _print_px_string$1146 0044                      ?_print_px_char 0037  
                       _SSPSTATbits 000FC7                      ??_glcdTransfer 0005  
                       __CFG_CPD$ON 000000                        ___awdiv@sign 000C  
               ___wmul@multiplicand 0003                         __CFG_BORV$3 000000  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                               l300 3040                                 l132 3092  
                               l310 33D0                                 l134 310C  
                               l311 33B6                                 l135 318E  
                               l143 2EC2                                 l312 33E2  
                               l136 31A6                                 l400 1ED8  
                               l144 2DD6                                 l313 33BE  
                               l305 336A                                 l401 1F14  
                               l306 338E                                 l410 2130  
                               l402 1F50                                 l315 33C8  
                               l411 216C                                 l403 1F8C  
                               l180 3414                                 l420 2388  
                               l412 21A8                                 l404 1FC8  
                               l340 10C8                                 l421 23C4  
                               l413 21E4                                 l405 2004  
                               l341 1104                                 l430 25E0  
                               l422 2400                                 l414 2220  
                               l406 2040                                 l350 1320  
                               l342 1140                                 l175 341A  
                               l431 261C                                 l423 243C  
                               l415 225C                                 l407 207C  
                               l351 135C                                 l343 117C  
                               l432 2658                                 l424 2478  
                               l416 2298                                 l408 20B8  
                               l360 1578                                 l352 1398  
                               l344 11B8                                 l177 3430  
                               l337 270C                                 l433 2694  
                               l425 24B4                                 l417 22D4  
                               l409 20F4                                 l361 15B4  
                               l353 13D4                                 l345 11F4  
                               l441 321A                                 l178 340C  
                               l434 26D0                                 l426 24F0  
                               l418 2310                                 l370 17D0  
                               l362 15F0                                 l354 1410  
                               l346 1230                                 l338 108C  
                               l442 31B2                                 l291 2EF8  
                               l179 3410                                 l427 252C  
                               l419 234C                                 l371 180C  
                               l363 162C                                 l355 144C  
                               l347 126C                                 l620 32BC  
                               l612 3264                                 l428 2568  
                               l380 1A28                                 l372 1848  
                               l364 1668                                 l356 1488  
                               l348 12A8                                 l293 2F0C  
                               l621 32CA                                 l613 3274  
                               l429 25A4                                 l381 1A64  
                               l373 1884                                 l365 16A4  
                               l357 14C4                                 l349 12E4  
                               l390 1C80                                 l382 1AA0  
                               l374 18C0                                 l366 16E0  
                               l358 1500                                 l295 2F1E  
                               l615 3292                                 l391 1CBC  
                               l383 1ADC                                 l375 18FC  
                               l367 171C                                 l359 153C  
                               l296 2F2A                                 l616 328A  
                               l632 3322                                 l392 1CF8  
                               l384 1B18                                 l376 1938  
                               l368 1758                                 l297 2FE6  
                               l633 332C                                 l625 32E8  
                               l393 1D34                                 l385 1B54  
                               l377 1974                                 l369 1794  
                               l634 333A                                 l626 32F4  
                               l394 1D70                                 l386 1B90  
                               l378 19B0                                 l299 3056  
                               l619 32B2                                 l395 1DAC  
                               l387 1BCC                                 l379 19EC  
                               l628 330A                                 l396 1DE8  
                               l388 1C08                                 l629 3302  
                               l397 1E24                                 l389 1C44  
                               l398 1E60                                 l399 1E9C  
                      __CFG_CPB$OFF 000000                                 _RED 1019  
         __end_ofGLCD_PIC@INST_TEON 1039                        ___awmod@sign 0006  
                               wreg 000FE8                    ?_print_px_string 003C  
                     ?_draw_px_char 0021                        __CFG_LVP$OFF 000000  
                      __CFG_WDT$OFF 000000                                l1858 3552  
                              l1896 2F22                                STR_1 106D  
                              _BLUE 1009                                u2001 196A  
                              u2011 19A6                                u2101 1BC2  
                              u2021 19E2                                u2111 1BFE  
                              u2031 1A1E                                u2201 1E1A  
                              u2121 1C3A                                u2041 1A5A  
                              u1330 355A                                u2211 1E56  
                              u2131 1C76                                u2051 1A96  
                              u1340 3566                                u1332 355C  
                              u1500 3296                                u2301 2072  
                              u2221 1E92                                u2141 1CB2  
                              u2061 1AD2                                _LATA 000F89  
                              u1342 3568                                u1350 350C  
                              _LATB 000F8A                                u2311 20AE  
                              u2231 1ECE                                u2151 1CEE  
                              u2071 1B0E                                _LATC 000F8B  
                              _LATD 000F8C                                u2401 22CA  
                              u2321 20EA                                u2241 1F0A  
                              u2161 1D2A                                u2081 1B4A  
                              _LATE 000F8D                                u2411 2306  
                              u2331 2126                                u2251 1F46  
                              u2171 1D66                                u2091 1B86  
                              u1461 3464                                u2501 2522  
                              u2421 2342                                u2341 2162  
                              u2261 1F82                                u2181 1DA2  
                              u1701 1262                                u2511 255E  
                              u2431 237E                                u2351 219E  
                              u2271 1FBE                                u2191 1DDE  
                              u1711 129E                                u1631 10BE  
                              u1368 350E                                u1560 330E  
                              u2600 3210                                u2521 259A  
                              u2441 23BA                                u2361 21DA  
                              u2281 1FFA                                u1801 14BA  
                              u1721 12DA                                u1641 10FA  
                              u2610 3248                                u2531 25D6  
                              u2451 23F6                                u2371 2216  
                              u2291 2036                                u1811 14F6  
                              u1731 1316                                u1651 1136  
                              u2541 2612                                u2461 2432  
                              u2381 2252                                u1901 1712  
                              u1821 1532                                u1741 1352  
                              u1661 1172                                u1590 3090  
                              u2551 264E                                u2471 246E  
                              u2391 228E                                u1911 174E  
                              u1831 156E                                u1751 138E  
                              u1671 11AE                                u2607 3206  
                              u2631 2DC4                                u2561 268A  
                              u2481 24AA                                u1921 178A  
                              u1841 15AA                                u1761 13CA  
                              u1681 11EA                                u2617 323E  
                              u2641 2EE4                                u2571 26C6  
                              u2491 24E6                                u1931 17C6  
                              u1851 15E6                                u1771 1406  
                              u1691 1226                                _GREY 1021  
                              u2581 2702                                u1941 1802  
                              u1861 1622                                u1781 1442  
                              u1951 183E                                u1871 165E  
                              u1791 147E                                u2591 3492  
                              u1961 187A                                u1881 169A  
                              u2657 2EB6                                u2667 29F2  
                              u1971 18B6                                u1891 16D6  
                              u2677 2A1E                                u1981 18F2  
                              u2687 2A4A                                u1991 192E  
                              u2697 2CDC                                _main 2CE6  
                              _init 34A0                                fsr0h 000FEA  
                              indf0 000FEF                                fsr2h 000FDA  
                              fsr0l 000FE9                                fsr1l 000FE1  
                              fsr2l 000FD9                                prodh 000FF4  
                              prodl 000FF3                                start 0000  
                     __CFG_IESO$OFF 000000                       __CFG_MCLRE$ON 000000  
                      ___param_bank 000000                               ?_main 0001  
                             ?_init 0001                     __end_of___awdiv 32D4  
                             _BLACK 1025                     __end_of___awmod 3344  
                  __end_of_INST_NOP 1069                     ___awdiv@divisor 0009  
                             _GREEN 100D                     ___awdiv@counter 000B  
                             _WHITE 101D                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _SSPIF 007CF3                       __CFG_PWRT$OFF 000000  
                     __CFG_WRT0$OFF 000000                       __CFG_WRT1$OFF 000000  
                     __CFG_WRT2$OFF 000000                       __CFG_WRT3$OFF 000000  
                    __CFG_EBTR0$OFF 000000                      __CFG_FCMEN$OFF 000000  
                    __CFG_EBTR1$OFF 000000                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                       __CFG_WRTB$OFF 000000  
                    ??_draw_px_char 002D                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000       __end_ofGLCD_PIC@INST_VMOFCTR2 102A  
                    __CFG_EBTRB$OFF 000000                     __end_of_spiInit 343A  
                             tablat 000FF5                     __end_of_spiSend 3592  
                             plusw0 000FEB                               plusw1 000FE3  
                             plusw2 000FDB                               status 000FD8  
                    __CFG_PBADEN$ON 000000                        __end_of_BLUE 100D  
                      __end_of_GREY 1025                     ??_print_px_char 003C  
                   __initialization 34D2                        ?_new_px_char 0001  
                      __end_of_main 2EE6                        __end_of_init 34D2  
      glcdSetCOLMOD@numBitsPerPixel 0007                      __CFG_OSC$HSPLL 000000  
                            ??_main 0048                              ??_init 001C  
                print_px_string@idx 0046                       __activetblptr 000002  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                   glcdDrawPixel@XS 0020                     glcdDrawPixel@YS 001A  
                  ___awdiv@dividend 0007                   _glcdDrawRectangle 2EE6  
                 __end_of_INST_TEON 1059                              _INDIGO 1005  
              __end_of_glcdTransfer 3526                              _ORANGE 1015  
                ?_glcdDrawRectangle 0007                              _VIOLET 1001  
                            _YELLOW 1011                              _SSPBUF 000FC9  
                    __CFG_XINST$OFF 000000           glcdDrawRectangle@numLoops 0012  
               ??_glcdDrawRectangle 000E                              ___wmul 3526  
                  __end_of_initGLCD 2CE6                           ??___awdiv 000B  
                    __CFG_STVREN$ON 000000                           ??___awmod 0005  
                  ___awdiv@quotient 000D                     ___awmod@divisor 0003  
          __end_ofGLCD_PIC@INST_NOP 1049                              _px_map 1086  
                   ___awmod@counter 0005                        __pdataCOMRAM 0065  
                      ?_spiTransfer 0001                        __mediumconst 0000  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                           ??_spiInit 0001  
                         ??_spiSend 0003           __end_of_glcdDrawRectangle 3066  
                        __accesstop 0080             __end_of__initialization 34F4  
                     __end_of_BLACK 1029                       ___rparam_used 000001  
                     __end_of_GREEN 1011                       __end_of_WHITE 1021  
       __end_ofGLCD_PIC@INST_GAMSET 1041         __end_ofGLCD_PIC@INST_COLMOD 1035  
       __end_ofGLCD_PIC@INST_MADCTL 1038         __end_ofGLCD_PIC@INST_DISPON 103F  
       __end_ofGLCD_PIC@INST_IDMOFF 1037                      __pcstackCOMRAM 0001  
       __end_ofGLCD_PIC@INST_INVCTR 1031         __end_ofGLCD_PIC@INST_INVOFF 1043  
              __end_of_draw_px_char 31A8         __end_ofGLCD_PIC@INST_PWCTR1 1030  
       __end_ofGLCD_PIC@INST_PWCTR2 102F         __end_ofGLCD_PIC@INST_PWCTR3 102E  
       __end_ofGLCD_PIC@INST_PWCTR4 102D         __end_ofGLCD_PIC@INST_PWCTR5 102C  
       __end_ofGLCD_PIC@INST_VMCTR1 102B         __end_ofGLCD_PIC@INST_SLPOUT 1046  
                  print_px_string@s 0040                    print_px_string@x 003C  
                  print_px_string@y 003E               __end_of_glcdDrawPixel 33B2  
                     draw_px_char@i 0035                       draw_px_char@m 0031  
                     draw_px_char@p 0025                       draw_px_char@x 0021  
                     draw_px_char@y 0023                      print_px_char@c 003B  
                    print_px_char@x 0037                      print_px_char@y 0039  
                     _INST_VMOFCTR2 1049               __end_of_glcdSetCOLMOD 3402  
                           ?___wmul 0001                __size_of_new_px_char 0034  
                glcdDrawRectangle@i 0014                  __end_of_INST_CASET 105E  
                __end_of_INST_IDMON 1056                             ?_px_map 0011  
                __end_of_INST_INVON 1062                  __end_of_INST_RASET 105D  
                __end_of_INST_RAMWR 105C                  __end_of_INST_TEOFF 105A  
                __end_of_INST_NORON 1064                  __end_of_INST_PTLAR 105B  
                __end_of_INST_SLPIN 1067                  __end_of_INST_PTLON 1065  
             __size_of_glcdTransfer 0028          __size_of_glcdDrawRectangle 0180  
         spiTransfer@byteToTransfer 0002                             _SSPCON1 000FC6  
                           _SSPSTAT 000FC7                           ?_initGLCD 0001  
          __size_of_print_px_string 00A8                  glcdDrawPixel@color 001B  
                           __Hparam 0000                      _GLCD_SIZE_HORZ 106A  
                           __Lparam 0000                      _GLCD_SIZE_VERT 1069  
              __end_of_INST_DISPOFF 1060                __end_of_INST_FRMCTR1 1054  
              __end_of_INST_FRMCTR2 1053                __end_of_INST_FRMCTR3 1052  
                           ___awdiv 3250                             ___awmod 32D4  
                   __size_of___wmul 0026                        __psmallconst 1000  
                           __pcinit 34D2                        _glcdTransfer 34FE  
                           __ramtop 1000                             __ptext0 2CE6  
                           __ptext1 31A8                             __ptext2 346E  
                           __ptext3 1086                             __ptext4 343A  
                           __ptext5 3066                             __ptext6 3344  
                           __ptext7 32D4                             __ptext8 3250  
                           __ptext9 34A0                     __size_of_px_map 1954  
              __end_of_INST_SWRESET 1068                    ___awmod@dividend 0001  
                           _spiInit 3402                             _spiSend 3588  
              __size_of_spiTransfer 0024                             main@eta 004A  
                           main@sec 0063                end_of_initialization 34F4  
             GLCD_PIC@INST_VMOFCTR2 1029                          ??_initGLCD 001A  
                     __Lmediumconst 0000              __end_of_GLCD_SIZE_HORZ 106B  
                         _INST_TEON 1058              __end_of_GLCD_SIZE_VERT 106A  
             __size_of_draw_px_char 0142                             px_map@c 001A  
             __end_of_print_px_char 34A0                             postdec1 000FE5  
                           postinc0 000FEE                    glcdTransfer@byte 0006  
                    spiInit@divider 0001                           _TRISCbits 000F94  
                         _TRISDbits 000F95                        _draw_px_char 3066  
                    __end_of_INDIGO 1009                      __end_of_ORANGE 1019  
                    __end_of_VIOLET 1005                      __end_of_YELLOW 1015  
      __end_ofGLCD_PIC@INST_DISPOFF 1040        __end_ofGLCD_PIC@INST_FRMCTR1 1034  
      __end_ofGLCD_PIC@INST_FRMCTR2 1033        __end_ofGLCD_PIC@INST_FRMCTR3 1032  
                 ??_print_px_string 0042                      __end_of___wmul 354C  
                     __pidataCOMRAM 3570        __end_ofGLCD_PIC@INST_SWRESET 1048  
                    __end_of_px_map 29DA                 start_initialization 34D2  
                       __end_of_RED 101D              glcdDrawRectangle@color 000A  
                          ??___wmul 0005                    __CFG_LPT1OSC$OFF 000000  
                          ??_px_map 001A                        new_px_char@a 0001  
                      new_px_char@b 0005                        new_px_char@p 0009  
__end_of_GLCD_ADDRESSABLE_SIZE_HORZ 106D          _GLCD_ADDRESSABLE_SIZE_HORZ 106C  
__end_of_GLCD_ADDRESSABLE_SIZE_VERT 106C          _GLCD_ADDRESSABLE_SIZE_VERT 106B  
                       __pbssCOMRAM 007C          __end_ofGLCD_PIC@INST_CASET 103E  
        __end_ofGLCD_PIC@INST_IDMON 1036          __end_ofGLCD_PIC@INST_INVON 1042  
        __end_ofGLCD_PIC@INST_RASET 103D          __end_ofGLCD_PIC@INST_RAMWR 103C  
                      _INST_DISPOFF 105F          __end_ofGLCD_PIC@INST_TEOFF 103A  
        __end_ofGLCD_PIC@INST_NORON 1044          __end_ofGLCD_PIC@INST_PTLAR 103B  
        __end_ofGLCD_PIC@INST_SLPIN 1047          __end_ofGLCD_PIC@INST_PTLON 1045  
                      _INST_FRMCTR1 1053                        _INST_FRMCTR2 1052  
                      _INST_FRMCTR3 1051                   __size_of_initGLCD 030C  
                      _INST_SWRESET 1067              __size_of_glcdDrawPixel 006E  
                         _main$1145 0061                   __CFG_CCP2MX$PORTC 000000  
                     ??_new_px_char 0009                            ?___awdiv 0007  
                          ?___awmod 0001              __size_of_glcdSetCOLMOD 0050  
                       __smallconst 1000                 glcdDrawRectangle@XE 0007  
               glcdDrawRectangle@YE 0009                 glcdDrawRectangle@XS 0019  
               glcdDrawRectangle@YS 0008                 __end_of_INST_GAMSET 1061  
                          ?_spiInit 0001                 __end_of_INST_COLMOD 1055  
                          ?_spiSend 0001                 __end_of_INST_MADCTL 1058  
               __end_of_INST_DISPON 105F                 __end_of_INST_IDMOFF 1057  
              GLCD_PIC@INST_DISPOFF 103F                 __end_of_INST_INVCTR 1051  
               __end_of_INST_INVOFF 1063                GLCD_PIC@INST_FRMCTR1 1033  
              GLCD_PIC@INST_FRMCTR2 1032                GLCD_PIC@INST_FRMCTR3 1031  
               __end_of_INST_PWCTR1 1050                 __end_of_INST_PWCTR2 104F  
               __end_of_INST_PWCTR3 104E                 __end_of_INST_PWCTR4 104D  
               __end_of_INST_PWCTR5 104C                 __end_of_INST_VMCTR1 104B  
               __end_of_INST_SLPOUT 1066                      ___wmul@product 0005  
                          _LATDbits 000F8C                GLCD_PIC@INST_SWRESET 1047  
                          _INST_NOP 1068                          spiSend@val 0003  
                  __CFG_WDTPS$32768 000000                           main@F3027 0065  
                   glcdTransfer@cmd 0004                 __end_of_new_px_char 346E  
                 ___wmul@multiplier 0001                       ??_spiTransfer 0001  
              glcdSetCOLMOD@rawData 0008                       _glcdDrawPixel 3344  
                         copy_data0 34E6                       _glcdSetCOLMOD 33B2  
                   _print_px_string 31A8                            __Hrparam 0000  
                          __Lrparam 0000                  __CFG_BOREN$SBORDIS 000000  
                  __size_of___awdiv 0084                    __size_of___awmod 0070  
                       _INST_GAMSET 1060                         _INST_COLMOD 1054  
                       _INST_MADCTL 1057                         _INST_DISPON 105E  
                       _INST_IDMOFF 1056                         _INST_INVCTR 1050  
                       _INST_INVOFF 1062                      ?_glcdDrawPixel 001A  
                       _INST_PWCTR1 104F                         _INST_PWCTR2 104E  
                       _INST_PWCTR3 104D                         _INST_PWCTR4 104C  
                       _INST_PWCTR5 104B                         _INST_VMCTR1 104A  
                       _INST_SLPOUT 1065                            __ptext10 29DA  
                          __ptext11 3402                            __ptext12 33B2  
                          __ptext13 2EE6                            __ptext14 34FE  
                          __ptext15 3588                            __ptext16 354C  
                          __ptext17 3526                    __size_of_spiInit 0038  
                  __size_of_spiSend 000A               __end_of_INST_VMOFCTR2 104A  
                        _MADCTLbits 007C              __size_of_print_px_char 0032  
               __end_of_spiTransfer 3570                      ?_glcdSetCOLMOD 0001  
                          _initGLCD 29DA                 GLCD_PIC@INST_GAMSET 1040  
               GLCD_PIC@INST_COLMOD 1034                 GLCD_PIC@INST_MADCTL 1037  
               GLCD_PIC@INST_DISPON 103E                 GLCD_PIC@INST_IDMOFF 1036  
                     __size_of_main 0200                       __size_of_init 0032  
               GLCD_PIC@INST_INVCTR 1030                 GLCD_PIC@INST_INVOFF 1042  
               GLCD_PIC@INST_PWCTR1 102F                 GLCD_PIC@INST_PWCTR2 102E  
               GLCD_PIC@INST_PWCTR3 102D                 GLCD_PIC@INST_PWCTR4 102C  
               GLCD_PIC@INST_PWCTR5 102B                 GLCD_PIC@INST_VMCTR1 102A  
               GLCD_PIC@INST_SLPOUT 1045                         _new_px_char 343A  
           __end_of_print_px_string 3250                          _INST_CASET 105D  
                        _INST_IDMON 1055                          _INST_INVON 1061  
                        _INST_RASET 105C                          _INST_RAMWR 105B  
                        _INST_TEOFF 1059                          _INST_NORON 1063  
                        _INST_PTLAR 105A                          _INST_SLPIN 1066  
                        _INST_PTLON 1064                  GLCD_PIC@INST_CASET 103D  
                GLCD_PIC@INST_IDMON 1035                  GLCD_PIC@INST_INVON 1041  
                GLCD_PIC@INST_RASET 103C                  GLCD_PIC@INST_RAMWR 103B  
                GLCD_PIC@INST_TEOFF 1039                  GLCD_PIC@INST_NORON 1043  
                GLCD_PIC@INST_PTLAR 103A                  GLCD_PIC@INST_SLPIN 1046  
                GLCD_PIC@INST_PTLON 1044          glcdDrawRectangle@colorData 0016  
                     _print_px_char 346E                       ?_glcdTransfer 0004  
                   ??_glcdDrawPixel 001F                         _spiTransfer 354C  
                 GLCD_PIC@INST_TEON 1038                         _SSPCON1bits 000FC6  
                   ??_glcdSetCOLMOD 0007                    GLCD_PIC@INST_NOP 1048  
