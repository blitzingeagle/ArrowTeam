

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr  9 16:32:30 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33  0000                     
    34                           ; Version 1.45
    35                           ; Generated 16/11/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F4620 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	smallconst
    70  001000                     __psmallconst:
    71                           	opt stack 0
    72  001000  00                 	db	0
    73  001001                     _dpowers:
    74                           	opt stack 0
    75  001001  0001               	dw	1
    76  001003  0000               	dw	0
    77  001005  000A               	dw	10
    78  001007  0000               	dw	0
    79  001009  0064               	dw	100
    80  00100B  0000               	dw	0
    81  00100D  03E8               	dw	1000
    82  00100F  0000               	dw	0
    83  001011  2710               	dw	10000
    84  001013  0000               	dw	0
    85  001015  86A0               	dw	34464
    86  001017  0001               	dw	1
    87  001019  4240               	dw	16960
    88  00101B  000F               	dw	15
    89  00101D  9680               	dw	38528
    90  00101F  0098               	dw	152
    91  001021  E100               	dw	57600
    92  001023  05F5               	dw	1525
    93  001025  CA00               	dw	51712
    94  001027  3B9A               	dw	15258
    95  001029                     __end_of_dpowers:
    96                           	opt stack 0
    97  001029                     _hexpowers:
    98                           	opt stack 0
    99  001029  0001               	dw	1
   100  00102B  0000               	dw	0
   101  00102D  0010               	dw	16
   102  00102F  0000               	dw	0
   103  001031  0100               	dw	256
   104  001033  0000               	dw	0
   105  001035  1000               	dw	4096
   106  001037  0000               	dw	0
   107  001039  0000               	dw	0
   108  00103B  0001               	dw	1
   109  00103D  0000               	dw	0
   110  00103F  0010               	dw	16
   111  001041  0000               	dw	0
   112  001043  0100               	dw	256
   113  001045  0000               	dw	0
   114  001047  1000               	dw	4096
   115  001049                     __end_of_hexpowers:
   116                           	opt stack 0
   117  001049                     _keys:
   118                           	opt stack 0
   119  001049  31                 	db	49
   120  00104A  32                 	db	50
   121  00104B  33                 	db	51
   122  00104C  41                 	db	65
   123  00104D  34                 	db	52
   124  00104E  35                 	db	53
   125  00104F  36                 	db	54
   126  001050  42                 	db	66
   127  001051  37                 	db	55
   128  001052  38                 	db	56
   129  001053  39                 	db	57
   130  001054  43                 	db	67
   131  001055  2A                 	db	42
   132  001056  30                 	db	48
   133  001057  23                 	db	35
   134  001058  44                 	db	68
   135  001059  00                 	db	0
   136  00105A                     __end_of_keys:
   137                           	opt stack 0
   138  00105A                     _happynewyear:
   139                           	opt stack 0
   140  00105A  30                 	db	48
   141  00105B  04                 	db	4
   142  00105C  15                 	db	21
   143  00105D  01                 	db	1
   144  00105E  05                 	db	5
   145  00105F  03                 	db	3
   146  001060  18                 	db	24
   147  001061                     __end_of_happynewyear:
   148                           	opt stack 0
   149  001061                     _LCD_LEFT:
   150                           	opt stack 0
   151  001061  00                 	db	0
   152  001062                     __end_of_LCD_LEFT:
   153                           	opt stack 0
   154  001062                     _LCD_RIGHT:
   155                           	opt stack 0
   156  001062  01                 	db	1
   157  001063                     __end_of_LCD_RIGHT:
   158                           	opt stack 0
   159  001063                     _LCD_SIZE_VERT:
   160                           	opt stack 0
   161  001063  02                 	db	2
   162  001064                     __end_of_LCD_SIZE_VERT:
   163                           	opt stack 0
   164  001064                     _LCD_SIZE_HORZ:
   165                           	opt stack 0
   166  001064  10                 	db	16
   167  001065                     __end_of_LCD_SIZE_HORZ:
   168                           	opt stack 0
   169  001065                     _LCD_VERT_LIMIT:
   170                           	opt stack 0
   171  001065  02                 	db	2
   172  001066                     __end_of_LCD_VERT_LIMIT:
   173                           	opt stack 0
   174  001066                     _LCD_HORZ_LIMIT:
   175                           	opt stack 0
   176  001066  28                 	db	40
   177  001067                     __end_of_LCD_HORZ_LIMIT:
   178                           	opt stack 0
   179  0000                     _LATDbits	set	3980
   180  0000                     _SSPBUF	set	4041
   181  0000                     _SSPCON2bits	set	4037
   182  0000                     _SSPADD	set	4040
   183  0000                     _SSPCON2	set	4037
   184  0000                     _SSPCON1	set	4038
   185  0000                     _SSPSTAT	set	4039
   186  0000                     _TRISCbits	set	3988
   187  0000                     _SSPCON1bits	set	4038
   188  0000                     _ADCON1	set	4033
   189  0000                     _ADCON0	set	4034
   190  0000                     _TRISE	set	3990
   191  0000                     _TRISD	set	3989
   192  0000                     _TRISC	set	3988
   193  0000                     _TRISB	set	3987
   194  0000                     _TRISA	set	3986
   195  0000                     _LATE	set	3981
   196  0000                     _LATD	set	3980
   197  0000                     _LATC	set	3979
   198  0000                     _LATB	set	3978
   199  0000                     _LATA	set	3977
   200  0000                     _EECON2	set	4007
   201  0000                     _INTCONbits	set	4082
   202  0000                     _EEDATA	set	4008
   203  0000                     _EEADR	set	4009
   204  0000                     _EECON1bits	set	4006
   205  001067                     STR_5:
   206  001067  30                 	db	48	;'0'
   207  001068  31                 	db	49	;'1'
   208  001069  32                 	db	50	;'2'
   209  00106A  33                 	db	51	;'3'
   210  00106B  34                 	db	52	;'4'
   211  00106C  35                 	db	53	;'5'
   212  00106D  36                 	db	54	;'6'
   213  00106E  37                 	db	55	;'7'
   214  00106F  38                 	db	56	;'8'
   215  001070  39                 	db	57	;'9'
   216  001071  61                 	db	97	;'a'
   217  001072  62                 	db	98	;'b'
   218  001073  63                 	db	99	;'c'
   219  001074  64                 	db	100	;'d'
   220  001075  65                 	db	101	;'e'
   221  001076  66                 	db	102	;'f'
   222  001077  00                 	db	0
   223  001078                     STR_3:
   224  001078  25                 	db	37
   225  001079  30                 	db	48	;'0'
   226  00107A  32                 	db	50	;'2'
   227  00107B  78                 	db	120	;'x'
   228  00107C  2F                 	db	47
   229  00107D  25                 	db	37
   230  00107E  30                 	db	48	;'0'
   231  00107F  32                 	db	50	;'2'
   232  001080  78                 	db	120	;'x'
   233  001081  2F                 	db	47
   234  001082  25                 	db	37
   235  001083  30                 	db	48	;'0'
   236  001084  32                 	db	50	;'2'
   237  001085  78                 	db	120	;'x'
   238  001086  00                 	db	0
   239  001087                     STR_4:
   240  001087  25                 	db	37
   241  001088  30                 	db	48	;'0'
   242  001089  32                 	db	50	;'2'
   243  00108A  78                 	db	120	;'x'
   244  00108B  3A                 	db	58	;':'
   245  00108C  25                 	db	37
   246  00108D  30                 	db	48	;'0'
   247  00108E  32                 	db	50	;'2'
   248  00108F  78                 	db	120	;'x'
   249  001090  3A                 	db	58	;':'
   250  001091  25                 	db	37
   251  001092  30                 	db	48	;'0'
   252  001093  32                 	db	50	;'2'
   253  001094  78                 	db	120	;'x'
   254  001095  00                 	db	0
   255  001096                     STR_1:
   256  001096  25                 	db	37
   257  001097  6C                 	db	108	;'l'
   258  001098  64                 	db	100	;'d'
   259  001099  00                 	db	0
   260  0000                     
   261                           ; #config settings
   262  00109A  00                 	db	0	; dummy byte at the end
   263  0000                     
   264                           	psect	cinit
   265  001A44                     __pcinit:
   266                           	opt stack 0
   267  001A44                     start_initialization:
   268                           	opt stack 0
   269  001A44                     __initialization:
   270                           	opt stack 0
   271                           
   272                           ; Clear objects allocated to COMRAM (2 bytes)
   273  001A44  6A43               	clrf	(__pbssCOMRAM+1)& (0+255),c
   274  001A46  6A42               	clrf	__pbssCOMRAM& (0+255),c
   275  001A48                     end_of_initialization:
   276                           	opt stack 0
   277  001A48                     __end_of__initialization:
   278                           	opt stack 0
   279  001A48  0E00               	movlw	low (__Lmediumconst shr (0+16))
   280  001A4A  6EF8               	movwf	tblptru,c
   281  001A4C  0100               	movlb	0
   282  001A4E  EF47  F00A         	goto	_main	;jump to C main() function
   283                           tblptru	equ	0xFF8
   284                           
   285                           	psect	bssCOMRAM
   286  000042                     __pbssCOMRAM:
   287                           	opt stack 0
   288  000042                     lcd@LCDinterruptState:
   289                           	opt stack 0
   290  000042                     	ds	1
   291  000043                     	ds	1
   292                           tblptru	equ	0xFF8
   293                           
   294                           	psect	cstackCOMRAM
   295  000001                     __pcstackCOMRAM:
   296                           	opt stack 0
   297  000001                     ??_isdigit:
   298  000001                     ??_eep_read_octet:
   299  000001                     ??_I2C_Master_Wait:
   300  000001                     ?___wmul:
   301                           	opt stack 0
   302  000001                     ?___lldiv:
   303                           	opt stack 0
   304  000001                     eep_write_octet@data:
   305                           	opt stack 0
   306  000001                     lcdNibble@temp:
   307                           	opt stack 0
   308  000001                     ___wmul@multiplier:
   309                           	opt stack 0
   310  000001                     ___lldiv@dividend:
   311                           	opt stack 0
   312                           
   313                           ; 4 bytes @ 0x0
   314  000001                     	ds	1
   315  000002                     ??_eep_write_octet:
   316  000002                     I2C_Master_Read@ackBit:
   317                           	opt stack 0
   318  000002                     lcdNibble@data:
   319                           	opt stack 0
   320  000002                     _isdigit$712:
   321                           	opt stack 0
   322  000002                     I2C_Master_Write@byteToWrite:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x1
   326  000002                     	ds	1
   327  000003                     eep_read_octet@adr:
   328                           	opt stack 0
   329  000003                     I2C_Master_Read@receivedByte:
   330                           	opt stack 0
   331  000003                     lcdInst@data:
   332                           	opt stack 0
   333  000003                     putch@data:
   334                           	opt stack 0
   335  000003                     isdigit@c:
   336                           	opt stack 0
   337  000003                     ___wmul@multiplicand:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x2
   341  000003                     	ds	1
   342  000004                     ??_initLCD:
   343  000004                     eep_write_octet@adr:
   344                           	opt stack 0
   345  000004                     eep_read@data:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x3
   349  000004                     	ds	1
   350  000005                     eep_write@data:
   351                           	opt stack 0
   352  000005                     ___wmul@product:
   353                           	opt stack 0
   354  000005                     ___lldiv@divisor:
   355                           	opt stack 0
   356                           
   357                           ; 4 bytes @ 0x4
   358  000005                     	ds	1
   359  000006                     eep_read@adr:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x5
   363  000006                     	ds	1
   364  000007                     eep_write@adr:
   365                           	opt stack 0
   366  000007                     eep_read@i:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x6
   370  000007                     	ds	1
   371  000008                     ?_eep_read_long:
   372                           	opt stack 0
   373  000008                     eep_write@i:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0x7
   377  000008                     	ds	1
   378  000009                     eep_write_long@l:
   379                           	opt stack 0
   380  000009                     ___lldiv@quotient:
   381                           	opt stack 0
   382                           
   383                           ; 4 bytes @ 0x8
   384  000009                     	ds	3
   385  00000C                     ??_eep_read_long:
   386                           
   387                           ; 1 bytes @ 0xB
   388  00000C                     	ds	1
   389  00000D                     eep_write_long@adr:
   390                           	opt stack 0
   391  00000D                     ___lldiv@counter:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0xC
   395  00000D                     	ds	1
   396  00000E                     ?___llmod:
   397                           	opt stack 0
   398  00000E                     eep_write_long@data:
   399                           	opt stack 0
   400  00000E                     I2C_Master_Init@clockFreq:
   401                           	opt stack 0
   402  00000E                     ___llmod@dividend:
   403                           	opt stack 0
   404                           
   405                           ; 4 bytes @ 0xD
   406  00000E                     	ds	4
   407  000012                     ??_I2C_Master_Init:
   408  000012                     ___llmod@divisor:
   409                           	opt stack 0
   410                           
   411                           ; 4 bytes @ 0x11
   412  000012                     	ds	4
   413  000016                     ___llmod@counter:
   414                           	opt stack 0
   415                           
   416                           ; 1 bytes @ 0x15
   417  000016                     	ds	1
   418  000017                     ?_printf:
   419                           	opt stack 0
   420  000017                     printf@f:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x16
   424  000017                     	ds	8
   425  00001F                     ??_printf:
   426                           
   427                           ; 1 bytes @ 0x1E
   428  00001F                     	ds	4
   429  000023                     printf@idx:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x22
   433  000023                     	ds	1
   434  000024                     eep_read_long@adr:
   435                           	opt stack 0
   436  000024                     printf@prec:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x23
   440  000024                     	ds	1
   441  000025                     eep_read_long@data:
   442                           	opt stack 0
   443                           
   444                           ; 4 bytes @ 0x24
   445  000025                     	ds	1
   446  000026                     printf@ap:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x25
   450  000026                     	ds	2
   451  000028                     printf@val:
   452                           	opt stack 0
   453                           
   454                           ; 4 bytes @ 0x27
   455  000028                     	ds	4
   456  00002C                     printf@width:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x2B
   460  00002C                     	ds	2
   461  00002E                     printf@flag:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x2D
   465  00002E                     	ds	1
   466  00002F                     printf@c:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x2E
   470  00002F                     	ds	1
   471  000030                     ??_main:
   472                           
   473                           ; 1 bytes @ 0x2F
   474  000030                     	ds	2
   475  000032                     main@l:
   476                           	opt stack 0
   477                           
   478                           ; 4 bytes @ 0x31
   479  000032                     	ds	4
   480  000036                     main@time:
   481                           	opt stack 0
   482                           
   483                           ; 7 bytes @ 0x35
   484  000036                     	ds	7
   485  00003D                     main@t:
   486                           	opt stack 0
   487                           
   488                           ; 4 bytes @ 0x3C
   489  00003D                     	ds	4
   490  000041                     main@i:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x40
   494  000041                     	ds	1
   495                           tblptru	equ	0xFF8
   496                           
   497 ;;
   498 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   499 ;;
   500 ;; *************** function _main *****************
   501 ;; Defined at:
   502 ;;		line 99 in file "main.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;		None
   505 ;; Auto vars:     Size  Location     Type
   506 ;;  time            7   53[COMRAM] unsigned char [7]
   507 ;;  t               4   60[COMRAM] long 
   508 ;;  l               4   49[COMRAM] unsigned long 
   509 ;;  i               1   64[COMRAM] unsigned char 
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      void 
   512 ;; Registers used:
   513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : 0/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   520 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   521 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   522 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   523 ;;Total ram usage:       18 bytes
   524 ;; Hardware stack levels required when called:    3
   525 ;; This function calls:
   526 ;;		_I2C_Master_Init
   527 ;;		_I2C_Master_Read
   528 ;;		_I2C_Master_Start
   529 ;;		_I2C_Master_Stop
   530 ;;		_I2C_Master_Write
   531 ;;		_eep_read_long
   532 ;;		_eep_write_long
   533 ;;		_initLCD
   534 ;;		_lcdInst
   535 ;;		_printf
   536 ;; This function is called by:
   537 ;;		Startup code after reset
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541                           	psect	text0
   542  00148E                     __ptext0:
   543                           	opt stack 0
   544  00148E                     _main:
   545                           	opt stack 28
   546                           
   547                           ;main.c: 105: LATA = 0x00;
   548                           
   549                           ;incstack = 0
   550  00148E  0E00               	movlw	0
   551  001490  6E89               	movwf	3977,c	;volatile
   552                           
   553                           ;main.c: 106: LATB = 0x00;
   554  001492  0E00               	movlw	0
   555  001494  6E8A               	movwf	3978,c	;volatile
   556                           
   557                           ;main.c: 107: LATC = 0x00;
   558  001496  0E00               	movlw	0
   559  001498  6E8B               	movwf	3979,c	;volatile
   560                           
   561                           ;main.c: 108: LATD = 0x00;
   562  00149A  0E00               	movlw	0
   563  00149C  6E8C               	movwf	3980,c	;volatile
   564                           
   565                           ;main.c: 109: LATE = 0x00;
   566  00149E  0E00               	movlw	0
   567  0014A0  6E8D               	movwf	3981,c	;volatile
   568                           
   569                           ;main.c: 113: TRISA = 0xFF;
   570  0014A2  6892               	setf	3986,c	;volatile
   571                           
   572                           ;main.c: 114: TRISB = 0xFF;
   573  0014A4  6893               	setf	3987,c	;volatile
   574                           
   575                           ;main.c: 115: TRISC = 0b10000000;
   576  0014A6  0E80               	movlw	128
   577  0014A8  6E94               	movwf	3988,c	;volatile
   578                           
   579                           ;main.c: 119: TRISD = 0x00;
   580  0014AA  0E00               	movlw	0
   581  0014AC  6E95               	movwf	3989,c	;volatile
   582                           
   583                           ;main.c: 120: TRISE = 0x00;
   584  0014AE  0E00               	movlw	0
   585  0014B0  6E96               	movwf	3990,c	;volatile
   586                           
   587                           ;main.c: 123: ADCON0 = 0x00;
   588  0014B2  0E00               	movlw	0
   589  0014B4  6EC2               	movwf	4034,c	;volatile
   590                           
   591                           ;main.c: 124: ADCON1 = 0b00001111;
   592  0014B6  0E0F               	movlw	15
   593  0014B8  6EC1               	movwf	4033,c	;volatile
   594                           
   595                           ;main.c: 128: initLCD();
   596  0014BA  EC3B  F00C         	call	_initLCD	;wreg free
   597                           
   598                           ;main.c: 130: long t = 10241208;
   599  0014BE  0EB8               	movlw	184
   600  0014C0  6E3D               	movwf	main@t,c
   601  0014C2  0E44               	movlw	68
   602  0014C4  6E3E               	movwf	main@t+1,c
   603  0014C6  0E9C               	movlw	156
   604  0014C8  6E3F               	movwf	main@t+2,c
   605  0014CA  0E00               	movlw	0
   606  0014CC  6E40               	movwf	main@t+3,c
   607                           
   608                           ;main.c: 131: printf("%ld", t);
   609  0014CE  0E96               	movlw	low STR_1
   610  0014D0  6E17               	movwf	printf@f,c
   611  0014D2  0E10               	movlw	high STR_1
   612  0014D4  6E18               	movwf	printf@f+1,c
   613  0014D6  C03D  F019         	movff	main@t,?_printf+2
   614  0014DA  C03E  F01A         	movff	main@t+1,?_printf+3
   615  0014DE  C03F  F01B         	movff	main@t+2,?_printf+4
   616  0014E2  C040  F01C         	movff	main@t+3,?_printf+5
   617  0014E6  EC4E  F008         	call	_printf	;wreg free
   618                           
   619                           ;main.c: 132: lcdInst(0xC0);;
   620  0014EA  0EC0               	movlw	192
   621  0014EC  EC0F  F00D         	call	_lcdInst
   622                           
   623                           ;main.c: 133: eep_write_long(16, t);
   624  0014F0  C03D  F009         	movff	main@t,eep_write_long@l
   625  0014F4  C03E  F00A         	movff	main@t+1,eep_write_long@l+1
   626  0014F8  C03F  F00B         	movff	main@t+2,eep_write_long@l+2
   627  0014FC  C040  F00C         	movff	main@t+3,eep_write_long@l+3
   628  001500  0E10               	movlw	16
   629  001502  ECE5  F00C         	call	_eep_write_long
   630                           
   631                           ;main.c: 134: unsigned long l = eep_read_long(16);
   632  001506  0E10               	movlw	16
   633  001508  EC07  F00B         	call	_eep_read_long
   634  00150C  C008  F032         	movff	?_eep_read_long,main@l
   635  001510  C009  F033         	movff	?_eep_read_long+1,main@l+1
   636  001514  C00A  F034         	movff	?_eep_read_long+2,main@l+2
   637  001518  C00B  F035         	movff	?_eep_read_long+3,main@l+3
   638                           
   639                           ;main.c: 135: printf("%ld", l);
   640  00151C  0E96               	movlw	low STR_1
   641  00151E  6E17               	movwf	printf@f,c
   642  001520  0E10               	movlw	high STR_1
   643  001522  6E18               	movwf	printf@f+1,c
   644  001524  C032  F019         	movff	main@l,?_printf+2
   645  001528  C033  F01A         	movff	main@l+1,?_printf+3
   646  00152C  C034  F01B         	movff	main@l+2,?_printf+4
   647  001530  C035  F01C         	movff	main@l+3,?_printf+5
   648  001534  EC4E  F008         	call	_printf	;wreg free
   649  001538                     l103:
   650  001538  D7FF               	goto	l103
   651  00153A                     l106:
   652                           
   653                           ;main.c: 155: I2C_Master_Start();
   654  00153A  EC32  F00D         	call	_I2C_Master_Start	;wreg free
   655                           
   656                           ;main.c: 156: I2C_Master_Write(0b11010000);
   657  00153E  0E00               	movlw	0
   658  001540  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   659  001542  0ED0               	movlw	208
   660  001544  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   661  001546  EC29  F00D         	call	_I2C_Master_Write	;wreg free
   662                           
   663                           ;main.c: 157: I2C_Master_Write(0x00);
   664  00154A  0E00               	movlw	0
   665  00154C  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   666  00154E  0E00               	movlw	0
   667  001550  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   668  001552  EC29  F00D         	call	_I2C_Master_Write	;wreg free
   669                           
   670                           ;main.c: 158: I2C_Master_Stop();
   671  001556  EC2E  F00D         	call	_I2C_Master_Stop	;wreg free
   672                           
   673                           ;main.c: 161: I2C_Master_Start();
   674  00155A  EC32  F00D         	call	_I2C_Master_Start	;wreg free
   675                           
   676                           ;main.c: 162: I2C_Master_Write(0b11010001);
   677  00155E  0E00               	movlw	0
   678  001560  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
   679  001562  0ED1               	movlw	209
   680  001564  6E02               	movwf	I2C_Master_Write@byteToWrite,c
   681  001566  EC29  F00D         	call	_I2C_Master_Write	;wreg free
   682                           
   683                           ;main.c: 163: for(i = 0; i < 6; i++){
   684  00156A  0E00               	movlw	0
   685  00156C  6E41               	movwf	main@i,c
   686  00156E                     l1681:
   687  00156E  0E05               	movlw	5
   688  001570  6441               	cpfsgt	main@i,c
   689  001572  D001               	goto	l107
   690  001574  D00E               	goto	u960
   691  001576                     l107:
   692                           
   693                           ;main.c: 164: time[i] = I2C_Master_Read(0);
   694  001576  5041               	movf	main@i,w,c
   695  001578  0D01               	mullw	1
   696  00157A  0E36               	movlw	low main@time
   697  00157C  24F3               	addwf	prodl,w,c
   698  00157E  6ED9               	movwf	fsr2l,c
   699  001580  0E00               	movlw	high main@time
   700  001582  20F4               	addwfc	prodh,w,c
   701  001584  6EDA               	movwf	fsr2h,c
   702  001586  0E00               	movlw	0
   703  001588  ECD3  F00C         	call	_I2C_Master_Read
   704  00158C  6EDF               	movwf	indf2,c
   705  00158E  2A41               	incf	main@i,f,c
   706  001590  D7EE               	goto	l1681
   707  001592                     u960:
   708                           
   709                           ;main.c: 165: }
   710                           ;main.c: 166: time[6] = I2C_Master_Read(1);
   711  001592  0E01               	movlw	1
   712  001594  ECD3  F00C         	call	_I2C_Master_Read
   713  001598  6E3C               	movwf	main@time+6,c
   714                           
   715                           ;main.c: 167: I2C_Master_Stop();
   716  00159A  EC2E  F00D         	call	_I2C_Master_Stop	;wreg free
   717                           
   718                           ;main.c: 170: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
   719  00159E  0E80               	movlw	128
   720  0015A0  EC0F  F00D         	call	_lcdInst
   721  0015A4  0E41               	movlw	65
   722  0015A6  6E30               	movwf	??_main& (0+255),c
   723  0015A8  0EEE               	movlw	238
   724  0015AA                     u997:
   725  0015AA  2EE8               	decfsz	wreg,f,c
   726  0015AC  D7FE               	bra	u997
   727  0015AE  2E30               	decfsz	??_main& (0+255),f,c
   728  0015B0  D7FC               	bra	u997
   729  0015B2  D000               	nop2	
   730                           
   731                           ;main.c: 171: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
   732  0015B4  0E78               	movlw	low STR_3
   733  0015B6  6E17               	movwf	printf@f,c
   734  0015B8  0E10               	movlw	high STR_3
   735  0015BA  6E18               	movwf	printf@f+1,c
   736  0015BC  C03C  F019         	movff	main@time+6,?_printf+2
   737  0015C0  6A1A               	clrf	?_printf+3,c
   738  0015C2  C03B  F01B         	movff	main@time+5,?_printf+4
   739  0015C6  6A1C               	clrf	?_printf+5,c
   740  0015C8  C03A  F01D         	movff	main@time+4,?_printf+6
   741  0015CC  6A1E               	clrf	?_printf+7,c
   742  0015CE  EC4E  F008         	call	_printf	;wreg free
   743                           
   744                           ;main.c: 172: lcdInst(0xC0);;
   745  0015D2  0EC0               	movlw	192
   746  0015D4  EC0F  F00D         	call	_lcdInst
   747                           
   748                           ;main.c: 173: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
   749  0015D8  0E87               	movlw	low STR_4
   750  0015DA  6E17               	movwf	printf@f,c
   751  0015DC  0E10               	movlw	high STR_4
   752  0015DE  6E18               	movwf	printf@f+1,c
   753  0015E0  C038  F019         	movff	main@time+2,?_printf+2
   754  0015E4  6A1A               	clrf	?_printf+3,c
   755  0015E6  C037  F01B         	movff	main@time+1,?_printf+4
   756  0015EA  6A1C               	clrf	?_printf+5,c
   757  0015EC  C036  F01D         	movff	main@time,?_printf+6
   758  0015F0  6A1E               	clrf	?_printf+7,c
   759  0015F2  EC4E  F008         	call	_printf	;wreg free
   760                           
   761                           ;main.c: 174: _delay((unsigned long)((1000)*(40000000/4000.0)));
   762  0015F6  0E33               	movlw	51
   763  0015F8  6E31               	movwf	(??_main+1)& (0+255),c
   764  0015FA  0EBB               	movlw	187
   765  0015FC  6E30               	movwf	??_main& (0+255),c
   766  0015FE  0EE0               	movlw	224
   767  001600                     u1007:
   768  001600  2EE8               	decfsz	wreg,f,c
   769  001602  D7FE               	bra	u1007
   770  001604  2E30               	decfsz	??_main& (0+255),f,c
   771  001606  D7FC               	bra	u1007
   772  001608  2E31               	decfsz	(??_main+1)& (0+255),f,c
   773  00160A  D7FA               	bra	u1007
   774  00160C  D796               	goto	l106
   775  00160E                     __end_of_main:
   776                           	opt stack 0
   777                           tblptru	equ	0xFF8
   778                           prodh	equ	0xFF4
   779                           prodl	equ	0xFF3
   780                           wreg	equ	0xFE8
   781                           indf2	equ	0xFDF
   782                           fsr2h	equ	0xFDA
   783                           fsr2l	equ	0xFD9
   784                           
   785 ;; *************** function _printf *****************
   786 ;; Defined at:
   787 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  f               2   22[COMRAM] PTR const unsigned char 
   790 ;;		 -> STR_4(15), STR_3(15), STR_2(4), STR_1(4), 
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  idx             1   34[COMRAM] unsigned char 
   793 ;;  val             4   39[COMRAM] unsigned long 
   794 ;;  tmpval          4    0        struct .
   795 ;;  cp              3    0        PTR const unsigned char 
   796 ;;  width           2   43[COMRAM] int 
   797 ;;  ap              2   37[COMRAM] PTR void [1]
   798 ;;		 -> ?_printf(2), 
   799 ;;  prec            2   35[COMRAM] int 
   800 ;;  len             2    0        unsigned int 
   801 ;;  c               1   46[COMRAM] char 
   802 ;;  flag            1   45[COMRAM] unsigned char 
   803 ;; Return value:  Size  Location     Type
   804 ;;                  2   22[COMRAM] int 
   805 ;; Registers used:
   806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   812 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   813 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   814 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   815 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   816 ;;Total ram usage:       25 bytes
   817 ;; Hardware stack levels used:    1
   818 ;; Hardware stack levels required when called:    2
   819 ;; This function calls:
   820 ;;		___lldiv
   821 ;;		___llmod
   822 ;;		___wmul
   823 ;;		_isdigit
   824 ;;		_putch
   825 ;; This function is called by:
   826 ;;		_main
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text1
   831  00109C                     __ptext1:
   832                           	opt stack 0
   833  00109C                     _printf:
   834                           	opt stack 28
   835                           
   836                           ;doprnt.c: 466: va_list ap;
   837                           ;doprnt.c: 499: signed char c;
   838                           ;doprnt.c: 501: int width;
   839                           ;doprnt.c: 504: int prec;
   840                           ;doprnt.c: 508: unsigned char flag;
   841                           ;doprnt.c: 523: union {
   842                           ;doprnt.c: 524: unsigned long vd;
   843                           ;doprnt.c: 525: double integ;
   844                           ;doprnt.c: 526: } tmpval;
   845                           ;doprnt.c: 528: unsigned long val;
   846                           ;doprnt.c: 529: unsigned len;
   847                           ;doprnt.c: 530: const char * cp;
   848                           ;doprnt.c: 533: *ap = __va_start();
   849                           
   850                           ;incstack = 0
   851  00109C  0E19               	movlw	low (?_printf+2)
   852  00109E  6E26               	movwf	printf@ap,c
   853  0010A0  0E00               	movlw	high (?_printf+2)
   854  0010A2  6E27               	movwf	printf@ap+1,c
   855                           
   856                           ;doprnt.c: 536: while(c = *f++) {
   857  0010A4  D1E7               	goto	u920
   858  0010A6                     
   859                           ;doprnt.c: 538: if(c != '%')
   860  0010A6  0E25               	movlw	37
   861  0010A8  182F               	xorwf	printf@c,w,c
   862  0010AA  B4D8               	btfsc	status,2,c
   863  0010AC  D004               	goto	l228
   864                           
   865                           ;doprnt.c: 540: {
   866                           ;doprnt.c: 541: (putch(c) );
   867  0010AE  502F               	movf	printf@c,w,c
   868  0010B0  EC05  F00D         	call	_putch
   869                           
   870                           ;doprnt.c: 542: continue;
   871  0010B4  D1DF               	goto	u920
   872  0010B6                     l228:
   873                           
   874                           ;doprnt.c: 543: }
   875                           ;doprnt.c: 546: width = 0;
   876  0010B6  0E00               	movlw	0
   877  0010B8  6E2D               	movwf	printf@width+1,c
   878  0010BA  0E00               	movlw	0
   879  0010BC  6E2C               	movwf	printf@width,c
   880                           
   881                           ;doprnt.c: 548: flag = 0;
   882  0010BE  0E00               	movlw	0
   883  0010C0  6E2E               	movwf	printf@flag,c
   884                           
   885                           ;doprnt.c: 551: switch(*f) {
   886                           
   887                           ;doprnt.c: 550: for(;;) {
   888  0010C2  D003               	goto	l230
   889  0010C4                     
   890                           ;doprnt.c: 580: flag |= 0x04;
   891  0010C4  842E               	bsf	printf@flag,2,c
   892                           
   893                           ;doprnt.c: 581: f++;
   894  0010C6  4A17               	infsnz	printf@f,f,c
   895  0010C8  2A18               	incf	printf@f+1,f,c
   896  0010CA                     l230:
   897  0010CA  C017  FFF6         	movff	printf@f,tblptrl
   898  0010CE  C018  FFF7         	movff	printf@f+1,tblptrh
   899  0010D2                     	if	0	;tblptru may be non-zero
   900  0010D2                     	endif
   901  0010D2                     	if	0	;tblptru may be non-zero
   902  0010D2                     	endif
   903  0010D2  0008               	tblrd		*
   904  0010D4  50F5               	movf	tablat,w,c
   905                           
   906                           ; Switch size 1, requested type "space"
   907                           ; Number of cases is 1, Range of values is 48 to 48
   908                           ; switch strategies available:
   909                           ; Name         Instructions Cycles
   910                           ; simple_byte            4     3 (average)
   911                           ;	Chosen strategy is simple_byte
   912  0010D6  0A30               	xorlw	48	; case 48
   913  0010D8  B4D8               	btfsc	status,2,c
   914  0010DA  D7F4               	goto	l231
   915                           
   916                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   917                           
   918                           ;doprnt.c: 586: }
   919                           
   920                           ;doprnt.c: 585: break;
   921  0010DC  C017  FFF6         	movff	printf@f,tblptrl
   922  0010E0  C018  FFF7         	movff	printf@f+1,tblptrh
   923  0010E4                     	if	0	;tblptru may be non-zero
   924  0010E4                     	endif
   925  0010E4                     	if	0	;tblptru may be non-zero
   926  0010E4                     	endif
   927  0010E4  0008               	tblrd		*
   928  0010E6  50F5               	movf	tablat,w,c
   929  0010E8  ECF6  F00C         	call	_isdigit
   930  0010EC  A0D8               	btfss	status,0,c
   931  0010EE  D037               	goto	l239
   932                           
   933                           ;doprnt.c: 598: width = 0;
   934  0010F0  0E00               	movlw	0
   935  0010F2  6E2D               	movwf	printf@width+1,c
   936  0010F4  0E00               	movlw	0
   937  0010F6  6E2C               	movwf	printf@width,c
   938  0010F8                     
   939                           ;doprnt.c: 600: width *= 10;
   940  0010F8  C02C  F001         	movff	printf@width,___wmul@multiplier
   941  0010FC  C02D  F002         	movff	printf@width+1,___wmul@multiplier+1
   942  001100  0E00               	movlw	0
   943  001102  6E04               	movwf	___wmul@multiplicand+1,c
   944  001104  0E0A               	movlw	10
   945  001106  6E03               	movwf	___wmul@multiplicand,c
   946  001108  ECC0  F00C         	call	___wmul	;wreg free
   947  00110C  C001  F02C         	movff	?___wmul,printf@width
   948  001110  C002  F02D         	movff	?___wmul+1,printf@width+1
   949                           
   950                           ;doprnt.c: 601: width += *f++ - '0';
   951  001114  0ED0               	movlw	208
   952  001116  6E1F               	movwf	??_printf& (0+255),c
   953  001118  0EFF               	movlw	255
   954  00111A  6E20               	movwf	(??_printf+1)& (0+255),c
   955  00111C  C017  FFF6         	movff	printf@f,tblptrl
   956  001120  C018  FFF7         	movff	printf@f+1,tblptrh
   957  001124                     	if	0	;tblptru may be non-zero
   958  001124                     	endif
   959  001124                     	if	0	;tblptru may be non-zero
   960  001124                     	endif
   961  001124  0008               	tblrd		*
   962  001126  50F5               	movf	tablat,w,c
   963  001128  6E21               	movwf	(??_printf+2)& (0+255),c
   964  00112A  6A22               	clrf	(??_printf+3)& (0+255),c
   965  00112C  501F               	movf	??_printf,w,c
   966  00112E  2621               	addwf	??_printf+2,f,c
   967  001130  5020               	movf	??_printf+1,w,c
   968  001132  2222               	addwfc	??_printf+3,f,c
   969  001134  5021               	movf	??_printf+2,w,c
   970  001136  262C               	addwf	printf@width,f,c
   971  001138  5022               	movf	??_printf+3,w,c
   972  00113A  222D               	addwfc	printf@width+1,f,c
   973  00113C  4A17               	infsnz	printf@f,f,c
   974  00113E  2A18               	incf	printf@f+1,f,c
   975                           
   976                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   977  001140  C017  FFF6         	movff	printf@f,tblptrl
   978  001144  C018  FFF7         	movff	printf@f+1,tblptrh
   979  001148                     	if	0	;tblptru may be non-zero
   980  001148                     	endif
   981  001148                     	if	0	;tblptru may be non-zero
   982  001148                     	endif
   983  001148  0008               	tblrd		*
   984  00114A  50F5               	movf	tablat,w,c
   985  00114C  ECF6  F00C         	call	_isdigit
   986  001150  A0D8               	btfss	status,0,c
   987  001152  D005               	goto	l239
   988  001154  D7D1               	goto	l236
   989  001156                     
   990                           ;doprnt.c: 643: flag |= 0x10;
   991  001156  882E               	bsf	printf@flag,4,c
   992                           
   993                           ;doprnt.c: 644: goto loop;
   994  001158  D002               	goto	l239
   995  00115A                     
   996                           ;doprnt.c: 721: flag |= 0x80;
   997  00115A  8E2E               	bsf	printf@flag,7,c
   998                           
   999                           ;doprnt.c: 723: break;
  1000  00115C  D01A               	goto	l245
  1001  00115E                     l239:
  1002  00115E  C017  FFF6         	movff	printf@f,tblptrl
  1003  001162  C018  FFF7         	movff	printf@f+1,tblptrh
  1004  001166  4A17               	infsnz	printf@f,f,c
  1005  001168  2A18               	incf	printf@f+1,f,c
  1006  00116A                     	if	0	;tblptru may be non-zero
  1007  00116A                     	endif
  1008  00116A                     	if	0	;tblptru may be non-zero
  1009  00116A                     	endif
  1010  00116A  0008               	tblrd		*
  1011  00116C  CFF5 F02F          	movff	tablat,printf@c
  1012  001170  502F               	movf	printf@c,w,c
  1013                           
  1014                           ; Switch size 1, requested type "space"
  1015                           ; Number of cases is 5, Range of values is 0 to 120
  1016                           ; switch strategies available:
  1017                           ; Name         Instructions Cycles
  1018                           ; simple_byte           16     9 (average)
  1019                           ;	Chosen strategy is simple_byte
  1020  001172  0A00               	xorlw	0	; case 0
  1021  001174  B4D8               	btfsc	status,2,c
  1022  001176  0012               	return	
  1023  001178  0A64               	xorlw	100	; case 100
  1024  00117A  B4D8               	btfsc	status,2,c
  1025  00117C  D00A               	goto	l245
  1026  00117E  0A0D               	xorlw	13	; case 105
  1027  001180  B4D8               	btfsc	status,2,c
  1028  001182  D007               	goto	l245
  1029  001184  0A05               	xorlw	5	; case 108
  1030  001186  B4D8               	btfsc	status,2,c
  1031  001188  D7E6               	goto	l242
  1032  00118A  0A14               	xorlw	20	; case 120
  1033  00118C  B4D8               	btfsc	status,2,c
  1034  00118E  D7E5               	goto	l246
  1035  001190  D171               	goto	u920
  1036  001192                     l245:
  1037                           
  1038                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1039  001192  BE2E               	btfsc	printf@flag,7,c
  1040  001194  D02E               	goto	l248
  1041                           
  1042                           ;doprnt.c: 1253: {
  1043                           ;doprnt.c: 1255: if(flag & 0x10)
  1044  001196  A82E               	btfss	printf@flag,4,c
  1045  001198  D00E               	goto	l249
  1046                           
  1047                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  1048  00119A  C026  FFD9         	movff	printf@ap,fsr2l
  1049  00119E  C027  FFDA         	movff	printf@ap+1,fsr2h
  1050  0011A2  CFDE F028          	movff	postinc2,printf@val
  1051  0011A6  CFDE F029          	movff	postinc2,printf@val+1
  1052  0011AA  CFDE F02A          	movff	postinc2,printf@val+2
  1053  0011AE  CFDE F02B          	movff	postinc2,printf@val+3
  1054  0011B2  0E04               	movlw	4
  1055  0011B4  D00E               	goto	L1
  1056  0011B6                     l249:
  1057                           
  1058                           ;doprnt.c: 1257: else
  1059                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  1060  0011B6  C026  FFD9         	movff	printf@ap,fsr2l
  1061  0011BA  C027  FFDA         	movff	printf@ap+1,fsr2h
  1062  0011BE  CFDE F028          	movff	postinc2,printf@val
  1063  0011C2  CFDD F029          	movff	postdec2,printf@val+1
  1064  0011C6  0E00               	movlw	0
  1065  0011C8  BE29               	btfsc	printf@val+1,7,c
  1066  0011CA  0EFF               	movlw	-1
  1067  0011CC  6E2A               	movwf	printf@val+2,c
  1068  0011CE  6E2B               	movwf	printf@val+3,c
  1069  0011D0  0E02               	movlw	2
  1070  0011D2                     L1:
  1071  0011D2  2626               	addwf	printf@ap,f,c
  1072  0011D4  0E00               	movlw	0
  1073  0011D6  2227               	addwfc	printf@ap+1,f,c
  1074                           
  1075                           ;doprnt.c: 1261: if((long)val < 0) {
  1076  0011D8  AE2B               	btfss	printf@val+3,7,c
  1077  0011DA  D06A               	goto	l255
  1078                           
  1079                           ;doprnt.c: 1262: flag |= 0x03;
  1080  0011DC  0E03               	movlw	3
  1081  0011DE  122E               	iorwf	printf@flag,f,c
  1082                           
  1083                           ;doprnt.c: 1263: val = -val;
  1084  0011E0  1E2B               	comf	printf@val+3,f,c
  1085  0011E2  1E2A               	comf	printf@val+2,f,c
  1086  0011E4  1E29               	comf	printf@val+1,f,c
  1087  0011E6  6C28               	negf	printf@val,c
  1088  0011E8  0E00               	movlw	0
  1089  0011EA  2229               	addwfc	printf@val+1,f,c
  1090  0011EC  222A               	addwfc	printf@val+2,f,c
  1091  0011EE  222B               	addwfc	printf@val+3,f,c
  1092                           
  1093                           ;doprnt.c: 1264: }
  1094                           ;doprnt.c: 1266: }
  1095  0011F0  D05F               	goto	l255
  1096  0011F2                     l248:
  1097                           
  1098                           ;doprnt.c: 1268: else
  1099                           ;doprnt.c: 1273: {
  1100                           ;doprnt.c: 1281: if(flag & 0x10)
  1101  0011F2  A82E               	btfss	printf@flag,4,c
  1102  0011F4  D00E               	goto	l253
  1103                           
  1104                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  1105  0011F6  C026  FFD9         	movff	printf@ap,fsr2l
  1106  0011FA  C027  FFDA         	movff	printf@ap+1,fsr2h
  1107  0011FE  CFDE F028          	movff	postinc2,printf@val
  1108  001202  CFDE F029          	movff	postinc2,printf@val+1
  1109  001206  CFDE F02A          	movff	postinc2,printf@val+2
  1110  00120A  CFDE F02B          	movff	postinc2,printf@val+3
  1111  00120E  0E04               	movlw	4
  1112  001210  D00F               	goto	L2
  1113  001212                     l253:
  1114                           
  1115                           ;doprnt.c: 1283: else
  1116                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1117  001212  C026  FFD9         	movff	printf@ap,fsr2l
  1118  001216  C027  FFDA         	movff	printf@ap+1,fsr2h
  1119  00121A  CFDE F01F          	movff	postinc2,??_printf
  1120  00121E  CFDD F020          	movff	postdec2,??_printf+1
  1121  001222  C01F  F028         	movff	??_printf,printf@val
  1122  001226  C020  F029         	movff	??_printf+1,printf@val+1
  1123  00122A  6A2A               	clrf	printf@val+2,c
  1124  00122C  6A2B               	clrf	printf@val+3,c
  1125  00122E  0E02               	movlw	2
  1126  001230                     L2:
  1127  001230  2626               	addwf	printf@ap,f,c
  1128  001232  0E00               	movlw	0
  1129  001234  2227               	addwfc	printf@ap+1,f,c
  1130                           
  1131                           ;doprnt.c: 1287: }
  1132                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1133  001236  D03C               	goto	l255
  1134  001238                     
  1135                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1136  001238  0E01               	movlw	1
  1137  00123A  6E2F               	movwf	printf@c,c
  1138  00123C                     l1565:
  1139  00123C  0E0A               	movlw	10
  1140  00123E  182F               	xorwf	printf@c,w,c
  1141  001240  B4D8               	btfsc	status,2,c
  1142  001242  D03E               	goto	l260
  1143                           
  1144                           ;doprnt.c: 1306: if(val < dpowers[c])
  1145  001244  502F               	movf	printf@c,w,c
  1146  001246  0D04               	mullw	4
  1147  001248  0E01               	movlw	low _dpowers
  1148  00124A  24F3               	addwf	prodl,w,c
  1149  00124C  6EF6               	movwf	tblptrl,c
  1150  00124E  0E10               	movlw	high _dpowers
  1151  001250  20F4               	addwfc	prodh,w,c
  1152  001252  6EF7               	movwf	tblptrh,c
  1153  001254                     	if	0	;There are less than 3 active tblptr bytes
  1154  001254                     	endif
  1155  001254  0009               	tblrd		*+
  1156  001256  50F5               	movf	tablat,w,c
  1157  001258  5C28               	subwf	printf@val,w,c
  1158  00125A  0009               	tblrd		*+
  1159  00125C  50F5               	movf	tablat,w,c
  1160  00125E  5829               	subwfb	printf@val+1,w,c
  1161  001260  0009               	tblrd		*+
  1162  001262  50F5               	movf	tablat,w,c
  1163  001264  582A               	subwfb	printf@val+2,w,c
  1164  001266  0009               	tblrd		*+
  1165  001268  50F5               	movf	tablat,w,c
  1166  00126A  582B               	subwfb	printf@val+3,w,c
  1167  00126C  A0D8               	btfss	status,0,c
  1168  00126E  D028               	goto	l260
  1169                           
  1170                           ;doprnt.c: 1307: break;
  1171  001270  2A2F               	incf	printf@c,f,c
  1172  001272  D7E4               	goto	l1565
  1173  001274                     
  1174                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1175  001274  0E01               	movlw	1
  1176  001276  6E2F               	movwf	printf@c,c
  1177  001278                     l1579:
  1178  001278  0E08               	movlw	8
  1179  00127A  182F               	xorwf	printf@c,w,c
  1180  00127C  B4D8               	btfsc	status,2,c
  1181  00127E  D020               	goto	l260
  1182                           
  1183                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1184  001280  502F               	movf	printf@c,w,c
  1185  001282  0D04               	mullw	4
  1186  001284  0E29               	movlw	low _hexpowers
  1187  001286  24F3               	addwf	prodl,w,c
  1188  001288  6EF6               	movwf	tblptrl,c
  1189  00128A  0E10               	movlw	high _hexpowers
  1190  00128C  20F4               	addwfc	prodh,w,c
  1191  00128E  6EF7               	movwf	tblptrh,c
  1192  001290                     	if	0	;There are less than 3 active tblptr bytes
  1193  001290                     	endif
  1194  001290  0009               	tblrd		*+
  1195  001292  50F5               	movf	tablat,w,c
  1196  001294  5C28               	subwf	printf@val,w,c
  1197  001296  0009               	tblrd		*+
  1198  001298  50F5               	movf	tablat,w,c
  1199  00129A  5829               	subwfb	printf@val+1,w,c
  1200  00129C  0009               	tblrd		*+
  1201  00129E  50F5               	movf	tablat,w,c
  1202  0012A0  582A               	subwfb	printf@val+2,w,c
  1203  0012A2  0009               	tblrd		*+
  1204  0012A4  50F5               	movf	tablat,w,c
  1205  0012A6  582B               	subwfb	printf@val+3,w,c
  1206  0012A8  A0D8               	btfss	status,0,c
  1207  0012AA  D00A               	goto	l260
  1208                           
  1209                           ;doprnt.c: 1318: break;
  1210  0012AC  2A2F               	incf	printf@c,f,c
  1211  0012AE  D7E4               	goto	l1579
  1212  0012B0                     l255:
  1213  0012B0  502E               	movf	printf@flag,w,c
  1214  0012B2  0B80               	andlw	128
  1215                           
  1216                           ; Switch size 1, requested type "space"
  1217                           ; Number of cases is 2, Range of values is 0 to 128
  1218                           ; switch strategies available:
  1219                           ; Name         Instructions Cycles
  1220                           ; simple_byte            7     4 (average)
  1221                           ;	Chosen strategy is simple_byte
  1222  0012B4  0A00               	xorlw	0	; case 0
  1223  0012B6  B4D8               	btfsc	status,2,c
  1224  0012B8  D7BF               	goto	l256
  1225  0012BA  0A80               	xorlw	128	; case 128
  1226  0012BC  B4D8               	btfsc	status,2,c
  1227  0012BE  D7DA               	goto	l261
  1228  0012C0                     l260:
  1229                           
  1230                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1231  0012C0  502C               	movf	printf@width,w,c
  1232  0012C2  102D               	iorwf	printf@width+1,w,c
  1233  0012C4  B4D8               	btfsc	status,2,c
  1234  0012C6  D009               	goto	l265
  1235  0012C8  C02E  F01F         	movff	printf@flag,??_printf
  1236  0012CC  0E03               	movlw	3
  1237  0012CE  161F               	andwf	??_printf,f,c
  1238  0012D0  B4D8               	btfsc	status,2,c
  1239  0012D2  D003               	goto	l265
  1240                           
  1241                           ;doprnt.c: 1346: width--;
  1242  0012D4  062C               	decf	printf@width,f,c
  1243  0012D6  A0D8               	btfss	status,0,c
  1244  0012D8  062D               	decf	printf@width+1,f,c
  1245  0012DA                     l265:
  1246                           
  1247                           ;doprnt.c: 1381: if(width > c)
  1248  0012DA  0E80               	movlw	128
  1249  0012DC  BE2F               	btfsc	printf@c,7,c
  1250  0012DE  0E7F               	movlw	127
  1251  0012E0  6E1F               	movwf	??_printf& (0+255),c
  1252  0012E2  502C               	movf	printf@width,w,c
  1253  0012E4  5C2F               	subwf	printf@c,w,c
  1254  0012E6  502D               	movf	printf@width+1,w,c
  1255  0012E8  0A80               	xorlw	128
  1256  0012EA  581F               	subwfb	??_printf& (0+255),w,c
  1257  0012EC  B0D8               	btfsc	status,0,c
  1258  0012EE  D007               	goto	l266
  1259                           
  1260                           ;doprnt.c: 1382: width -= c;
  1261  0012F0  502F               	movf	printf@c,w,c
  1262  0012F2  5E2C               	subwf	printf@width,f,c
  1263  0012F4  0E00               	movlw	0
  1264  0012F6  BE2F               	btfsc	printf@c,7,c
  1265  0012F8  0EFF               	movlw	255
  1266  0012FA  5A2D               	subwfb	printf@width+1,f,c
  1267  0012FC  D004               	goto	l267
  1268  0012FE                     l266:
  1269                           
  1270                           ;doprnt.c: 1383: else
  1271                           ;doprnt.c: 1384: width = 0;
  1272  0012FE  0E00               	movlw	0
  1273  001300  6E2D               	movwf	printf@width+1,c
  1274  001302  0E00               	movlw	0
  1275  001304  6E2C               	movwf	printf@width,c
  1276  001306                     l267:
  1277                           
  1278                           ;doprnt.c: 1387: if(flag & 0x04) {
  1279  001306  A42E               	btfss	printf@flag,2,c
  1280  001308  D014               	goto	l268
  1281                           
  1282                           ;doprnt.c: 1392: if(flag & 0x03)
  1283  00130A  C02E  F01F         	movff	printf@flag,??_printf
  1284  00130E  0E03               	movlw	3
  1285  001310  161F               	andwf	??_printf,f,c
  1286  001312  B4D8               	btfsc	status,2,c
  1287  001314  D003               	goto	l269
  1288                           
  1289                           ;doprnt.c: 1393: (putch('-') );
  1290  001316  0E2D               	movlw	45
  1291  001318  EC05  F00D         	call	_putch
  1292  00131C                     l269:
  1293                           
  1294                           ;doprnt.c: 1415: if(width)
  1295  00131C  502C               	movf	printf@width,w,c
  1296  00131E  102D               	iorwf	printf@width+1,w,c
  1297  001320  B4D8               	btfsc	status,2,c
  1298  001322  D01E               	goto	l277
  1299                           
  1300                           ;doprnt.c: 1417: (putch('0') );
  1301                           
  1302                           ;doprnt.c: 1416: do
  1303  001324  0E30               	movlw	48
  1304  001326  EC05  F00D         	call	_putch
  1305                           
  1306                           ;doprnt.c: 1418: while(--width);
  1307  00132A  062C               	decf	printf@width,f,c
  1308  00132C  A0D8               	btfss	status,0,c
  1309  00132E  062D               	decf	printf@width+1,f,c
  1310  001330  D7F5               	goto	l269
  1311  001332                     l268:
  1312                           
  1313                           ;doprnt.c: 1422: {
  1314                           ;doprnt.c: 1424: if(width
  1315                           ;doprnt.c: 1428: )
  1316  001332  502C               	movf	printf@width,w,c
  1317  001334  102D               	iorwf	printf@width+1,w,c
  1318  001336  B4D8               	btfsc	status,2,c
  1319  001338  D00A               	goto	u900
  1320  00133A                     u890:
  1321                           
  1322                           ;doprnt.c: 1430: (putch(' ') );
  1323                           
  1324                           ;doprnt.c: 1429: do
  1325  00133A  0E20               	movlw	32
  1326  00133C  EC05  F00D         	call	_putch
  1327                           
  1328                           ;doprnt.c: 1431: while(--width);
  1329  001340  062C               	decf	printf@width,f,c
  1330  001342  A0D8               	btfss	status,0,c
  1331  001344  062D               	decf	printf@width+1,f,c
  1332  001346  502C               	movf	printf@width,w,c
  1333  001348  102D               	iorwf	printf@width+1,w,c
  1334  00134A  A4D8               	btfss	status,2,c
  1335  00134C  D7F6               	goto	u890
  1336  00134E                     u900:
  1337                           
  1338                           ;doprnt.c: 1438: if(flag & 0x03)
  1339  00134E  C02E  F01F         	movff	printf@flag,??_printf
  1340  001352  0E03               	movlw	3
  1341  001354  161F               	andwf	??_printf,f,c
  1342  001356  B4D8               	btfsc	status,2,c
  1343  001358  D003               	goto	l277
  1344                           
  1345                           ;doprnt.c: 1439: (putch('-') );
  1346  00135A  0E2D               	movlw	45
  1347  00135C  EC05  F00D         	call	_putch
  1348  001360                     l277:
  1349                           
  1350                           ;doprnt.c: 1469: }
  1351                           ;doprnt.c: 1472: prec = c;
  1352  001360  502F               	movf	printf@c,w,c
  1353  001362  6E24               	movwf	printf@prec,c
  1354  001364  6A25               	clrf	printf@prec+1,c
  1355  001366  BE24               	btfsc	printf@prec,7,c
  1356  001368  0625               	decf	printf@prec+1,f,c
  1357                           
  1358                           ;doprnt.c: 1474: while(prec--) {
  1359  00136A  D07C               	goto	l278
  1360  00136C                     
  1361                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1362  00136C  C024  F01F         	movff	printf@prec,??_printf
  1363  001370  C025  F020         	movff	printf@prec+1,??_printf+1
  1364  001374  90D8               	bcf	status,0,c
  1365  001376  361F               	rlcf	??_printf,f,c
  1366  001378  3620               	rlcf	??_printf+1,f,c
  1367  00137A  90D8               	bcf	status,0,c
  1368  00137C  361F               	rlcf	??_printf,f,c
  1369  00137E  3620               	rlcf	??_printf+1,f,c
  1370  001380  0E01               	movlw	low _dpowers
  1371  001382  241F               	addwf	??_printf,w,c
  1372  001384  6EF6               	movwf	tblptrl,c
  1373  001386  0E10               	movlw	high _dpowers
  1374  001388  2020               	addwfc	??_printf+1,w,c
  1375  00138A  6EF7               	movwf	tblptrh,c
  1376  00138C                     	if	0	;There are less than 3 active tblptr bytes
  1377  00138C                     	endif
  1378  00138C  0009               	tblrd		*+
  1379  00138E  CFF5 F005          	movff	tablat,___lldiv@divisor
  1380  001392  0009               	tblrd		*+
  1381  001394  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1382  001398  0009               	tblrd		*+
  1383  00139A  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1384  00139E  000A               	tblrd		*-
  1385  0013A0  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1386  0013A4  C028  F001         	movff	printf@val,___lldiv@dividend
  1387  0013A8  C029  F002         	movff	printf@val+1,___lldiv@dividend+1
  1388  0013AC  C02A  F003         	movff	printf@val+2,___lldiv@dividend+2
  1389  0013B0  C02B  F004         	movff	printf@val+3,___lldiv@dividend+3
  1390  0013B4  EC5A  F00B         	call	___lldiv	;wreg free
  1391  0013B8  C001  F00E         	movff	?___lldiv,___llmod@dividend
  1392  0013BC  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  1393  0013C0  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  1394  0013C4  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  1395  0013C8  0E0A               	movlw	10
  1396  0013CA  6E12               	movwf	___llmod@divisor,c
  1397  0013CC  0E00               	movlw	0
  1398  0013CE  6E13               	movwf	___llmod@divisor+1,c
  1399  0013D0  0E00               	movlw	0
  1400  0013D2  6E14               	movwf	___llmod@divisor+2,c
  1401  0013D4  0E00               	movlw	0
  1402  0013D6  6E15               	movwf	___llmod@divisor+3,c
  1403  0013D8  ECDA  F00B         	call	___llmod	;wreg free
  1404  0013DC  500E               	movf	?___llmod,w,c
  1405  0013DE  0F30               	addlw	48
  1406  0013E0  6E2F               	movwf	printf@c,c
  1407                           
  1408                           ;doprnt.c: 1491: break;
  1409  0013E2  D03D               	goto	l282
  1410  0013E4                     
  1411                           ;doprnt.c: 1499: {
  1412                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1413  0013E4  C028  F001         	movff	printf@val,___lldiv@dividend
  1414  0013E8  C029  F002         	movff	printf@val+1,___lldiv@dividend+1
  1415  0013EC  C02A  F003         	movff	printf@val+2,___lldiv@dividend+2
  1416  0013F0  C02B  F004         	movff	printf@val+3,___lldiv@dividend+3
  1417  0013F4  C024  F01F         	movff	printf@prec,??_printf
  1418  0013F8  C025  F020         	movff	printf@prec+1,??_printf+1
  1419  0013FC  90D8               	bcf	status,0,c
  1420  0013FE  361F               	rlcf	??_printf,f,c
  1421  001400  3620               	rlcf	??_printf+1,f,c
  1422  001402  90D8               	bcf	status,0,c
  1423  001404  361F               	rlcf	??_printf,f,c
  1424  001406  3620               	rlcf	??_printf+1,f,c
  1425  001408  0E29               	movlw	low _hexpowers
  1426  00140A  241F               	addwf	??_printf,w,c
  1427  00140C  6EF6               	movwf	tblptrl,c
  1428  00140E  0E10               	movlw	high _hexpowers
  1429  001410  2020               	addwfc	??_printf+1,w,c
  1430  001412  6EF7               	movwf	tblptrh,c
  1431  001414                     	if	0	;There are less than 3 active tblptr bytes
  1432  001414                     	endif
  1433  001414  0009               	tblrd		*+
  1434  001416  CFF5 F005          	movff	tablat,___lldiv@divisor
  1435  00141A  0009               	tblrd		*+
  1436  00141C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1437  001420  0009               	tblrd		*+
  1438  001422  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1439  001426  000A               	tblrd		*-
  1440  001428  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1441  00142C  EC5A  F00B         	call	___lldiv	;wreg free
  1442  001430  5001               	movf	?___lldiv,w,c
  1443  001432  0B0F               	andlw	15
  1444  001434  6E23               	movwf	printf@idx,c
  1445                           
  1446                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1447  001436  5023               	movf	printf@idx,w,c
  1448  001438  0D01               	mullw	1
  1449  00143A  0E67               	movlw	low STR_5
  1450  00143C  24F3               	addwf	prodl,w,c
  1451  00143E  6EF6               	movwf	tblptrl,c
  1452  001440  0E10               	movlw	high STR_5
  1453  001442  20F4               	addwfc	prodh,w,c
  1454  001444  6EF7               	movwf	tblptrh,c
  1455  001446                     	if	0	;There are less than 3 active tblptr bytes
  1456  001446                     	endif
  1457  001446  0008               	tblrd		*
  1458  001448  CFF5 F02F          	movff	tablat,printf@c
  1459                           
  1460                           ;doprnt.c: 1523: }
  1461                           
  1462                           ;doprnt.c: 1508: }
  1463                           ;doprnt.c: 1510: break;
  1464  00144C  D008               	goto	l282
  1465  00144E                     l1639:
  1466  00144E  502E               	movf	printf@flag,w,c
  1467  001450  0B80               	andlw	128
  1468                           
  1469                           ; Switch size 1, requested type "space"
  1470                           ; Number of cases is 2, Range of values is 0 to 128
  1471                           ; switch strategies available:
  1472                           ; Name         Instructions Cycles
  1473                           ; simple_byte            7     4 (average)
  1474                           ;	Chosen strategy is simple_byte
  1475  001452  0A00               	xorlw	0	; case 0
  1476  001454  B4D8               	btfsc	status,2,c
  1477  001456  D78A               	goto	l281
  1478  001458  0A80               	xorlw	128	; case 128
  1479  00145A  B4D8               	btfsc	status,2,c
  1480  00145C  D7C3               	goto	l283
  1481  00145E                     l282:
  1482                           
  1483                           ;doprnt.c: 1524: (putch(c) );
  1484  00145E  502F               	movf	printf@c,w,c
  1485  001460  EC05  F00D         	call	_putch
  1486  001464                     l278:
  1487  001464  0624               	decf	printf@prec,f,c
  1488  001466  A0D8               	btfss	status,0,c
  1489  001468  0625               	decf	printf@prec+1,f,c
  1490  00146A  2824               	incf	printf@prec,w,c
  1491  00146C  E1F0               	bnz	l1639
  1492  00146E  2825               	incf	printf@prec+1,w,c
  1493  001470  A4D8               	btfss	status,2,c
  1494  001472  D7ED               	goto	l280
  1495  001474                     u920:
  1496  001474  C017  FFF6         	movff	printf@f,tblptrl
  1497  001478  C018  FFF7         	movff	printf@f+1,tblptrh
  1498  00147C  4A17               	infsnz	printf@f,f,c
  1499  00147E  2A18               	incf	printf@f+1,f,c
  1500  001480                     	if	0	;tblptru may be non-zero
  1501  001480                     	endif
  1502  001480                     	if	0	;tblptru may be non-zero
  1503  001480                     	endif
  1504  001480  0008               	tblrd		*
  1505  001482  CFF5 F02F          	movff	tablat,printf@c
  1506  001486  502F               	movf	printf@c,w,c
  1507  001488  B4D8               	btfsc	status,2,c
  1508  00148A  0012               	return	
  1509  00148C  D60C               	goto	l227
  1510  00148E                     __end_of_printf:
  1511                           	opt stack 0
  1512                           tblptru	equ	0xFF8
  1513                           tblptrh	equ	0xFF7
  1514                           tblptrl	equ	0xFF6
  1515                           tablat	equ	0xFF5
  1516                           prodh	equ	0xFF4
  1517                           prodl	equ	0xFF3
  1518                           wreg	equ	0xFE8
  1519                           indf2	equ	0xFDF
  1520                           postinc2	equ	0xFDE
  1521                           postdec2	equ	0xFDD
  1522                           fsr2h	equ	0xFDA
  1523                           fsr2l	equ	0xFD9
  1524                           status	equ	0xFD8
  1525                           
  1526 ;; *************** function _putch *****************
  1527 ;; Defined at:
  1528 ;;		line 24 in file "lcd.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  data            1    wreg     unsigned char 
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;  data            1    2[COMRAM] unsigned char 
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  1    wreg      void 
  1535 ;; Registers used:
  1536 ;;		wreg, status,2, status,0, cstack
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1546 ;;Total ram usage:        1 bytes
  1547 ;; Hardware stack levels used:    1
  1548 ;; Hardware stack levels required when called:    1
  1549 ;; This function calls:
  1550 ;;		_lcdNibble
  1551 ;; This function is called by:
  1552 ;;		_printf
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           	psect	text2
  1557  001A0A                     __ptext2:
  1558                           	opt stack 0
  1559  001A0A                     _putch:
  1560                           	opt stack 28
  1561                           
  1562                           ;incstack = 0
  1563                           ;putch@data stored from wreg
  1564  001A0A  6E03               	movwf	putch@data,c
  1565                           
  1566                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1567  001A0C  848C               	bsf	3980,2,c	;volatile
  1568                           
  1569                           ;lcd.c: 33: lcdNibble(data);
  1570  001A0E  5003               	movf	putch@data,w,c
  1571  001A10  EC9B  F00B         	call	_lcdNibble
  1572                           
  1573                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1574  001A14  0EC8               	movlw	200
  1575  001A16                     u1017:
  1576  001A16  D000               	nop2	
  1577  001A18  2EE8               	decfsz	wreg,f,c
  1578  001A1A  D7FD               	bra	u1017
  1579  001A1C  0012               	return		;funcret
  1580  001A1E                     __end_of_putch:
  1581                           	opt stack 0
  1582                           tblptru	equ	0xFF8
  1583                           tblptrh	equ	0xFF7
  1584                           tblptrl	equ	0xFF6
  1585                           tablat	equ	0xFF5
  1586                           prodh	equ	0xFF4
  1587                           prodl	equ	0xFF3
  1588                           wreg	equ	0xFE8
  1589                           indf2	equ	0xFDF
  1590                           postinc2	equ	0xFDE
  1591                           postdec2	equ	0xFDD
  1592                           fsr2h	equ	0xFDA
  1593                           fsr2l	equ	0xFD9
  1594                           status	equ	0xFD8
  1595                           
  1596 ;; *************** function _isdigit *****************
  1597 ;; Defined at:
  1598 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  c               1    wreg     unsigned char 
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  c               1    2[COMRAM] unsigned char 
  1603 ;; Return value:  Size  Location     Type
  1604 ;;		None               void
  1605 ;; Registers used:
  1606 ;;		wreg, status,2, status,0
  1607 ;; Tracked objects:
  1608 ;;		On entry : 0/0
  1609 ;;		On exit  : 0/0
  1610 ;;		Unchanged: 0/0
  1611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1614 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1615 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1616 ;;Total ram usage:        3 bytes
  1617 ;; Hardware stack levels used:    1
  1618 ;; This function calls:
  1619 ;;		Nothing
  1620 ;; This function is called by:
  1621 ;;		_printf
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text3
  1626  0019EC                     __ptext3:
  1627                           	opt stack 0
  1628  0019EC                     _isdigit:
  1629                           	opt stack 29
  1630                           
  1631                           ;incstack = 0
  1632                           ;isdigit@c stored from wreg
  1633  0019EC  6E03               	movwf	isdigit@c,c
  1634  0019EE  0E00               	movlw	0
  1635  0019F0  6E02               	movwf	_isdigit$712,c
  1636  0019F2  0E3A               	movlw	58
  1637  0019F4  6003               	cpfslt	isdigit@c,c
  1638  0019F6  D005               	goto	l616
  1639  0019F8  0E2F               	movlw	47
  1640  0019FA  6403               	cpfsgt	isdigit@c,c
  1641  0019FC  D002               	goto	l616
  1642  0019FE  0E01               	movlw	1
  1643  001A00  6E02               	movwf	_isdigit$712,c
  1644  001A02                     l616:
  1645  001A02  C002  F001         	movff	_isdigit$712,??_isdigit
  1646  001A06  3001               	rrcf	??_isdigit,w,c
  1647  001A08  0012               	return	
  1648  001A0A                     __end_of_isdigit:
  1649                           	opt stack 0
  1650                           tblptru	equ	0xFF8
  1651                           tblptrh	equ	0xFF7
  1652                           tblptrl	equ	0xFF6
  1653                           tablat	equ	0xFF5
  1654                           prodh	equ	0xFF4
  1655                           prodl	equ	0xFF3
  1656                           wreg	equ	0xFE8
  1657                           indf2	equ	0xFDF
  1658                           postinc2	equ	0xFDE
  1659                           postdec2	equ	0xFDD
  1660                           fsr2h	equ	0xFDA
  1661                           fsr2l	equ	0xFD9
  1662                           status	equ	0xFD8
  1663                           
  1664 ;; *************** function ___wmul *****************
  1665 ;; Defined at:
  1666 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  multiplier      2    0[COMRAM] unsigned int 
  1669 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  product         2    4[COMRAM] unsigned int 
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  2    0[COMRAM] unsigned int 
  1674 ;; Registers used:
  1675 ;;		wreg, status,2, status,0, prodl, prodh
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1681 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;Total ram usage:        6 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_printf
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           	psect	text4
  1695  001980                     __ptext4:
  1696                           	opt stack 0
  1697  001980                     ___wmul:
  1698                           	opt stack 29
  1699                           
  1700                           ;incstack = 0
  1701  001980  5001               	movf	___wmul@multiplier,w,c
  1702  001982  0203               	mulwf	___wmul@multiplicand,c
  1703  001984  CFF3 F005          	movff	prodl,___wmul@product
  1704  001988  CFF4 F006          	movff	prodh,___wmul@product+1
  1705  00198C  5001               	movf	___wmul@multiplier,w,c
  1706  00198E  0204               	mulwf	___wmul@multiplicand+1,c
  1707  001990  50F3               	movf	prodl,w,c
  1708  001992  2606               	addwf	___wmul@product+1,f,c
  1709  001994  5002               	movf	___wmul@multiplier+1,w,c
  1710  001996  0203               	mulwf	___wmul@multiplicand,c
  1711  001998  50F3               	movf	prodl,w,c
  1712  00199A  2606               	addwf	___wmul@product+1,f,c
  1713  00199C  C005  F001         	movff	___wmul@product,?___wmul
  1714  0019A0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1715  0019A4  0012               	return	
  1716  0019A6                     __end_of___wmul:
  1717                           	opt stack 0
  1718                           tblptru	equ	0xFF8
  1719                           tblptrh	equ	0xFF7
  1720                           tblptrl	equ	0xFF6
  1721                           tablat	equ	0xFF5
  1722                           prodh	equ	0xFF4
  1723                           prodl	equ	0xFF3
  1724                           wreg	equ	0xFE8
  1725                           indf2	equ	0xFDF
  1726                           postinc2	equ	0xFDE
  1727                           postdec2	equ	0xFDD
  1728                           fsr2h	equ	0xFDA
  1729                           fsr2l	equ	0xFD9
  1730                           status	equ	0xFD8
  1731                           
  1732 ;; *************** function ___llmod *****************
  1733 ;; Defined at:
  1734 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/llmod.c"
  1735 ;; Parameters:    Size  Location     Type
  1736 ;;  dividend        4   13[COMRAM] unsigned long 
  1737 ;;  divisor         4   17[COMRAM] unsigned long 
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;  counter         1   21[COMRAM] unsigned char 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  4   13[COMRAM] unsigned long 
  1742 ;; Registers used:
  1743 ;;		wreg, status,2, status,0
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1749 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1750 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1752 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1753 ;;Total ram usage:        9 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; This function calls:
  1756 ;;		Nothing
  1757 ;; This function is called by:
  1758 ;;		_printf
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text5
  1763  0017B4                     __ptext5:
  1764                           	opt stack 0
  1765  0017B4                     ___llmod:
  1766                           	opt stack 29
  1767                           
  1768                           ;incstack = 0
  1769  0017B4  5012               	movf	___llmod@divisor,w,c
  1770  0017B6  1013               	iorwf	___llmod@divisor+1,w,c
  1771  0017B8  1014               	iorwf	___llmod@divisor+2,w,c
  1772  0017BA  1015               	iorwf	___llmod@divisor+3,w,c
  1773  0017BC  B4D8               	btfsc	status,2,c
  1774  0017BE  D024               	goto	l657
  1775  0017C0  0E01               	movlw	1
  1776  0017C2  6E16               	movwf	___llmod@counter,c
  1777  0017C4  D006               	goto	l652
  1778  0017C6  90D8               	bcf	status,0,c
  1779  0017C8  3612               	rlcf	___llmod@divisor,f,c
  1780  0017CA  3613               	rlcf	___llmod@divisor+1,f,c
  1781  0017CC  3614               	rlcf	___llmod@divisor+2,f,c
  1782  0017CE  3615               	rlcf	___llmod@divisor+3,f,c
  1783  0017D0  2A16               	incf	___llmod@counter,f,c
  1784  0017D2                     l652:
  1785  0017D2  AE15               	btfss	___llmod@divisor+3,7,c
  1786  0017D4  D7F8               	goto	l653
  1787  0017D6                     u670:
  1788  0017D6  5012               	movf	___llmod@divisor,w,c
  1789  0017D8  5C0E               	subwf	___llmod@dividend,w,c
  1790  0017DA  5013               	movf	___llmod@divisor+1,w,c
  1791  0017DC  580F               	subwfb	___llmod@dividend+1,w,c
  1792  0017DE  5014               	movf	___llmod@divisor+2,w,c
  1793  0017E0  5810               	subwfb	___llmod@dividend+2,w,c
  1794  0017E2  5015               	movf	___llmod@divisor+3,w,c
  1795  0017E4  5811               	subwfb	___llmod@dividend+3,w,c
  1796  0017E6  A0D8               	btfss	status,0,c
  1797  0017E8  D008               	goto	l656
  1798  0017EA  5012               	movf	___llmod@divisor,w,c
  1799  0017EC  5E0E               	subwf	___llmod@dividend,f,c
  1800  0017EE  5013               	movf	___llmod@divisor+1,w,c
  1801  0017F0  5A0F               	subwfb	___llmod@dividend+1,f,c
  1802  0017F2  5014               	movf	___llmod@divisor+2,w,c
  1803  0017F4  5A10               	subwfb	___llmod@dividend+2,f,c
  1804  0017F6  5015               	movf	___llmod@divisor+3,w,c
  1805  0017F8  5A11               	subwfb	___llmod@dividend+3,f,c
  1806  0017FA                     l656:
  1807  0017FA  90D8               	bcf	status,0,c
  1808  0017FC  3215               	rrcf	___llmod@divisor+3,f,c
  1809  0017FE  3214               	rrcf	___llmod@divisor+2,f,c
  1810  001800  3213               	rrcf	___llmod@divisor+1,f,c
  1811  001802  3212               	rrcf	___llmod@divisor,f,c
  1812  001804  2E16               	decfsz	___llmod@counter,f,c
  1813  001806  D7E7               	goto	u670
  1814  001808                     l657:
  1815  001808  C00E  F00E         	movff	___llmod@dividend,?___llmod
  1816  00180C  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  1817  001810  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  1818  001814  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  1819  001818  0012               	return		;funcret
  1820  00181A                     __end_of___llmod:
  1821                           	opt stack 0
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           prodh	equ	0xFF4
  1827                           prodl	equ	0xFF3
  1828                           wreg	equ	0xFE8
  1829                           indf2	equ	0xFDF
  1830                           postinc2	equ	0xFDE
  1831                           postdec2	equ	0xFDD
  1832                           fsr2h	equ	0xFDA
  1833                           fsr2l	equ	0xFD9
  1834                           status	equ	0xFD8
  1835                           
  1836 ;; *************** function _initLCD *****************
  1837 ;; Defined at:
  1838 ;;		line 60 in file "lcd.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;		None
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;		None
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  1    wreg      void 
  1845 ;; Registers used:
  1846 ;;		wreg, status,2, status,0, cstack
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1854 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;Total ram usage:        1 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; Hardware stack levels required when called:    2
  1859 ;; This function calls:
  1860 ;;		_lcdInst
  1861 ;; This function is called by:
  1862 ;;		_main
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866                           	psect	text6
  1867  001876                     __ptext6:
  1868                           	opt stack 0
  1869  001876                     _initLCD:
  1870                           	opt stack 28
  1871                           
  1872                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  1873                           
  1874                           ;incstack = 0
  1875  001876  0EC3               	movlw	195
  1876  001878  6E04               	movwf	??_initLCD& (0+255),c
  1877  00187A  0ECD               	movlw	205
  1878  00187C                     u1027:
  1879  00187C  2EE8               	decfsz	wreg,f,c
  1880  00187E  D7FE               	bra	u1027
  1881  001880  2E04               	decfsz	??_initLCD& (0+255),f,c
  1882  001882  D7FC               	bra	u1027
  1883  001884  F000               	nop	
  1884                           
  1885                           ;lcd.c: 69: lcdInst(0b00110011);
  1886  001886  0E33               	movlw	51
  1887  001888  EC0F  F00D         	call	_lcdInst
  1888                           
  1889                           ;lcd.c: 70: lcdInst(0b00110010);
  1890  00188C  0E32               	movlw	50
  1891  00188E  EC0F  F00D         	call	_lcdInst
  1892                           
  1893                           ;lcd.c: 71: lcdInst(0b00101000);
  1894  001892  0E28               	movlw	40
  1895  001894  EC0F  F00D         	call	_lcdInst
  1896                           
  1897                           ;lcd.c: 72: lcdInst(0b00001111);
  1898  001898  0E0F               	movlw	15
  1899  00189A  EC0F  F00D         	call	_lcdInst
  1900                           
  1901                           ;lcd.c: 73: lcdInst(0b00000110);
  1902  00189E  0E06               	movlw	6
  1903  0018A0  EC0F  F00D         	call	_lcdInst
  1904                           
  1905                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1906  0018A4  0E01               	movlw	1
  1907  0018A6  EC0F  F00D         	call	_lcdInst
  1908  0018AA  0EC3               	movlw	195
  1909  0018AC  6E04               	movwf	??_initLCD& (0+255),c
  1910  0018AE  0ECD               	movlw	205
  1911  0018B0                     u1037:
  1912  0018B0  2EE8               	decfsz	wreg,f,c
  1913  0018B2  D7FE               	bra	u1037
  1914  0018B4  2E04               	decfsz	??_initLCD& (0+255),f,c
  1915  0018B6  D7FC               	bra	u1037
  1916  0018B8  F000               	nop	
  1917                           
  1918                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1919  0018BA  0E0F               	movlw	15
  1920  0018BC  EC0F  F00D         	call	_lcdInst
  1921  0018C0  0012               	return		;funcret
  1922  0018C2                     __end_of_initLCD:
  1923                           	opt stack 0
  1924                           tblptru	equ	0xFF8
  1925                           tblptrh	equ	0xFF7
  1926                           tblptrl	equ	0xFF6
  1927                           tablat	equ	0xFF5
  1928                           prodh	equ	0xFF4
  1929                           prodl	equ	0xFF3
  1930                           wreg	equ	0xFE8
  1931                           indf2	equ	0xFDF
  1932                           postinc2	equ	0xFDE
  1933                           postdec2	equ	0xFDD
  1934                           fsr2h	equ	0xFDA
  1935                           fsr2l	equ	0xFD9
  1936                           status	equ	0xFD8
  1937                           
  1938 ;; *************** function _lcdInst *****************
  1939 ;; Defined at:
  1940 ;;		line 11 in file "lcd.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;  data            1    wreg     unsigned char 
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;  data            1    2[COMRAM] unsigned char 
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      void 
  1947 ;; Registers used:
  1948 ;;		wreg, status,2, status,0, cstack
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1958 ;;Total ram usage:        1 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    1
  1961 ;; This function calls:
  1962 ;;		_lcdNibble
  1963 ;; This function is called by:
  1964 ;;		_main
  1965 ;;		_initLCD
  1966 ;;		_lcd_set_cursor
  1967 ;;		_lcd_shift_cursor
  1968 ;;		_lcd_shift_display
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text7
  1973  001A1E                     __ptext7:
  1974                           	opt stack 0
  1975  001A1E                     _lcdInst:
  1976                           	opt stack 29
  1977                           
  1978                           ;incstack = 0
  1979                           ;lcdInst@data stored from wreg
  1980  001A1E  6E03               	movwf	lcdInst@data,c
  1981                           
  1982                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  1983  001A20  948C               	bcf	3980,2,c	;volatile
  1984                           
  1985                           ;lcd.c: 20: lcdNibble(data);
  1986  001A22  5003               	movf	lcdInst@data,w,c
  1987  001A24  EC9B  F00B         	call	_lcdNibble
  1988                           
  1989                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1990  001A28  0EC8               	movlw	200
  1991  001A2A                     u1047:
  1992  001A2A  D000               	nop2	
  1993  001A2C  2EE8               	decfsz	wreg,f,c
  1994  001A2E  D7FD               	bra	u1047
  1995  001A30  0012               	return		;funcret
  1996  001A32                     __end_of_lcdInst:
  1997                           	opt stack 0
  1998                           tblptru	equ	0xFF8
  1999                           tblptrh	equ	0xFF7
  2000                           tblptrl	equ	0xFF6
  2001                           tablat	equ	0xFF5
  2002                           prodh	equ	0xFF4
  2003                           prodl	equ	0xFF3
  2004                           wreg	equ	0xFE8
  2005                           indf2	equ	0xFDF
  2006                           postinc2	equ	0xFDE
  2007                           postdec2	equ	0xFDD
  2008                           fsr2h	equ	0xFDA
  2009                           fsr2l	equ	0xFD9
  2010                           status	equ	0xFD8
  2011                           
  2012 ;; *************** function _lcdNibble *****************
  2013 ;; Defined at:
  2014 ;;		line 37 in file "lcd.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;  data            1    wreg     unsigned char 
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;  data            1    1[COMRAM] unsigned char 
  2019 ;;  temp            1    0[COMRAM] unsigned char 
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  1    wreg      void 
  2022 ;; Registers used:
  2023 ;;		wreg, status,2, status,0
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;Total ram usage:        2 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; This function calls:
  2036 ;;		Nothing
  2037 ;; This function is called by:
  2038 ;;		_lcdInst
  2039 ;;		_putch
  2040 ;; This function uses a non-reentrant model
  2041 ;;
  2042                           
  2043                           	psect	text8
  2044  001736                     __ptext8:
  2045                           	opt stack 0
  2046  001736                     _lcdNibble:
  2047                           	opt stack 28
  2048                           
  2049                           ;incstack = 0
  2050                           ;lcdNibble@data stored from wreg
  2051  001736  6E02               	movwf	lcdNibble@data,c
  2052                           
  2053                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  2054  001738  5002               	movf	lcdNibble@data,w,c
  2055  00173A  0BF0               	andlw	240
  2056  00173C  6E01               	movwf	lcdNibble@temp,c
  2057                           
  2058                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  2059  00173E  508C               	movf	3980,w,c	;volatile
  2060  001740  0B0F               	andlw	15
  2061  001742  6E8C               	movwf	3980,c	;volatile
  2062                           
  2063                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  2064  001744  5001               	movf	lcdNibble@temp,w,c
  2065  001746  108C               	iorwf	3980,w,c	;volatile
  2066  001748  6E8C               	movwf	3980,c	;volatile
  2067                           
  2068                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2069  00174A  0E00               	movlw	0
  2070  00174C  BEF2               	btfsc	intcon,7,c	;volatile
  2071  00174E  0E01               	movlw	1
  2072  001750  6E42               	movwf	lcd@LCDinterruptState,c
  2073  001752  9EF2               	bcf	intcon,7,c	;volatile
  2074  001754  868C               	bsf	3980,3,c	;volatile
  2075  001756  0E53               	movlw	83
  2076  001758                     u1057:
  2077  001758  2EE8               	decfsz	wreg,f,c
  2078  00175A  D7FE               	bra	u1057
  2079  00175C  F000               	nop	
  2080  00175E  968C               	bcf	3980,3,c	;volatile
  2081  001760  0EC8               	movlw	200
  2082  001762                     u1067:
  2083  001762  D000               	nop2	
  2084  001764  2EE8               	decfsz	wreg,f,c
  2085  001766  D7FD               	bra	u1067
  2086  001768  B042               	btfsc	lcd@LCDinterruptState,0,c
  2087  00176A  D002               	bra	u35
  2088  00176C  9EF2               	bcf	intcon,7,c	;volatile
  2089  00176E  D001               	bra	u36
  2090  001770                     u35:
  2091  001770  8EF2               	bsf	intcon,7,c	;volatile
  2092  001772                     u36:
  2093                           
  2094                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  2095  001772  3802               	swapf	lcdNibble@data,w,c
  2096  001774  0BF0               	andlw	240
  2097  001776  6E02               	movwf	lcdNibble@data,c
  2098                           
  2099                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  2100  001778  5002               	movf	lcdNibble@data,w,c
  2101  00177A  0BF0               	andlw	240
  2102  00177C  6E01               	movwf	lcdNibble@temp,c
  2103                           
  2104                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  2105  00177E  508C               	movf	3980,w,c	;volatile
  2106  001780  0B0F               	andlw	15
  2107  001782  6E8C               	movwf	3980,c	;volatile
  2108                           
  2109                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  2110  001784  5001               	movf	lcdNibble@temp,w,c
  2111  001786  108C               	iorwf	3980,w,c	;volatile
  2112  001788  6E8C               	movwf	3980,c	;volatile
  2113                           
  2114                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  2115  00178A  0E00               	movlw	0
  2116  00178C  BEF2               	btfsc	intcon,7,c	;volatile
  2117  00178E  0E01               	movlw	1
  2118  001790  6E42               	movwf	lcd@LCDinterruptState,c
  2119  001792  9EF2               	bcf	intcon,7,c	;volatile
  2120  001794  868C               	bsf	3980,3,c	;volatile
  2121  001796  0E53               	movlw	83
  2122  001798                     u1077:
  2123  001798  2EE8               	decfsz	wreg,f,c
  2124  00179A  D7FE               	bra	u1077
  2125  00179C  F000               	nop	
  2126  00179E  968C               	bcf	3980,3,c	;volatile
  2127  0017A0  0EC8               	movlw	200
  2128  0017A2                     u1087:
  2129  0017A2  D000               	nop2	
  2130  0017A4  2EE8               	decfsz	wreg,f,c
  2131  0017A6  D7FD               	bra	u1087
  2132  0017A8  B042               	btfsc	lcd@LCDinterruptState,0,c
  2133  0017AA  D002               	bra	u45
  2134  0017AC  9EF2               	bcf	intcon,7,c	;volatile
  2135  0017AE  D001               	bra	u46
  2136  0017B0                     u45:
  2137  0017B0  8EF2               	bsf	intcon,7,c	;volatile
  2138  0017B2                     u46:
  2139  0017B2  0012               	return		;funcret
  2140  0017B4                     __end_of_lcdNibble:
  2141                           	opt stack 0
  2142                           tblptru	equ	0xFF8
  2143                           tblptrh	equ	0xFF7
  2144                           tblptrl	equ	0xFF6
  2145                           tablat	equ	0xFF5
  2146                           prodh	equ	0xFF4
  2147                           prodl	equ	0xFF3
  2148                           intcon	equ	0xFF2
  2149                           wreg	equ	0xFE8
  2150                           indf2	equ	0xFDF
  2151                           postinc2	equ	0xFDE
  2152                           postdec2	equ	0xFDD
  2153                           fsr2h	equ	0xFDA
  2154                           fsr2l	equ	0xFD9
  2155                           status	equ	0xFD8
  2156                           
  2157 ;; *************** function _eep_write_long *****************
  2158 ;; Defined at:
  2159 ;;		line 82 in file "main.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  adr             1    wreg     unsigned char 
  2162 ;;  l               4    8[COMRAM] unsigned long 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;  adr             1   12[COMRAM] unsigned char 
  2165 ;;  data            4   13[COMRAM] unsigned char [4]
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2175 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2176 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2178 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;Total ram usage:        9 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    2
  2182 ;; This function calls:
  2183 ;;		_eep_write
  2184 ;; This function is called by:
  2185 ;;		_main
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           	psect	text9
  2190  0019CA                     __ptext9:
  2191                           	opt stack 0
  2192  0019CA                     _eep_write_long:
  2193                           	opt stack 28
  2194                           
  2195                           ;incstack = 0
  2196                           ;eep_write_long@adr stored from wreg
  2197  0019CA  6E0D               	movwf	eep_write_long@adr,c
  2198                           
  2199                           ;main.c: 83: unsigned char data[4];
  2200                           ;main.c: 84: data[0] = l & 0xFF;
  2201  0019CC  C009  F00E         	movff	eep_write_long@l,eep_write_long@data
  2202                           
  2203                           ;main.c: 85: data[1] = (l >> 8) & 0xFF;
  2204  0019D0  C00A  F00F         	movff	eep_write_long@l+1,eep_write_long@data+1
  2205                           
  2206                           ;main.c: 86: data[2] = (l >> 16) & 0xFF;
  2207  0019D4  C00B  F010         	movff	eep_write_long@l+2,eep_write_long@data+2
  2208                           
  2209                           ;main.c: 87: data[3] = (l >> 24) & 0xFF;
  2210  0019D8  C00C  F011         	movff	eep_write_long@l+3,eep_write_long@data+3
  2211                           
  2212                           ;main.c: 89: eep_write(adr, data);
  2213  0019DC  0E0E               	movlw	low eep_write_long@data
  2214  0019DE  6E05               	movwf	eep_write@data,c
  2215  0019E0  0E00               	movlw	high eep_write_long@data
  2216  0019E2  6E06               	movwf	eep_write@data+1,c
  2217  0019E4  500D               	movf	eep_write_long@adr,w,c
  2218  0019E6  EC7E  F00C         	call	_eep_write
  2219  0019EA  0012               	return		;funcret
  2220  0019EC                     __end_of_eep_write_long:
  2221                           	opt stack 0
  2222                           tblptru	equ	0xFF8
  2223                           tblptrh	equ	0xFF7
  2224                           tblptrl	equ	0xFF6
  2225                           tablat	equ	0xFF5
  2226                           prodh	equ	0xFF4
  2227                           prodl	equ	0xFF3
  2228                           intcon	equ	0xFF2
  2229                           wreg	equ	0xFE8
  2230                           indf2	equ	0xFDF
  2231                           postinc2	equ	0xFDE
  2232                           postdec2	equ	0xFDD
  2233                           fsr2h	equ	0xFDA
  2234                           fsr2l	equ	0xFD9
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _eep_write *****************
  2238 ;; Defined at:
  2239 ;;		line 74 in file "main.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  adr             1    wreg     unsigned char 
  2242 ;;  data            2    4[COMRAM] PTR const unsigned char 
  2243 ;;		 -> eep_write_long@data(4), 
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  adr             1    6[COMRAM] unsigned char 
  2246 ;;  i               1    7[COMRAM] unsigned char 
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  1    wreg      void 
  2249 ;; Registers used:
  2250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2256 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;Total ram usage:        4 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    1
  2263 ;; This function calls:
  2264 ;;		_eep_write_octet
  2265 ;; This function is called by:
  2266 ;;		_eep_write_long
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text10
  2271  0018FC                     __ptext10:
  2272                           	opt stack 0
  2273  0018FC                     _eep_write:
  2274                           	opt stack 28
  2275                           
  2276                           ;incstack = 0
  2277                           ;eep_write@adr stored from wreg
  2278  0018FC  6E07               	movwf	eep_write@adr,c
  2279                           
  2280                           ;main.c: 75: for(char i = 0; i < 4; i++) eep_write_octet(adr+i, data[i]);
  2281  0018FE  0E00               	movlw	0
  2282  001900  6E08               	movwf	eep_write@i,c
  2283  001902                     l1417:
  2284  001902  0E03               	movlw	3
  2285  001904  6408               	cpfsgt	eep_write@i,c
  2286  001906  D001               	goto	l85
  2287  001908  0012               	return	
  2288  00190A                     l85:
  2289  00190A  5008               	movf	eep_write@i,w,c
  2290  00190C  0D01               	mullw	1
  2291  00190E  50F3               	movf	prodl,w,c
  2292  001910  2405               	addwf	eep_write@data,w,c
  2293  001912  6ED9               	movwf	fsr2l,c
  2294  001914  50F4               	movf	prodh,w,c
  2295  001916  2006               	addwfc	eep_write@data+1,w,c
  2296  001918  6EDA               	movwf	fsr2h,c
  2297  00191A  50DF               	movf	indf2,w,c
  2298  00191C  6E01               	movwf	eep_write_octet@data,c
  2299  00191E  5007               	movf	eep_write@adr,w,c
  2300  001920  2408               	addwf	eep_write@i,w,c
  2301  001922  EC61  F00C         	call	_eep_write_octet
  2302  001926  2A08               	incf	eep_write@i,f,c
  2303  001928  D7EC               	goto	l1417
  2304  00192A                     __end_of_eep_write:
  2305                           	opt stack 0
  2306                           tblptru	equ	0xFF8
  2307                           tblptrh	equ	0xFF7
  2308                           tblptrl	equ	0xFF6
  2309                           tablat	equ	0xFF5
  2310                           prodh	equ	0xFF4
  2311                           prodl	equ	0xFF3
  2312                           intcon	equ	0xFF2
  2313                           wreg	equ	0xFE8
  2314                           indf2	equ	0xFDF
  2315                           postinc2	equ	0xFDE
  2316                           postdec2	equ	0xFDD
  2317                           fsr2h	equ	0xFDA
  2318                           fsr2l	equ	0xFD9
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function _eep_write_octet *****************
  2322 ;; Defined at:
  2323 ;;		line 44 in file "main.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;  adr             1    wreg     unsigned char 
  2326 ;;  data            1    0[COMRAM] unsigned char 
  2327 ;; Auto vars:     Size  Location     Type
  2328 ;;  adr             1    3[COMRAM] unsigned char 
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  1    wreg      void 
  2331 ;; Registers used:
  2332 ;;		wreg, status,2, cstack
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2338 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2339 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2340 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2342 ;;Total ram usage:        4 bytes
  2343 ;; Hardware stack levels used:    1
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_eep_write
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text11
  2352  0018C2                     __ptext11:
  2353                           	opt stack 0
  2354  0018C2                     _eep_write_octet:
  2355                           	opt stack 28
  2356                           
  2357                           ;incstack = 0
  2358                           ;eep_write_octet@adr stored from wreg
  2359  0018C2  6E04               	movwf	eep_write_octet@adr,c
  2360  0018C4                     
  2361                           ;main.c: 45: while(EECON1bits.WR);
  2362  0018C4  B2A6               	btfsc	4006,1,c	;volsfr
  2363  0018C6  D7FE               	goto	l1391
  2364                           
  2365                           ;main.c: 47: EEADR = adr;
  2366  0018C8  C004  FFA9         	movff	eep_write_octet@adr,4009	;volatile
  2367                           
  2368                           ;main.c: 48: EEDATA = data;
  2369  0018CC  C001  FFA8         	movff	eep_write_octet@data,4008	;volatile
  2370                           
  2371                           ;main.c: 49: EECON1bits.EEPGD = 0;
  2372  0018D0  9EA6               	bcf	4006,7,c	;volsfr
  2373                           
  2374                           ;main.c: 50: EECON1bits.CFGS = 0;
  2375  0018D2  9CA6               	bcf	4006,6,c	;volsfr
  2376                           
  2377                           ;main.c: 51: EECON1bits.WREN = 1;
  2378  0018D4  84A6               	bsf	4006,2,c	;volsfr
  2379                           
  2380                           ;main.c: 52: INTCONbits.GIE = 0;
  2381  0018D6  9EF2               	bcf	intcon,7,c	;volatile
  2382                           
  2383                           ;main.c: 54: EECON2 = 0x55;
  2384  0018D8  0E55               	movlw	85
  2385  0018DA  6EA7               	movwf	4007,c	;volsfr
  2386                           
  2387                           ;main.c: 55: EECON2 = 0xAA;
  2388  0018DC  0EAA               	movlw	170
  2389  0018DE  6EA7               	movwf	4007,c	;volsfr
  2390                           
  2391                           ;main.c: 56: EECON1bits.WR = 1;
  2392  0018E0  82A6               	bsf	4006,1,c	;volsfr
  2393                           
  2394                           ;main.c: 58: INTCONbits.GIE = 1;
  2395  0018E2  8EF2               	bsf	intcon,7,c	;volatile
  2396                           
  2397                           ;main.c: 59: _delay((unsigned long)((100)*(40000000/4000.0)));
  2398  0018E4  0E06               	movlw	6
  2399  0018E6  6E03               	movwf	(??_eep_write_octet+1)& (0+255),c
  2400  0018E8  0E13               	movlw	19
  2401  0018EA  6E02               	movwf	??_eep_write_octet& (0+255),c
  2402  0018EC  0EAE               	movlw	174
  2403  0018EE                     u1097:
  2404  0018EE  2EE8               	decfsz	wreg,f,c
  2405  0018F0  D7FE               	bra	u1097
  2406  0018F2  2E02               	decfsz	??_eep_write_octet& (0+255),f,c
  2407  0018F4  D7FC               	bra	u1097
  2408  0018F6  2E03               	decfsz	(??_eep_write_octet+1)& (0+255),f,c
  2409  0018F8  D7FA               	bra	u1097
  2410  0018FA  0012               	return		;funcret
  2411  0018FC                     __end_of_eep_write_octet:
  2412                           	opt stack 0
  2413                           tblptru	equ	0xFF8
  2414                           tblptrh	equ	0xFF7
  2415                           tblptrl	equ	0xFF6
  2416                           tablat	equ	0xFF5
  2417                           prodh	equ	0xFF4
  2418                           prodl	equ	0xFF3
  2419                           intcon	equ	0xFF2
  2420                           wreg	equ	0xFE8
  2421                           indf2	equ	0xFDF
  2422                           postinc2	equ	0xFDE
  2423                           postdec2	equ	0xFDD
  2424                           fsr2h	equ	0xFDA
  2425                           fsr2l	equ	0xFD9
  2426                           status	equ	0xFD8
  2427                           
  2428 ;; *************** function _eep_read_long *****************
  2429 ;; Defined at:
  2430 ;;		line 92 in file "main.c"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;  adr             1    wreg     unsigned char 
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;  adr             1   35[COMRAM] unsigned char 
  2435 ;;  data            4   36[COMRAM] unsigned char [4]
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  4    7[COMRAM] unsigned long 
  2438 ;; Registers used:
  2439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2445 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;      Temps:         24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;Total ram usage:       33 bytes
  2450 ;; Hardware stack levels used:    1
  2451 ;; Hardware stack levels required when called:    2
  2452 ;; This function calls:
  2453 ;;		_eep_read
  2454 ;; This function is called by:
  2455 ;;		_main
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           	psect	text12
  2460  00160E                     __ptext12:
  2461                           	opt stack 0
  2462  00160E                     _eep_read_long:
  2463                           	opt stack 28
  2464                           
  2465                           ;incstack = 0
  2466                           ;eep_read_long@adr stored from wreg
  2467  00160E  6E24               	movwf	eep_read_long@adr,c
  2468                           
  2469                           ;main.c: 93: unsigned char data[4];
  2470                           ;main.c: 94: eep_read(adr, data);
  2471  001610  0E25               	movlw	low eep_read_long@data
  2472  001612  6E04               	movwf	eep_read@data,c
  2473  001614  0E00               	movlw	high eep_read_long@data
  2474  001616  6E05               	movwf	eep_read@data+1,c
  2475  001618  5024               	movf	eep_read_long@adr,w,c
  2476  00161A  EC95  F00C         	call	_eep_read
  2477                           
  2478                           ;main.c: 96: return (unsigned long) data[0] | ((unsigned long) data[1] << 8) | ((unsigne
      +                          d long) data[2] << 16) | ((unsigned long) data[3] << 24);
  2479  00161E  C028  F00C         	movff	eep_read_long@data+3,??_eep_read_long
  2480  001622  6A0D               	clrf	(??_eep_read_long+1)& (0+255),c
  2481  001624  6A0E               	clrf	(??_eep_read_long+2)& (0+255),c
  2482  001626  6A0F               	clrf	(??_eep_read_long+3)& (0+255),c
  2483  001628  C00C  F00F         	movff	??_eep_read_long,??_eep_read_long+3
  2484  00162C  6A0E               	clrf	??_eep_read_long+2,c
  2485  00162E  6A0D               	clrf	??_eep_read_long+1,c
  2486  001630  6A0C               	clrf	??_eep_read_long,c
  2487  001632  C027  F010         	movff	eep_read_long@data+2,??_eep_read_long+4
  2488  001636  6A11               	clrf	(??_eep_read_long+5)& (0+255),c
  2489  001638  6A12               	clrf	(??_eep_read_long+6)& (0+255),c
  2490  00163A  6A13               	clrf	(??_eep_read_long+7)& (0+255),c
  2491  00163C  C011  F013         	movff	??_eep_read_long+5,??_eep_read_long+7
  2492  001640  C010  F012         	movff	??_eep_read_long+4,??_eep_read_long+6
  2493  001644  6A11               	clrf	??_eep_read_long+5,c
  2494  001646  6A10               	clrf	??_eep_read_long+4,c
  2495  001648  C026  F014         	movff	eep_read_long@data+1,??_eep_read_long+8
  2496  00164C  6A15               	clrf	(??_eep_read_long+9)& (0+255),c
  2497  00164E  6A16               	clrf	(??_eep_read_long+10)& (0+255),c
  2498  001650  6A17               	clrf	(??_eep_read_long+11)& (0+255),c
  2499  001652  C016  F017         	movff	??_eep_read_long+10,??_eep_read_long+11
  2500  001656  C015  F016         	movff	??_eep_read_long+9,??_eep_read_long+10
  2501  00165A  C014  F015         	movff	??_eep_read_long+8,??_eep_read_long+9
  2502  00165E  6A14               	clrf	??_eep_read_long+8,c
  2503  001660  C025  F018         	movff	eep_read_long@data,??_eep_read_long+12
  2504  001664  6A19               	clrf	(??_eep_read_long+13)& (0+255),c
  2505  001666  6A1A               	clrf	(??_eep_read_long+14)& (0+255),c
  2506  001668  6A1B               	clrf	(??_eep_read_long+15)& (0+255),c
  2507  00166A  5014               	movf	??_eep_read_long+8,w,c
  2508  00166C  1018               	iorwf	??_eep_read_long+12,w,c
  2509  00166E  6E1C               	movwf	(??_eep_read_long+16)& (0+255),c
  2510  001670  5015               	movf	??_eep_read_long+9,w,c
  2511  001672  1019               	iorwf	??_eep_read_long+13,w,c
  2512  001674  6E1D               	movwf	(??_eep_read_long+17)& (0+255),c
  2513  001676  5016               	movf	??_eep_read_long+10,w,c
  2514  001678  101A               	iorwf	??_eep_read_long+14,w,c
  2515  00167A  6E1E               	movwf	(??_eep_read_long+18)& (0+255),c
  2516  00167C  5017               	movf	??_eep_read_long+11,w,c
  2517  00167E  101B               	iorwf	??_eep_read_long+15,w,c
  2518  001680  6E1F               	movwf	(??_eep_read_long+19)& (0+255),c
  2519  001682  5010               	movf	??_eep_read_long+4,w,c
  2520  001684  101C               	iorwf	??_eep_read_long+16,w,c
  2521  001686  6E20               	movwf	(??_eep_read_long+20)& (0+255),c
  2522  001688  5011               	movf	??_eep_read_long+5,w,c
  2523  00168A  101D               	iorwf	??_eep_read_long+17,w,c
  2524  00168C  6E21               	movwf	(??_eep_read_long+21)& (0+255),c
  2525  00168E  5012               	movf	??_eep_read_long+6,w,c
  2526  001690  101E               	iorwf	??_eep_read_long+18,w,c
  2527  001692  6E22               	movwf	(??_eep_read_long+22)& (0+255),c
  2528  001694  5013               	movf	??_eep_read_long+7,w,c
  2529  001696  101F               	iorwf	??_eep_read_long+19,w,c
  2530  001698  6E23               	movwf	(??_eep_read_long+23)& (0+255),c
  2531  00169A  500C               	movf	??_eep_read_long,w,c
  2532  00169C  1020               	iorwf	??_eep_read_long+20,w,c
  2533  00169E  6E08               	movwf	?_eep_read_long,c
  2534  0016A0  500D               	movf	??_eep_read_long+1,w,c
  2535  0016A2  1021               	iorwf	??_eep_read_long+21,w,c
  2536  0016A4  6E09               	movwf	?_eep_read_long+1,c
  2537  0016A6  500E               	movf	??_eep_read_long+2,w,c
  2538  0016A8  1022               	iorwf	??_eep_read_long+22,w,c
  2539  0016AA  6E0A               	movwf	?_eep_read_long+2,c
  2540  0016AC  500F               	movf	??_eep_read_long+3,w,c
  2541  0016AE  1023               	iorwf	??_eep_read_long+23,w,c
  2542  0016B0  6E0B               	movwf	?_eep_read_long+3,c
  2543  0016B2  0012               	return	
  2544  0016B4                     __end_of_eep_read_long:
  2545                           	opt stack 0
  2546                           tblptru	equ	0xFF8
  2547                           tblptrh	equ	0xFF7
  2548                           tblptrl	equ	0xFF6
  2549                           tablat	equ	0xFF5
  2550                           prodh	equ	0xFF4
  2551                           prodl	equ	0xFF3
  2552                           intcon	equ	0xFF2
  2553                           wreg	equ	0xFE8
  2554                           indf2	equ	0xFDF
  2555                           postinc2	equ	0xFDE
  2556                           postdec2	equ	0xFDD
  2557                           fsr2h	equ	0xFDA
  2558                           fsr2l	equ	0xFD9
  2559                           status	equ	0xFD8
  2560                           
  2561 ;; *************** function _eep_read *****************
  2562 ;; Defined at:
  2563 ;;		line 78 in file "main.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;  adr             1    wreg     unsigned char 
  2566 ;;  data            2    3[COMRAM] PTR unsigned char 
  2567 ;;		 -> eep_read_long@data(4), 
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;  adr             1    5[COMRAM] unsigned char 
  2570 ;;  i               1    6[COMRAM] unsigned char 
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  1    wreg      void 
  2573 ;; Registers used:
  2574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2580 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2581 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2584 ;;Total ram usage:        4 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    1
  2587 ;; This function calls:
  2588 ;;		_eep_read_octet
  2589 ;; This function is called by:
  2590 ;;		_eep_read_long
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594                           	psect	text13
  2595  00192A                     __ptext13:
  2596                           	opt stack 0
  2597  00192A                     _eep_read:
  2598                           	opt stack 28
  2599                           
  2600                           ;incstack = 0
  2601                           ;eep_read@adr stored from wreg
  2602  00192A  6E06               	movwf	eep_read@adr,c
  2603                           
  2604                           ;main.c: 79: for(char i = 0; i < 4; i++) data[i] = eep_read_octet(adr+i);
  2605  00192C  0E00               	movlw	0
  2606  00192E  6E07               	movwf	eep_read@i,c
  2607  001930                     l1429:
  2608  001930  0E03               	movlw	3
  2609  001932  6407               	cpfsgt	eep_read@i,c
  2610  001934  D001               	goto	l90
  2611  001936  0012               	return	
  2612  001938                     l90:
  2613  001938  5007               	movf	eep_read@i,w,c
  2614  00193A  0D01               	mullw	1
  2615  00193C  50F3               	movf	prodl,w,c
  2616  00193E  2404               	addwf	eep_read@data,w,c
  2617  001940  6ED9               	movwf	fsr2l,c
  2618  001942  50F4               	movf	prodh,w,c
  2619  001944  2005               	addwfc	eep_read@data+1,w,c
  2620  001946  6EDA               	movwf	fsr2h,c
  2621  001948  5006               	movf	eep_read@adr,w,c
  2622  00194A  2407               	addwf	eep_read@i,w,c
  2623  00194C  ECAB  F00C         	call	_eep_read_octet
  2624  001950  6EDF               	movwf	indf2,c
  2625  001952  2A07               	incf	eep_read@i,f,c
  2626  001954  D7ED               	goto	l1429
  2627  001956                     __end_of_eep_read:
  2628                           	opt stack 0
  2629                           tblptru	equ	0xFF8
  2630                           tblptrh	equ	0xFF7
  2631                           tblptrl	equ	0xFF6
  2632                           tablat	equ	0xFF5
  2633                           prodh	equ	0xFF4
  2634                           prodl	equ	0xFF3
  2635                           intcon	equ	0xFF2
  2636                           wreg	equ	0xFE8
  2637                           indf2	equ	0xFDF
  2638                           postinc2	equ	0xFDE
  2639                           postdec2	equ	0xFDD
  2640                           fsr2h	equ	0xFDA
  2641                           fsr2l	equ	0xFD9
  2642                           status	equ	0xFD8
  2643                           
  2644 ;; *************** function _eep_read_octet *****************
  2645 ;; Defined at:
  2646 ;;		line 62 in file "main.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  adr             1    wreg     unsigned char 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;  adr             1    2[COMRAM] unsigned char 
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  1    wreg      unsigned char 
  2653 ;; Registers used:
  2654 ;;		wreg, status,2, cstack
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2661 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2662 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;Total ram usage:        3 bytes
  2665 ;; Hardware stack levels used:    1
  2666 ;; This function calls:
  2667 ;;		Nothing
  2668 ;; This function is called by:
  2669 ;;		_eep_read
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           	psect	text14
  2674  001956                     __ptext14:
  2675                           	opt stack 0
  2676  001956                     _eep_read_octet:
  2677                           	opt stack 28
  2678                           
  2679                           ;incstack = 0
  2680                           ;eep_read_octet@adr stored from wreg
  2681  001956  6E03               	movwf	eep_read_octet@adr,c
  2682  001958                     
  2683                           ;main.c: 63: while(EECON1bits.WR);
  2684  001958  B2A6               	btfsc	4006,1,c	;volsfr
  2685  00195A  D7FE               	goto	l937
  2686                           
  2687                           ;main.c: 65: EEADR = adr;
  2688  00195C  C003  FFA9         	movff	eep_read_octet@adr,4009	;volatile
  2689                           
  2690                           ;main.c: 66: EECON1bits.EEPGD = 0;
  2691  001960  9EA6               	bcf	4006,7,c	;volsfr
  2692                           
  2693                           ;main.c: 67: EECON1bits.CFGS = 0;
  2694  001962  9CA6               	bcf	4006,6,c	;volsfr
  2695                           
  2696                           ;main.c: 68: EECON1bits.RD = 1;
  2697  001964  80A6               	bsf	4006,0,c	;volsfr
  2698                           
  2699                           ;main.c: 69: _delay((unsigned long)((100)*(40000000/4000.0)));
  2700  001966  0E06               	movlw	6
  2701  001968  6E02               	movwf	(??_eep_read_octet+1)& (0+255),c
  2702  00196A  0E13               	movlw	19
  2703  00196C  6E01               	movwf	??_eep_read_octet& (0+255),c
  2704  00196E  0EAE               	movlw	174
  2705  001970                     u1107:
  2706  001970  2EE8               	decfsz	wreg,f,c
  2707  001972  D7FE               	bra	u1107
  2708  001974  2E01               	decfsz	??_eep_read_octet& (0+255),f,c
  2709  001976  D7FC               	bra	u1107
  2710  001978  2E02               	decfsz	(??_eep_read_octet+1)& (0+255),f,c
  2711  00197A  D7FA               	bra	u1107
  2712                           
  2713                           ;main.c: 71: return EEDATA;
  2714  00197C  50A8               	movf	4008,w,c	;volatile
  2715  00197E  0012               	return	
  2716  001980                     __end_of_eep_read_octet:
  2717                           	opt stack 0
  2718                           tblptru	equ	0xFF8
  2719                           tblptrh	equ	0xFF7
  2720                           tblptrl	equ	0xFF6
  2721                           tablat	equ	0xFF5
  2722                           prodh	equ	0xFF4
  2723                           prodl	equ	0xFF3
  2724                           intcon	equ	0xFF2
  2725                           wreg	equ	0xFE8
  2726                           indf2	equ	0xFDF
  2727                           postinc2	equ	0xFDE
  2728                           postdec2	equ	0xFDD
  2729                           fsr2h	equ	0xFDA
  2730                           fsr2l	equ	0xFD9
  2731                           status	equ	0xFD8
  2732                           
  2733 ;; *************** function _I2C_Master_Write *****************
  2734 ;; Defined at:
  2735 ;;		line 108 in file "I2C.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;		None
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  1    wreg      void 
  2742 ;; Registers used:
  2743 ;;		wreg, status,2, status,0, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2749 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2752 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2753 ;;Total ram usage:        2 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:    1
  2756 ;; This function calls:
  2757 ;;		_I2C_Master_Wait
  2758 ;; This function is called by:
  2759 ;;		_main
  2760 ;;		_RTC_setTime
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           	psect	text15
  2765  001A52                     __ptext15:
  2766                           	opt stack 0
  2767  001A52                     _I2C_Master_Write:
  2768                           	opt stack 29
  2769                           
  2770                           ;I2C.c: 116: I2C_Master_Wait();
  2771                           
  2772                           ;incstack = 0
  2773  001A52  EC19  F00D         	call	_I2C_Master_Wait	;wreg free
  2774                           
  2775                           ;I2C.c: 117: SSPBUF = byteToWrite;
  2776  001A56  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  2777  001A5A  0012               	return		;funcret
  2778  001A5C                     __end_of_I2C_Master_Write:
  2779                           	opt stack 0
  2780                           tblptru	equ	0xFF8
  2781                           tblptrh	equ	0xFF7
  2782                           tblptrl	equ	0xFF6
  2783                           tablat	equ	0xFF5
  2784                           prodh	equ	0xFF4
  2785                           prodl	equ	0xFF3
  2786                           intcon	equ	0xFF2
  2787                           wreg	equ	0xFE8
  2788                           indf2	equ	0xFDF
  2789                           postinc2	equ	0xFDE
  2790                           postdec2	equ	0xFDD
  2791                           fsr2h	equ	0xFDA
  2792                           fsr2l	equ	0xFD9
  2793                           status	equ	0xFD8
  2794                           
  2795 ;; *************** function _I2C_Master_Stop *****************
  2796 ;; Defined at:
  2797 ;;		line 95 in file "I2C.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;		None
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;		None
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		wreg, status,2, status,0, cstack
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;Total ram usage:        0 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    1
  2818 ;; This function calls:
  2819 ;;		_I2C_Master_Wait
  2820 ;; This function is called by:
  2821 ;;		_main
  2822 ;;		_RTC_setTime
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text16
  2827  001A5C                     __ptext16:
  2828                           	opt stack 0
  2829  001A5C                     _I2C_Master_Stop:
  2830                           	opt stack 29
  2831                           
  2832                           ;I2C.c: 104: I2C_Master_Wait();
  2833                           
  2834                           ;incstack = 0
  2835  001A5C  EC19  F00D         	call	_I2C_Master_Wait	;wreg free
  2836                           
  2837                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  2838  001A60  84C5               	bsf	4037,2,c	;volatile
  2839  001A62  0012               	return		;funcret
  2840  001A64                     __end_of_I2C_Master_Stop:
  2841                           	opt stack 0
  2842                           tblptru	equ	0xFF8
  2843                           tblptrh	equ	0xFF7
  2844                           tblptrl	equ	0xFF6
  2845                           tablat	equ	0xFF5
  2846                           prodh	equ	0xFF4
  2847                           prodl	equ	0xFF3
  2848                           intcon	equ	0xFF2
  2849                           wreg	equ	0xFE8
  2850                           indf2	equ	0xFDF
  2851                           postinc2	equ	0xFDE
  2852                           postdec2	equ	0xFDD
  2853                           fsr2h	equ	0xFDA
  2854                           fsr2l	equ	0xFD9
  2855                           status	equ	0xFD8
  2856                           
  2857 ;; *************** function _I2C_Master_Start *****************
  2858 ;; Defined at:
  2859 ;;		line 69 in file "I2C.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;		None
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;		None
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, status,2, status,0, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;Total ram usage:        0 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    1
  2880 ;; This function calls:
  2881 ;;		_I2C_Master_Wait
  2882 ;; This function is called by:
  2883 ;;		_main
  2884 ;;		_RTC_setTime
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           	psect	text17
  2889  001A64                     __ptext17:
  2890                           	opt stack 0
  2891  001A64                     _I2C_Master_Start:
  2892                           	opt stack 29
  2893                           
  2894                           ;I2C.c: 78: I2C_Master_Wait();
  2895                           
  2896                           ;incstack = 0
  2897  001A64  EC19  F00D         	call	_I2C_Master_Wait	;wreg free
  2898                           
  2899                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  2900  001A68  80C5               	bsf	4037,0,c	;volatile
  2901  001A6A  0012               	return		;funcret
  2902  001A6C                     __end_of_I2C_Master_Start:
  2903                           	opt stack 0
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           intcon	equ	0xFF2
  2911                           wreg	equ	0xFE8
  2912                           indf2	equ	0xFDF
  2913                           postinc2	equ	0xFDE
  2914                           postdec2	equ	0xFDD
  2915                           fsr2h	equ	0xFDA
  2916                           fsr2l	equ	0xFD9
  2917                           status	equ	0xFD8
  2918                           
  2919 ;; *************** function _I2C_Master_Read *****************
  2920 ;; Defined at:
  2921 ;;		line 120 in file "I2C.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;  ackBit          1    wreg     unsigned char 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;  ackBit          1    1[COMRAM] unsigned char 
  2926 ;;  receivedByte    1    2[COMRAM] unsigned char 
  2927 ;; Return value:  Size  Location     Type
  2928 ;;                  1    wreg      unsigned char 
  2929 ;; Registers used:
  2930 ;;		wreg, status,2, status,0, cstack
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2937 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;Total ram usage:        2 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; Hardware stack levels required when called:    1
  2943 ;; This function calls:
  2944 ;;		_I2C_Master_Wait
  2945 ;; This function is called by:
  2946 ;;		_main
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           	psect	text18
  2951  0019A6                     __ptext18:
  2952                           	opt stack 0
  2953  0019A6                     _I2C_Master_Read:
  2954                           	opt stack 29
  2955                           
  2956                           ;incstack = 0
  2957                           ;I2C_Master_Read@ackBit stored from wreg
  2958  0019A6  6E02               	movwf	I2C_Master_Read@ackBit,c
  2959                           
  2960                           ;I2C.c: 130: unsigned char receivedByte;
  2961                           ;I2C.c: 132: I2C_Master_Wait();
  2962  0019A8  EC19  F00D         	call	_I2C_Master_Wait	;wreg free
  2963                           
  2964                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  2965  0019AC  86C5               	bsf	4037,3,c	;volatile
  2966                           
  2967                           ;I2C.c: 135: I2C_Master_Wait();
  2968  0019AE  EC19  F00D         	call	_I2C_Master_Wait	;wreg free
  2969                           
  2970                           ;I2C.c: 136: receivedByte = SSPBUF;
  2971  0019B2  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  2972                           
  2973                           ;I2C.c: 138: I2C_Master_Wait();
  2974  0019B6  EC19  F00D         	call	_I2C_Master_Wait	;wreg free
  2975                           
  2976                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  2977  0019BA  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  2978  0019BC  D002               	bra	u455
  2979  0019BE  9AC5               	bcf	4037,5,c	;volatile
  2980  0019C0  D001               	bra	u456
  2981  0019C2                     u455:
  2982  0019C2  8AC5               	bsf	4037,5,c	;volatile
  2983  0019C4                     u456:
  2984                           
  2985                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  2986  0019C4  88C5               	bsf	4037,4,c	;volatile
  2987                           
  2988                           ;I2C.c: 142: return receivedByte;
  2989  0019C6  5003               	movf	I2C_Master_Read@receivedByte,w,c
  2990  0019C8  0012               	return	
  2991  0019CA                     __end_of_I2C_Master_Read:
  2992                           	opt stack 0
  2993                           tblptru	equ	0xFF8
  2994                           tblptrh	equ	0xFF7
  2995                           tblptrl	equ	0xFF6
  2996                           tablat	equ	0xFF5
  2997                           prodh	equ	0xFF4
  2998                           prodl	equ	0xFF3
  2999                           intcon	equ	0xFF2
  3000                           wreg	equ	0xFE8
  3001                           indf2	equ	0xFDF
  3002                           postinc2	equ	0xFDE
  3003                           postdec2	equ	0xFDD
  3004                           fsr2h	equ	0xFDA
  3005                           fsr2l	equ	0xFD9
  3006                           status	equ	0xFD8
  3007                           
  3008 ;; *************** function _I2C_Master_Wait *****************
  3009 ;; Defined at:
  3010 ;;		line 51 in file "I2C.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;		None
  3013 ;; Auto vars:     Size  Location     Type
  3014 ;;		None
  3015 ;; Return value:  Size  Location     Type
  3016 ;;                  1    wreg      void 
  3017 ;; Registers used:
  3018 ;;		wreg, status,2, status,0
  3019 ;; Tracked objects:
  3020 ;;		On entry : 0/0
  3021 ;;		On exit  : 0/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3026 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;Total ram usage:        1 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; This function calls:
  3031 ;;		Nothing
  3032 ;; This function is called by:
  3033 ;;		_I2C_Master_Start
  3034 ;;		_I2C_Master_Stop
  3035 ;;		_I2C_Master_Write
  3036 ;;		_I2C_Master_Read
  3037 ;;		_I2C_Master_RepeatedStart
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text19
  3042  001A32                     __ptext19:
  3043                           	opt stack 0
  3044  001A32                     _I2C_Master_Wait:
  3045                           	opt stack 29
  3046                           
  3047                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3048                           
  3049                           ;incstack = 0
  3050  001A32  B4C7               	btfsc	4039,2,c	;volatile
  3051  001A34  D7FE               	goto	_I2C_Master_Wait
  3052  001A36  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  3053  001A3A  0E1F               	movlw	31
  3054  001A3C  1601               	andwf	??_I2C_Master_Wait,f,c
  3055  001A3E  B4D8               	btfsc	status,2,c
  3056  001A40  0012               	return	
  3057  001A42  D7F7               	goto	_I2C_Master_Wait
  3058  001A44                     __end_of_I2C_Master_Wait:
  3059                           	opt stack 0
  3060                           tblptru	equ	0xFF8
  3061                           tblptrh	equ	0xFF7
  3062                           tblptrl	equ	0xFF6
  3063                           tablat	equ	0xFF5
  3064                           prodh	equ	0xFF4
  3065                           prodl	equ	0xFF3
  3066                           intcon	equ	0xFF2
  3067                           wreg	equ	0xFE8
  3068                           indf2	equ	0xFDF
  3069                           postinc2	equ	0xFDE
  3070                           postdec2	equ	0xFDD
  3071                           fsr2h	equ	0xFDA
  3072                           fsr2l	equ	0xFD9
  3073                           status	equ	0xFD8
  3074                           
  3075 ;; *************** function _I2C_Master_Init *****************
  3076 ;; Defined at:
  3077 ;;		line 14 in file "I2C.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;		None
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  1    wreg      void 
  3084 ;; Registers used:
  3085 ;;		wreg, status,2, status,0, cstack
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3091 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3093 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3094 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3095 ;;Total ram usage:        8 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    1
  3098 ;; This function calls:
  3099 ;;		___lldiv
  3100 ;; This function is called by:
  3101 ;;		_main
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text20
  3106  00181A                     __ptext20:
  3107                           	opt stack 0
  3108  00181A                     _I2C_Master_Init:
  3109                           	opt stack 29
  3110                           
  3111                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  3112                           
  3113                           ;incstack = 0
  3114  00181A  9AC6               	bcf	4038,5,c	;volatile
  3115                           
  3116                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  3117  00181C  8694               	bsf	3988,3,c	;volatile
  3118                           
  3119                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  3120  00181E  8894               	bsf	3988,4,c	;volatile
  3121                           
  3122                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  3123  001820  0E80               	movlw	128
  3124  001822  6EC7               	movwf	4039,c	;volatile
  3125                           
  3126                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  3127  001824  0E28               	movlw	40
  3128  001826  6EC6               	movwf	4038,c	;volatile
  3129                           
  3130                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  3131  001828  0E00               	movlw	0
  3132  00182A  6EC5               	movwf	4037,c	;volatile
  3133                           
  3134                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  3135  00182C  0E00               	movlw	0
  3136  00182E  6E01               	movwf	___lldiv@dividend,c
  3137  001830  0E5A               	movlw	90
  3138  001832  6E02               	movwf	___lldiv@dividend+1,c
  3139  001834  0E62               	movlw	98
  3140  001836  6E03               	movwf	___lldiv@dividend+2,c
  3141  001838  0E02               	movlw	2
  3142  00183A  6E04               	movwf	___lldiv@dividend+3,c
  3143  00183C  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  3144  001840  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  3145  001844  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  3146  001848  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  3147  00184C  0E02               	movlw	2
  3148  00184E                     u945:
  3149  00184E  90D8               	bcf	status,0,c
  3150  001850  3612               	rlcf	??_I2C_Master_Init,f,c
  3151  001852  3613               	rlcf	??_I2C_Master_Init+1,f,c
  3152  001854  3614               	rlcf	??_I2C_Master_Init+2,f,c
  3153  001856  3615               	rlcf	??_I2C_Master_Init+3,f,c
  3154  001858  2EE8               	decfsz	wreg,f,c
  3155  00185A  D7F9               	goto	u945
  3156  00185C  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  3157  001860  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3158  001864  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3159  001868  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3160  00186C  EC5A  F00B         	call	___lldiv	;wreg free
  3161  001870  0401               	decf	?___lldiv,w,c
  3162  001872  6EC8               	movwf	4040,c	;volatile
  3163  001874  0012               	return		;funcret
  3164  001876                     __end_of_I2C_Master_Init:
  3165                           	opt stack 0
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           prodh	equ	0xFF4
  3171                           prodl	equ	0xFF3
  3172                           intcon	equ	0xFF2
  3173                           wreg	equ	0xFE8
  3174                           indf2	equ	0xFDF
  3175                           postinc2	equ	0xFDE
  3176                           postdec2	equ	0xFDD
  3177                           fsr2h	equ	0xFDA
  3178                           fsr2l	equ	0xFD9
  3179                           status	equ	0xFD8
  3180                           
  3181 ;; *************** function ___lldiv *****************
  3182 ;; Defined at:
  3183 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;  dividend        4    0[COMRAM] unsigned long 
  3186 ;;  divisor         4    4[COMRAM] unsigned long 
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;  quotient        4    8[COMRAM] unsigned long 
  3189 ;;  counter         1   12[COMRAM] unsigned char 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  4    0[COMRAM] unsigned long 
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, status,0
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3199 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;Total ram usage:       13 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; This function calls:
  3206 ;;		Nothing
  3207 ;; This function is called by:
  3208 ;;		_I2C_Master_Init
  3209 ;;		_printf
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text21
  3214  0016B4                     __ptext21:
  3215                           	opt stack 0
  3216  0016B4                     ___lldiv:
  3217                           	opt stack 29
  3218                           
  3219                           ;incstack = 0
  3220  0016B4  0E00               	movlw	0
  3221  0016B6  6E09               	movwf	___lldiv@quotient,c
  3222  0016B8  0E00               	movlw	0
  3223  0016BA  6E0A               	movwf	___lldiv@quotient+1,c
  3224  0016BC  0E00               	movlw	0
  3225  0016BE  6E0B               	movwf	___lldiv@quotient+2,c
  3226  0016C0  0E00               	movlw	0
  3227  0016C2  6E0C               	movwf	___lldiv@quotient+3,c
  3228  0016C4  5005               	movf	___lldiv@divisor,w,c
  3229  0016C6  1006               	iorwf	___lldiv@divisor+1,w,c
  3230  0016C8  1007               	iorwf	___lldiv@divisor+2,w,c
  3231  0016CA  1008               	iorwf	___lldiv@divisor+3,w,c
  3232  0016CC  B4D8               	btfsc	status,2,c
  3233  0016CE  D02A               	goto	l647
  3234  0016D0  0E01               	movlw	1
  3235  0016D2  6E0D               	movwf	___lldiv@counter,c
  3236  0016D4  D006               	goto	l642
  3237  0016D6  90D8               	bcf	status,0,c
  3238  0016D8  3605               	rlcf	___lldiv@divisor,f,c
  3239  0016DA  3606               	rlcf	___lldiv@divisor+1,f,c
  3240  0016DC  3607               	rlcf	___lldiv@divisor+2,f,c
  3241  0016DE  3608               	rlcf	___lldiv@divisor+3,f,c
  3242  0016E0  2A0D               	incf	___lldiv@counter,f,c
  3243  0016E2                     l642:
  3244  0016E2  AE08               	btfss	___lldiv@divisor+3,7,c
  3245  0016E4  D7F8               	goto	l643
  3246  0016E6                     u640:
  3247  0016E6  90D8               	bcf	status,0,c
  3248  0016E8  3609               	rlcf	___lldiv@quotient,f,c
  3249  0016EA  360A               	rlcf	___lldiv@quotient+1,f,c
  3250  0016EC  360B               	rlcf	___lldiv@quotient+2,f,c
  3251  0016EE  360C               	rlcf	___lldiv@quotient+3,f,c
  3252  0016F0  5005               	movf	___lldiv@divisor,w,c
  3253  0016F2  5C01               	subwf	___lldiv@dividend,w,c
  3254  0016F4  5006               	movf	___lldiv@divisor+1,w,c
  3255  0016F6  5802               	subwfb	___lldiv@dividend+1,w,c
  3256  0016F8  5007               	movf	___lldiv@divisor+2,w,c
  3257  0016FA  5803               	subwfb	___lldiv@dividend+2,w,c
  3258  0016FC  5008               	movf	___lldiv@divisor+3,w,c
  3259  0016FE  5804               	subwfb	___lldiv@dividend+3,w,c
  3260  001700  A0D8               	btfss	status,0,c
  3261  001702  D009               	goto	l646
  3262  001704  5005               	movf	___lldiv@divisor,w,c
  3263  001706  5E01               	subwf	___lldiv@dividend,f,c
  3264  001708  5006               	movf	___lldiv@divisor+1,w,c
  3265  00170A  5A02               	subwfb	___lldiv@dividend+1,f,c
  3266  00170C  5007               	movf	___lldiv@divisor+2,w,c
  3267  00170E  5A03               	subwfb	___lldiv@dividend+2,f,c
  3268  001710  5008               	movf	___lldiv@divisor+3,w,c
  3269  001712  5A04               	subwfb	___lldiv@dividend+3,f,c
  3270  001714  8009               	bsf	___lldiv@quotient,0,c
  3271  001716                     l646:
  3272  001716  90D8               	bcf	status,0,c
  3273  001718  3208               	rrcf	___lldiv@divisor+3,f,c
  3274  00171A  3207               	rrcf	___lldiv@divisor+2,f,c
  3275  00171C  3206               	rrcf	___lldiv@divisor+1,f,c
  3276  00171E  3205               	rrcf	___lldiv@divisor,f,c
  3277  001720  2E0D               	decfsz	___lldiv@counter,f,c
  3278  001722  D7E1               	goto	u640
  3279  001724                     l647:
  3280  001724  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3281  001728  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3282  00172C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3283  001730  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3284  001734  0012               	return		;funcret
  3285  001736                     __end_of___lldiv:
  3286                           	opt stack 0
  3287                           tblptru	equ	0xFF8
  3288                           tblptrh	equ	0xFF7
  3289                           tblptrl	equ	0xFF6
  3290                           tablat	equ	0xFF5
  3291                           prodh	equ	0xFF4
  3292                           prodl	equ	0xFF3
  3293                           intcon	equ	0xFF2
  3294                           wreg	equ	0xFE8
  3295                           indf2	equ	0xFDF
  3296                           postinc2	equ	0xFDE
  3297                           postdec2	equ	0xFDD
  3298                           fsr2h	equ	0xFDA
  3299                           fsr2l	equ	0xFD9
  3300                           status	equ	0xFD8
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           prodh	equ	0xFF4
  3306                           prodl	equ	0xFF3
  3307                           intcon	equ	0xFF2
  3308                           wreg	equ	0xFE8
  3309                           indf2	equ	0xFDF
  3310                           postinc2	equ	0xFDE
  3311                           postdec2	equ	0xFDD
  3312                           fsr2h	equ	0xFDA
  3313                           fsr2l	equ	0xFD9
  3314                           status	equ	0xFD8
  3315                           
  3316                           	psect	rparam
  3317  0000                     tblptru	equ	0xFF8
  3318                           tblptrh	equ	0xFF7
  3319                           tblptrl	equ	0xFF6
  3320                           tablat	equ	0xFF5
  3321                           prodh	equ	0xFF4
  3322                           prodl	equ	0xFF3
  3323                           intcon	equ	0xFF2
  3324                           wreg	equ	0xFE8
  3325                           indf2	equ	0xFDF
  3326                           postinc2	equ	0xFDE
  3327                           postdec2	equ	0xFDD
  3328                           fsr2h	equ	0xFDA
  3329                           fsr2l	equ	0xFD9
  3330                           status	equ	0xFD8


Data Sizes:
    Strings     51
    Constant    102
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     65      67
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_4(CODE[15]), STR_3(CODE[15]), STR_2(CODE[4]), STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    eep_read@data	PTR unsigned char  size(2) Largest target is 4
		 -> eep_read_long@data(COMRAM[4]), 

    eep_write@data	PTR const unsigned char  size(2) Largest target is 4
		 -> eep_write_long@data(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___llmod
    _putch->_lcdNibble
    ___llmod->___lldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _eep_write_long->_eep_write
    _eep_write->_eep_write_octet
    _eep_read_long->_eep_read
    _eep_read->_eep_read_octet
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0    5491
                                             47 COMRAM    18    18      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                      _eep_read_long
                     _eep_write_long
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              34    26      8    2792
                                             22 COMRAM    25    17      8
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _eep_write_long                                       9     5      4     612
                                              8 COMRAM     9     5      4
                          _eep_write
 ---------------------------------------------------------------------------------
 (2) _eep_write                                            4     2      2     330
                                              4 COMRAM     4     2      2
                    _eep_write_octet
 ---------------------------------------------------------------------------------
 (3) _eep_write_octet                                      4     3      1     120
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _eep_read_long                                       33    29      4     362
                                              7 COMRAM    33    29      4
                           _eep_read
 ---------------------------------------------------------------------------------
 (2) _eep_read                                             4     2      2     225
                                              3 COMRAM     4     2      2
                     _eep_read_octet
 ---------------------------------------------------------------------------------
 (3) _eep_read_octet                                       3     3      0      15
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     478
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     716
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _eep_read_long
     _eep_read
       _eep_read_octet
   _eep_write_long
     _eep_write
       _eep_write_octet
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     41      43       1       52.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      43      34        0.0%
DATA                 0      0      43       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr  9 16:32:30 2018

                         l90 1938                           l85 190A                  __CFG_CPD$ON 000000  
                         u35 1770                           u36 1772                           u45 17B0  
                         u46 17B2          ___wmul@multiplicand 0003                  __CFG_BORV$3 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l103 1538                          l106 153A  
                        l107 1576                          l230 10CA                          l231 10C4  
                        l242 1156                          l227 10A6                          l260 12C0  
                        l236 10F8                          l228 10B6                          l261 1274  
                        l253 1212                          l245 1192                          l246 115A  
                        l255 12B0                          l239 115E                          l280 144E  
                        l256 1238                          l248 11F2                          l281 136C  
                        l265 12DA                          l249 11B6                          l282 145E  
                        l266 12FE                          l283 13E4                          l267 1306  
                        l268 1332                          l277 1360                          l269 131C  
                        l278 1464                          l616 1A02                          l642 16E2  
                        l643 16D6                          l652 17D2                          l653 17C6  
                        l646 1716                          l647 1724                          l656 17FA  
                        l657 1808                          l937 1958                 __CFG_CPB$OFF 000000  
                        u455 19C2                          u640 16E6                          u456 19C4  
                        u900 134E                          u670 17D6                          u920 1474  
                        u960 1592                          u945 184E                          u890 133A  
                        u997 15AA                          prod 000FF3                          wreg 000FE8  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l1417 1902  
                       l1429 1930                         l1391 18C4                         l1565 123C  
                       l1639 144E                         l1681 156E                         l1579 1278  
                       STR_1 1096                         STR_2 1096                         STR_3 1078  
                       STR_4 1087                         STR_5 1067                         u1007 1600  
                       u1017 1A16                         u1107 1970                         u1027 187C  
                       u1037 18B0                         u1047 1A2A                         u1057 1758  
                       u1067 1762                         u1077 1798                         _LATA 000F89  
                       _LATB 000F8A                         u1087 17A2                         _LATC 000F8B  
                       _LATD 000F8C                         u1097 18EE                         _LATE 000F8D  
                       _main 148E                         _keys 1049                         fsr2h 000FDA  
                       indf2 000FDF                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                __CFG_IESO$OFF 000000  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000             __end_of_LCD_LEFT 1062  
      I2C_Master_Read@ackBit 0002             ?_I2C_Master_Init 000E             ?_I2C_Master_Read 0001  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_main 0001  
                      _EEADR 000FA9              __end_of___lldiv 1736              __end_of___llmod 181A  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 1A32               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 18C2               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 1029              __end_of_isdigit 1A0A                        _putch 1A0A  
                      main@i 0041                        main@l 0032                        main@t 003D  
                      tablat 000FF5            _LCDinterruptState 0043                        status 000FD8  
I2C_Master_Read@receivedByte 0003               __CFG_PBADEN$ON 000000              __initialization 1A44  
               __end_of_main 160E                 __end_of_keys 105A               __CFG_OSC$HSPLL 000000  
          __end_of_LCD_RIGHT 1063                       ??_main 0030                __activetblptr 000002  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0002           ??_I2C_Master_Start 0002  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0004  
           ___llmod@dividend 000E                       _EEDATA 000FA8                       _EECON2 000FA7  
            _eep_write_octet 18C2                       ?_putch 0001                       _SSPADD 000FC8  
                     _SSPBUF 000FC9             __end_of_eep_read 1956               __CFG_XINST$OFF 000000  
                     ___wmul 1980               __CFG_STVREN$ON 000000                    ??___lldiv 0009  
                  ??___llmod 0016                    ??_lcdInst 0003                       _printf 109C  
                  ??_initLCD 0004                    ??_isdigit 0001                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                 __accesstop 0080      __end_of__initialization 1A48        __end_of_eep_read_long 16B4  
              ___rparam_used 000001      __size_of_eep_read_octet 002A         __end_of_happynewyear 1061  
             __pcstackCOMRAM 0001                __end_of_putch 1A1E           __size_of_lcdNibble 007E  
    __end_of_eep_write_octet 18FC           __size_of_eep_write 002E                      ??_putch 0003  
                    ?___wmul 0001                      ?_printf 0017                    ?_eep_read 0004  
       lcd@LCDinterruptState 0042                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                    _SSPSTAT 000FC7      __size_of_eep_write_long 0022            __end_of_lcdNibble 17B4  
          __end_of_eep_write 192A                      __Hparam 0000                      __Lparam 0000  
                    ___lldiv 16B4              __size_of___wmul 0026                      ___llmod 17B4  
               __psmallconst 1000                      __pcinit 1A44                      __ramtop 1000  
                    _lcdInst 1A1E                      __ptext0 148E                      __ptext1 109C  
                    __ptext2 1A0A                      __ptext3 19EC                      __ptext4 1980  
                    __ptext5 17B4                      __ptext6 1876                      __ptext7 1A1E  
                    __ptext8 1736                      __ptext9 19CA              __size_of_printf 03F2  
                    _initLCD 1876            __end_of_hexpowers 1049                      _dpowers 1001  
                    _isdigit 19EC             ?_eep_write_octet 0001              eep_write_long@l 0009  
                  _LCD_RIGHT 1062     __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Read 0024  
   __size_of_I2C_Master_Wait 0012                   ??_eep_read 0006     __size_of_I2C_Master_Stop 0008  
         eep_write_long@data 000E           eep_write_octet@adr 0004         end_of_initialization 1A48  
      __end_of_LCD_SIZE_HORZ 1065        __end_of_LCD_SIZE_VERT 1064                __Lmediumconst 0000  
             _eep_read_octet 1956    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0005              ___lldiv@counter 000D                      printf@c 002F  
                    printf@f 0017                      postdec2 000FDD                      postinc2 000FDE  
                 eep_write@i 0008                    _TRISCbits 000F94                 _happynewyear 105A  
     __end_of_eep_read_octet 1980                  printf@width 002C               __end_of___wmul 19A6  
             __end_of_printf 148E          start_initialization 1A44              ?_eep_read_octet 0001  
          ??_I2C_Master_Init 0012            ??_I2C_Master_Read 0002            ??_I2C_Master_Wait 0001  
          ??_I2C_Master_Stop 0002               _eep_write_long 19CA              ___llmod@divisor 0012  
            ___llmod@counter 0016                     ??___wmul 0005     I2C_Master_Init@clockFreq 000E  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 001F            eep_read_long@data 0025  
          eep_read_octet@adr 0003                  __pbssCOMRAM 0042       __size_of_eep_read_long 00A6  
          __size_of_eep_read 002C       __end_of_eep_write_long 19EC             _I2C_Master_Start 1A64  
           _I2C_Master_Write 1A52            __CFG_CCP2MX$PORTC 000000                    _lcdNibble 1736  
                  _eep_write 18FC                     ?___lldiv 0001                     ?___llmod 000E  
                   ?_lcdInst 0001                     ?_initLCD 0001                  __smallconst 1000  
                   ?_isdigit 0001                    _hexpowers 1029               __size_of_putch 0014  
            ?_eep_write_long 0009                     _LCD_LEFT 1061               ___wmul@product 0005  
          eep_write_long@adr 000D                     _LATDbits 000F8C                _eep_read_long 160E  
                  eep_read@i 0007             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
                 ?_eep_write 0005            ___wmul@multiplier 0001                lcdNibble@data 0002  
                 printf@flag 002E                lcdNibble@temp 0001                   printf@prec 0024  
             _LCD_HORZ_LIMIT 1066     __size_of_eep_write_octet 003A                   _EECON1bits 000FA6  
             ?_eep_read_long 0008                     __Hrparam 0000                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000             eep_read_long@adr 0024             __size_of___lldiv 0082  
           __size_of___llmod 0066                  _isdigit$712 0002             __size_of_lcdInst 0014  
            _I2C_Master_Init 181A              _I2C_Master_Read 19A6             __size_of_initLCD 004C  
            _I2C_Master_Wait 1A32              _I2C_Master_Stop 1A5C       __end_of_LCD_HORZ_LIMIT 1067  
           __size_of_isdigit 001E             ??_eep_read_octet 0001                     _eep_read 192A  
                   __ptext10 18FC                     __ptext11 18C2                     __ptext20 181A  
                   __ptext12 160E                     __ptext21 16B4                     __ptext13 192A  
                   __ptext14 1956                     __ptext15 1A52                     __ptext16 1A5C  
                   __ptext17 1A64                     __ptext18 19A6                     __ptext19 1A32  
             _LCD_VERT_LIMIT 1065                eep_write@data 0005                 eep_read@data 0004  
              __size_of_main 0180                  ??_lcdNibble 0001                  ??_eep_write 0007  
                  printf@idx 0023                    printf@val 0028                     main@time 0036  
        eep_write_octet@data 0001  I2C_Master_Write@byteToWrite 0002                    putch@data 0003  
   __end_of_I2C_Master_Start 1A6C     __end_of_I2C_Master_Write 1A5C                   _INTCONbits 000FF2  
     __end_of_LCD_VERT_LIMIT 1066                     isdigit@c 0003              ??_eep_read_long 000C  
              _LCD_SIZE_HORZ 1064                _LCD_SIZE_VERT 1063             ___lldiv@dividend 0001  
               eep_write@adr 0007                  eep_read@adr 0006            ??_eep_write_octet 0002  
                   printf@ap 0026      __end_of_I2C_Master_Init 1876      __end_of_I2C_Master_Read 19CA  
    __end_of_I2C_Master_Wait 1A44      __end_of_I2C_Master_Stop 1A64                  lcdInst@data 0003  
           ___lldiv@quotient 0009             ??_eep_write_long 000D                  _SSPCON1bits 000FC6  
                _SSPCON2bits 000FC5  
