

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 16 14:37:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,inline
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    23  0000                     
    24                           ; Version 1.45
    25                           ; Generated 16/11/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F2550 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     
    59                           	psect	idataCOMRAM
    60  000564                     __pidataCOMRAM:
    61                           	opt stack 0
    62                           
    63                           ;initializer for _UART
    64  000564  16                 	db	low _uart
    65  000565  00                 	db	high _uart
    66                           
    67                           ;initializer for _dataEnd
    68  000566  F0                 	db	240
    69                           
    70                           ;initializer for _KPDState
    71  000567  01                 	db	1
    72                           
    73                           ;initializer for Keypad@dataEnd
    74  000568  F0                 	db	240
    75  0000                     _SPBRG	set	4015
    76  0000                     _RCREG	set	4014
    77  0000                     _RCSTAbits	set	4011
    78  0000                     _TXREG	set	4013
    79  0000                     _INTCONbits	set	4082
    80  0000                     _RCONbits	set	4048
    81  0000                     _ADCON0bits	set	4034
    82  0000                     _ADCON1	set	4033
    83  0000                     _LATC	set	3979
    84  0000                     _TRISC	set	3988
    85  0000                     _TRISB	set	3987
    86  0000                     _OSCCONbits	set	4051
    87  0000                     _LATA	set	3977
    88  0000                     _PORTAbits	set	3968
    89  0000                     _PORTBbits	set	3969
    90  0000                     _LATB	set	3978
    91  0000                     _LATAbits	set	3977
    92  0000                     _TRISA	set	3986
    93  0000                     _TXSTAbits	set	4012
    94  0000                     _TRISC7	set	31911
    95  0000                     _TRISC6	set	31910
    96  0000                     _RCIE	set	31981
    97  0000                     _RCIF	set	31989
    98  0000                     _TXIE	set	31980
    99  0000                     _TRMT	set	32097
   100  0000                     _TXIF	set	31988
   101  0000                     _ADIE	set	31982
   102  0000                     _PEIE	set	32662
   103                           
   104                           ; #config settings
   105  0000                     
   106                           	psect	cinit
   107  0004C4                     __pcinit:
   108                           	opt stack 0
   109  0004C4                     start_initialization:
   110                           	opt stack 0
   111  0004C4                     __initialization:
   112                           	opt stack 0
   113                           
   114                           ; Initialize objects allocated to COMRAM (5 bytes)
   115                           ; load TBLPTR registers with __pidataCOMRAM
   116  0004C4  0E64               	movlw	low __pidataCOMRAM
   117  0004C6  6EF6               	movwf	tblptrl,c
   118  0004C8  0E05               	movlw	high __pidataCOMRAM
   119  0004CA  6EF7               	movwf	tblptrh,c
   120  0004CC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   121  0004CE  6EF8               	movwf	tblptru,c
   122  0004D0  EE00  F045         	lfsr	0,__pdataCOMRAM
   123  0004D4  EE10 F005          	lfsr	1,5
   124  0004D8                     copy_data0:
   125  0004D8  0009               	tblrd		*+
   126  0004DA  CFF5 FFEE          	movff	tablat,postinc0
   127  0004DE  50E5               	movf	postdec1,w,c
   128  0004E0  50E1               	movf	fsr1l,w,c
   129  0004E2  E1FA               	bnz	copy_data0
   130                           
   131                           ; Clear objects allocated to COMRAM (34 bytes)
   132  0004E4  EE00  F001         	lfsr	0,__pbssCOMRAM
   133  0004E8  0E22               	movlw	34
   134  0004EA                     clear_0:
   135  0004EA  6AEE               	clrf	postinc0,c
   136  0004EC  06E8               	decf	wreg,f,c
   137  0004EE  E1FD               	bnz	clear_0
   138  0004F0                     end_of_initialization:
   139                           	opt stack 0
   140  0004F0                     __end_of__initialization:
   141                           	opt stack 0
   142  0004F0  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   143  0004F2  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   144  0004F4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   145  0004F6  6EF8               	movwf	tblptru,c
   146  0004F8  0100               	movlb	0
   147  0004FA  EF7F  F002         	goto	_main	;jump to C main() function
   148                           tblptru	equ	0xFF8
   149                           tblptrh	equ	0xFF7
   150                           tblptrl	equ	0xFF6
   151                           tablat	equ	0xFF5
   152                           postinc0	equ	0xFEE
   153                           wreg	equ	0xFE8
   154                           postdec1	equ	0xFE5
   155                           fsr1l	equ	0xFE1
   156                           
   157                           	psect	bssCOMRAM
   158  000001                     __pbssCOMRAM:
   159                           	opt stack 0
   160  000001                     _keypadFlags:
   161                           	opt stack 0
   162  000001                     	ds	3
   163  000004                     	ds	1
   164  000005                     _UARTinterruptState:
   165                           	opt stack 0
   166  000005                     	ds	1
   167  000006                     _arr_dataRX:
   168                           	opt stack 0
   169  000006                     	ds	16
   170  000016                     _uart:
   171                           	opt stack 0
   172  000016                     	ds	12
   173  000022                     Keypad@dataOut:
   174                           	opt stack 0
   175  000022                     	ds	1
   176                           tblptru	equ	0xFF8
   177                           tblptrh	equ	0xFF7
   178                           tblptrl	equ	0xFF6
   179                           tablat	equ	0xFF5
   180                           postinc0	equ	0xFEE
   181                           wreg	equ	0xFE8
   182                           postdec1	equ	0xFE5
   183                           fsr1l	equ	0xFE1
   184                           
   185                           	psect	dataCOMRAM
   186  000045                     __pdataCOMRAM:
   187                           	opt stack 0
   188  000045                     _UART:
   189                           	opt stack 0
   190  000045                     	ds	2
   191  000047                     	ds	1
   192  000048                     _KPDState:
   193                           	opt stack 0
   194  000048                     	ds	1
   195  000049                     Keypad@dataEnd:
   196                           	opt stack 0
   197  000049                     	ds	1
   198                           tblptru	equ	0xFF8
   199                           tblptrh	equ	0xFF7
   200                           tblptrl	equ	0xFF6
   201                           tablat	equ	0xFF5
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           postdec1	equ	0xFE5
   205                           fsr1l	equ	0xFE1
   206                           
   207                           	psect	cstackBANK0
   208  000060                     __pcstackBANK0:
   209                           	opt stack 0
   210  000060                     ___aldiv@counter:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0x0
   214  000060                     	ds	1
   215  000061                     ___aldiv@sign:
   216                           	opt stack 0
   217                           
   218                           ; 1 bytes @ 0x1
   219  000061                     	ds	1
   220  000062                     ___aldiv@quotient:
   221                           	opt stack 0
   222                           
   223                           ; 4 bytes @ 0x2
   224  000062                     	ds	4
   225  000066                     ??_UART_Init:
   226                           
   227                           ; 1 bytes @ 0x6
   228  000066                     	ds	4
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           postdec1	equ	0xFE5
   236                           fsr1l	equ	0xFE1
   237                           
   238                           	psect	cstackCOMRAM
   239  000023                     __pcstackCOMRAM:
   240                           	opt stack 0
   241  000023                     ??_interruptHandlerUART:
   242                           
   243                           ; 1 bytes @ 0x0
   244  000023                     	ds	21
   245  000038                     ?___aldiv:
   246                           	opt stack 0
   247  000038                     readKeyboard@i:
   248                           	opt stack 0
   249  000038                     uartTransmitBlocking@data:
   250                           	opt stack 0
   251  000038                     ___aldiv@dividend:
   252                           	opt stack 0
   253                           
   254                           ; 4 bytes @ 0x15
   255  000038                     	ds	2
   256  00003A                     uartTransmitBlocking@numBytes:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0x17
   260  00003A                     	ds	1
   261  00003B                     ??_uartTransmitBlocking:
   262                           
   263                           ; 1 bytes @ 0x18
   264  00003B                     	ds	1
   265  00003C                     uartTransmitBlocking@numTransmits:
   266                           	opt stack 0
   267  00003C                     ___aldiv@divisor:
   268                           	opt stack 0
   269                           
   270                           ; 4 bytes @ 0x19
   271  00003C                     	ds	1
   272  00003D                     ??_keypadRoutineUART:
   273                           
   274                           ; 1 bytes @ 0x1A
   275  00003D                     	ds	3
   276  000040                     UART_Init@baud:
   277                           	opt stack 0
   278                           
   279                           ; 4 bytes @ 0x1D
   280  000040                     	ds	4
   281  000044                     ??_main:
   282                           
   283                           ; 1 bytes @ 0x21
   284  000044                     	ds	1
   285                           tblptru	equ	0xFF8
   286                           tblptrh	equ	0xFF7
   287                           tblptrl	equ	0xFF6
   288                           tablat	equ	0xFF5
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           postdec1	equ	0xFE5
   292                           fsr1l	equ	0xFE1
   293                           
   294 ;;
   295 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   296 ;;
   297 ;; *************** function _main *****************
   298 ;; Defined at:
   299 ;;		line 14 in file "main.c"
   300 ;; Parameters:    Size  Location     Type
   301 ;;		None
   302 ;; Auto vars:     Size  Location     Type
   303 ;;		None
   304 ;; Return value:  Size  Location     Type
   305 ;;                  1    wreg      void 
   306 ;; Registers used:
   307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   308 ;; Tracked objects:
   309 ;;		On entry : 0/0
   310 ;;		On exit  : 0/0
   311 ;;		Unchanged: 0/0
   312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   313 ;;      Params:         0       0       0       0       0       0       0       0       0
   314 ;;      Locals:         0       0       0       0       0       0       0       0       0
   315 ;;      Temps:          1       0       0       0       0       0       0       0       0
   316 ;;      Totals:         1       0       0       0       0       0       0       0       0
   317 ;;Total ram usage:        1 bytes
   318 ;; Hardware stack levels required when called:    3
   319 ;; This function calls:
   320 ;;		_UART_Init
   321 ;;		_keypadRoutineUART
   322 ;;		_machineConfig
   323 ;; This function is called by:
   324 ;;		Startup code after reset
   325 ;; This function uses a non-reentrant model
   326 ;;
   327                           
   328                           	psect	text0
   329  0004FE                     __ptext0:
   330                           	opt stack 0
   331  0004FE                     _main:
   332                           	opt stack 28
   333                           
   334                           ;main.c: 16: machineConfig();
   335                           
   336                           ;incstack = 0
   337  0004FE  EC99  F002         	call	_machineConfig	;wreg free
   338                           
   339                           ;main.c: 19: UART_Init(9600);
   340  000502  0E80               	movlw	128
   341  000504  6E40               	movwf	UART_Init@baud,c
   342  000506  0E25               	movlw	37
   343  000508  6E41               	movwf	UART_Init@baud+1,c
   344  00050A  0E00               	movlw	0
   345  00050C  6E42               	movwf	UART_Init@baud+2,c
   346  00050E  0E00               	movlw	0
   347  000510  6E43               	movwf	UART_Init@baud+3,c
   348  000512  ECB4  F001         	call	_UART_Init	;wreg free
   349                           
   350                           ;main.c: 20: TXSTAbits.TXEN = 1; _delay((unsigned long)((5)*(8000000/4000.0)));;
   351  000516  8AAC               	bsf	4012,5,c	;volatile
   352  000518  0E0D               	movlw	13
   353  00051A  6E44               	movwf	??_main& (0+255),c
   354  00051C  0EFC               	movlw	252
   355  00051E                     u817:
   356  00051E  2EE8               	decfsz	wreg,f,c
   357  000520  D7FE               	bra	u817
   358  000522  2E44               	decfsz	??_main& (0+255),f,c
   359  000524  D7FC               	bra	u817
   360                           
   361                           ;main.c: 25: TRISA = 0b11101111;
   362  000526  0EEF               	movlw	239
   363  000528  6E92               	movwf	3986,c	;volatile
   364                           
   365                           ;main.c: 27: LATAbits.LATA4 = 1;
   366  00052A  8889               	bsf	3977,4,c	;volatile
   367  00052C                     
   368                           ;main.c: 30: keypadRoutineUART();
   369  00052C  EC30  F002         	call	_keypadRoutineUART	;wreg free
   370  000530  D7FD               	goto	l33
   371  000532                     __end_of_main:
   372                           	opt stack 0
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           postdec1	equ	0xFE5
   380                           fsr1l	equ	0xFE1
   381                           
   382 ;; *************** function _machineConfig *****************
   383 ;; Defined at:
   384 ;;		line 3 in file "machineConfig.c"
   385 ;; Parameters:    Size  Location     Type
   386 ;;		None
   387 ;; Auto vars:     Size  Location     Type
   388 ;;		None
   389 ;; Return value:  Size  Location     Type
   390 ;;                  1    wreg      void 
   391 ;; Registers used:
   392 ;;		wreg, status,2
   393 ;; Tracked objects:
   394 ;;		On entry : 0/0
   395 ;;		On exit  : 0/0
   396 ;;		Unchanged: 0/0
   397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   398 ;;      Params:         0       0       0       0       0       0       0       0       0
   399 ;;      Locals:         0       0       0       0       0       0       0       0       0
   400 ;;      Temps:          0       0       0       0       0       0       0       0       0
   401 ;;      Totals:         0       0       0       0       0       0       0       0       0
   402 ;;Total ram usage:        0 bytes
   403 ;; Hardware stack levels used:    1
   404 ;; Hardware stack levels required when called:    1
   405 ;; This function calls:
   406 ;;		Nothing
   407 ;; This function is called by:
   408 ;;		_main
   409 ;; This function uses a non-reentrant model
   410 ;;
   411                           
   412                           	psect	text1
   413  000532                     __ptext1:
   414                           	opt stack 0
   415  000532                     _machineConfig:
   416                           	opt stack 29
   417                           
   418                           ;machineConfig.c: 6: OSCCONbits.IRCF = 0b111;
   419                           
   420                           ;incstack = 0
   421  000532  88D3               	bsf	4051,4,c	;volatile
   422  000534  8AD3               	bsf	4051,5,c	;volatile
   423  000536  8CD3               	bsf	4051,6,c	;volatile
   424                           
   425                           ;machineConfig.c: 7: OSCCONbits.SCS1 = 1;
   426  000538  82D3               	bsf	4051,1,c	;volatile
   427                           
   428                           ;machineConfig.c: 8: OSCCONbits.SCS0 = 0;
   429  00053A  90D3               	bcf	4051,0,c	;volatile
   430                           
   431                           ;machineConfig.c: 11: TRISA = 0b11011111;
   432  00053C  0EDF               	movlw	223
   433  00053E  6E92               	movwf	3986,c	;volatile
   434                           
   435                           ;machineConfig.c: 13: TRISB = 0b00001111;
   436  000540  0E0F               	movlw	15
   437  000542  6E93               	movwf	3987,c	;volatile
   438                           
   439                           ;machineConfig.c: 14: TRISC = 0b10000000;
   440  000544  0E80               	movlw	128
   441  000546  6E94               	movwf	3988,c	;volatile
   442                           
   443                           ;machineConfig.c: 17: LATA = 0x00;
   444  000548  0E00               	movlw	0
   445  00054A  6E89               	movwf	3977,c	;volatile
   446                           
   447                           ;machineConfig.c: 18: LATB = 0xF0;
   448  00054C  0EF0               	movlw	240
   449  00054E  6E8A               	movwf	3978,c	;volatile
   450                           
   451                           ;machineConfig.c: 19: LATC = 0b10000000;
   452  000550  0E80               	movlw	128
   453  000552  6E8B               	movwf	3979,c	;volatile
   454                           
   455                           ;machineConfig.c: 22: ADCON1 = 0x0F;
   456  000554  0E0F               	movlw	15
   457  000556  6EC1               	movwf	4033,c	;volatile
   458                           
   459                           ;machineConfig.c: 23: ADCON0bits.ADON = 0;
   460  000558  90C2               	bcf	4034,0,c	;volatile
   461                           
   462                           ;machineConfig.c: 26: PEIE = 1;
   463  00055A  8CF2               	bsf	intcon,6,c	;volatile
   464                           
   465                           ;machineConfig.c: 27: ADIE = 0;
   466  00055C  9C9D               	bcf	3997,6,c	;volatile
   467                           
   468                           ;machineConfig.c: 28: RCONbits.IPEN = 0;
   469  00055E  9ED0               	bcf	4048,7,c	;volatile
   470                           
   471                           ;machineConfig.c: 29: (INTCONbits.GIE = 0);
   472  000560  9EF2               	bcf	intcon,7,c	;volatile
   473  000562  0012               	return		;funcret
   474  000564                     __end_of_machineConfig:
   475                           	opt stack 0
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           intcon	equ	0xFF2
   481                           postinc0	equ	0xFEE
   482                           wreg	equ	0xFE8
   483                           postdec1	equ	0xFE5
   484                           fsr1l	equ	0xFE1
   485                           
   486 ;; *************** function _keypadRoutineUART *****************
   487 ;; Defined at:
   488 ;;		line 231 in file "Keypad.c"
   489 ;; Parameters:    Size  Location     Type
   490 ;;		None
   491 ;; Auto vars:     Size  Location     Type
   492 ;;		None
   493 ;; Return value:  Size  Location     Type
   494 ;;                  1    wreg      void 
   495 ;; Registers used:
   496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   497 ;; Tracked objects:
   498 ;;		On entry : 0/0
   499 ;;		On exit  : 0/0
   500 ;;		Unchanged: 0/0
   501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   502 ;;      Params:         0       0       0       0       0       0       0       0       0
   503 ;;      Locals:         0       0       0       0       0       0       0       0       0
   504 ;;      Temps:          1       0       0       0       0       0       0       0       0
   505 ;;      Totals:         1       0       0       0       0       0       0       0       0
   506 ;;Total ram usage:        1 bytes
   507 ;; Hardware stack levels used:    1
   508 ;; Hardware stack levels required when called:    2
   509 ;; This function calls:
   510 ;;		_readKeyboard
   511 ;;		_uartTransmitBlocking
   512 ;; This function is called by:
   513 ;;		_main
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           	psect	text2
   518  000460                     __ptext2:
   519                           	opt stack 0
   520  000460                     _keypadRoutineUART:
   521                           	opt stack 28
   522                           
   523                           ;Keypad.c: 246: else{
   524                           ;Keypad.c: 248: dataOut = readKeyboard();
   525                           
   526                           ;Keypad.c: 243: }
   527                           
   528                           ;Keypad.c: 242: while(0){ continue; }
   529                           
   530                           ;Keypad.c: 240: if(0){
   531                           
   532                           ;incstack = 0
   533  000460  ECF6  F001         	call	_readKeyboard	;wreg free
   534  000464  6E22               	movwf	Keypad@dataOut,c
   535                           
   536                           ;Keypad.c: 251: if (dataOut != 0xF0){
   537  000466  0EF0               	movlw	240
   538  000468  1822               	xorwf	Keypad@dataOut,w,c
   539  00046A  B4D8               	btfsc	status,2,c
   540  00046C  0012               	return	
   541                           
   542                           ;Keypad.c: 255: _delay((unsigned long)((20)*(8000000/4000.0)));
   543  00046E  0E34               	movlw	52
   544  000470  6E3D               	movwf	??_keypadRoutineUART& (0+255),c
   545  000472  0EF2               	movlw	242
   546  000474                     u827:
   547  000474  2EE8               	decfsz	wreg,f,c
   548  000476  D7FE               	bra	u827
   549  000478  2E3D               	decfsz	??_keypadRoutineUART& (0+255),f,c
   550  00047A  D7FC               	bra	u827
   551                           
   552                           ;Keypad.c: 257: if (dataOut == readKeyboard()){
   553  00047C  ECF6  F001         	call	_readKeyboard	;wreg free
   554  000480  1822               	xorwf	Keypad@dataOut,w,c
   555  000482  A4D8               	btfss	status,2,c
   556  000484  0012               	return	
   557                           
   558                           ;Keypad.c: 259: uartTransmitBlocking(&dataOut, 1);
   559  000486  0E22               	movlw	low Keypad@dataOut
   560  000488  6E38               	movwf	uartTransmitBlocking@data,c
   561  00048A  0E00               	movlw	high Keypad@dataOut
   562  00048C  6E39               	movwf	uartTransmitBlocking@data+1,c
   563  00048E  0E01               	movlw	1
   564  000490  6E3A               	movwf	uartTransmitBlocking@numBytes,c
   565  000492  EC68  F001         	call	_uartTransmitBlocking	;wreg free
   566                           
   567                           ;Keypad.c: 262: while (dataOut == readKeyboard()){
   568  000496  D008               	goto	l134
   569  000498                     
   570                           ;Keypad.c: 263: uartTransmitBlocking(&dataOut, 1);
   571  000498  0E22               	movlw	low Keypad@dataOut
   572  00049A  6E38               	movwf	uartTransmitBlocking@data,c
   573  00049C  0E00               	movlw	high Keypad@dataOut
   574  00049E  6E39               	movwf	uartTransmitBlocking@data+1,c
   575  0004A0  0E01               	movlw	1
   576  0004A2  6E3A               	movwf	uartTransmitBlocking@numBytes,c
   577  0004A4  EC68  F001         	call	_uartTransmitBlocking	;wreg free
   578  0004A8                     l134:
   579  0004A8  ECF6  F001         	call	_readKeyboard	;wreg free
   580  0004AC  1822               	xorwf	Keypad@dataOut,w,c
   581  0004AE  B4D8               	btfsc	status,2,c
   582  0004B0  D7F3               	goto	l133
   583                           
   584                           ;Keypad.c: 275: }
   585                           ;Keypad.c: 276: }
   586                           ;Keypad.c: 279: uartTransmitBlocking(&dataEnd, 1);
   587  0004B2  0E49               	movlw	low Keypad@dataEnd
   588  0004B4  6E38               	movwf	uartTransmitBlocking@data,c
   589  0004B6  0E00               	movlw	high Keypad@dataEnd
   590  0004B8  6E39               	movwf	uartTransmitBlocking@data+1,c
   591  0004BA  0E01               	movlw	1
   592  0004BC  6E3A               	movwf	uartTransmitBlocking@numBytes,c
   593  0004BE  EC68  F001         	call	_uartTransmitBlocking	;wreg free
   594  0004C2  0012               	return	
   595  0004C4                     __end_of_keypadRoutineUART:
   596                           	opt stack 0
   597                           tblptru	equ	0xFF8
   598                           tblptrh	equ	0xFF7
   599                           tblptrl	equ	0xFF6
   600                           tablat	equ	0xFF5
   601                           intcon	equ	0xFF2
   602                           postinc0	equ	0xFEE
   603                           wreg	equ	0xFE8
   604                           postdec1	equ	0xFE5
   605                           fsr1l	equ	0xFE1
   606                           status	equ	0xFD8
   607                           
   608 ;; *************** function _uartTransmitBlocking *****************
   609 ;; Defined at:
   610 ;;		line 22 in file "UART_PIC.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;  data            2   21[COMRAM] PTR unsigned char 
   613 ;;		 -> Keypad@dataEnd(1), Keypad@dataOut(1), 
   614 ;;  numBytes        1   23[COMRAM] unsigned char 
   615 ;; Auto vars:     Size  Location     Type
   616 ;;  numTransmits    1   25[COMRAM] unsigned char 
   617 ;; Return value:  Size  Location     Type
   618 ;;                  1    wreg      void 
   619 ;; Registers used:
   620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   621 ;; Tracked objects:
   622 ;;		On entry : 0/0
   623 ;;		On exit  : 0/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   626 ;;      Params:         3       0       0       0       0       0       0       0       0
   627 ;;      Locals:         1       0       0       0       0       0       0       0       0
   628 ;;      Temps:          1       0       0       0       0       0       0       0       0
   629 ;;      Totals:         5       0       0       0       0       0       0       0       0
   630 ;;Total ram usage:        5 bytes
   631 ;; Hardware stack levels used:    1
   632 ;; Hardware stack levels required when called:    1
   633 ;; This function calls:
   634 ;;		Nothing
   635 ;; This function is called by:
   636 ;;		_keypadRoutineUART
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           	psect	text3
   641  0002D0                     __ptext3:
   642                           	opt stack 0
   643  0002D0                     _uartTransmitBlocking:
   644                           	opt stack 28
   645                           
   646                           ;UART_PIC.c: 36: while(UART -> _stateTX == UART_STATE_BUSY){ continue; }
   647                           
   648                           ;incstack = 0
   649  0002D0  EE20 F008          	lfsr	2,8
   650  0002D4  5045               	movf	_UART,w,c
   651  0002D6  26D9               	addwf	fsr2l,f,c
   652  0002D8  5046               	movf	_UART+1,w,c
   653  0002DA  22DA               	addwfc	fsr2h,f,c
   654  0002DC  50DF               	movf	indf2,w,c
   655  0002DE  B4D8               	btfsc	status,2,c
   656  0002E0  D7F7               	goto	_uartTransmitBlocking
   657                           
   658                           ;UART_PIC.c: 39: UART -> _stateTX = UART_STATE_BUSY;
   659  0002E2  EE20 F008          	lfsr	2,8
   660  0002E6  5045               	movf	_UART,w,c
   661  0002E8  26D9               	addwf	fsr2l,f,c
   662  0002EA  5046               	movf	_UART+1,w,c
   663  0002EC  22DA               	addwfc	fsr2h,f,c
   664  0002EE  0E00               	movlw	0
   665  0002F0  6EDF               	movwf	indf2,c
   666                           
   667                           ;UART_PIC.c: 42: unsigned char numTransmits = 0;
   668  0002F2  0E00               	movlw	0
   669  0002F4  6E3C               	movwf	uartTransmitBlocking@numTransmits,c
   670                           
   671                           ;UART_PIC.c: 45: TXSTAbits.TXEN = 1; _delay((unsigned long)((5)*(8000000/4000.0)));;
   672  0002F6  8AAC               	bsf	4012,5,c	;volatile
   673  0002F8  0E0D               	movlw	13
   674  0002FA  6E3B               	movwf	??_uartTransmitBlocking& (0+255),c
   675  0002FC  0EFC               	movlw	252
   676  0002FE                     u837:
   677  0002FE  2EE8               	decfsz	wreg,f,c
   678  000300  D7FE               	bra	u837
   679  000302  2E3B               	decfsz	??_uartTransmitBlocking& (0+255),f,c
   680  000304  D7FC               	bra	u837
   681                           
   682                           ;UART_PIC.c: 48: while(numTransmits < numBytes){
   683  000306  D023               	goto	l212
   684  000308                     l1328:
   685  000308  B2AC               	btfsc	4012,1,c	;volatile
   686  00030A  D002               	goto	u600
   687  00030C  0E01               	movlw	1
   688  00030E  D001               	goto	u602
   689  000310                     u600:
   690  000310  0E00               	movlw	0
   691  000312                     u602:
   692  000312  6E3B               	movwf	??_uartTransmitBlocking& (0+255),c
   693  000314  B89E               	btfsc	3998,4,c	;volatile
   694  000316  D002               	goto	u610
   695  000318  0E01               	movlw	1
   696  00031A  D001               	goto	u612
   697  00031C                     u610:
   698  00031C  0E00               	movlw	0
   699  00031E                     u612:
   700  00031E  103B               	iorwf	??_uartTransmitBlocking,w,c
   701  000320  E1F3               	bnz	l1328
   702                           
   703                           ;UART_PIC.c: 53: __nop();
   704  000322  F000               	nop	
   705                           
   706                           ;UART_PIC.c: 56: UARTinterruptState = INTCONbits.GIE;
   707  000324  0E00               	movlw	0
   708  000326  BEF2               	btfsc	intcon,7,c	;volatile
   709  000328  0E01               	movlw	1
   710  00032A  6E05               	movwf	_UARTinterruptState,c	;volatile
   711                           
   712                           ;UART_PIC.c: 57: (INTCONbits.GIE = 0);
   713  00032C  9EF2               	bcf	intcon,7,c	;volatile
   714                           
   715                           ;UART_PIC.c: 58: TXREG = data[numTransmits];
   716  00032E  503C               	movf	uartTransmitBlocking@numTransmits,w,c
   717  000330  0D01               	mullw	1
   718  000332  50F3               	movf	prodl,w,c
   719  000334  2438               	addwf	uartTransmitBlocking@data,w,c
   720  000336  6ED9               	movwf	fsr2l,c
   721  000338  50F4               	movf	prodh,w,c
   722  00033A  2039               	addwfc	uartTransmitBlocking@data+1,w,c
   723  00033C  6EDA               	movwf	fsr2h,c
   724  00033E  50DF               	movf	indf2,w,c
   725  000340  6EAD               	movwf	4013,c	;volatile
   726                           
   727                           ;UART_PIC.c: 59: INTCONbits.GIE = UARTinterruptState;
   728  000342  B005               	btfsc	_UARTinterruptState,0,c	;volatile
   729  000344  D002               	bra	u625
   730  000346  9EF2               	bcf	intcon,7,c	;volatile
   731  000348  D001               	bra	u626
   732  00034A                     u625:
   733  00034A  8EF2               	bsf	intcon,7,c	;volatile
   734  00034C                     u626:
   735                           
   736                           ;UART_PIC.c: 61: numTransmits++;
   737  00034C  2A3C               	incf	uartTransmitBlocking@numTransmits,f,c
   738  00034E                     l212:
   739  00034E  503A               	movf	uartTransmitBlocking@numBytes,w,c
   740  000350  5C3C               	subwf	uartTransmitBlocking@numTransmits,w,c
   741  000352  A0D8               	btfss	status,0,c
   742  000354  D7D9               	goto	l213
   743                           
   744                           ;UART_PIC.c: 65: }
   745                           ;UART_PIC.c: 68: UART -> _stateTX = UART_STATE_READY;
   746  000356  EE20 F008          	lfsr	2,8
   747  00035A  5045               	movf	_UART,w,c
   748  00035C  26D9               	addwf	fsr2l,f,c
   749  00035E  5046               	movf	_UART+1,w,c
   750  000360  22DA               	addwfc	fsr2h,f,c
   751  000362  0E01               	movlw	1
   752  000364  6EDF               	movwf	indf2,c
   753  000366  0012               	return		;funcret
   754  000368                     __end_of_uartTransmitBlocking:
   755                           	opt stack 0
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           prodh	equ	0xFF4
   761                           prodl	equ	0xFF3
   762                           intcon	equ	0xFF2
   763                           postinc0	equ	0xFEE
   764                           wreg	equ	0xFE8
   765                           postdec1	equ	0xFE5
   766                           fsr1l	equ	0xFE1
   767                           indf2	equ	0xFDF
   768                           fsr2h	equ	0xFDA
   769                           fsr2l	equ	0xFD9
   770                           status	equ	0xFD8
   771                           
   772 ;; *************** function _readKeyboard *****************
   773 ;; Defined at:
   774 ;;		line 14 in file "Keypad.c"
   775 ;; Parameters:    Size  Location     Type
   776 ;;		None
   777 ;; Auto vars:     Size  Location     Type
   778 ;;  i               1   21[COMRAM] unsigned char 
   779 ;; Return value:  Size  Location     Type
   780 ;;                  1    wreg      unsigned char 
   781 ;; Registers used:
   782 ;;		wreg, status,2, status,0, prodl, prodh
   783 ;; Tracked objects:
   784 ;;		On entry : 0/0
   785 ;;		On exit  : 0/0
   786 ;;		Unchanged: 0/0
   787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   788 ;;      Params:         0       0       0       0       0       0       0       0       0
   789 ;;      Locals:         1       0       0       0       0       0       0       0       0
   790 ;;      Temps:          0       0       0       0       0       0       0       0       0
   791 ;;      Totals:         1       0       0       0       0       0       0       0       0
   792 ;;Total ram usage:        1 bytes
   793 ;; Hardware stack levels used:    1
   794 ;; Hardware stack levels required when called:    1
   795 ;; This function calls:
   796 ;;		Nothing
   797 ;; This function is called by:
   798 ;;		_keypadRoutineUART
   799 ;;		_keypadRoutine
   800 ;;		_keypadRoutine_StateBased
   801 ;; This function uses a non-reentrant model
   802 ;;
   803                           
   804                           	psect	text4
   805  0003EC                     __ptext4:
   806                           	opt stack 0
   807  0003EC                     _readKeyboard:
   808                           	opt stack 28
   809                           
   810                           ;Keypad.c: 25: for(unsigned char i = 0; i < 4; i++){
   811                           
   812                           ;incstack = 0
   813  0003EC  0E00               	movlw	0
   814  0003EE  6E38               	movwf	readKeyboard@i,c
   815  0003F0                     l908:
   816  0003F0  0E03               	movlw	3
   817  0003F2  6438               	cpfsgt	readKeyboard@i,c
   818  0003F4  D001               	goto	l69
   819  0003F6  D032               	goto	u100
   820  0003F8                     l69:
   821                           
   822                           ;Keypad.c: 26: if(i == 0)
   823  0003F8  5038               	movf	readKeyboard@i,w,c
   824  0003FA  A4D8               	btfss	status,2,c
   825  0003FC  D002               	goto	l71
   826                           
   827                           ;Keypad.c: 27: LATB = 0x10;
   828  0003FE  0E10               	movlw	16
   829  000400  D010               	goto	L3
   830  000402                     l71:
   831                           
   832                           ;Keypad.c: 28: else if(i == 1)
   833  000402  0438               	decf	readKeyboard@i,w,c
   834  000404  A4D8               	btfss	status,2,c
   835  000406  D002               	goto	l73
   836                           
   837                           ;Keypad.c: 29: LATB = 0x20;
   838  000408  0E20               	movlw	32
   839  00040A  D00B               	goto	L3
   840  00040C                     l73:
   841                           
   842                           ;Keypad.c: 30: else if(i == 2)
   843  00040C  0E02               	movlw	2
   844  00040E  1838               	xorwf	readKeyboard@i,w,c
   845  000410  A4D8               	btfss	status,2,c
   846  000412  D002               	goto	l75
   847                           
   848                           ;Keypad.c: 31: LATB = 0x40;
   849  000414  0E40               	movlw	64
   850  000416  D005               	goto	L3
   851  000418                     l75:
   852                           
   853                           ;Keypad.c: 32: else if(i == 3)
   854  000418  0E03               	movlw	3
   855  00041A  1838               	xorwf	readKeyboard@i,w,c
   856  00041C  A4D8               	btfss	status,2,c
   857  00041E  D002               	goto	l77
   858                           
   859                           ;Keypad.c: 33: LATB = 0x80;
   860  000420  0E80               	movlw	128
   861  000422                     L3:
   862  000422  6E8A               	movwf	3978,c	;volatile
   863  000424                     l77:
   864                           
   865                           ;Keypad.c: 35: if(PORTBbits.RB0)
   866  000424  A081               	btfss	3969,0,c	;volatile
   867  000426  D004               	goto	l78
   868                           
   869                           ;Keypad.c: 36: return (i * 4U);
   870  000428  5038               	movf	readKeyboard@i,w,c
   871  00042A  0D04               	mullw	4
   872  00042C  50F3               	movf	prodl,w,c
   873  00042E  0012               	return	
   874  000430                     l78:
   875                           
   876                           ;Keypad.c: 37: if(PORTBbits.RB1)
   877  000430  A281               	btfss	3969,1,c	;volatile
   878  000432  D004               	goto	l80
   879                           
   880                           ;Keypad.c: 38: return (i * 4U) + 1U;
   881  000434  5038               	movf	readKeyboard@i,w,c
   882  000436  0D04               	mullw	4
   883  000438  28F3               	incf	prodl,w,c
   884  00043A  0012               	return	
   885  00043C                     l80:
   886                           
   887                           ;Keypad.c: 39: if(PORTBbits.RB2)
   888  00043C  A481               	btfss	3969,2,c	;volatile
   889  00043E  D005               	goto	l81
   890                           
   891                           ;Keypad.c: 40: return (i * 4U) + 2U;
   892  000440  5038               	movf	readKeyboard@i,w,c
   893  000442  0D04               	mullw	4
   894  000444  50F3               	movf	prodl,w,c
   895  000446  0F02               	addlw	2
   896  000448  0012               	return	
   897  00044A                     l81:
   898                           
   899                           ;Keypad.c: 41: if(PORTBbits.RB3)
   900  00044A  A681               	btfss	3969,3,c	;volatile
   901  00044C  D005               	goto	l82
   902                           
   903                           ;Keypad.c: 42: return (i * 4U) + 3U;
   904  00044E  5038               	movf	readKeyboard@i,w,c
   905  000450  0D04               	mullw	4
   906  000452  50F3               	movf	prodl,w,c
   907  000454  0F03               	addlw	3
   908  000456  0012               	return	
   909  000458                     l82:
   910  000458  2A38               	incf	readKeyboard@i,f,c
   911  00045A  D7CA               	goto	l908
   912  00045C                     u100:
   913                           
   914                           ;Keypad.c: 43: }
   915                           ;Keypad.c: 44: return 0xF0;
   916  00045C  0EF0               	movlw	240
   917  00045E  0012               	return	
   918  000460                     __end_of_readKeyboard:
   919                           	opt stack 0
   920                           tblptru	equ	0xFF8
   921                           tblptrh	equ	0xFF7
   922                           tblptrl	equ	0xFF6
   923                           tablat	equ	0xFF5
   924                           prodh	equ	0xFF4
   925                           prodl	equ	0xFF3
   926                           intcon	equ	0xFF2
   927                           postinc0	equ	0xFEE
   928                           wreg	equ	0xFE8
   929                           postdec1	equ	0xFE5
   930                           fsr1l	equ	0xFE1
   931                           indf2	equ	0xFDF
   932                           fsr2h	equ	0xFDA
   933                           fsr2l	equ	0xFD9
   934                           status	equ	0xFD8
   935                           
   936 ;; *************** function _UART_Init *****************
   937 ;; Defined at:
   938 ;;		line 200 in file "UART_PIC.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  baud            4   29[COMRAM] long 
   941 ;; Auto vars:     Size  Location     Type
   942 ;;		None
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      void 
   945 ;; Registers used:
   946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   952 ;;      Params:         4       0       0       0       0       0       0       0       0
   953 ;;      Locals:         0       0       0       0       0       0       0       0       0
   954 ;;      Temps:          0       4       0       0       0       0       0       0       0
   955 ;;      Totals:         4       4       0       0       0       0       0       0       0
   956 ;;Total ram usage:        8 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; Hardware stack levels required when called:    2
   959 ;; This function calls:
   960 ;;		___aldiv
   961 ;; This function is called by:
   962 ;;		_main
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text5
   967  000368                     __ptext5:
   968                           	opt stack 0
   969  000368                     _UART_Init:
   970                           	opt stack 28
   971                           
   972                           ;UART_PIC.c: 213: SPBRG = (unsigned char)((8000000 / (64 * baud)) - 1);
   973                           
   974                           ;incstack = 0
   975  000368  0E00               	movlw	0
   976  00036A  6E38               	movwf	___aldiv@dividend,c
   977  00036C  0E12               	movlw	18
   978  00036E  6E39               	movwf	___aldiv@dividend+1,c
   979  000370  0E7A               	movlw	122
   980  000372  6E3A               	movwf	___aldiv@dividend+2,c
   981  000374  0E00               	movlw	0
   982  000376  6E3B               	movwf	___aldiv@dividend+3,c
   983  000378  C040  F066         	movff	UART_Init@baud,??_UART_Init
   984  00037C  C041  F067         	movff	UART_Init@baud+1,??_UART_Init+1
   985  000380  C042  F068         	movff	UART_Init@baud+2,??_UART_Init+2
   986  000384  C043  F069         	movff	UART_Init@baud+3,??_UART_Init+3
   987  000388  0E06               	movlw	6
   988  00038A                     u805:
   989  00038A  90D8               	bcf	status,0,c
   990  00038C  0100               	movlb	0	; () banked
   991  00038E  3766               	rlcf	??_UART_Init& (0+255),f,b
   992  000390  3767               	rlcf	(??_UART_Init+1)& (0+255),f,b
   993  000392  3768               	rlcf	(??_UART_Init+2)& (0+255),f,b
   994  000394  3769               	rlcf	(??_UART_Init+3)& (0+255),f,b
   995  000396  2EE8               	decfsz	wreg,f,c
   996  000398  D7F8               	goto	u805
   997  00039A  C066  F03C         	movff	??_UART_Init,___aldiv@divisor
   998  00039E  C067  F03D         	movff	??_UART_Init+1,___aldiv@divisor+1
   999  0003A2  C068  F03E         	movff	??_UART_Init+2,___aldiv@divisor+2
  1000  0003A6  C069  F03F         	movff	??_UART_Init+3,___aldiv@divisor+3
  1001  0003AA  EC01  F001         	call	___aldiv	;wreg free
  1002  0003AE  0438               	decf	?___aldiv,w,c
  1003  0003B0  6EAF               	movwf	4015,c	;volatile
  1004                           
  1005                           ;UART_PIC.c: 216: TXSTAbits.TX9 = 0;
  1006  0003B2  9CAC               	bcf	4012,6,c	;volatile
  1007                           
  1008                           ;UART_PIC.c: 217: TXSTAbits.SYNC = 0;
  1009  0003B4  98AC               	bcf	4012,4,c	;volatile
  1010                           
  1011                           ;UART_PIC.c: 218: TXSTAbits.TXEN = 1;
  1012  0003B6  8AAC               	bsf	4012,5,c	;volatile
  1013                           
  1014                           ;UART_PIC.c: 221: RCSTAbits.RX9 = 0;
  1015  0003B8  9CAB               	bcf	4011,6,c	;volatile
  1016                           
  1017                           ;UART_PIC.c: 222: RCSTAbits.CREN = 1;
  1018  0003BA  88AB               	bsf	4011,4,c	;volatile
  1019                           
  1020                           ;UART_PIC.c: 225: UART -> _stateTX = UART_STATE_READY;
  1021  0003BC  EE20 F008          	lfsr	2,8
  1022  0003C0  5045               	movf	_UART,w,c
  1023  0003C2  26D9               	addwf	fsr2l,f,c
  1024  0003C4  5046               	movf	_UART+1,w,c
  1025  0003C6  22DA               	addwfc	fsr2h,f,c
  1026  0003C8  0E01               	movlw	1
  1027  0003CA  6EDF               	movwf	indf2,c
  1028                           
  1029                           ;UART_PIC.c: 226: UART -> _stateRX = UART_STATE_READY;
  1030  0003CC  EE20 F009          	lfsr	2,9
  1031  0003D0  5045               	movf	_UART,w,c
  1032  0003D2  26D9               	addwf	fsr2l,f,c
  1033  0003D4  5046               	movf	_UART+1,w,c
  1034  0003D6  22DA               	addwfc	fsr2h,f,c
  1035  0003D8  0E01               	movlw	1
  1036  0003DA  6EDF               	movwf	indf2,c
  1037                           
  1038                           ;UART_PIC.c: 229: uart._dataRX = arr_dataRX;
  1039  0003DC  0E06               	movlw	low _arr_dataRX
  1040  0003DE  6E1A               	movwf	_uart+4,c	;volatile
  1041  0003E0  0E00               	movlw	high _arr_dataRX
  1042  0003E2  6E1B               	movwf	_uart+5,c	;volatile
  1043                           
  1044                           ;UART_PIC.c: 232: TRISC6 = 0;
  1045  0003E4  9C94               	bcf	3988,6,c	;volatile
  1046                           
  1047                           ;UART_PIC.c: 233: TRISC7 = 1;
  1048  0003E6  8E94               	bsf	3988,7,c	;volatile
  1049                           
  1050                           ;UART_PIC.c: 236: RCSTAbits.SPEN = 1;
  1051  0003E8  8EAB               	bsf	4011,7,c	;volatile
  1052  0003EA  0012               	return		;funcret
  1053  0003EC                     __end_of_UART_Init:
  1054                           	opt stack 0
  1055                           tblptru	equ	0xFF8
  1056                           tblptrh	equ	0xFF7
  1057                           tblptrl	equ	0xFF6
  1058                           tablat	equ	0xFF5
  1059                           prodh	equ	0xFF4
  1060                           prodl	equ	0xFF3
  1061                           intcon	equ	0xFF2
  1062                           postinc0	equ	0xFEE
  1063                           wreg	equ	0xFE8
  1064                           postdec1	equ	0xFE5
  1065                           fsr1l	equ	0xFE1
  1066                           indf2	equ	0xFDF
  1067                           fsr2h	equ	0xFDA
  1068                           fsr2l	equ	0xFD9
  1069                           status	equ	0xFD8
  1070                           
  1071 ;; *************** function ___aldiv *****************
  1072 ;; Defined at:
  1073 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
  1074 ;; Parameters:    Size  Location     Type
  1075 ;;  dividend        4   21[COMRAM] long 
  1076 ;;  divisor         4   25[COMRAM] long 
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  quotient        4    2[BANK0 ] long 
  1079 ;;  sign            1    1[BANK0 ] unsigned char 
  1080 ;;  counter         1    0[BANK0 ] unsigned char 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  4   21[COMRAM] long 
  1083 ;; Registers used:
  1084 ;;		wreg, status,2, status,0
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1090 ;;      Params:         8       0       0       0       0       0       0       0       0
  1091 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1092 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1093 ;;      Totals:         8       6       0       0       0       0       0       0       0
  1094 ;;Total ram usage:       14 bytes
  1095 ;; Hardware stack levels used:    1
  1096 ;; Hardware stack levels required when called:    1
  1097 ;; This function calls:
  1098 ;;		Nothing
  1099 ;; This function is called by:
  1100 ;;		_UART_Init
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           	psect	text6
  1105  000202                     __ptext6:
  1106                           	opt stack 0
  1107  000202                     ___aldiv:
  1108                           	opt stack 28
  1109                           
  1110                           ;incstack = 0
  1111  000202  0E00               	movlw	0
  1112  000204  0100               	movlb	0	; () banked
  1113  000206  6F61               	movwf	___aldiv@sign& (0+255),b
  1114                           
  1115                           ; BSR set to: 0
  1116  000208  AE3F               	btfss	___aldiv@divisor+3,7,c
  1117  00020A  D00A               	goto	l340
  1118                           
  1119                           ; BSR set to: 0
  1120  00020C  1E3F               	comf	___aldiv@divisor+3,f,c
  1121  00020E  1E3E               	comf	___aldiv@divisor+2,f,c
  1122  000210  1E3D               	comf	___aldiv@divisor+1,f,c
  1123  000212  6C3C               	negf	___aldiv@divisor,c
  1124  000214  0E00               	movlw	0
  1125  000216  223D               	addwfc	___aldiv@divisor+1,f,c
  1126  000218  223E               	addwfc	___aldiv@divisor+2,f,c
  1127  00021A  223F               	addwfc	___aldiv@divisor+3,f,c
  1128                           
  1129                           ; BSR set to: 0
  1130  00021C  0E01               	movlw	1
  1131  00021E  6F61               	movwf	___aldiv@sign& (0+255),b
  1132  000220                     l340:
  1133                           
  1134                           ; BSR set to: 0
  1135                           
  1136                           ; BSR set to: 0
  1137  000220  AE3B               	btfss	___aldiv@dividend+3,7,c
  1138  000222  D00A               	goto	l341
  1139                           
  1140                           ; BSR set to: 0
  1141  000224  1E3B               	comf	___aldiv@dividend+3,f,c
  1142  000226  1E3A               	comf	___aldiv@dividend+2,f,c
  1143  000228  1E39               	comf	___aldiv@dividend+1,f,c
  1144  00022A  6C38               	negf	___aldiv@dividend,c
  1145  00022C  0E00               	movlw	0
  1146  00022E  2239               	addwfc	___aldiv@dividend+1,f,c
  1147  000230  223A               	addwfc	___aldiv@dividend+2,f,c
  1148  000232  223B               	addwfc	___aldiv@dividend+3,f,c
  1149                           
  1150                           ; BSR set to: 0
  1151  000234  0E01               	movlw	1
  1152  000236  1B61               	xorwf	___aldiv@sign& (0+255),f,b
  1153  000238                     l341:
  1154                           
  1155                           ; BSR set to: 0
  1156                           
  1157                           ; BSR set to: 0
  1158  000238  0E00               	movlw	0
  1159  00023A  6F62               	movwf	___aldiv@quotient& (0+255),b
  1160  00023C  0E00               	movlw	0
  1161  00023E  6F63               	movwf	(___aldiv@quotient+1)& (0+255),b
  1162  000240  0E00               	movlw	0
  1163  000242  6F64               	movwf	(___aldiv@quotient+2)& (0+255),b
  1164  000244  0E00               	movlw	0
  1165  000246  6F65               	movwf	(___aldiv@quotient+3)& (0+255),b
  1166                           
  1167                           ; BSR set to: 0
  1168  000248  503C               	movf	___aldiv@divisor,w,c
  1169  00024A  103D               	iorwf	___aldiv@divisor+1,w,c
  1170  00024C  103E               	iorwf	___aldiv@divisor+2,w,c
  1171  00024E  103F               	iorwf	___aldiv@divisor+3,w,c
  1172  000250  B4D8               	btfsc	status,2,c
  1173  000252  D02A               	goto	l348
  1174                           
  1175                           ; BSR set to: 0
  1176  000254  0E01               	movlw	1
  1177  000256  6F60               	movwf	___aldiv@counter& (0+255),b
  1178  000258  D006               	goto	l343
  1179  00025A                     
  1180                           ; BSR set to: 0
  1181                           
  1182                           ; BSR set to: 0
  1183  00025A  90D8               	bcf	status,0,c
  1184  00025C  363C               	rlcf	___aldiv@divisor,f,c
  1185  00025E  363D               	rlcf	___aldiv@divisor+1,f,c
  1186  000260  363E               	rlcf	___aldiv@divisor+2,f,c
  1187  000262  363F               	rlcf	___aldiv@divisor+3,f,c
  1188  000264  2B60               	incf	___aldiv@counter& (0+255),f,b
  1189  000266                     l343:
  1190                           
  1191                           ; BSR set to: 0
  1192                           
  1193                           ; BSR set to: 0
  1194  000266  AE3F               	btfss	___aldiv@divisor+3,7,c
  1195  000268  D7F8               	goto	l344
  1196  00026A                     u770:
  1197                           
  1198                           ; BSR set to: 0
  1199                           
  1200                           ; BSR set to: 0
  1201                           
  1202                           ; BSR set to: 0
  1203  00026A  90D8               	bcf	status,0,c
  1204  00026C  3762               	rlcf	___aldiv@quotient& (0+255),f,b
  1205  00026E  3763               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1206  000270  3764               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1207  000272  3765               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1208                           
  1209                           ; BSR set to: 0
  1210  000274  503C               	movf	___aldiv@divisor,w,c
  1211  000276  5C38               	subwf	___aldiv@dividend,w,c
  1212  000278  503D               	movf	___aldiv@divisor+1,w,c
  1213  00027A  5839               	subwfb	___aldiv@dividend+1,w,c
  1214  00027C  503E               	movf	___aldiv@divisor+2,w,c
  1215  00027E  583A               	subwfb	___aldiv@dividend+2,w,c
  1216  000280  503F               	movf	___aldiv@divisor+3,w,c
  1217  000282  583B               	subwfb	___aldiv@dividend+3,w,c
  1218  000284  A0D8               	btfss	status,0,c
  1219  000286  D009               	goto	l347
  1220                           
  1221                           ; BSR set to: 0
  1222  000288  503C               	movf	___aldiv@divisor,w,c
  1223  00028A  5E38               	subwf	___aldiv@dividend,f,c
  1224  00028C  503D               	movf	___aldiv@divisor+1,w,c
  1225  00028E  5A39               	subwfb	___aldiv@dividend+1,f,c
  1226  000290  503E               	movf	___aldiv@divisor+2,w,c
  1227  000292  5A3A               	subwfb	___aldiv@dividend+2,f,c
  1228  000294  503F               	movf	___aldiv@divisor+3,w,c
  1229  000296  5A3B               	subwfb	___aldiv@dividend+3,f,c
  1230                           
  1231                           ; BSR set to: 0
  1232  000298  8162               	bsf	___aldiv@quotient& (0+255),0,b
  1233  00029A                     l347:
  1234                           
  1235                           ; BSR set to: 0
  1236                           
  1237                           ; BSR set to: 0
  1238  00029A  90D8               	bcf	status,0,c
  1239  00029C  323F               	rrcf	___aldiv@divisor+3,f,c
  1240  00029E  323E               	rrcf	___aldiv@divisor+2,f,c
  1241  0002A0  323D               	rrcf	___aldiv@divisor+1,f,c
  1242  0002A2  323C               	rrcf	___aldiv@divisor,f,c
  1243                           
  1244                           ; BSR set to: 0
  1245  0002A4  2F60               	decfsz	___aldiv@counter& (0+255),f,b
  1246  0002A6  D7E1               	goto	u770
  1247  0002A8                     l348:
  1248                           
  1249                           ; BSR set to: 0
  1250                           
  1251                           ; BSR set to: 0
  1252                           
  1253                           ; BSR set to: 0
  1254  0002A8  5161               	movf	___aldiv@sign& (0+255),w,b
  1255  0002AA  B4D8               	btfsc	status,2,c
  1256  0002AC  D008               	goto	l349
  1257                           
  1258                           ; BSR set to: 0
  1259  0002AE  1F65               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1260  0002B0  1F64               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1261  0002B2  1F63               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1262  0002B4  6D62               	negf	___aldiv@quotient& (0+255),b
  1263  0002B6  0E00               	movlw	0
  1264  0002B8  2363               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1265  0002BA  2364               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1266  0002BC  2365               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1267  0002BE                     l349:
  1268                           
  1269                           ; BSR set to: 0
  1270                           
  1271                           ; BSR set to: 0
  1272  0002BE  C062  F038         	movff	___aldiv@quotient,?___aldiv
  1273  0002C2  C063  F039         	movff	___aldiv@quotient+1,?___aldiv+1
  1274  0002C6  C064  F03A         	movff	___aldiv@quotient+2,?___aldiv+2
  1275  0002CA  C065  F03B         	movff	___aldiv@quotient+3,?___aldiv+3
  1276  0002CE  0012               	return	
  1277  0002D0                     __end_of___aldiv:
  1278                           	opt stack 0
  1279                           tblptru	equ	0xFF8
  1280                           tblptrh	equ	0xFF7
  1281                           tblptrl	equ	0xFF6
  1282                           tablat	equ	0xFF5
  1283                           prodh	equ	0xFF4
  1284                           prodl	equ	0xFF3
  1285                           intcon	equ	0xFF2
  1286                           postinc0	equ	0xFEE
  1287                           wreg	equ	0xFE8
  1288                           postdec1	equ	0xFE5
  1289                           fsr1l	equ	0xFE1
  1290                           indf2	equ	0xFDF
  1291                           fsr2h	equ	0xFDA
  1292                           fsr2l	equ	0xFD9
  1293                           status	equ	0xFD8
  1294                           
  1295 ;; *************** function _interruptHandlerUART *****************
  1296 ;; Defined at:
  1297 ;;		line 10 in file "interruptUART.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;		None
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;		None
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  1    wreg      void 
  1304 ;; Registers used:
  1305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1311 ;;      Params:         0       0       0       0       0       0       0       0       0
  1312 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1313 ;;      Temps:         21       0       0       0       0       0       0       0       0
  1314 ;;      Totals:        21       0       0       0       0       0       0       0       0
  1315 ;;Total ram usage:       21 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; This function calls:
  1318 ;;		Nothing
  1319 ;; This function is called by:
  1320 ;;		Interrupt level 2
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           	psect	intcode
  1325  000008                     __pintcode:
  1326                           	opt stack 0
  1327  000008                     _interruptHandlerUART:
  1328                           	opt stack 28
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;incstack = 0
  1332  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1333  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           prodh	equ	0xFF4
  1339                           prodl	equ	0xFF3
  1340                           intcon	equ	0xFF2
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           postdec1	equ	0xFE5
  1344                           fsr1l	equ	0xFE1
  1345                           indf2	equ	0xFDF
  1346                           fsr2h	equ	0xFDA
  1347                           fsr2l	equ	0xFD9
  1348                           status	equ	0xFD8
  1349                           
  1350                           	psect	intcode_body
  1351  000012                     __pintcode_body:
  1352                           	opt stack 28
  1353  000012                     int_func:
  1354                           	opt stack 28
  1355  000012  0006               	pop		; remove dummy address from shadow register refresh
  1356  000014  CFFA F026          	movff	pclath,??_interruptHandlerUART+3
  1357  000018  CFFB F027          	movff	pclatu,??_interruptHandlerUART+4
  1358  00001C  CFE9 F028          	movff	fsr0l,??_interruptHandlerUART+5
  1359  000020  CFEA F029          	movff	fsr0h,??_interruptHandlerUART+6
  1360  000024  CFE1 F02A          	movff	fsr1l,??_interruptHandlerUART+7
  1361  000028  CFE2 F02B          	movff	fsr1h,??_interruptHandlerUART+8
  1362  00002C  CFD9 F02C          	movff	fsr2l,??_interruptHandlerUART+9
  1363  000030  CFDA F02D          	movff	fsr2h,??_interruptHandlerUART+10
  1364  000034  CFF3 F02E          	movff	prodl,??_interruptHandlerUART+11
  1365  000038  CFF4 F02F          	movff	prodh,??_interruptHandlerUART+12
  1366  00003C  CFF6 F030          	movff	tblptrl,??_interruptHandlerUART+13
  1367  000040  CFF7 F031          	movff	tblptrh,??_interruptHandlerUART+14
  1368  000044  CFF8 F032          	movff	tblptru,??_interruptHandlerUART+15
  1369  000048  CFF5 F033          	movff	tablat,??_interruptHandlerUART+16
  1370  00004C  C04A  F034         	movff	btemp,??_interruptHandlerUART+17
  1371  000050  C04B  F035         	movff	btemp+1,??_interruptHandlerUART+18
  1372  000054  C04C  F036         	movff	btemp+2,??_interruptHandlerUART+19
  1373  000058  C04D  F037         	movff	btemp+3,??_interruptHandlerUART+20
  1374                           
  1375                           ;interruptUART.c: 17: if(TXIF){
  1376  00005C  A89E               	btfss	3998,4,c	;volatile
  1377  00005E  D044               	goto	i2l277
  1378                           
  1379                           ;interruptUART.c: 19: UARTinterruptState = INTCONbits.GIE;
  1380  000060  0E00               	movlw	0
  1381  000062  BEF2               	btfsc	intcon,7,c	;volatile
  1382  000064  0E01               	movlw	1
  1383  000066  6E05               	movwf	_UARTinterruptState,c	;volatile
  1384                           
  1385                           ;interruptUART.c: 20: (INTCONbits.GIE = 0);
  1386  000068  9EF2               	bcf	intcon,7,c	;volatile
  1387                           
  1388                           ;interruptUART.c: 21: TXREG = UART -> _dataTX[UART -> _numTransmits];
  1389  00006A  EE20 F003          	lfsr	2,3
  1390  00006E  5045               	movf	_UART,w,c
  1391  000070  26D9               	addwf	fsr2l,f,c
  1392  000072  5046               	movf	_UART+1,w,c
  1393  000074  22DA               	addwfc	fsr2h,f,c
  1394  000076  50DF               	movf	indf2,w,c
  1395  000078  6E23               	movwf	??_interruptHandlerUART& (0+255),c
  1396  00007A  5023               	movf	??_interruptHandlerUART,w,c
  1397  00007C  0D01               	mullw	1
  1398  00007E  C045  FFD9         	movff	_UART,fsr2l
  1399  000082  C046  FFDA         	movff	_UART+1,fsr2h
  1400  000086  CFDE F024          	movff	postinc2,??_interruptHandlerUART+1
  1401  00008A  CFDD F025          	movff	postdec2,??_interruptHandlerUART+2
  1402  00008E  50F3               	movf	prodl,w,c
  1403  000090  2424               	addwf	??_interruptHandlerUART+1,w,c
  1404  000092  6ED9               	movwf	fsr2l,c
  1405  000094  50F4               	movf	prodh,w,c
  1406  000096  2025               	addwfc	??_interruptHandlerUART+2,w,c
  1407  000098  6EDA               	movwf	fsr2h,c
  1408  00009A  50DF               	movf	indf2,w,c
  1409  00009C  6EAD               	movwf	4013,c	;volatile
  1410                           
  1411                           ;interruptUART.c: 22: INTCONbits.GIE = UARTinterruptState;
  1412  00009E  B005               	btfsc	_UARTinterruptState,0,c	;volatile
  1413  0000A0  D002               	bra	i2u52_45
  1414  0000A2  9EF2               	bcf	intcon,7,c	;volatile
  1415  0000A4  D001               	bra	i2u52_46
  1416  0000A6                     i2u52_45:
  1417  0000A6  8EF2               	bsf	intcon,7,c	;volatile
  1418  0000A8                     i2u52_46:
  1419                           
  1420                           ;interruptUART.c: 24: UART -> _numTransmits++;
  1421  0000A8  EE20 F003          	lfsr	2,3
  1422  0000AC  5045               	movf	_UART,w,c
  1423  0000AE  26D9               	addwf	fsr2l,f,c
  1424  0000B0  5046               	movf	_UART+1,w,c
  1425  0000B2  22DA               	addwfc	fsr2h,f,c
  1426  0000B4  2ADF               	incf	indf2,f,c
  1427                           
  1428                           ;interruptUART.c: 27: if((UART -> _numTransmits) == (UART -> _numBytesTX)){
  1429  0000B6  EE20 F002          	lfsr	2,2
  1430  0000BA  5045               	movf	_UART,w,c
  1431  0000BC  26D9               	addwf	fsr2l,f,c
  1432  0000BE  5046               	movf	_UART+1,w,c
  1433  0000C0  22DA               	addwfc	fsr2h,f,c
  1434  0000C2  EE10 F003          	lfsr	1,3
  1435  0000C6  5045               	movf	_UART,w,c
  1436  0000C8  26E1               	addwf	fsr1l,f,c
  1437  0000CA  5046               	movf	_UART+1,w,c
  1438  0000CC  22E2               	addwfc	fsr1h,f,c
  1439  0000CE  50DE               	movf	postinc2,w,c
  1440  0000D0  18E6               	xorwf	postinc1,w,c
  1441  0000D2  A4D8               	btfss	status,2,c
  1442  0000D4  D009               	goto	i2l277
  1443                           
  1444                           ;interruptUART.c: 28: TXIE = 0;
  1445  0000D6  989D               	bcf	3997,4,c	;volatile
  1446                           
  1447                           ;interruptUART.c: 31: UART -> _stateTX = UART_STATE_READY;
  1448  0000D8  EE20 F008          	lfsr	2,8
  1449  0000DC  5045               	movf	_UART,w,c
  1450  0000DE  26D9               	addwf	fsr2l,f,c
  1451  0000E0  5046               	movf	_UART+1,w,c
  1452  0000E2  22DA               	addwfc	fsr2h,f,c
  1453  0000E4  0E01               	movlw	1
  1454  0000E6  6EDF               	movwf	indf2,c
  1455  0000E8                     i2l277:
  1456                           
  1457                           ;interruptUART.c: 32: }
  1458                           ;interruptUART.c: 33: }
  1459                           ;interruptUART.c: 36: if(RCIF){
  1460  0000E8  AA9E               	btfss	3998,5,c	;volatile
  1461  0000EA  D065               	goto	i2l283
  1462                           
  1463                           ;interruptUART.c: 39: if(RCSTAbits.FERR){
  1464  0000EC  A4AB               	btfss	4011,2,c	;volatile
  1465  0000EE  D008               	goto	i2l279
  1466                           
  1467                           ;interruptUART.c: 43: UART -> _lastReceiveFERR = 1;
  1468  0000F0  EE20 F00A          	lfsr	2,10
  1469  0000F4  5045               	movf	_UART,w,c
  1470  0000F6  26D9               	addwf	fsr2l,f,c
  1471  0000F8  5046               	movf	_UART+1,w,c
  1472  0000FA  22DA               	addwfc	fsr2h,f,c
  1473  0000FC  0E01               	movlw	1
  1474  0000FE  D007               	goto	L4
  1475  000100                     i2l279:
  1476                           
  1477                           ;interruptUART.c: 45: else{
  1478                           ;interruptUART.c: 46: UART -> _lastReceiveFERR = 0;
  1479  000100  EE20 F00A          	lfsr	2,10
  1480  000104  5045               	movf	_UART,w,c
  1481  000106  26D9               	addwf	fsr2l,f,c
  1482  000108  5046               	movf	_UART+1,w,c
  1483  00010A  22DA               	addwfc	fsr2h,f,c
  1484  00010C  0E00               	movlw	0
  1485  00010E                     L4:
  1486  00010E  6EDF               	movwf	indf2,c
  1487                           
  1488                           ;interruptUART.c: 47: }
  1489                           ;interruptUART.c: 50: UARTinterruptState = INTCONbits.GIE;
  1490  000110  0E00               	movlw	0
  1491  000112  BEF2               	btfsc	intcon,7,c	;volatile
  1492  000114  0E01               	movlw	1
  1493  000116  6E05               	movwf	_UARTinterruptState,c	;volatile
  1494                           
  1495                           ;interruptUART.c: 51: (INTCONbits.GIE = 0);
  1496  000118  9EF2               	bcf	intcon,7,c	;volatile
  1497                           
  1498                           ;interruptUART.c: 52: UART -> _dataRX[UART -> _numReceives] = RCREG;
  1499  00011A  EE20 F007          	lfsr	2,7
  1500  00011E  5045               	movf	_UART,w,c
  1501  000120  26D9               	addwf	fsr2l,f,c
  1502  000122  5046               	movf	_UART+1,w,c
  1503  000124  22DA               	addwfc	fsr2h,f,c
  1504  000126  50DF               	movf	indf2,w,c
  1505  000128  6E23               	movwf	??_interruptHandlerUART& (0+255),c
  1506  00012A  5023               	movf	??_interruptHandlerUART,w,c
  1507  00012C  0D01               	mullw	1
  1508  00012E  EE20 F004          	lfsr	2,4
  1509  000132  5045               	movf	_UART,w,c
  1510  000134  26D9               	addwf	fsr2l,f,c
  1511  000136  5046               	movf	_UART+1,w,c
  1512  000138  22DA               	addwfc	fsr2h,f,c
  1513  00013A  CFDE F024          	movff	postinc2,??_interruptHandlerUART+1
  1514  00013E  CFDD F025          	movff	postdec2,??_interruptHandlerUART+2
  1515  000142  50F3               	movf	prodl,w,c
  1516  000144  2424               	addwf	??_interruptHandlerUART+1,w,c
  1517  000146  6ED9               	movwf	fsr2l,c
  1518  000148  50F4               	movf	prodh,w,c
  1519  00014A  2025               	addwfc	??_interruptHandlerUART+2,w,c
  1520  00014C  6EDA               	movwf	fsr2h,c
  1521  00014E  CFAE FFDF          	movff	4014,indf2	;volatile
  1522                           
  1523                           ;interruptUART.c: 53: INTCONbits.GIE = UARTinterruptState;
  1524  000152  B005               	btfsc	_UARTinterruptState,0,c	;volatile
  1525  000154  D002               	bra	i2u56_45
  1526  000156  9EF2               	bcf	intcon,7,c	;volatile
  1527  000158  D001               	bra	i2u56_46
  1528  00015A                     i2u56_45:
  1529  00015A  8EF2               	bsf	intcon,7,c	;volatile
  1530  00015C                     i2u56_46:
  1531                           
  1532                           ;interruptUART.c: 57: if(RCSTAbits.OERR){
  1533  00015C  A2AB               	btfss	4011,1,c	;volatile
  1534  00015E  D003               	goto	i2l281
  1535                           
  1536                           ;interruptUART.c: 59: RCSTAbits.CREN = 0;
  1537  000160  98AB               	bcf	4011,4,c	;volatile
  1538                           
  1539                           ;interruptUART.c: 60: RCSTAbits.CREN = 1;
  1540  000162  88AB               	bsf	4011,4,c	;volatile
  1541                           
  1542                           ;interruptUART.c: 61: }
  1543  000164  D008               	goto	i2l282
  1544  000166                     i2l281:
  1545                           
  1546                           ;interruptUART.c: 62: else{
  1547                           ;interruptUART.c: 63: UART -> _lastReceiveOERR = 0;
  1548  000166  EE20 F00B          	lfsr	2,11
  1549  00016A  5045               	movf	_UART,w,c
  1550  00016C  26D9               	addwf	fsr2l,f,c
  1551  00016E  5046               	movf	_UART+1,w,c
  1552  000170  22DA               	addwfc	fsr2h,f,c
  1553  000172  0E00               	movlw	0
  1554  000174  6EDF               	movwf	indf2,c
  1555  000176                     i2l282:
  1556                           
  1557                           ;interruptUART.c: 64: }
  1558                           ;interruptUART.c: 66: UART -> _numReceives++;
  1559  000176  EE20 F007          	lfsr	2,7
  1560  00017A  5045               	movf	_UART,w,c
  1561  00017C  26D9               	addwf	fsr2l,f,c
  1562  00017E  5046               	movf	_UART+1,w,c
  1563  000180  22DA               	addwfc	fsr2h,f,c
  1564  000182  2ADF               	incf	indf2,f,c
  1565                           
  1566                           ;interruptUART.c: 69: if(UART -> _numReceives >= UART -> _numBytesRX){
  1567  000184  EE20 F006          	lfsr	2,6
  1568  000188  5045               	movf	_UART,w,c
  1569  00018A  26D9               	addwf	fsr2l,f,c
  1570  00018C  5046               	movf	_UART+1,w,c
  1571  00018E  22DA               	addwfc	fsr2h,f,c
  1572  000190  EE10 F007          	lfsr	1,7
  1573  000194  5045               	movf	_UART,w,c
  1574  000196  26E1               	addwf	fsr1l,f,c
  1575  000198  5046               	movf	_UART+1,w,c
  1576  00019A  22E2               	addwfc	fsr1h,f,c
  1577  00019C  50DE               	movf	postinc2,w,c
  1578  00019E  5CE6               	subwf	postinc1,w,c
  1579  0001A0  A0D8               	btfss	status,0,c
  1580  0001A2  D009               	goto	i2l283
  1581                           
  1582                           ;interruptUART.c: 70: RCIE = 0;
  1583  0001A4  9A9D               	bcf	3997,5,c	;volatile
  1584                           
  1585                           ;interruptUART.c: 73: UART -> _stateRX = UART_STATE_READY;
  1586  0001A6  EE20 F009          	lfsr	2,9
  1587  0001AA  5045               	movf	_UART,w,c
  1588  0001AC  26D9               	addwf	fsr2l,f,c
  1589  0001AE  5046               	movf	_UART+1,w,c
  1590  0001B0  22DA               	addwfc	fsr2h,f,c
  1591  0001B2  0E01               	movlw	1
  1592  0001B4  6EDF               	movwf	indf2,c
  1593  0001B6                     i2l283:
  1594  0001B6  C037  F04D         	movff	??_interruptHandlerUART+20,btemp+3
  1595  0001BA  C036  F04C         	movff	??_interruptHandlerUART+19,btemp+2
  1596  0001BE  C035  F04B         	movff	??_interruptHandlerUART+18,btemp+1
  1597  0001C2  C034  F04A         	movff	??_interruptHandlerUART+17,btemp
  1598  0001C6  C033  FFF5         	movff	??_interruptHandlerUART+16,tablat
  1599  0001CA  C032  FFF8         	movff	??_interruptHandlerUART+15,tblptru
  1600  0001CE  C031  FFF7         	movff	??_interruptHandlerUART+14,tblptrh
  1601  0001D2  C030  FFF6         	movff	??_interruptHandlerUART+13,tblptrl
  1602  0001D6  C02F  FFF4         	movff	??_interruptHandlerUART+12,prodh
  1603  0001DA  C02E  FFF3         	movff	??_interruptHandlerUART+11,prodl
  1604  0001DE  C02D  FFDA         	movff	??_interruptHandlerUART+10,fsr2h
  1605  0001E2  C02C  FFD9         	movff	??_interruptHandlerUART+9,fsr2l
  1606  0001E6  C02B  FFE2         	movff	??_interruptHandlerUART+8,fsr1h
  1607  0001EA  C02A  FFE1         	movff	??_interruptHandlerUART+7,fsr1l
  1608  0001EE  C029  FFEA         	movff	??_interruptHandlerUART+6,fsr0h
  1609  0001F2  C028  FFE9         	movff	??_interruptHandlerUART+5,fsr0l
  1610  0001F6  C027  FFFB         	movff	??_interruptHandlerUART+4,pclatu
  1611  0001FA  C026  FFFA         	movff	??_interruptHandlerUART+3,pclath
  1612  0001FE  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1613  000200  0011               	retfie		f
  1614  000202                     __end_of_interruptHandlerUART:
  1615                           	opt stack 0
  1616  0000                     pclatu	equ	0xFFB
  1617                           pclath	equ	0xFFA
  1618                           tblptru	equ	0xFF8
  1619                           tblptrh	equ	0xFF7
  1620                           tblptrl	equ	0xFF6
  1621                           tablat	equ	0xFF5
  1622                           prodh	equ	0xFF4
  1623                           prodl	equ	0xFF3
  1624                           intcon	equ	0xFF2
  1625                           postinc0	equ	0xFEE
  1626                           fsr0h	equ	0xFEA
  1627                           fsr0l	equ	0xFE9
  1628                           wreg	equ	0xFE8
  1629                           postinc1	equ	0xFE6
  1630                           postdec1	equ	0xFE5
  1631                           fsr1h	equ	0xFE2
  1632                           fsr1l	equ	0xFE1
  1633                           indf2	equ	0xFDF
  1634                           postinc2	equ	0xFDE
  1635                           postdec2	equ	0xFDD
  1636                           fsr2h	equ	0xFDA
  1637                           fsr2l	equ	0xFD9
  1638                           status	equ	0xFD8
  1639                           pclatu	equ	0xFFB
  1640                           pclath	equ	0xFFA
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           prodh	equ	0xFF4
  1646                           prodl	equ	0xFF3
  1647                           intcon	equ	0xFF2
  1648                           postinc0	equ	0xFEE
  1649                           fsr0h	equ	0xFEA
  1650                           fsr0l	equ	0xFE9
  1651                           wreg	equ	0xFE8
  1652                           postinc1	equ	0xFE6
  1653                           postdec1	equ	0xFE5
  1654                           fsr1h	equ	0xFE2
  1655                           fsr1l	equ	0xFE1
  1656                           indf2	equ	0xFDF
  1657                           postinc2	equ	0xFDE
  1658                           postdec2	equ	0xFDD
  1659                           fsr2h	equ	0xFDA
  1660                           fsr2l	equ	0xFD9
  1661                           status	equ	0xFD8
  1662                           
  1663                           	psect	rparam
  1664  0000                     pclatu	equ	0xFFB
  1665                           pclath	equ	0xFFA
  1666                           tblptru	equ	0xFF8
  1667                           tblptrh	equ	0xFF7
  1668                           tblptrl	equ	0xFF6
  1669                           tablat	equ	0xFF5
  1670                           prodh	equ	0xFF4
  1671                           prodl	equ	0xFF3
  1672                           intcon	equ	0xFF2
  1673                           postinc0	equ	0xFEE
  1674                           fsr0h	equ	0xFEA
  1675                           fsr0l	equ	0xFE9
  1676                           wreg	equ	0xFE8
  1677                           postinc1	equ	0xFE6
  1678                           postdec1	equ	0xFE5
  1679                           fsr1h	equ	0xFE2
  1680                           fsr1l	equ	0xFE1
  1681                           indf2	equ	0xFDF
  1682                           postinc2	equ	0xFDE
  1683                           postdec2	equ	0xFDD
  1684                           fsr2h	equ	0xFDA
  1685                           fsr2l	equ	0xFD9
  1686                           status	equ	0xFD8
  1687                           
  1688                           	psect	temp
  1689  00004A                     btemp:
  1690                           	opt stack 0
  1691  00004A                     	ds	1
  1692  0000                     int$flags	set	btemp
  1693  0000                     wtemp6	set	btemp+1
  1694                           pclatu	equ	0xFFB
  1695                           pclath	equ	0xFFA
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           prodh	equ	0xFF4
  1701                           prodl	equ	0xFF3
  1702                           intcon	equ	0xFF2
  1703                           postinc0	equ	0xFEE
  1704                           fsr0h	equ	0xFEA
  1705                           fsr0l	equ	0xFE9
  1706                           wreg	equ	0xFE8
  1707                           postinc1	equ	0xFE6
  1708                           postdec1	equ	0xFE5
  1709                           fsr1h	equ	0xFE2
  1710                           fsr1l	equ	0xFE1
  1711                           indf2	equ	0xFDF
  1712                           postinc2	equ	0xFDE
  1713                           postdec2	equ	0xFDD
  1714                           fsr2h	equ	0xFDA
  1715                           fsr2l	equ	0xFD9
  1716                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     34      73
    BANK0           160     10      10
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    uartTransmitBlocking@data	PTR unsigned char  size(2) Largest target is 1
		 -> Keypad@dataEnd(COMRAM[1]), Keypad@dataOut(COMRAM[1]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(COMRAM[12]), 

    S21$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    S21$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_UART_Init
    _keypadRoutineUART->_uartTransmitBlocking
    _UART_Init->___aldiv

Critical Paths under _interruptHandlerUART in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _interruptHandlerUART in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandlerUART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandlerUART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandlerUART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandlerUART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandlerUART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandlerUART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandlerUART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1594
                                             33 COMRAM     1     1      0
                          _UART_Init
                  _keypadRoutineUART
                      _machineConfig
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keypadRoutineUART                                    1     1      0     848
                                             26 COMRAM     1     1      0
                       _readKeyboard
               _uartTransmitBlocking
 ---------------------------------------------------------------------------------
 (2) _uartTransmitBlocking                                 5     2      3     698
                                             21 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _readKeyboard                                         1     1      0     150
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            8     4      4     746
                                             29 COMRAM     4     0      4
                                              6 BANK0      4     4      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                             21 COMRAM     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _interruptHandlerUART                                21    21      0       0
                                              0 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _keypadRoutineUART
     _readKeyboard
     _uartTransmitBlocking
   _machineConfig

 _interruptHandlerUART (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A       A       5        6.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     22      49       1       77.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      53      20        0.0%
DATA                 0      0      53       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 16 14:37:17 2018

                              l33 052C                                l71 0402  
                              l80 043C                                l81 044A  
                              l73 040C                                l82 0458  
                              l75 0418                                l77 0424  
                              l69 03F8                                l78 0430  
                     __CFG_BOR$ON 000000                       __CFG_BORV$3 000000  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                             l212 034E                               l213 0308  
                             l133 0498                               l134 04A8  
                             l340 0220                               l341 0238  
                             l343 0266                               l344 025A  
                             l347 029A                               l348 02A8  
                             l349 02BE                               l908 03F0  
                    __CFG_CPB$OFF 000000                               u100 045C  
                             u600 0310                               u610 031C  
                             u602 0312                      __CFG_CPD$OFF 000000  
                             u612 031E                               u625 034A  
                             u626 034C                               u805 038A  
                             u817 051E                               u770 026A  
                             u827 0474                               u837 02FE  
                  ?_machineConfig 0023                               wreg 000FE8  
    uartTransmitBlocking@numBytes 003A                      __CFG_LVP$OFF 000000  
                    __CFG_WDT$OFF 000000                              l1328 0308  
    __end_of_uartTransmitBlocking 0368                              _ADIE 007CEE  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _PEIE 007F96  
                            _RCIE 007CED                              _RCIF 007CF5  
                            _UART 0045                              _TRMT 007D61  
                            _TXIE 007CEC                              _TXIF 007CF4  
                            _main 04FE                              _uart 0016  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 004A  
                            prodh 000FF4                              prodl 000FF3  
                            start 000E                     __CFG_IESO$OFF 000000  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000000  
                   __CFG_PLLDIV$5 000000                    __CFG_CCP2MX$ON 000000  
                 __end_of___aldiv 02D0                             ?_main 0023  
                           i2l281 0166                             i2l282 0176  
                           i2l283 01B6                             i2l277 00E8  
                           i2l279 0100                             _RCREG 000FAE  
                           _SPBRG 000FAF                     __CFG_USBDIV$2 000000  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TXREG 000FAD  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
              __size_of_UART_Init 0084              _interruptHandlerUART 0008  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
                           pclath 000FFA                             tablat 000FF5  
                           status 000FD8                             wtemp6 004B  
                 __initialization 04C4                      __end_of_main 0532  
                 ??_machineConfig 0038                            ??_main 0044  
                   __activetblptr 000002                     ?_readKeyboard 0023  
           ?_interruptHandlerUART 0023                            _ADCON1 000FC1  
                          _TRISC6 007CA6                            _TRISC7 007CA7  
                  __CFG_VREGEN$ON 000000                    __CFG_XINST$OFF 000000  
               __end_of_UART_Init 03EC                         ??___aldiv 0040  
                  __CFG_STVREN$ON 000000              _uartTransmitBlocking 02D0  
                          clear_0 04EA                    ??_readKeyboard 0038  
                    __pdataCOMRAM 0045                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                      __accesstop 0060           __end_of__initialization 04F0  
                 __CFG_PBADEN$OFF 000000                     ___rparam_used 000001  
                  __pcstackCOMRAM 0023             ?_uartTransmitBlocking 0038  
          ??_interruptHandlerUART 0023                        _arr_dataRX 0006  
                         i2u52_45 00A6                           i2u52_46 00A8  
                         i2u56_45 015A                           i2u56_46 015C  
            __end_of_readKeyboard 0460                           __Hparam 0000  
                         __Lparam 0000                           ___aldiv 0202  
          ??_uartTransmitBlocking 003B                           _dataEnd 0047  
                         _dataOut 0004                           __pcinit 04C4  
                         __ramtop 0800                           __ptext0 04FE  
                         __ptext1 0532                           __ptext2 0460  
                         __ptext3 02D0                           __ptext4 03EC  
                         __ptext5 0368                           __ptext6 0202  
                ___aldiv@dividend 0038                    __pintcode_body 0012  
            end_of_initialization 04F0                     __Lmediumconst 0000  
                         int_func 0012                         _RCSTAbits 000FAB  
                ___aldiv@quotient 0062                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                       _UART_Init 0368                         _PORTAbits 000F80  
                       _PORTBbits 000F81             __end_of_machineConfig 0564  
                       _TXSTAbits 000FAC                        ?_UART_Init 0040  
                   __pidataCOMRAM 0564               start_initialization 04C4  
                   Keypad@dataEnd 0049             __size_of_readKeyboard 0074  
                   Keypad@dataOut 0022                  __CFG_LPT1OSC$OFF 000000  
uartTransmitBlocking@numTransmits 003C                       __pbssCOMRAM 0001  
                    _readKeyboard 03EC                     __pcstackBANK0 0060  
   __size_of_interruptHandlerUART 01FA                 _keypadRoutineUART 0460  
              ?_keypadRoutineUART 0023                _UARTinterruptState 0005  
                       __pintcode 0008               ??_keypadRoutineUART 003D  
                   UART_Init@baud 0040                          ?___aldiv 0038  
                     ??_UART_Init 0066         __end_of_keypadRoutineUART 04C4  
                 ___aldiv@divisor 003C                   ___aldiv@counter 0060  
                        _LATAbits 000F89                          _KPDState 0048  
                        _RCONbits 000FD0                  __CFG_WDTPS$32768 000000  
   __size_of_uartTransmitBlocking 0098                        _ADCON0bits 000FC2  
                       copy_data0 04D8                     readKeyboard@i 0038  
                        __Hrparam 0000                          __Lrparam 0000  
                __size_of___aldiv 00CE                       _keypadFlags 0001  
      __size_of_keypadRoutineUART 0064                     __size_of_main 0034  
          __size_of_machineConfig 0032                          int$flags 004A  
           __CFG_CPUDIV$OSC3_PLL4 000000                        _INTCONbits 000FF2  
                        intlevel2 0000      __end_of_interruptHandlerUART 0202  
                      _OSCCONbits 000FD3               __CFG_FOSC$INTOSC_HS 000000  
        uartTransmitBlocking@data 0038                     _machineConfig 0532  
                    ___aldiv@sign 0061  
