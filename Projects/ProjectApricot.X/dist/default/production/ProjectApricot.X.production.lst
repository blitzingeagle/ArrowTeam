

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jan 28 23:29:34 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26  0000                     
    27                           ; Version 1.45
    28                           ; Generated 16/11/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4620 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     
    62                           	psect	smallconst
    63  001000                     __psmallconst:
    64                           	opt stack 0
    65  001000  00                 	db	0
    66  001001                     _VIOLET:
    67                           	opt stack 0
    68  001001  00D3               	dw	211
    69  001003  0094               	dw	148
    70  001005                     __end_of_VIOLET:
    71                           	opt stack 0
    72  001005                     _INDIGO:
    73                           	opt stack 0
    74  001005  0082               	dw	130
    75  001007  004B               	dw	75
    76  001009                     __end_of_INDIGO:
    77                           	opt stack 0
    78  001009                     _BLUE:
    79                           	opt stack 0
    80  001009  00FF               	dw	255
    81  00100B  0000               	dw	0
    82  00100D                     __end_of_BLUE:
    83                           	opt stack 0
    84  00100D                     _GREEN:
    85                           	opt stack 0
    86  00100D  FF00               	dw	65280
    87  00100F  0000               	dw	0
    88  001011                     __end_of_GREEN:
    89                           	opt stack 0
    90  001011                     _YELLOW:
    91                           	opt stack 0
    92  001011  FF00               	dw	65280
    93  001013  00FF               	dw	255
    94  001015                     __end_of_YELLOW:
    95                           	opt stack 0
    96  001015                     _ORANGE:
    97                           	opt stack 0
    98  001015  8C00               	dw	35840
    99  001017  00FF               	dw	255
   100  001019                     __end_of_ORANGE:
   101                           	opt stack 0
   102  001019                     _RED:
   103                           	opt stack 0
   104  001019  0000               	dw	0
   105  00101B  00FF               	dw	255
   106  00101D                     __end_of_RED:
   107                           	opt stack 0
   108  00101D                     _WHITE:
   109                           	opt stack 0
   110  00101D  FFFF               	dw	65535
   111  00101F  00FF               	dw	255
   112  001021                     __end_of_WHITE:
   113                           	opt stack 0
   114  001021                     _GREY:
   115                           	opt stack 0
   116  001021  8080               	dw	32896
   117  001023  0080               	dw	128
   118  001025                     __end_of_GREY:
   119                           	opt stack 0
   120  001025                     _BLACK:
   121                           	opt stack 0
   122  001025  0000               	dw	0
   123  001027  0000               	dw	0
   124  001029                     __end_of_BLACK:
   125                           	opt stack 0
   126  001029  C7                 	db	199
   127  00102A                     __end_ofGLCD_PIC@INST_VMOFCTR2:
   128                           	opt stack 0
   129  00102A                     GLCD_PIC@INST_VMCTR1:
   130                           	opt stack 0
   131  00102A  C5                 	db	197
   132  00102B                     __end_ofGLCD_PIC@INST_VMCTR1:
   133                           	opt stack 0
   134  00102B                     GLCD_PIC@INST_PWCTR5:
   135                           	opt stack 0
   136  00102B  C4                 	db	196
   137  00102C                     __end_ofGLCD_PIC@INST_PWCTR5:
   138                           	opt stack 0
   139  00102C                     GLCD_PIC@INST_PWCTR4:
   140                           	opt stack 0
   141  00102C  C3                 	db	195
   142  00102D                     __end_ofGLCD_PIC@INST_PWCTR4:
   143                           	opt stack 0
   144  00102D                     GLCD_PIC@INST_PWCTR3:
   145                           	opt stack 0
   146  00102D  C2                 	db	194
   147  00102E                     __end_ofGLCD_PIC@INST_PWCTR3:
   148                           	opt stack 0
   149  00102E                     GLCD_PIC@INST_PWCTR2:
   150                           	opt stack 0
   151  00102E  C1                 	db	193
   152  00102F                     __end_ofGLCD_PIC@INST_PWCTR2:
   153                           	opt stack 0
   154  00102F                     GLCD_PIC@INST_PWCTR1:
   155                           	opt stack 0
   156  00102F  C0                 	db	192
   157  001030                     __end_ofGLCD_PIC@INST_PWCTR1:
   158                           	opt stack 0
   159  001030                     GLCD_PIC@INST_INVCTR:
   160                           	opt stack 0
   161  001030  B4                 	db	180
   162  001031                     __end_ofGLCD_PIC@INST_INVCTR:
   163                           	opt stack 0
   164  001031                     GLCD_PIC@INST_FRMCTR3:
   165                           	opt stack 0
   166  001031  B3                 	db	179
   167  001032                     __end_ofGLCD_PIC@INST_FRMCTR3:
   168                           	opt stack 0
   169  001032                     GLCD_PIC@INST_FRMCTR2:
   170                           	opt stack 0
   171  001032  B2                 	db	178
   172  001033                     __end_ofGLCD_PIC@INST_FRMCTR2:
   173                           	opt stack 0
   174  001033                     GLCD_PIC@INST_FRMCTR1:
   175                           	opt stack 0
   176  001033  B1                 	db	177
   177  001034                     __end_ofGLCD_PIC@INST_FRMCTR1:
   178                           	opt stack 0
   179  001034                     GLCD_PIC@INST_COLMOD:
   180                           	opt stack 0
   181  001034  3A                 	db	58
   182  001035                     __end_ofGLCD_PIC@INST_COLMOD:
   183                           	opt stack 0
   184  001035  39                 	db	57
   185  001036                     __end_ofGLCD_PIC@INST_IDMON:
   186                           	opt stack 0
   187  001036                     GLCD_PIC@INST_IDMOFF:
   188                           	opt stack 0
   189  001036  38                 	db	56
   190  001037                     __end_ofGLCD_PIC@INST_IDMOFF:
   191                           	opt stack 0
   192  001037                     GLCD_PIC@INST_MADCTL:
   193                           	opt stack 0
   194  001037  36                 	db	54
   195  001038                     __end_ofGLCD_PIC@INST_MADCTL:
   196                           	opt stack 0
   197  001038  35                 	db	53
   198  001039                     __end_ofGLCD_PIC@INST_TEON:
   199                           	opt stack 0
   200  001039  34                 	db	52
   201  00103A                     __end_ofGLCD_PIC@INST_TEOFF:
   202                           	opt stack 0
   203  00103A  30                 	db	48
   204  00103B                     __end_ofGLCD_PIC@INST_PTLAR:
   205                           	opt stack 0
   206  00103B                     GLCD_PIC@INST_RAMWR:
   207                           	opt stack 0
   208  00103B  2C                 	db	44
   209  00103C                     __end_ofGLCD_PIC@INST_RAMWR:
   210                           	opt stack 0
   211  00103C                     GLCD_PIC@INST_RASET:
   212                           	opt stack 0
   213  00103C  2B                 	db	43
   214  00103D                     __end_ofGLCD_PIC@INST_RASET:
   215                           	opt stack 0
   216  00103D                     GLCD_PIC@INST_CASET:
   217                           	opt stack 0
   218  00103D  2A                 	db	42
   219  00103E                     __end_ofGLCD_PIC@INST_CASET:
   220                           	opt stack 0
   221  00103E                     GLCD_PIC@INST_DISPON:
   222                           	opt stack 0
   223  00103E  29                 	db	41
   224  00103F                     __end_ofGLCD_PIC@INST_DISPON:
   225                           	opt stack 0
   226  00103F  28                 	db	40
   227  001040                     __end_ofGLCD_PIC@INST_DISPOFF:
   228                           	opt stack 0
   229  001040                     GLCD_PIC@INST_GAMSET:
   230                           	opt stack 0
   231  001040  26                 	db	38
   232  001041                     __end_ofGLCD_PIC@INST_GAMSET:
   233                           	opt stack 0
   234  001041  21                 	db	33
   235  001042                     __end_ofGLCD_PIC@INST_INVON:
   236                           	opt stack 0
   237  001042                     GLCD_PIC@INST_INVOFF:
   238                           	opt stack 0
   239  001042  20                 	db	32
   240  001043                     __end_ofGLCD_PIC@INST_INVOFF:
   241                           	opt stack 0
   242  001043                     GLCD_PIC@INST_NORON:
   243                           	opt stack 0
   244  001043  13                 	db	19
   245  001044                     __end_ofGLCD_PIC@INST_NORON:
   246                           	opt stack 0
   247  001044  12                 	db	18
   248  001045                     __end_ofGLCD_PIC@INST_PTLON:
   249                           	opt stack 0
   250  001045                     GLCD_PIC@INST_SLPOUT:
   251                           	opt stack 0
   252  001045  11                 	db	17
   253  001046                     __end_ofGLCD_PIC@INST_SLPOUT:
   254                           	opt stack 0
   255  001046  10                 	db	16
   256  001047                     __end_ofGLCD_PIC@INST_SLPIN:
   257                           	opt stack 0
   258  001047                     GLCD_PIC@INST_SWRESET:
   259                           	opt stack 0
   260  001047  01                 	db	1
   261  001048                     __end_ofGLCD_PIC@INST_SWRESET:
   262                           	opt stack 0
   263  001048  00                 	db	0
   264  001049                     __end_ofGLCD_PIC@INST_NOP:
   265                           	opt stack 0
   266  001049  C7                 	db	199
   267  00104A                     __end_of_INST_VMOFCTR2:
   268                           	opt stack 0
   269  00104A  C5                 	db	197
   270  00104B                     __end_of_INST_VMCTR1:
   271                           	opt stack 0
   272  00104B  C4                 	db	196
   273  00104C                     __end_of_INST_PWCTR5:
   274                           	opt stack 0
   275  00104C  C3                 	db	195
   276  00104D                     __end_of_INST_PWCTR4:
   277                           	opt stack 0
   278  00104D  C2                 	db	194
   279  00104E                     __end_of_INST_PWCTR3:
   280                           	opt stack 0
   281  00104E  C1                 	db	193
   282  00104F                     __end_of_INST_PWCTR2:
   283                           	opt stack 0
   284  00104F  C0                 	db	192
   285  001050                     __end_of_INST_PWCTR1:
   286                           	opt stack 0
   287  001050  B4                 	db	180
   288  001051                     __end_of_INST_INVCTR:
   289                           	opt stack 0
   290  001051  B3                 	db	179
   291  001052                     __end_of_INST_FRMCTR3:
   292                           	opt stack 0
   293  001052  B2                 	db	178
   294  001053                     __end_of_INST_FRMCTR2:
   295                           	opt stack 0
   296  001053  B1                 	db	177
   297  001054                     __end_of_INST_FRMCTR1:
   298                           	opt stack 0
   299  001054  3A                 	db	58
   300  001055                     __end_of_INST_COLMOD:
   301                           	opt stack 0
   302  001055  39                 	db	57
   303  001056                     __end_of_INST_IDMON:
   304                           	opt stack 0
   305  001056  38                 	db	56
   306  001057                     __end_of_INST_IDMOFF:
   307                           	opt stack 0
   308  001057  36                 	db	54
   309  001058                     __end_of_INST_MADCTL:
   310                           	opt stack 0
   311  001058  35                 	db	53
   312  001059                     __end_of_INST_TEON:
   313                           	opt stack 0
   314  001059  34                 	db	52
   315  00105A                     __end_of_INST_TEOFF:
   316                           	opt stack 0
   317  00105A  30                 	db	48
   318  00105B                     __end_of_INST_PTLAR:
   319                           	opt stack 0
   320  00105B  2C                 	db	44
   321  00105C                     __end_of_INST_RAMWR:
   322                           	opt stack 0
   323  00105C  2B                 	db	43
   324  00105D                     __end_of_INST_RASET:
   325                           	opt stack 0
   326  00105D  2A                 	db	42
   327  00105E                     __end_of_INST_CASET:
   328                           	opt stack 0
   329  00105E  29                 	db	41
   330  00105F                     __end_of_INST_DISPON:
   331                           	opt stack 0
   332  00105F  28                 	db	40
   333  001060                     __end_of_INST_DISPOFF:
   334                           	opt stack 0
   335  001060  26                 	db	38
   336  001061                     __end_of_INST_GAMSET:
   337                           	opt stack 0
   338  001061  21                 	db	33
   339  001062                     __end_of_INST_INVON:
   340                           	opt stack 0
   341  001062  20                 	db	32
   342  001063                     __end_of_INST_INVOFF:
   343                           	opt stack 0
   344  001063  13                 	db	19
   345  001064                     __end_of_INST_NORON:
   346                           	opt stack 0
   347  001064  12                 	db	18
   348  001065                     __end_of_INST_PTLON:
   349                           	opt stack 0
   350  001065  11                 	db	17
   351  001066                     __end_of_INST_SLPOUT:
   352                           	opt stack 0
   353  001066  10                 	db	16
   354  001067                     __end_of_INST_SLPIN:
   355                           	opt stack 0
   356  001067  01                 	db	1
   357  001068                     __end_of_INST_SWRESET:
   358                           	opt stack 0
   359  001068  00                 	db	0
   360  001069                     __end_of_INST_NOP:
   361                           	opt stack 0
   362  001069                     _GLCD_SIZE_VERT:
   363                           	opt stack 0
   364  001069  80                 	db	128
   365  00106A                     __end_of_GLCD_SIZE_VERT:
   366                           	opt stack 0
   367  00106A                     _GLCD_SIZE_HORZ:
   368                           	opt stack 0
   369  00106A  80                 	db	128
   370  00106B                     __end_of_GLCD_SIZE_HORZ:
   371                           	opt stack 0
   372  00106B                     _GLCD_ADDRESSABLE_SIZE_VERT:
   373                           	opt stack 0
   374  00106B  A0                 	db	160
   375  00106C                     __end_of_GLCD_ADDRESSABLE_SIZE_VERT:
   376                           	opt stack 0
   377  00106C                     _GLCD_ADDRESSABLE_SIZE_HORZ:
   378                           	opt stack 0
   379  00106C  80                 	db	128
   380  00106D                     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ:
   381                           	opt stack 0
   382  0000                     _TRISDbits	set	3989
   383  0000                     _LATDbits	set	3980
   384  0000                     _TRISCbits	set	3988
   385  0000                     _SSPCON1	set	4038
   386  0000                     _SSPSTAT	set	4039
   387  0000                     _SSPCON1bits	set	4038
   388  0000                     _SSPSTATbits	set	4039
   389  0000                     _SSPBUF	set	4041
   390  0000                     _ADCON1	set	4033
   391  0000                     _ADCON0	set	4034
   392  0000                     _TRISE	set	3990
   393  0000                     _TRISD	set	3989
   394  0000                     _TRISC	set	3988
   395  0000                     _TRISB	set	3987
   396  0000                     _TRISA	set	3986
   397  0000                     _LATE	set	3981
   398  0000                     _LATD	set	3980
   399  0000                     _LATC	set	3979
   400  0000                     _LATB	set	3978
   401  0000                     _LATA	set	3977
   402  0000                     _SSPIF	set	31987
   403                           
   404                           ; #config settings
   405  00106D  00                 	db	0	; dummy byte at the end
   406  0000                     
   407                           	psect	cinit
   408  001AF8                     __pcinit:
   409                           	opt stack 0
   410  001AF8                     start_initialization:
   411                           	opt stack 0
   412  001AF8                     __initialization:
   413                           	opt stack 0
   414                           
   415                           ; Clear objects allocated to COMRAM (1 bytes)
   416  001AF8  6A3F               	clrf	__pbssCOMRAM& (0+255),c
   417  001AFA                     end_of_initialization:
   418                           	opt stack 0
   419  001AFA                     __end_of__initialization:
   420                           	opt stack 0
   421  001AFA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   422  001AFC  6EF8               	movwf	tblptru,c
   423  001AFE  0100               	movlb	0
   424  001B00  EFBD  F009         	goto	_main	;jump to C main() function
   425                           tblptru	equ	0xFF8
   426                           
   427                           	psect	bssCOMRAM
   428  00003F                     __pbssCOMRAM:
   429                           	opt stack 0
   430  00003F                     _MADCTLbits:
   431                           	opt stack 0
   432  00003F                     	ds	1
   433                           tblptru	equ	0xFF8
   434                           
   435                           	psect	cstackCOMRAM
   436  000001                     __pcstackCOMRAM:
   437                           	opt stack 0
   438  000001                     ??_spiTransfer:
   439  000001                     ?___wmul:
   440                           	opt stack 0
   441  000001                     ?___awdiv:
   442                           	opt stack 0
   443  000001                     ?___awmod:
   444                           	opt stack 0
   445  000001                     ?_new_px_char:
   446                           	opt stack 0
   447  000001                     spiInit@divider:
   448                           	opt stack 0
   449  000001                     ___wmul@multiplier:
   450                           	opt stack 0
   451  000001                     ___awdiv@dividend:
   452                           	opt stack 0
   453  000001                     ___awmod@dividend:
   454                           	opt stack 0
   455  000001                     new_px_char@a:
   456                           	opt stack 0
   457                           
   458                           ; 4 bytes @ 0x0
   459  000001                     	ds	1
   460  000002                     spiTransfer@byteToTransfer:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x1
   464  000002                     	ds	1
   465  000003                     spiSend@val:
   466                           	opt stack 0
   467  000003                     ___wmul@multiplicand:
   468                           	opt stack 0
   469  000003                     ___awdiv@divisor:
   470                           	opt stack 0
   471  000003                     ___awmod@divisor:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x2
   475  000003                     	ds	1
   476  000004                     glcdTransfer@cmd:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x3
   480  000004                     	ds	1
   481  000005                     ??_glcdTransfer:
   482  000005                     ___awdiv@counter:
   483                           	opt stack 0
   484  000005                     ___awmod@counter:
   485                           	opt stack 0
   486  000005                     ___wmul@product:
   487                           	opt stack 0
   488  000005                     new_px_char@b:
   489                           	opt stack 0
   490                           
   491                           ; 4 bytes @ 0x4
   492  000005                     	ds	1
   493  000006                     glcdTransfer@byte:
   494                           	opt stack 0
   495  000006                     ___awdiv@sign:
   496                           	opt stack 0
   497  000006                     ___awmod@sign:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x5
   501  000006                     	ds	1
   502  000007                     glcdDrawRectangle@XE:
   503                           	opt stack 0
   504  000007                     glcdSetCOLMOD@numBitsPerPixel:
   505                           	opt stack 0
   506  000007                     ___awdiv@quotient:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x6
   510  000007                     	ds	1
   511  000008                     glcdDrawRectangle@YS:
   512                           	opt stack 0
   513  000008                     glcdSetCOLMOD@rawData:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x7
   517  000008                     	ds	1
   518  000009                     glcdDrawRectangle@YE:
   519                           	opt stack 0
   520  000009                     new_px_char@p:
   521                           	opt stack 0
   522                           
   523                           ; 8 bytes @ 0x8
   524  000009                     	ds	1
   525  00000A                     glcdDrawRectangle@color:
   526                           	opt stack 0
   527                           
   528                           ; 4 bytes @ 0x9
   529  00000A                     	ds	4
   530  00000E                     ??_glcdDrawRectangle:
   531                           
   532                           ; 1 bytes @ 0xD
   533  00000E                     	ds	4
   534  000012                     glcdDrawRectangle@numLoops:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x11
   538  000012                     	ds	2
   539  000014                     glcdDrawRectangle@i:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x13
   543  000014                     	ds	2
   544  000016                     glcdDrawRectangle@colorData:
   545                           	opt stack 0
   546                           
   547                           ; 3 bytes @ 0x15
   548  000016                     	ds	3
   549  000019                     glcdDrawRectangle@XS:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x18
   553  000019                     	ds	1
   554  00001A                     ??_initGLCD:
   555  00001A                     glcdDrawPixel@YS:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x19
   559  00001A                     	ds	1
   560  00001B                     glcdDrawPixel@color:
   561                           	opt stack 0
   562                           
   563                           ; 4 bytes @ 0x1A
   564  00001B                     	ds	1
   565  00001C                     
   566                           ; 1 bytes @ 0x1B
   567  00001C                     	ds	3
   568  00001F                     ??_glcdDrawPixel:
   569                           
   570                           ; 1 bytes @ 0x1E
   571  00001F                     	ds	1
   572  000020                     glcdDrawPixel@XS:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x1F
   576  000020                     	ds	1
   577  000021                     print_px_char@x:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x20
   581  000021                     	ds	2
   582  000023                     print_px_char@y:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x22
   586  000023                     	ds	2
   587  000025                     print_px_char@p:
   588                           	opt stack 0
   589                           
   590                           ; 8 bytes @ 0x24
   591  000025                     	ds	8
   592  00002D                     ??_print_px_char:
   593                           
   594                           ; 1 bytes @ 0x2C
   595  00002D                     	ds	4
   596  000031                     print_px_char@m:
   597                           	opt stack 0
   598                           
   599                           ; 4 bytes @ 0x30
   600  000031                     	ds	4
   601  000035                     print_px_char@i:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x34
   605  000035                     	ds	2
   606  000037                     main@letter:
   607                           	opt stack 0
   608                           
   609                           ; 8 bytes @ 0x36
   610  000037                     	ds	8
   611                           tblptru	equ	0xFF8
   612                           
   613 ;;
   614 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   615 ;;
   616 ;; *************** function _main *****************
   617 ;; Defined at:
   618 ;;		line 144 in file "main.c"
   619 ;; Parameters:    Size  Location     Type
   620 ;;		None
   621 ;; Auto vars:     Size  Location     Type
   622 ;;  letter          8   54[COMRAM] struct .
   623 ;; Return value:  Size  Location     Type
   624 ;;                  1    wreg      void 
   625 ;; Registers used:
   626 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   627 ;; Tracked objects:
   628 ;;		On entry : 0/0
   629 ;;		On exit  : 0/0
   630 ;;		Unchanged: 0/0
   631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   633 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   635 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   636 ;;Total ram usage:        8 bytes
   637 ;; Hardware stack levels required when called:    6
   638 ;; This function calls:
   639 ;;		_glcdDrawRectangle
   640 ;;		_init
   641 ;;		_new_px_char
   642 ;;		_print_px_char
   643 ;; This function is called by:
   644 ;;		Startup code after reset
   645 ;; This function uses a non-reentrant model
   646 ;;
   647                           
   648                           	psect	text0
   649  00137A                     __ptext0:
   650                           	opt stack 0
   651  00137A                     _main:
   652                           	opt stack 25
   653                           
   654                           ;main.c: 145: init();
   655                           
   656                           ;incstack = 0
   657  00137A  EC2A  F00D         	call	_init	;wreg free
   658                           
   659                           ;main.c: 148: glcdDrawRectangle(0, 18, 0, GLCD_SIZE_VERT, RED);
   660  00137E  0E12               	movlw	18
   661  001380  6E07               	movwf	glcdDrawRectangle@XE,c
   662  001382  0E00               	movlw	0
   663  001384  6E08               	movwf	glcdDrawRectangle@YS,c
   664  001386  0E69               	movlw	low _GLCD_SIZE_VERT
   665  001388  6EF6               	movwf	tblptrl,c
   666  00138A                     	if	1	;There is more than 1 active tblptr byte
   667  00138A  0E10               	movlw	high _GLCD_SIZE_VERT
   668  00138C  6EF7               	movwf	tblptrh,c
   669  00138E                     	endif
   670  00138E                     	if	0	;There are less than 3 active tblptr bytes
   671  00138E                     	endif
   672  00138E  0008               	tblrd		*
   673  001390  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   674  001394  0E19               	movlw	low _RED
   675  001396  6EF6               	movwf	tblptrl,c
   676  001398                     	if	1	;There is more than 1 active tblptr byte
   677  001398  0E10               	movlw	high _RED
   678  00139A  6EF7               	movwf	tblptrh,c
   679  00139C                     	endif
   680  00139C                     	if	0	;There are less than 3 active tblptr bytes
   681  00139C                     	endif
   682  00139C  0009               	tblrd		*+
   683  00139E  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   684  0013A2  0009               	tblrd		*+
   685  0013A4  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   686  0013A8  0009               	tblrd		*+
   687  0013AA  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   688  0013AE  000A               	tblrd		*-
   689  0013B0  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   690  0013B4  0E00               	movlw	0
   691  0013B6  ECBE  F00A         	call	_glcdDrawRectangle
   692                           
   693                           ;main.c: 149: glcdDrawRectangle(18, 36, 0, GLCD_SIZE_VERT, ORANGE);
   694  0013BA  0E24               	movlw	36
   695  0013BC  6E07               	movwf	glcdDrawRectangle@XE,c
   696  0013BE  0E00               	movlw	0
   697  0013C0  6E08               	movwf	glcdDrawRectangle@YS,c
   698  0013C2  0E69               	movlw	low _GLCD_SIZE_VERT
   699  0013C4  6EF6               	movwf	tblptrl,c
   700  0013C6                     	if	1	;There is more than 1 active tblptr byte
   701  0013C6  0E10               	movlw	high _GLCD_SIZE_VERT
   702  0013C8  6EF7               	movwf	tblptrh,c
   703  0013CA                     	endif
   704  0013CA                     	if	0	;There are less than 3 active tblptr bytes
   705  0013CA                     	endif
   706  0013CA  0008               	tblrd		*
   707  0013CC  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   708  0013D0  0E15               	movlw	low _ORANGE
   709  0013D2  6EF6               	movwf	tblptrl,c
   710  0013D4                     	if	1	;There is more than 1 active tblptr byte
   711  0013D4  0E10               	movlw	high _ORANGE
   712  0013D6  6EF7               	movwf	tblptrh,c
   713  0013D8                     	endif
   714  0013D8                     	if	0	;There are less than 3 active tblptr bytes
   715  0013D8                     	endif
   716  0013D8  0009               	tblrd		*+
   717  0013DA  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   718  0013DE  0009               	tblrd		*+
   719  0013E0  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   720  0013E4  0009               	tblrd		*+
   721  0013E6  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   722  0013EA  000A               	tblrd		*-
   723  0013EC  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   724  0013F0  0E12               	movlw	18
   725  0013F2  ECBE  F00A         	call	_glcdDrawRectangle
   726                           
   727                           ;main.c: 150: glcdDrawRectangle(36, 54, 0, GLCD_SIZE_VERT, YELLOW);
   728  0013F6  0E36               	movlw	54
   729  0013F8  6E07               	movwf	glcdDrawRectangle@XE,c
   730  0013FA  0E00               	movlw	0
   731  0013FC  6E08               	movwf	glcdDrawRectangle@YS,c
   732  0013FE  0E69               	movlw	low _GLCD_SIZE_VERT
   733  001400  6EF6               	movwf	tblptrl,c
   734  001402                     	if	1	;There is more than 1 active tblptr byte
   735  001402  0E10               	movlw	high _GLCD_SIZE_VERT
   736  001404  6EF7               	movwf	tblptrh,c
   737  001406                     	endif
   738  001406                     	if	0	;There are less than 3 active tblptr bytes
   739  001406                     	endif
   740  001406  0008               	tblrd		*
   741  001408  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   742  00140C  0E11               	movlw	low _YELLOW
   743  00140E  6EF6               	movwf	tblptrl,c
   744  001410                     	if	1	;There is more than 1 active tblptr byte
   745  001410  0E10               	movlw	high _YELLOW
   746  001412  6EF7               	movwf	tblptrh,c
   747  001414                     	endif
   748  001414                     	if	0	;There are less than 3 active tblptr bytes
   749  001414                     	endif
   750  001414  0009               	tblrd		*+
   751  001416  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   752  00141A  0009               	tblrd		*+
   753  00141C  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   754  001420  0009               	tblrd		*+
   755  001422  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   756  001426  000A               	tblrd		*-
   757  001428  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   758  00142C  0E24               	movlw	36
   759  00142E  ECBE  F00A         	call	_glcdDrawRectangle
   760                           
   761                           ;main.c: 151: glcdDrawRectangle(54, 72, 0, GLCD_SIZE_VERT, GREEN);
   762  001432  0E48               	movlw	72
   763  001434  6E07               	movwf	glcdDrawRectangle@XE,c
   764  001436  0E00               	movlw	0
   765  001438  6E08               	movwf	glcdDrawRectangle@YS,c
   766  00143A  0E69               	movlw	low _GLCD_SIZE_VERT
   767  00143C  6EF6               	movwf	tblptrl,c
   768  00143E                     	if	1	;There is more than 1 active tblptr byte
   769  00143E  0E10               	movlw	high _GLCD_SIZE_VERT
   770  001440  6EF7               	movwf	tblptrh,c
   771  001442                     	endif
   772  001442                     	if	0	;There are less than 3 active tblptr bytes
   773  001442                     	endif
   774  001442  0008               	tblrd		*
   775  001444  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   776  001448  0E0D               	movlw	low _GREEN
   777  00144A  6EF6               	movwf	tblptrl,c
   778  00144C                     	if	1	;There is more than 1 active tblptr byte
   779  00144C  0E10               	movlw	high _GREEN
   780  00144E  6EF7               	movwf	tblptrh,c
   781  001450                     	endif
   782  001450                     	if	0	;There are less than 3 active tblptr bytes
   783  001450                     	endif
   784  001450  0009               	tblrd		*+
   785  001452  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   786  001456  0009               	tblrd		*+
   787  001458  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   788  00145C  0009               	tblrd		*+
   789  00145E  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   790  001462  000A               	tblrd		*-
   791  001464  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   792  001468  0E36               	movlw	54
   793  00146A  ECBE  F00A         	call	_glcdDrawRectangle
   794                           
   795                           ;main.c: 152: glcdDrawRectangle(72, 90, 0, GLCD_SIZE_VERT, BLUE);
   796  00146E  0E5A               	movlw	90
   797  001470  6E07               	movwf	glcdDrawRectangle@XE,c
   798  001472  0E00               	movlw	0
   799  001474  6E08               	movwf	glcdDrawRectangle@YS,c
   800  001476  0E69               	movlw	low _GLCD_SIZE_VERT
   801  001478  6EF6               	movwf	tblptrl,c
   802  00147A                     	if	1	;There is more than 1 active tblptr byte
   803  00147A  0E10               	movlw	high _GLCD_SIZE_VERT
   804  00147C  6EF7               	movwf	tblptrh,c
   805  00147E                     	endif
   806  00147E                     	if	0	;There are less than 3 active tblptr bytes
   807  00147E                     	endif
   808  00147E  0008               	tblrd		*
   809  001480  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   810  001484  0E09               	movlw	low _BLUE
   811  001486  6EF6               	movwf	tblptrl,c
   812  001488                     	if	1	;There is more than 1 active tblptr byte
   813  001488  0E10               	movlw	high _BLUE
   814  00148A  6EF7               	movwf	tblptrh,c
   815  00148C                     	endif
   816  00148C                     	if	0	;There are less than 3 active tblptr bytes
   817  00148C                     	endif
   818  00148C  0009               	tblrd		*+
   819  00148E  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   820  001492  0009               	tblrd		*+
   821  001494  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   822  001498  0009               	tblrd		*+
   823  00149A  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   824  00149E  000A               	tblrd		*-
   825  0014A0  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   826  0014A4  0E48               	movlw	72
   827  0014A6  ECBE  F00A         	call	_glcdDrawRectangle
   828                           
   829                           ;main.c: 153: glcdDrawRectangle(90, 108, 0, GLCD_SIZE_VERT, INDIGO);
   830  0014AA  0E6C               	movlw	108
   831  0014AC  6E07               	movwf	glcdDrawRectangle@XE,c
   832  0014AE  0E00               	movlw	0
   833  0014B0  6E08               	movwf	glcdDrawRectangle@YS,c
   834  0014B2  0E69               	movlw	low _GLCD_SIZE_VERT
   835  0014B4  6EF6               	movwf	tblptrl,c
   836  0014B6                     	if	1	;There is more than 1 active tblptr byte
   837  0014B6  0E10               	movlw	high _GLCD_SIZE_VERT
   838  0014B8  6EF7               	movwf	tblptrh,c
   839  0014BA                     	endif
   840  0014BA                     	if	0	;There are less than 3 active tblptr bytes
   841  0014BA                     	endif
   842  0014BA  0008               	tblrd		*
   843  0014BC  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   844  0014C0  0E05               	movlw	low _INDIGO
   845  0014C2  6EF6               	movwf	tblptrl,c
   846  0014C4                     	if	1	;There is more than 1 active tblptr byte
   847  0014C4  0E10               	movlw	high _INDIGO
   848  0014C6  6EF7               	movwf	tblptrh,c
   849  0014C8                     	endif
   850  0014C8                     	if	0	;There are less than 3 active tblptr bytes
   851  0014C8                     	endif
   852  0014C8  0009               	tblrd		*+
   853  0014CA  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   854  0014CE  0009               	tblrd		*+
   855  0014D0  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   856  0014D4  0009               	tblrd		*+
   857  0014D6  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   858  0014DA  000A               	tblrd		*-
   859  0014DC  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   860  0014E0  0E5A               	movlw	90
   861  0014E2  ECBE  F00A         	call	_glcdDrawRectangle
   862                           
   863                           ;main.c: 154: glcdDrawRectangle(108, 128, 0, GLCD_SIZE_VERT, VIOLET);
   864  0014E6  0E80               	movlw	128
   865  0014E8  6E07               	movwf	glcdDrawRectangle@XE,c
   866  0014EA  0E00               	movlw	0
   867  0014EC  6E08               	movwf	glcdDrawRectangle@YS,c
   868  0014EE  0E69               	movlw	low _GLCD_SIZE_VERT
   869  0014F0  6EF6               	movwf	tblptrl,c
   870  0014F2                     	if	1	;There is more than 1 active tblptr byte
   871  0014F2  0E10               	movlw	high _GLCD_SIZE_VERT
   872  0014F4  6EF7               	movwf	tblptrh,c
   873  0014F6                     	endif
   874  0014F6                     	if	0	;There are less than 3 active tblptr bytes
   875  0014F6                     	endif
   876  0014F6  0008               	tblrd		*
   877  0014F8  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
   878  0014FC  0E01               	movlw	low _VIOLET
   879  0014FE  6EF6               	movwf	tblptrl,c
   880  001500                     	if	1	;There is more than 1 active tblptr byte
   881  001500  0E10               	movlw	high _VIOLET
   882  001502  6EF7               	movwf	tblptrh,c
   883  001504                     	endif
   884  001504                     	if	0	;There are less than 3 active tblptr bytes
   885  001504                     	endif
   886  001504  0009               	tblrd		*+
   887  001506  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
   888  00150A  0009               	tblrd		*+
   889  00150C  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
   890  001510  0009               	tblrd		*+
   891  001512  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
   892  001516  000A               	tblrd		*-
   893  001518  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
   894  00151C  0E6C               	movlw	108
   895  00151E  ECBE  F00A         	call	_glcdDrawRectangle
   896                           
   897                           ;main.c: 156: px_char letter = new_px_char(0b00000000000000111110000100010000,0b10001000
      +                          100001000100001111100000);
   898  001522  0E10               	movlw	16
   899  001524  6E01               	movwf	new_px_char@a,c
   900  001526  0EE1               	movlw	225
   901  001528  6E02               	movwf	new_px_char@a+1,c
   902  00152A  0E03               	movlw	3
   903  00152C  6E03               	movwf	new_px_char@a+2,c
   904  00152E  0E00               	movlw	0
   905  001530  6E04               	movwf	new_px_char@a+3,c
   906  001532  0EE0               	movlw	224
   907  001534  6E05               	movwf	new_px_char@b,c
   908  001536  0E43               	movlw	67
   909  001538  6E06               	movwf	new_px_char@b+1,c
   910  00153A  0E84               	movlw	132
   911  00153C  6E07               	movwf	new_px_char@b+2,c
   912  00153E  0E88               	movlw	136
   913  001540  6E08               	movwf	new_px_char@b+3,c
   914  001542  EC10  F00D         	call	_new_px_char	;wreg free
   915  001546  EE20  F037         	lfsr	2,main@letter
   916  00154A  0E07               	movlw	7
   917  00154C                     u611:
   918  00154C  CFEB FFDB          	movff	plusw0,plusw2
   919  001550  06E8               	decf	wreg,f,c
   920  001552  E2FC               	bc	u611
   921  001554                     
   922                           ;main.c: 159: print_px_char(0, 0, letter);
   923  001554  0E00               	movlw	0
   924  001556  6E22               	movwf	print_px_char@x+1,c
   925  001558  0E00               	movlw	0
   926  00155A  6E21               	movwf	print_px_char@x,c
   927  00155C  0E00               	movlw	0
   928  00155E  6E24               	movwf	print_px_char@y+1,c
   929  001560  0E00               	movlw	0
   930  001562  6E23               	movwf	print_px_char@y,c
   931  001564  EE20  F037         	lfsr	2,main@letter
   932  001568  EE00  F025         	lfsr	0,print_px_char@p
   933  00156C  0E07               	movlw	7
   934  00156E                     u621:
   935  00156E  CFDB FFEB          	movff	plusw2,plusw0
   936  001572  06E8               	decf	wreg,f,c
   937  001574  E2FC               	bc	u621
   938  001576  EC7E  F00B         	call	_print_px_char	;wreg free
   939  00157A  D7EC               	goto	l140
   940  00157C                     __end_of_main:
   941                           	opt stack 0
   942                           tblptru	equ	0xFF8
   943                           tblptrh	equ	0xFF7
   944                           tblptrl	equ	0xFF6
   945                           tablat	equ	0xFF5
   946                           plusw0	equ	0xFEB
   947                           wreg	equ	0xFE8
   948                           plusw2	equ	0xFDB
   949                           
   950 ;; *************** function _print_px_char *****************
   951 ;; Defined at:
   952 ;;		line 74 in file "main.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;  x               2   32[COMRAM] int 
   955 ;;  y               2   34[COMRAM] int 
   956 ;;  p               8   36[COMRAM] struct .
   957 ;; Auto vars:     Size  Location     Type
   958 ;;  i               2   52[COMRAM] int 
   959 ;;  m               4   48[COMRAM] unsigned long 
   960 ;; Return value:  Size  Location     Type
   961 ;;                  1    wreg      void 
   962 ;; Registers used:
   963 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   969 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   970 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   971 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   972 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   973 ;;Total ram usage:       22 bytes
   974 ;; Hardware stack levels used:    1
   975 ;; Hardware stack levels required when called:    5
   976 ;; This function calls:
   977 ;;		___awdiv
   978 ;;		___awmod
   979 ;;		_glcdDrawPixel
   980 ;; This function is called by:
   981 ;;		_main
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           	psect	text1
   986  0016FC                     __ptext1:
   987                           	opt stack 0
   988  0016FC                     _print_px_char:
   989                           	opt stack 25
   990                           
   991                           ;main.c: 75: uint32_t m = 0b1;
   992                           
   993                           ;incstack = 0
   994  0016FC  0E01               	movlw	1
   995  0016FE  6E31               	movwf	print_px_char@m,c
   996  001700  0E00               	movlw	0
   997  001702  6E32               	movwf	print_px_char@m+1,c
   998  001704  0E00               	movlw	0
   999  001706  6E33               	movwf	print_px_char@m+2,c
  1000  001708  0E00               	movlw	0
  1001  00170A  6E34               	movwf	print_px_char@m+3,c
  1002                           
  1003                           ;main.c: 76: for(int i = 0; i < 32; i++) {
  1004  00170C  0E00               	movlw	0
  1005  00170E  6E36               	movwf	print_px_char@i+1,c
  1006  001710  0E00               	movlw	0
  1007  001712  6E35               	movwf	print_px_char@i,c
  1008  001714  BE36               	btfsc	print_px_char@i+1,7,c
  1009  001716  D008               	goto	l131
  1010  001718  5036               	movf	print_px_char@i+1,w,c
  1011  00171A  E105               	bnz	u570
  1012  00171C  0E20               	movlw	32
  1013  00171E  5C35               	subwf	print_px_char@i,w,c
  1014  001720  B0D8               	btfsc	status,0,c
  1015  001722  0012               	return	
  1016  001724  D001               	goto	l131
  1017  001726                     u570:
  1018  001726  0012               	return	
  1019  001728                     l131:
  1020                           
  1021                           ;main.c: 77: if(m & p.part[0]) glcdDrawPixel(i%5, i/5, BLACK);
  1022  001728  5031               	movf	print_px_char@m,w,c
  1023  00172A  1425               	andwf	print_px_char@p,w,c
  1024  00172C  6E2D               	movwf	??_print_px_char& (0+255),c
  1025  00172E  5032               	movf	print_px_char@m+1,w,c
  1026  001730  1426               	andwf	print_px_char@p+1,w,c
  1027  001732  6E2E               	movwf	(??_print_px_char+1)& (0+255),c
  1028  001734  5033               	movf	print_px_char@m+2,w,c
  1029  001736  1427               	andwf	print_px_char@p+2,w,c
  1030  001738  6E2F               	movwf	(??_print_px_char+2)& (0+255),c
  1031  00173A  5034               	movf	print_px_char@m+3,w,c
  1032  00173C  1428               	andwf	print_px_char@p+3,w,c
  1033  00173E  6E30               	movwf	(??_print_px_char+3)& (0+255),c
  1034  001740  502D               	movf	??_print_px_char,w,c
  1035  001742  102E               	iorwf	??_print_px_char+1,w,c
  1036  001744  102F               	iorwf	??_print_px_char+2,w,c
  1037  001746  1030               	iorwf	??_print_px_char+3,w,c
  1038  001748  B4D8               	btfsc	status,2,c
  1039  00174A  D029               	goto	l133
  1040  00174C  C035  F001         	movff	print_px_char@i,___awdiv@dividend
  1041  001750  C036  F002         	movff	print_px_char@i+1,___awdiv@dividend+1
  1042  001754  0E00               	movlw	0
  1043  001756  6E04               	movwf	___awdiv@divisor+1,c
  1044  001758  0E05               	movlw	5
  1045  00175A  6E03               	movwf	___awdiv@divisor,c
  1046  00175C  EC1B  F00C         	call	___awdiv	;wreg free
  1047  001760  5001               	movf	?___awdiv,w,c
  1048  001762  6E1A               	movwf	glcdDrawPixel@YS,c
  1049  001764  0E25               	movlw	low _BLACK
  1050  001766  6EF6               	movwf	tblptrl,c
  1051  001768                     	if	1	;There is more than 1 active tblptr byte
  1052  001768  0E10               	movlw	high _BLACK
  1053  00176A  6EF7               	movwf	tblptrh,c
  1054  00176C                     	endif
  1055  00176C                     	if	0	;There are less than 3 active tblptr bytes
  1056  00176C                     	endif
  1057  00176C  0009               	tblrd		*+
  1058  00176E  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1059  001772  0009               	tblrd		*+
  1060  001774  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1061  001778  0009               	tblrd		*+
  1062  00177A  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1063  00177E  000A               	tblrd		*-
  1064  001780  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1065  001784  C035  F001         	movff	print_px_char@i,___awmod@dividend
  1066  001788  C036  F002         	movff	print_px_char@i+1,___awmod@dividend+1
  1067  00178C  0E00               	movlw	0
  1068  00178E  6E04               	movwf	___awmod@divisor+1,c
  1069  001790  0E05               	movlw	5
  1070  001792  6E03               	movwf	___awmod@divisor,c
  1071  001794  EC5D  F00C         	call	___awmod	;wreg free
  1072  001798  5001               	movf	?___awmod,w,c
  1073  00179A  EC95  F00C         	call	_glcdDrawPixel
  1074  00179E                     l133:
  1075                           
  1076                           ;main.c: 78: if(m & p.part[1]) glcdDrawPixel((i+32)%5, (i+32)/5, BLACK);
  1077  00179E  5031               	movf	print_px_char@m,w,c
  1078  0017A0  1429               	andwf	print_px_char@p+4,w,c
  1079  0017A2  6E2D               	movwf	??_print_px_char& (0+255),c
  1080  0017A4  5032               	movf	print_px_char@m+1,w,c
  1081  0017A6  142A               	andwf	print_px_char@p+5,w,c
  1082  0017A8  6E2E               	movwf	(??_print_px_char+1)& (0+255),c
  1083  0017AA  5033               	movf	print_px_char@m+2,w,c
  1084  0017AC  142B               	andwf	print_px_char@p+6,w,c
  1085  0017AE  6E2F               	movwf	(??_print_px_char+2)& (0+255),c
  1086  0017B0  5034               	movf	print_px_char@m+3,w,c
  1087  0017B2  142C               	andwf	print_px_char@p+7,w,c
  1088  0017B4  6E30               	movwf	(??_print_px_char+3)& (0+255),c
  1089  0017B6  502D               	movf	??_print_px_char,w,c
  1090  0017B8  102E               	iorwf	??_print_px_char+1,w,c
  1091  0017BA  102F               	iorwf	??_print_px_char+2,w,c
  1092  0017BC  1030               	iorwf	??_print_px_char+3,w,c
  1093  0017BE  B4D8               	btfsc	status,2,c
  1094  0017C0  D02D               	goto	l134
  1095  0017C2  0E20               	movlw	32
  1096  0017C4  2435               	addwf	print_px_char@i,w,c
  1097  0017C6  6E01               	movwf	___awdiv@dividend,c
  1098  0017C8  0E00               	movlw	0
  1099  0017CA  2036               	addwfc	print_px_char@i+1,w,c
  1100  0017CC  6E02               	movwf	___awdiv@dividend+1,c
  1101  0017CE  0E00               	movlw	0
  1102  0017D0  6E04               	movwf	___awdiv@divisor+1,c
  1103  0017D2  0E05               	movlw	5
  1104  0017D4  6E03               	movwf	___awdiv@divisor,c
  1105  0017D6  EC1B  F00C         	call	___awdiv	;wreg free
  1106  0017DA  5001               	movf	?___awdiv,w,c
  1107  0017DC  6E1A               	movwf	glcdDrawPixel@YS,c
  1108  0017DE  0E25               	movlw	low _BLACK
  1109  0017E0  6EF6               	movwf	tblptrl,c
  1110  0017E2                     	if	1	;There is more than 1 active tblptr byte
  1111  0017E2  0E10               	movlw	high _BLACK
  1112  0017E4  6EF7               	movwf	tblptrh,c
  1113  0017E6                     	endif
  1114  0017E6                     	if	0	;There are less than 3 active tblptr bytes
  1115  0017E6                     	endif
  1116  0017E6  0009               	tblrd		*+
  1117  0017E8  CFF5 F01B          	movff	tablat,glcdDrawPixel@color
  1118  0017EC  0009               	tblrd		*+
  1119  0017EE  CFF5 F01C          	movff	tablat,glcdDrawPixel@color+1
  1120  0017F2  0009               	tblrd		*+
  1121  0017F4  CFF5 F01D          	movff	tablat,glcdDrawPixel@color+2
  1122  0017F8  000A               	tblrd		*-
  1123  0017FA  CFF5 F01E          	movff	tablat,glcdDrawPixel@color+3
  1124  0017FE  0E20               	movlw	32
  1125  001800  2435               	addwf	print_px_char@i,w,c
  1126  001802  6E01               	movwf	___awmod@dividend,c
  1127  001804  0E00               	movlw	0
  1128  001806  2036               	addwfc	print_px_char@i+1,w,c
  1129  001808  6E02               	movwf	___awmod@dividend+1,c
  1130  00180A  0E00               	movlw	0
  1131  00180C  6E04               	movwf	___awmod@divisor+1,c
  1132  00180E  0E05               	movlw	5
  1133  001810  6E03               	movwf	___awmod@divisor,c
  1134  001812  EC5D  F00C         	call	___awmod	;wreg free
  1135  001816  5001               	movf	?___awmod,w,c
  1136  001818  EC95  F00C         	call	_glcdDrawPixel
  1137  00181C                     l134:
  1138                           
  1139                           ;main.c: 80: m <<= 1;
  1140  00181C  90D8               	bcf	status,0,c
  1141  00181E  3631               	rlcf	print_px_char@m,f,c
  1142  001820  3632               	rlcf	print_px_char@m+1,f,c
  1143  001822  3633               	rlcf	print_px_char@m+2,f,c
  1144  001824  3634               	rlcf	print_px_char@m+3,f,c
  1145  001826  4A35               	infsnz	print_px_char@i,f,c
  1146  001828  2A36               	incf	print_px_char@i+1,f,c
  1147  00182A  BE36               	btfsc	print_px_char@i+1,7,c
  1148  00182C  D77D               	goto	l131
  1149  00182E  5036               	movf	print_px_char@i+1,w,c
  1150  001830  E101               	bnz	l135
  1151  001832  D774               	goto	L1
  1152  001834                     l135:
  1153  001834  0012               	return		;funcret
  1154  001836                     __end_of_print_px_char:
  1155                           	opt stack 0
  1156                           tblptru	equ	0xFF8
  1157                           tblptrh	equ	0xFF7
  1158                           tblptrl	equ	0xFF6
  1159                           tablat	equ	0xFF5
  1160                           plusw0	equ	0xFEB
  1161                           wreg	equ	0xFE8
  1162                           plusw2	equ	0xFDB
  1163                           status	equ	0xFD8
  1164                           
  1165 ;; *************** function _glcdDrawPixel *****************
  1166 ;; Defined at:
  1167 ;;		line 147 in file "GLCD_PIC_V1.1.c"
  1168 ;; Parameters:    Size  Location     Type
  1169 ;;  XS              1    wreg     unsigned char 
  1170 ;;  YS              1   25[COMRAM] unsigned char 
  1171 ;;  color           4   26[COMRAM] unsigned long 
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;  XS              1   31[COMRAM] unsigned char 
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      void 
  1176 ;; Registers used:
  1177 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1183 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1184 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1185 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1186 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1187 ;;Total ram usage:        7 bytes
  1188 ;; Hardware stack levels used:    1
  1189 ;; Hardware stack levels required when called:    4
  1190 ;; This function calls:
  1191 ;;		_glcdDrawRectangle
  1192 ;; This function is called by:
  1193 ;;		_print_px_char
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           	psect	text2
  1198  00192A                     __ptext2:
  1199                           	opt stack 0
  1200  00192A                     _glcdDrawPixel:
  1201                           	opt stack 25
  1202                           
  1203                           ;incstack = 0
  1204                           ;glcdDrawPixel@XS stored from wreg
  1205  00192A  6E20               	movwf	glcdDrawPixel@XS,c
  1206                           
  1207                           ;GLCD_PIC_V1.1.c: 160: if(XS >= GLCD_SIZE_HORZ){ XS = GLCD_SIZE_HORZ - 1; }
  1208  00192C  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1209  00192E  6EF6               	movwf	tblptrl,c
  1210  001930                     	if	1	;There is more than 1 active tblptr byte
  1211  001930  0E10               	movlw	high _GLCD_SIZE_HORZ
  1212  001932  6EF7               	movwf	tblptrh,c
  1213  001934                     	endif
  1214  001934                     	if	0	;There are less than 3 active tblptr bytes
  1215  001934                     	endif
  1216  001934  0009               	tblrd		*+
  1217  001936  50F5               	movf	tablat,w,c
  1218  001938  5C20               	subwf	glcdDrawPixel@XS,w,c
  1219  00193A  A0D8               	btfss	status,0,c
  1220  00193C  D009               	goto	l302
  1221  00193E  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1222  001940  6EF6               	movwf	tblptrl,c
  1223  001942                     	if	1	;There is more than 1 active tblptr byte
  1224  001942  0E10               	movlw	high _GLCD_SIZE_HORZ
  1225  001944  6EF7               	movwf	tblptrh,c
  1226  001946                     	endif
  1227  001946                     	if	0	;There are less than 3 active tblptr bytes
  1228  001946                     	endif
  1229  001946  0008               	tblrd		*
  1230  001948  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  1231  00194C  041F               	decf	??_glcdDrawPixel,w,c
  1232  00194E  6E20               	movwf	glcdDrawPixel@XS,c
  1233  001950                     l302:
  1234                           
  1235                           ;GLCD_PIC_V1.1.c: 161: if(YS >= GLCD_SIZE_VERT){ YS = GLCD_SIZE_HORZ - 1; }
  1236  001950  0E69               	movlw	low _GLCD_SIZE_VERT
  1237  001952  6EF6               	movwf	tblptrl,c
  1238  001954                     	if	1	;There is more than 1 active tblptr byte
  1239  001954  0E10               	movlw	high _GLCD_SIZE_VERT
  1240  001956  6EF7               	movwf	tblptrh,c
  1241  001958                     	endif
  1242  001958                     	if	0	;There are less than 3 active tblptr bytes
  1243  001958                     	endif
  1244  001958  0009               	tblrd		*+
  1245  00195A  50F5               	movf	tablat,w,c
  1246  00195C  5C1A               	subwf	glcdDrawPixel@YS,w,c
  1247  00195E  A0D8               	btfss	status,0,c
  1248  001960  D009               	goto	l303
  1249  001962  0E6A               	movlw	low _GLCD_SIZE_HORZ
  1250  001964  6EF6               	movwf	tblptrl,c
  1251  001966                     	if	1	;There is more than 1 active tblptr byte
  1252  001966  0E10               	movlw	high _GLCD_SIZE_HORZ
  1253  001968  6EF7               	movwf	tblptrh,c
  1254  00196A                     	endif
  1255  00196A                     	if	0	;There are less than 3 active tblptr bytes
  1256  00196A                     	endif
  1257  00196A  0008               	tblrd		*
  1258  00196C  CFF5 F01F          	movff	tablat,??_glcdDrawPixel
  1259  001970  041F               	decf	??_glcdDrawPixel,w,c
  1260  001972  6E1A               	movwf	glcdDrawPixel@YS,c
  1261  001974                     l303:
  1262                           
  1263                           ;GLCD_PIC_V1.1.c: 164: glcdDrawRectangle(XS, XS, YS, YS, color);
  1264  001974  C020  F007         	movff	glcdDrawPixel@XS,glcdDrawRectangle@XE
  1265  001978  C01A  F008         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YS
  1266  00197C  C01A  F009         	movff	glcdDrawPixel@YS,glcdDrawRectangle@YE
  1267  001980  C01B  F00A         	movff	glcdDrawPixel@color,glcdDrawRectangle@color
  1268  001984  C01C  F00B         	movff	glcdDrawPixel@color+1,glcdDrawRectangle@color+1
  1269  001988  C01D  F00C         	movff	glcdDrawPixel@color+2,glcdDrawRectangle@color+2
  1270  00198C  C01E  F00D         	movff	glcdDrawPixel@color+3,glcdDrawRectangle@color+3
  1271  001990  5020               	movf	glcdDrawPixel@XS,w,c
  1272  001992  ECBE  F00A         	call	_glcdDrawRectangle
  1273  001996  0012               	return		;funcret
  1274  001998                     __end_of_glcdDrawPixel:
  1275                           	opt stack 0
  1276                           tblptru	equ	0xFF8
  1277                           tblptrh	equ	0xFF7
  1278                           tblptrl	equ	0xFF6
  1279                           tablat	equ	0xFF5
  1280                           plusw0	equ	0xFEB
  1281                           wreg	equ	0xFE8
  1282                           plusw2	equ	0xFDB
  1283                           status	equ	0xFD8
  1284                           
  1285 ;; *************** function ___awmod *****************
  1286 ;; Defined at:
  1287 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;  dividend        2    0[COMRAM] int 
  1290 ;;  divisor         2    2[COMRAM] int 
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;  sign            1    5[COMRAM] unsigned char 
  1293 ;;  counter         1    4[COMRAM] unsigned char 
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  2    0[COMRAM] int 
  1296 ;; Registers used:
  1297 ;;		wreg, status,2, status,0
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1303 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1304 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1306 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1307 ;;Total ram usage:        6 bytes
  1308 ;; Hardware stack levels used:    1
  1309 ;; This function calls:
  1310 ;;		Nothing
  1311 ;; This function is called by:
  1312 ;;		_print_px_char
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text3
  1317  0018BA                     __ptext3:
  1318                           	opt stack 0
  1319  0018BA                     ___awmod:
  1320                           	opt stack 29
  1321                           
  1322                           ;incstack = 0
  1323  0018BA  0E00               	movlw	0
  1324  0018BC  6E06               	movwf	___awmod@sign,c
  1325  0018BE  AE02               	btfss	___awmod@dividend+1,7,c
  1326  0018C0  D006               	goto	l507
  1327  0018C2  6C01               	negf	___awmod@dividend,c
  1328  0018C4  1E02               	comf	___awmod@dividend+1,f,c
  1329  0018C6  B0D8               	btfsc	status,0,c
  1330  0018C8  2A02               	incf	___awmod@dividend+1,f,c
  1331  0018CA  0E01               	movlw	1
  1332  0018CC  6E06               	movwf	___awmod@sign,c
  1333  0018CE                     l507:
  1334  0018CE  AE04               	btfss	___awmod@divisor+1,7,c
  1335  0018D0  D004               	goto	l508
  1336  0018D2  6C03               	negf	___awmod@divisor,c
  1337  0018D4  1E04               	comf	___awmod@divisor+1,f,c
  1338  0018D6  B0D8               	btfsc	status,0,c
  1339  0018D8  2A04               	incf	___awmod@divisor+1,f,c
  1340  0018DA                     l508:
  1341  0018DA  5003               	movf	___awmod@divisor,w,c
  1342  0018DC  1004               	iorwf	___awmod@divisor+1,w,c
  1343  0018DE  B4D8               	btfsc	status,2,c
  1344  0018E0  D018               	goto	l515
  1345  0018E2  0E01               	movlw	1
  1346  0018E4  6E05               	movwf	___awmod@counter,c
  1347  0018E6  D004               	goto	l510
  1348  0018E8  90D8               	bcf	status,0,c
  1349  0018EA  3603               	rlcf	___awmod@divisor,f,c
  1350  0018EC  3604               	rlcf	___awmod@divisor+1,f,c
  1351  0018EE  2A05               	incf	___awmod@counter,f,c
  1352  0018F0                     l510:
  1353  0018F0  AE04               	btfss	___awmod@divisor+1,7,c
  1354  0018F2  D7FA               	goto	l511
  1355  0018F4                     u530:
  1356  0018F4  5003               	movf	___awmod@divisor,w,c
  1357  0018F6  5C01               	subwf	___awmod@dividend,w,c
  1358  0018F8  5004               	movf	___awmod@divisor+1,w,c
  1359  0018FA  5802               	subwfb	___awmod@dividend+1,w,c
  1360  0018FC  A0D8               	btfss	status,0,c
  1361  0018FE  D004               	goto	l514
  1362  001900  5003               	movf	___awmod@divisor,w,c
  1363  001902  5E01               	subwf	___awmod@dividend,f,c
  1364  001904  5004               	movf	___awmod@divisor+1,w,c
  1365  001906  5A02               	subwfb	___awmod@dividend+1,f,c
  1366  001908                     l514:
  1367  001908  90D8               	bcf	status,0,c
  1368  00190A  3204               	rrcf	___awmod@divisor+1,f,c
  1369  00190C  3203               	rrcf	___awmod@divisor,f,c
  1370  00190E  2E05               	decfsz	___awmod@counter,f,c
  1371  001910  D7F1               	goto	u530
  1372  001912                     l515:
  1373  001912  5006               	movf	___awmod@sign,w,c
  1374  001914  B4D8               	btfsc	status,2,c
  1375  001916  D004               	goto	l516
  1376  001918  6C01               	negf	___awmod@dividend,c
  1377  00191A  1E02               	comf	___awmod@dividend+1,f,c
  1378  00191C  B0D8               	btfsc	status,0,c
  1379  00191E  2A02               	incf	___awmod@dividend+1,f,c
  1380  001920                     l516:
  1381  001920  C001  F001         	movff	___awmod@dividend,?___awmod
  1382  001924  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1383  001928  0012               	return	
  1384  00192A                     __end_of___awmod:
  1385                           	opt stack 0
  1386                           tblptru	equ	0xFF8
  1387                           tblptrh	equ	0xFF7
  1388                           tblptrl	equ	0xFF6
  1389                           tablat	equ	0xFF5
  1390                           plusw0	equ	0xFEB
  1391                           wreg	equ	0xFE8
  1392                           plusw2	equ	0xFDB
  1393                           status	equ	0xFD8
  1394                           
  1395 ;; *************** function ___awdiv *****************
  1396 ;; Defined at:
  1397 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  dividend        2    0[COMRAM] int 
  1400 ;;  divisor         2    2[COMRAM] int 
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;  quotient        2    6[COMRAM] int 
  1403 ;;  sign            1    5[COMRAM] unsigned char 
  1404 ;;  counter         1    4[COMRAM] unsigned char 
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  2    0[COMRAM] int 
  1407 ;; Registers used:
  1408 ;;		wreg, status,2, status,0
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1414 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1415 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1417 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;Total ram usage:        8 bytes
  1419 ;; Hardware stack levels used:    1
  1420 ;; This function calls:
  1421 ;;		Nothing
  1422 ;; This function is called by:
  1423 ;;		_print_px_char
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text4
  1428  001836                     __ptext4:
  1429                           	opt stack 0
  1430  001836                     ___awdiv:
  1431                           	opt stack 29
  1432                           
  1433                           ;incstack = 0
  1434  001836  0E00               	movlw	0
  1435  001838  6E06               	movwf	___awdiv@sign,c
  1436  00183A  AE04               	btfss	___awdiv@divisor+1,7,c
  1437  00183C  D006               	goto	l494
  1438  00183E  6C03               	negf	___awdiv@divisor,c
  1439  001840  1E04               	comf	___awdiv@divisor+1,f,c
  1440  001842  B0D8               	btfsc	status,0,c
  1441  001844  2A04               	incf	___awdiv@divisor+1,f,c
  1442  001846  0E01               	movlw	1
  1443  001848  6E06               	movwf	___awdiv@sign,c
  1444  00184A                     l494:
  1445  00184A  AE02               	btfss	___awdiv@dividend+1,7,c
  1446  00184C  D006               	goto	l495
  1447  00184E  6C01               	negf	___awdiv@dividend,c
  1448  001850  1E02               	comf	___awdiv@dividend+1,f,c
  1449  001852  B0D8               	btfsc	status,0,c
  1450  001854  2A02               	incf	___awdiv@dividend+1,f,c
  1451  001856  0E01               	movlw	1
  1452  001858  1A06               	xorwf	___awdiv@sign,f,c
  1453  00185A                     l495:
  1454  00185A  0E00               	movlw	0
  1455  00185C  6E08               	movwf	___awdiv@quotient+1,c
  1456  00185E  0E00               	movlw	0
  1457  001860  6E07               	movwf	___awdiv@quotient,c
  1458  001862  5003               	movf	___awdiv@divisor,w,c
  1459  001864  1004               	iorwf	___awdiv@divisor+1,w,c
  1460  001866  B4D8               	btfsc	status,2,c
  1461  001868  D01C               	goto	l502
  1462  00186A  0E01               	movlw	1
  1463  00186C  6E05               	movwf	___awdiv@counter,c
  1464  00186E  D004               	goto	l497
  1465  001870  90D8               	bcf	status,0,c
  1466  001872  3603               	rlcf	___awdiv@divisor,f,c
  1467  001874  3604               	rlcf	___awdiv@divisor+1,f,c
  1468  001876  2A05               	incf	___awdiv@counter,f,c
  1469  001878                     l497:
  1470  001878  AE04               	btfss	___awdiv@divisor+1,7,c
  1471  00187A  D7FA               	goto	l498
  1472  00187C                     u470:
  1473  00187C  90D8               	bcf	status,0,c
  1474  00187E  3607               	rlcf	___awdiv@quotient,f,c
  1475  001880  3608               	rlcf	___awdiv@quotient+1,f,c
  1476  001882  5003               	movf	___awdiv@divisor,w,c
  1477  001884  5C01               	subwf	___awdiv@dividend,w,c
  1478  001886  5004               	movf	___awdiv@divisor+1,w,c
  1479  001888  5802               	subwfb	___awdiv@dividend+1,w,c
  1480  00188A  A0D8               	btfss	status,0,c
  1481  00188C  D005               	goto	l501
  1482  00188E  5003               	movf	___awdiv@divisor,w,c
  1483  001890  5E01               	subwf	___awdiv@dividend,f,c
  1484  001892  5004               	movf	___awdiv@divisor+1,w,c
  1485  001894  5A02               	subwfb	___awdiv@dividend+1,f,c
  1486  001896  8007               	bsf	___awdiv@quotient,0,c
  1487  001898                     l501:
  1488  001898  90D8               	bcf	status,0,c
  1489  00189A  3204               	rrcf	___awdiv@divisor+1,f,c
  1490  00189C  3203               	rrcf	___awdiv@divisor,f,c
  1491  00189E  2E05               	decfsz	___awdiv@counter,f,c
  1492  0018A0  D7ED               	goto	u470
  1493  0018A2                     l502:
  1494  0018A2  5006               	movf	___awdiv@sign,w,c
  1495  0018A4  B4D8               	btfsc	status,2,c
  1496  0018A6  D004               	goto	l503
  1497  0018A8  6C07               	negf	___awdiv@quotient,c
  1498  0018AA  1E08               	comf	___awdiv@quotient+1,f,c
  1499  0018AC  B0D8               	btfsc	status,0,c
  1500  0018AE  2A08               	incf	___awdiv@quotient+1,f,c
  1501  0018B0                     l503:
  1502  0018B0  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1503  0018B4  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1504  0018B8  0012               	return	
  1505  0018BA                     __end_of___awdiv:
  1506                           	opt stack 0
  1507                           tblptru	equ	0xFF8
  1508                           tblptrh	equ	0xFF7
  1509                           tblptrl	equ	0xFF6
  1510                           tablat	equ	0xFF5
  1511                           plusw0	equ	0xFEB
  1512                           wreg	equ	0xFE8
  1513                           plusw2	equ	0xFDB
  1514                           status	equ	0xFD8
  1515                           
  1516 ;; *************** function _new_px_char *****************
  1517 ;; Defined at:
  1518 ;;		line 67 in file "main.c"
  1519 ;; Parameters:    Size  Location     Type
  1520 ;;  a               4    0[COMRAM] unsigned long 
  1521 ;;  b               4    4[COMRAM] unsigned long 
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;  p               8    8[COMRAM] struct .
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  8    0[COMRAM] struct .
  1526 ;; Registers used:
  1527 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1533 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1534 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1536 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1537 ;;Total ram usage:       16 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; This function calls:
  1540 ;;		Nothing
  1541 ;; This function is called by:
  1542 ;;		_main
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           	psect	text5
  1547  001A20                     __ptext5:
  1548                           	opt stack 0
  1549  001A20                     _new_px_char:
  1550                           	opt stack 30
  1551                           
  1552                           ;main.c: 68: px_char p;
  1553                           ;main.c: 69: p.part[1] = a;
  1554                           
  1555                           ;incstack = 0
  1556  001A20  C001  F00D         	movff	new_px_char@a,new_px_char@p+4
  1557  001A24  C002  F00E         	movff	new_px_char@a+1,new_px_char@p+5
  1558  001A28  C003  F00F         	movff	new_px_char@a+2,new_px_char@p+6
  1559  001A2C  C004  F010         	movff	new_px_char@a+3,new_px_char@p+7
  1560                           
  1561                           ;main.c: 70: p.part[0] = b;
  1562  001A30  C005  F009         	movff	new_px_char@b,new_px_char@p
  1563  001A34  C006  F00A         	movff	new_px_char@b+1,new_px_char@p+1
  1564  001A38  C007  F00B         	movff	new_px_char@b+2,new_px_char@p+2
  1565  001A3C  C008  F00C         	movff	new_px_char@b+3,new_px_char@p+3
  1566                           
  1567                           ;main.c: 71: return p;
  1568  001A40  EE20  F009         	lfsr	2,new_px_char@p
  1569  001A44  EE00  F001         	lfsr	0,?_new_px_char
  1570  001A48  0E07               	movlw	7
  1571  001A4A                     u561:
  1572  001A4A  CFDB FFEB          	movff	plusw2,plusw0
  1573  001A4E  06E8               	decf	wreg,f,c
  1574  001A50  E2FC               	bc	u561
  1575  001A52  0012               	return	
  1576  001A54                     __end_of_new_px_char:
  1577                           	opt stack 0
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           plusw0	equ	0xFEB
  1583                           wreg	equ	0xFE8
  1584                           plusw2	equ	0xFDB
  1585                           status	equ	0xFD8
  1586                           
  1587 ;; *************** function _init *****************
  1588 ;; Defined at:
  1589 ;;		line 20 in file "main.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;		None
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  1    wreg      void 
  1596 ;; Registers used:
  1597 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;Total ram usage:        0 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; Hardware stack levels required when called:    5
  1610 ;; This function calls:
  1611 ;;		_initGLCD
  1612 ;; This function is called by:
  1613 ;;		_main
  1614 ;; This function uses a non-reentrant model
  1615 ;;
  1616                           
  1617                           	psect	text6
  1618  001A54                     __ptext6:
  1619                           	opt stack 0
  1620  001A54                     _init:
  1621                           	opt stack 25
  1622                           
  1623                           ;main.c: 25: LATA = 0x00;
  1624                           
  1625                           ;incstack = 0
  1626  001A54  0E00               	movlw	0
  1627  001A56  6E89               	movwf	3977,c	;volatile
  1628                           
  1629                           ;main.c: 26: LATB = 0x00;
  1630  001A58  0E00               	movlw	0
  1631  001A5A  6E8A               	movwf	3978,c	;volatile
  1632                           
  1633                           ;main.c: 27: LATC = 0x00;
  1634  001A5C  0E00               	movlw	0
  1635  001A5E  6E8B               	movwf	3979,c	;volatile
  1636                           
  1637                           ;main.c: 28: LATD = 0x00;
  1638  001A60  0E00               	movlw	0
  1639  001A62  6E8C               	movwf	3980,c	;volatile
  1640                           
  1641                           ;main.c: 29: LATE = 0x00;
  1642  001A64  0E00               	movlw	0
  1643  001A66  6E8D               	movwf	3981,c	;volatile
  1644                           
  1645                           ;main.c: 33: TRISA = 0xFF;
  1646  001A68  6892               	setf	3986,c	;volatile
  1647                           
  1648                           ;main.c: 34: TRISB = 0xFF;
  1649  001A6A  6893               	setf	3987,c	;volatile
  1650                           
  1651                           ;main.c: 35: TRISC = 0b10000000;
  1652  001A6C  0E80               	movlw	128
  1653  001A6E  6E94               	movwf	3988,c	;volatile
  1654                           
  1655                           ;main.c: 39: TRISD = 0b00000001;
  1656  001A70  0E01               	movlw	1
  1657  001A72  6E95               	movwf	3989,c	;volatile
  1658                           
  1659                           ;main.c: 45: TRISE = 0b00000100;
  1660  001A74  0E04               	movlw	4
  1661  001A76  6E96               	movwf	3990,c	;volatile
  1662                           
  1663                           ;main.c: 52: ADCON0 = 0x00;
  1664  001A78  0E00               	movlw	0
  1665  001A7A  6EC2               	movwf	4034,c	;volatile
  1666                           
  1667                           ;main.c: 53: ADCON1 = 0b00001111;
  1668  001A7C  0E0F               	movlw	15
  1669  001A7E  6EC1               	movwf	4033,c	;volatile
  1670                           
  1671                           ;main.c: 57: initGLCD();
  1672  001A80  EC37  F008         	call	_initGLCD	;wreg free
  1673  001A84  0012               	return		;funcret
  1674  001A86                     __end_of_init:
  1675                           	opt stack 0
  1676                           tblptru	equ	0xFF8
  1677                           tblptrh	equ	0xFF7
  1678                           tblptrl	equ	0xFF6
  1679                           tablat	equ	0xFF5
  1680                           plusw0	equ	0xFEB
  1681                           wreg	equ	0xFE8
  1682                           plusw2	equ	0xFDB
  1683                           status	equ	0xFD8
  1684                           
  1685 ;; *************** function _initGLCD *****************
  1686 ;; Defined at:
  1687 ;;		line 238 in file "GLCD_PIC_V1.1.c"
  1688 ;; Parameters:    Size  Location     Type
  1689 ;;		None
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;		None
  1692 ;; Return value:  Size  Location     Type
  1693 ;;                  1    wreg      void 
  1694 ;; Registers used:
  1695 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1703 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1705 ;;Total ram usage:        2 bytes
  1706 ;; Hardware stack levels used:    1
  1707 ;; Hardware stack levels required when called:    4
  1708 ;; This function calls:
  1709 ;;		_glcdDrawRectangle
  1710 ;;		_glcdSetCOLMOD
  1711 ;;		_glcdTransfer
  1712 ;;		_spiInit
  1713 ;; This function is called by:
  1714 ;;		_init
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           	psect	text7
  1719  00106E                     __ptext7:
  1720                           	opt stack 0
  1721  00106E                     _initGLCD:
  1722                           	opt stack 25
  1723                           
  1724                           ;GLCD_PIC_V1.1.c: 262: LATDbits.LATD0 = 1;
  1725                           
  1726                           ;incstack = 0
  1727  00106E  808C               	bsf	3980,0,c	;volatile
  1728                           
  1729                           ;GLCD_PIC_V1.1.c: 263: LATDbits.LATD1 = 1;
  1730  001070  828C               	bsf	3980,1,c	;volatile
  1731                           
  1732                           ;GLCD_PIC_V1.1.c: 264: TRISDbits.TRISD0 = 0;
  1733  001072  9095               	bcf	3989,0,c	;volatile
  1734                           
  1735                           ;GLCD_PIC_V1.1.c: 265: TRISDbits.TRISD1 = 0;
  1736  001074  9295               	bcf	3989,1,c	;volatile
  1737                           
  1738                           ;GLCD_PIC_V1.1.c: 268: spiInit(4);
  1739  001076  0E04               	movlw	4
  1740  001078  ECF4  F00C         	call	_spiInit
  1741                           
  1742                           ;GLCD_PIC_V1.1.c: 272: _delay((unsigned long)((20)*(40000000/4000.0)));
  1743  00107C  0E02               	movlw	2
  1744  00107E  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  1745  001080  0E04               	movlw	4
  1746  001082  6E1A               	movwf	??_initGLCD& (0+255),c
  1747  001084  0EBA               	movlw	186
  1748  001086                     u637:
  1749  001086  2EE8               	decfsz	wreg,f,c
  1750  001088  D7FE               	bra	u637
  1751  00108A  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1752  00108C  D7FC               	bra	u637
  1753  00108E  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  1754  001090  D7FA               	bra	u637
  1755  001092  D000               	nop2	
  1756                           
  1757                           ;GLCD_PIC_V1.1.c: 275: { glcdTransfer(INST_SWRESET, 1); _delay((unsigned long)((130)*(40
      +                          000000/4000.0))); };
  1758  001094  0E01               	movlw	1
  1759  001096  6E04               	movwf	glcdTransfer@cmd,c
  1760  001098  0E47               	movlw	low GLCD_PIC@INST_SWRESET
  1761  00109A  6EF6               	movwf	tblptrl,c
  1762  00109C                     	if	1	;There is more than 1 active tblptr byte
  1763  00109C  0E10               	movlw	high GLCD_PIC@INST_SWRESET
  1764  00109E  6EF7               	movwf	tblptrh,c
  1765  0010A0                     	endif
  1766  0010A0                     	if	0	;There are less than 3 active tblptr bytes
  1767  0010A0                     	endif
  1768  0010A0  0008               	tblrd		*
  1769  0010A2  50F5               	movf	tablat,w,c
  1770  0010A4  EC43  F00D         	call	_glcdTransfer
  1771  0010A8  0E07               	movlw	7
  1772  0010AA  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  1773  0010AC  0E99               	movlw	153
  1774  0010AE  6E1A               	movwf	??_initGLCD& (0+255),c
  1775  0010B0  0E49               	movlw	73
  1776  0010B2                     u647:
  1777  0010B2  2EE8               	decfsz	wreg,f,c
  1778  0010B4  D7FE               	bra	u647
  1779  0010B6  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1780  0010B8  D7FC               	bra	u647
  1781  0010BA  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  1782  0010BC  D7FA               	bra	u647
  1783  0010BE  F000               	nop	
  1784                           
  1785                           ;GLCD_PIC_V1.1.c: 277: { glcdTransfer(INST_SLPOUT, 1); _delay((unsigned long)((130)*(400
      +                          00000/4000.0))); };
  1786  0010C0  0E01               	movlw	1
  1787  0010C2  6E04               	movwf	glcdTransfer@cmd,c
  1788  0010C4  0E45               	movlw	low GLCD_PIC@INST_SLPOUT
  1789  0010C6  6EF6               	movwf	tblptrl,c
  1790  0010C8                     	if	1	;There is more than 1 active tblptr byte
  1791  0010C8  0E10               	movlw	high GLCD_PIC@INST_SLPOUT
  1792  0010CA  6EF7               	movwf	tblptrh,c
  1793  0010CC                     	endif
  1794  0010CC                     	if	0	;There are less than 3 active tblptr bytes
  1795  0010CC                     	endif
  1796  0010CC  0008               	tblrd		*
  1797  0010CE  50F5               	movf	tablat,w,c
  1798  0010D0  EC43  F00D         	call	_glcdTransfer
  1799  0010D4  0E07               	movlw	7
  1800  0010D6  6E1B               	movwf	(??_initGLCD+1)& (0+255),c
  1801  0010D8  0E99               	movlw	153
  1802  0010DA  6E1A               	movwf	??_initGLCD& (0+255),c
  1803  0010DC  0E49               	movlw	73
  1804  0010DE                     u657:
  1805  0010DE  2EE8               	decfsz	wreg,f,c
  1806  0010E0  D7FE               	bra	u657
  1807  0010E2  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  1808  0010E4  D7FC               	bra	u657
  1809  0010E6  2E1B               	decfsz	(??_initGLCD+1)& (0+255),f,c
  1810  0010E8  D7FA               	bra	u657
  1811  0010EA  F000               	nop	
  1812                           
  1813                           ;GLCD_PIC_V1.1.c: 280: glcdTransfer(INST_FRMCTR1, 1);
  1814  0010EC  0E01               	movlw	1
  1815  0010EE  6E04               	movwf	glcdTransfer@cmd,c
  1816  0010F0  0E33               	movlw	low GLCD_PIC@INST_FRMCTR1
  1817  0010F2  6EF6               	movwf	tblptrl,c
  1818  0010F4                     	if	1	;There is more than 1 active tblptr byte
  1819  0010F4  0E10               	movlw	high GLCD_PIC@INST_FRMCTR1
  1820  0010F6  6EF7               	movwf	tblptrh,c
  1821  0010F8                     	endif
  1822  0010F8                     	if	0	;There are less than 3 active tblptr bytes
  1823  0010F8                     	endif
  1824  0010F8  0008               	tblrd		*
  1825  0010FA  50F5               	movf	tablat,w,c
  1826  0010FC  EC43  F00D         	call	_glcdTransfer
  1827                           
  1828                           ;GLCD_PIC_V1.1.c: 281: glcdTransfer(0x00, 0);
  1829  001100  0E00               	movlw	0
  1830  001102  6E04               	movwf	glcdTransfer@cmd,c
  1831  001104  0E00               	movlw	0
  1832  001106  EC43  F00D         	call	_glcdTransfer
  1833                           
  1834                           ;GLCD_PIC_V1.1.c: 282: glcdTransfer(0x06, 0);
  1835  00110A  0E00               	movlw	0
  1836  00110C  6E04               	movwf	glcdTransfer@cmd,c
  1837  00110E  0E06               	movlw	6
  1838  001110  EC43  F00D         	call	_glcdTransfer
  1839                           
  1840                           ;GLCD_PIC_V1.1.c: 283: glcdTransfer(0x03, 0);
  1841  001114  0E00               	movlw	0
  1842  001116  6E04               	movwf	glcdTransfer@cmd,c
  1843  001118  0E03               	movlw	3
  1844  00111A  EC43  F00D         	call	_glcdTransfer
  1845                           
  1846                           ;GLCD_PIC_V1.1.c: 285: glcdTransfer(INST_FRMCTR2, 1);
  1847  00111E  0E01               	movlw	1
  1848  001120  6E04               	movwf	glcdTransfer@cmd,c
  1849  001122  0E32               	movlw	low GLCD_PIC@INST_FRMCTR2
  1850  001124  6EF6               	movwf	tblptrl,c
  1851  001126                     	if	1	;There is more than 1 active tblptr byte
  1852  001126  0E10               	movlw	high GLCD_PIC@INST_FRMCTR2
  1853  001128  6EF7               	movwf	tblptrh,c
  1854  00112A                     	endif
  1855  00112A                     	if	0	;There are less than 3 active tblptr bytes
  1856  00112A                     	endif
  1857  00112A  0008               	tblrd		*
  1858  00112C  50F5               	movf	tablat,w,c
  1859  00112E  EC43  F00D         	call	_glcdTransfer
  1860                           
  1861                           ;GLCD_PIC_V1.1.c: 286: glcdTransfer(0x01, 0);
  1862  001132  0E00               	movlw	0
  1863  001134  6E04               	movwf	glcdTransfer@cmd,c
  1864  001136  0E01               	movlw	1
  1865  001138  EC43  F00D         	call	_glcdTransfer
  1866                           
  1867                           ;GLCD_PIC_V1.1.c: 287: glcdTransfer(0x2C, 0);
  1868  00113C  0E00               	movlw	0
  1869  00113E  6E04               	movwf	glcdTransfer@cmd,c
  1870  001140  0E2C               	movlw	44
  1871  001142  EC43  F00D         	call	_glcdTransfer
  1872                           
  1873                           ;GLCD_PIC_V1.1.c: 288: glcdTransfer(0x2D, 0);
  1874  001146  0E00               	movlw	0
  1875  001148  6E04               	movwf	glcdTransfer@cmd,c
  1876  00114A  0E2D               	movlw	45
  1877  00114C  EC43  F00D         	call	_glcdTransfer
  1878                           
  1879                           ;GLCD_PIC_V1.1.c: 290: glcdTransfer(INST_FRMCTR3, 1);
  1880  001150  0E01               	movlw	1
  1881  001152  6E04               	movwf	glcdTransfer@cmd,c
  1882  001154  0E31               	movlw	low GLCD_PIC@INST_FRMCTR3
  1883  001156  6EF6               	movwf	tblptrl,c
  1884  001158                     	if	1	;There is more than 1 active tblptr byte
  1885  001158  0E10               	movlw	high GLCD_PIC@INST_FRMCTR3
  1886  00115A  6EF7               	movwf	tblptrh,c
  1887  00115C                     	endif
  1888  00115C                     	if	0	;There are less than 3 active tblptr bytes
  1889  00115C                     	endif
  1890  00115C  0008               	tblrd		*
  1891  00115E  50F5               	movf	tablat,w,c
  1892  001160  EC43  F00D         	call	_glcdTransfer
  1893                           
  1894                           ;GLCD_PIC_V1.1.c: 291: glcdTransfer(0x01, 0);
  1895  001164  0E00               	movlw	0
  1896  001166  6E04               	movwf	glcdTransfer@cmd,c
  1897  001168  0E01               	movlw	1
  1898  00116A  EC43  F00D         	call	_glcdTransfer
  1899                           
  1900                           ;GLCD_PIC_V1.1.c: 292: glcdTransfer(0x2C, 0);
  1901  00116E  0E00               	movlw	0
  1902  001170  6E04               	movwf	glcdTransfer@cmd,c
  1903  001172  0E2C               	movlw	44
  1904  001174  EC43  F00D         	call	_glcdTransfer
  1905                           
  1906                           ;GLCD_PIC_V1.1.c: 293: glcdTransfer(0x2D, 0);
  1907  001178  0E00               	movlw	0
  1908  00117A  6E04               	movwf	glcdTransfer@cmd,c
  1909  00117C  0E2D               	movlw	45
  1910  00117E  EC43  F00D         	call	_glcdTransfer
  1911                           
  1912                           ;GLCD_PIC_V1.1.c: 295: glcdTransfer(INST_INVCTR, 1);
  1913  001182  0E01               	movlw	1
  1914  001184  6E04               	movwf	glcdTransfer@cmd,c
  1915  001186  0E30               	movlw	low GLCD_PIC@INST_INVCTR
  1916  001188  6EF6               	movwf	tblptrl,c
  1917  00118A                     	if	1	;There is more than 1 active tblptr byte
  1918  00118A  0E10               	movlw	high GLCD_PIC@INST_INVCTR
  1919  00118C  6EF7               	movwf	tblptrh,c
  1920  00118E                     	endif
  1921  00118E                     	if	0	;There are less than 3 active tblptr bytes
  1922  00118E                     	endif
  1923  00118E  0008               	tblrd		*
  1924  001190  50F5               	movf	tablat,w,c
  1925  001192  EC43  F00D         	call	_glcdTransfer
  1926                           
  1927                           ;GLCD_PIC_V1.1.c: 296: glcdTransfer(0x00, 0);
  1928  001196  0E00               	movlw	0
  1929  001198  6E04               	movwf	glcdTransfer@cmd,c
  1930  00119A  0E00               	movlw	0
  1931  00119C  EC43  F00D         	call	_glcdTransfer
  1932                           
  1933                           ;GLCD_PIC_V1.1.c: 299: glcdTransfer(INST_PWCTR1, 1);
  1934  0011A0  0E01               	movlw	1
  1935  0011A2  6E04               	movwf	glcdTransfer@cmd,c
  1936  0011A4  0E2F               	movlw	low GLCD_PIC@INST_PWCTR1
  1937  0011A6  6EF6               	movwf	tblptrl,c
  1938  0011A8                     	if	1	;There is more than 1 active tblptr byte
  1939  0011A8  0E10               	movlw	high GLCD_PIC@INST_PWCTR1
  1940  0011AA  6EF7               	movwf	tblptrh,c
  1941  0011AC                     	endif
  1942  0011AC                     	if	0	;There are less than 3 active tblptr bytes
  1943  0011AC                     	endif
  1944  0011AC  0008               	tblrd		*
  1945  0011AE  50F5               	movf	tablat,w,c
  1946  0011B0  EC43  F00D         	call	_glcdTransfer
  1947                           
  1948                           ;GLCD_PIC_V1.1.c: 300: glcdTransfer(0xA2, 0);
  1949  0011B4  0E00               	movlw	0
  1950  0011B6  6E04               	movwf	glcdTransfer@cmd,c
  1951  0011B8  0EA2               	movlw	162
  1952  0011BA  EC43  F00D         	call	_glcdTransfer
  1953                           
  1954                           ;GLCD_PIC_V1.1.c: 301: glcdTransfer(0x02, 0);
  1955  0011BE  0E00               	movlw	0
  1956  0011C0  6E04               	movwf	glcdTransfer@cmd,c
  1957  0011C2  0E02               	movlw	2
  1958  0011C4  EC43  F00D         	call	_glcdTransfer
  1959                           
  1960                           ;GLCD_PIC_V1.1.c: 302: glcdTransfer(0x84, 0);
  1961  0011C8  0E00               	movlw	0
  1962  0011CA  6E04               	movwf	glcdTransfer@cmd,c
  1963  0011CC  0E84               	movlw	132
  1964  0011CE  EC43  F00D         	call	_glcdTransfer
  1965                           
  1966                           ;GLCD_PIC_V1.1.c: 304: glcdTransfer(INST_PWCTR2, 1);
  1967  0011D2  0E01               	movlw	1
  1968  0011D4  6E04               	movwf	glcdTransfer@cmd,c
  1969  0011D6  0E2E               	movlw	low GLCD_PIC@INST_PWCTR2
  1970  0011D8  6EF6               	movwf	tblptrl,c
  1971  0011DA                     	if	1	;There is more than 1 active tblptr byte
  1972  0011DA  0E10               	movlw	high GLCD_PIC@INST_PWCTR2
  1973  0011DC  6EF7               	movwf	tblptrh,c
  1974  0011DE                     	endif
  1975  0011DE                     	if	0	;There are less than 3 active tblptr bytes
  1976  0011DE                     	endif
  1977  0011DE  0008               	tblrd		*
  1978  0011E0  50F5               	movf	tablat,w,c
  1979  0011E2  EC43  F00D         	call	_glcdTransfer
  1980                           
  1981                           ;GLCD_PIC_V1.1.c: 305: glcdTransfer(0xC5, 0);
  1982  0011E6  0E00               	movlw	0
  1983  0011E8  6E04               	movwf	glcdTransfer@cmd,c
  1984  0011EA  0EC5               	movlw	197
  1985  0011EC  EC43  F00D         	call	_glcdTransfer
  1986                           
  1987                           ;GLCD_PIC_V1.1.c: 307: glcdTransfer(INST_PWCTR3, 1);
  1988  0011F0  0E01               	movlw	1
  1989  0011F2  6E04               	movwf	glcdTransfer@cmd,c
  1990  0011F4  0E2D               	movlw	low GLCD_PIC@INST_PWCTR3
  1991  0011F6  6EF6               	movwf	tblptrl,c
  1992  0011F8                     	if	1	;There is more than 1 active tblptr byte
  1993  0011F8  0E10               	movlw	high GLCD_PIC@INST_PWCTR3
  1994  0011FA  6EF7               	movwf	tblptrh,c
  1995  0011FC                     	endif
  1996  0011FC                     	if	0	;There are less than 3 active tblptr bytes
  1997  0011FC                     	endif
  1998  0011FC  0008               	tblrd		*
  1999  0011FE  50F5               	movf	tablat,w,c
  2000  001200  EC43  F00D         	call	_glcdTransfer
  2001                           
  2002                           ;GLCD_PIC_V1.1.c: 308: glcdTransfer(0x0A, 0);
  2003  001204  0E00               	movlw	0
  2004  001206  6E04               	movwf	glcdTransfer@cmd,c
  2005  001208  0E0A               	movlw	10
  2006  00120A  EC43  F00D         	call	_glcdTransfer
  2007                           
  2008                           ;GLCD_PIC_V1.1.c: 309: glcdTransfer(0x00, 0);
  2009  00120E  0E00               	movlw	0
  2010  001210  6E04               	movwf	glcdTransfer@cmd,c
  2011  001212  0E00               	movlw	0
  2012  001214  EC43  F00D         	call	_glcdTransfer
  2013                           
  2014                           ;GLCD_PIC_V1.1.c: 311: glcdTransfer(INST_PWCTR4, 1);
  2015  001218  0E01               	movlw	1
  2016  00121A  6E04               	movwf	glcdTransfer@cmd,c
  2017  00121C  0E2C               	movlw	low GLCD_PIC@INST_PWCTR4
  2018  00121E  6EF6               	movwf	tblptrl,c
  2019  001220                     	if	1	;There is more than 1 active tblptr byte
  2020  001220  0E10               	movlw	high GLCD_PIC@INST_PWCTR4
  2021  001222  6EF7               	movwf	tblptrh,c
  2022  001224                     	endif
  2023  001224                     	if	0	;There are less than 3 active tblptr bytes
  2024  001224                     	endif
  2025  001224  0008               	tblrd		*
  2026  001226  50F5               	movf	tablat,w,c
  2027  001228  EC43  F00D         	call	_glcdTransfer
  2028                           
  2029                           ;GLCD_PIC_V1.1.c: 312: glcdTransfer(0x8A, 0);
  2030  00122C  0E00               	movlw	0
  2031  00122E  6E04               	movwf	glcdTransfer@cmd,c
  2032  001230  0E8A               	movlw	138
  2033  001232  EC43  F00D         	call	_glcdTransfer
  2034                           
  2035                           ;GLCD_PIC_V1.1.c: 313: glcdTransfer(0x2A, 0);
  2036  001236  0E00               	movlw	0
  2037  001238  6E04               	movwf	glcdTransfer@cmd,c
  2038  00123A  0E2A               	movlw	42
  2039  00123C  EC43  F00D         	call	_glcdTransfer
  2040                           
  2041                           ;GLCD_PIC_V1.1.c: 315: glcdTransfer(INST_PWCTR5, 1);
  2042  001240  0E01               	movlw	1
  2043  001242  6E04               	movwf	glcdTransfer@cmd,c
  2044  001244  0E2B               	movlw	low GLCD_PIC@INST_PWCTR5
  2045  001246  6EF6               	movwf	tblptrl,c
  2046  001248                     	if	1	;There is more than 1 active tblptr byte
  2047  001248  0E10               	movlw	high GLCD_PIC@INST_PWCTR5
  2048  00124A  6EF7               	movwf	tblptrh,c
  2049  00124C                     	endif
  2050  00124C                     	if	0	;There are less than 3 active tblptr bytes
  2051  00124C                     	endif
  2052  00124C  0008               	tblrd		*
  2053  00124E  50F5               	movf	tablat,w,c
  2054  001250  EC43  F00D         	call	_glcdTransfer
  2055                           
  2056                           ;GLCD_PIC_V1.1.c: 316: glcdTransfer(0x8A, 0);
  2057  001254  0E00               	movlw	0
  2058  001256  6E04               	movwf	glcdTransfer@cmd,c
  2059  001258  0E8A               	movlw	138
  2060  00125A  EC43  F00D         	call	_glcdTransfer
  2061                           
  2062                           ;GLCD_PIC_V1.1.c: 317: glcdTransfer(0x2A, 0);
  2063  00125E  0E00               	movlw	0
  2064  001260  6E04               	movwf	glcdTransfer@cmd,c
  2065  001262  0E2A               	movlw	42
  2066  001264  EC43  F00D         	call	_glcdTransfer
  2067                           
  2068                           ;GLCD_PIC_V1.1.c: 320: glcdTransfer(INST_VMCTR1, 1);
  2069  001268  0E01               	movlw	1
  2070  00126A  6E04               	movwf	glcdTransfer@cmd,c
  2071  00126C  0E2A               	movlw	low GLCD_PIC@INST_VMCTR1
  2072  00126E  6EF6               	movwf	tblptrl,c
  2073  001270                     	if	1	;There is more than 1 active tblptr byte
  2074  001270  0E10               	movlw	high GLCD_PIC@INST_VMCTR1
  2075  001272  6EF7               	movwf	tblptrh,c
  2076  001274                     	endif
  2077  001274                     	if	0	;There are less than 3 active tblptr bytes
  2078  001274                     	endif
  2079  001274  0008               	tblrd		*
  2080  001276  50F5               	movf	tablat,w,c
  2081  001278  EC43  F00D         	call	_glcdTransfer
  2082                           
  2083                           ;GLCD_PIC_V1.1.c: 321: glcdTransfer(0x3C, 0);
  2084  00127C  0E00               	movlw	0
  2085  00127E  6E04               	movwf	glcdTransfer@cmd,c
  2086  001280  0E3C               	movlw	60
  2087  001282  EC43  F00D         	call	_glcdTransfer
  2088                           
  2089                           ;GLCD_PIC_V1.1.c: 323: glcdTransfer(INST_INVOFF, 1);
  2090  001286  0E01               	movlw	1
  2091  001288  6E04               	movwf	glcdTransfer@cmd,c
  2092  00128A  0E42               	movlw	low GLCD_PIC@INST_INVOFF
  2093  00128C  6EF6               	movwf	tblptrl,c
  2094  00128E                     	if	1	;There is more than 1 active tblptr byte
  2095  00128E  0E10               	movlw	high GLCD_PIC@INST_INVOFF
  2096  001290  6EF7               	movwf	tblptrh,c
  2097  001292                     	endif
  2098  001292                     	if	0	;There are less than 3 active tblptr bytes
  2099  001292                     	endif
  2100  001292  0008               	tblrd		*
  2101  001294  50F5               	movf	tablat,w,c
  2102  001296  EC43  F00D         	call	_glcdTransfer
  2103                           
  2104                           ;GLCD_PIC_V1.1.c: 331: glcdSetCOLMOD(18);
  2105  00129A  0E12               	movlw	18
  2106  00129C  ECCC  F00C         	call	_glcdSetCOLMOD
  2107                           
  2108                           ;GLCD_PIC_V1.1.c: 334: glcdTransfer(INST_GAMSET, 1);
  2109  0012A0  0E01               	movlw	1
  2110  0012A2  6E04               	movwf	glcdTransfer@cmd,c
  2111  0012A4  0E40               	movlw	low GLCD_PIC@INST_GAMSET
  2112  0012A6  6EF6               	movwf	tblptrl,c
  2113  0012A8                     	if	1	;There is more than 1 active tblptr byte
  2114  0012A8  0E10               	movlw	high GLCD_PIC@INST_GAMSET
  2115  0012AA  6EF7               	movwf	tblptrh,c
  2116  0012AC                     	endif
  2117  0012AC                     	if	0	;There are less than 3 active tblptr bytes
  2118  0012AC                     	endif
  2119  0012AC  0008               	tblrd		*
  2120  0012AE  50F5               	movf	tablat,w,c
  2121  0012B0  EC43  F00D         	call	_glcdTransfer
  2122                           
  2123                           ;GLCD_PIC_V1.1.c: 335: glcdTransfer(0x01, 0);
  2124  0012B4  0E00               	movlw	0
  2125  0012B6  6E04               	movwf	glcdTransfer@cmd,c
  2126  0012B8  0E01               	movlw	1
  2127  0012BA  EC43  F00D         	call	_glcdTransfer
  2128                           
  2129                           ;GLCD_PIC_V1.1.c: 337: glcdTransfer(INST_IDMOFF, 1);
  2130  0012BE  0E01               	movlw	1
  2131  0012C0  6E04               	movwf	glcdTransfer@cmd,c
  2132  0012C2  0E36               	movlw	low GLCD_PIC@INST_IDMOFF
  2133  0012C4  6EF6               	movwf	tblptrl,c
  2134  0012C6                     	if	1	;There is more than 1 active tblptr byte
  2135  0012C6  0E10               	movlw	high GLCD_PIC@INST_IDMOFF
  2136  0012C8  6EF7               	movwf	tblptrh,c
  2137  0012CA                     	endif
  2138  0012CA                     	if	0	;There are less than 3 active tblptr bytes
  2139  0012CA                     	endif
  2140  0012CA  0008               	tblrd		*
  2141  0012CC  50F5               	movf	tablat,w,c
  2142  0012CE  EC43  F00D         	call	_glcdTransfer
  2143                           
  2144                           ;GLCD_PIC_V1.1.c: 339: glcdTransfer(INST_NORON, 1);
  2145  0012D2  0E01               	movlw	1
  2146  0012D4  6E04               	movwf	glcdTransfer@cmd,c
  2147  0012D6  0E43               	movlw	low GLCD_PIC@INST_NORON
  2148  0012D8  6EF6               	movwf	tblptrl,c
  2149  0012DA                     	if	1	;There is more than 1 active tblptr byte
  2150  0012DA  0E10               	movlw	high GLCD_PIC@INST_NORON
  2151  0012DC  6EF7               	movwf	tblptrh,c
  2152  0012DE                     	endif
  2153  0012DE                     	if	0	;There are less than 3 active tblptr bytes
  2154  0012DE                     	endif
  2155  0012DE  0008               	tblrd		*
  2156  0012E0  50F5               	movf	tablat,w,c
  2157  0012E2  EC43  F00D         	call	_glcdTransfer
  2158                           
  2159                           ;GLCD_PIC_V1.1.c: 342: MADCTLbits.MX = 1;
  2160  0012E6  8C3F               	bsf	_MADCTLbits,6,c
  2161                           
  2162                           ;GLCD_PIC_V1.1.c: 343: MADCTLbits.MY = 1;
  2163  0012E8  8E3F               	bsf	_MADCTLbits,7,c
  2164                           
  2165                           ;GLCD_PIC_V1.1.c: 344: MADCTLbits.MV = 1;
  2166  0012EA  8A3F               	bsf	_MADCTLbits,5,c
  2167                           
  2168                           ;GLCD_PIC_V1.1.c: 345: MADCTLbits.ML = 0;
  2169  0012EC  983F               	bcf	_MADCTLbits,4,c
  2170                           
  2171                           ;GLCD_PIC_V1.1.c: 346: MADCTLbits.RGB = 0;
  2172  0012EE  963F               	bcf	_MADCTLbits,3,c
  2173                           
  2174                           ;GLCD_PIC_V1.1.c: 347: MADCTLbits.MH = 0;
  2175  0012F0  943F               	bcf	_MADCTLbits,2,c
  2176                           
  2177                           ;GLCD_PIC_V1.1.c: 348: { glcdTransfer(INST_MADCTL, 1); glcdTransfer(MADCTLbits.reg, 0);}
      +                          ;
  2178  0012F2  0E01               	movlw	1
  2179  0012F4  6E04               	movwf	glcdTransfer@cmd,c
  2180  0012F6  0E37               	movlw	low GLCD_PIC@INST_MADCTL
  2181  0012F8  6EF6               	movwf	tblptrl,c
  2182  0012FA                     	if	1	;There is more than 1 active tblptr byte
  2183  0012FA  0E10               	movlw	high GLCD_PIC@INST_MADCTL
  2184  0012FC  6EF7               	movwf	tblptrh,c
  2185  0012FE                     	endif
  2186  0012FE                     	if	0	;There are less than 3 active tblptr bytes
  2187  0012FE                     	endif
  2188  0012FE  0008               	tblrd		*
  2189  001300  50F5               	movf	tablat,w,c
  2190  001302  EC43  F00D         	call	_glcdTransfer
  2191  001306  0E00               	movlw	0
  2192  001308  6E04               	movwf	glcdTransfer@cmd,c
  2193  00130A  503F               	movf	_MADCTLbits,w,c
  2194  00130C  EC43  F00D         	call	_glcdTransfer
  2195                           
  2196                           ;GLCD_PIC_V1.1.c: 352: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  2197  001310  0E6A               	movlw	low _GLCD_SIZE_HORZ
  2198  001312  6EF6               	movwf	tblptrl,c
  2199  001314                     	if	1	;There is more than 1 active tblptr byte
  2200  001314  0E10               	movlw	high _GLCD_SIZE_HORZ
  2201  001316  6EF7               	movwf	tblptrh,c
  2202  001318                     	endif
  2203  001318                     	if	0	;There are less than 3 active tblptr bytes
  2204  001318                     	endif
  2205  001318  0008               	tblrd		*
  2206  00131A  CFF5 F007          	movff	tablat,glcdDrawRectangle@XE
  2207  00131E  0E00               	movlw	0
  2208  001320  6E08               	movwf	glcdDrawRectangle@YS,c
  2209  001322  0E69               	movlw	low _GLCD_SIZE_VERT
  2210  001324  6EF6               	movwf	tblptrl,c
  2211  001326                     	if	1	;There is more than 1 active tblptr byte
  2212  001326  0E10               	movlw	high _GLCD_SIZE_VERT
  2213  001328  6EF7               	movwf	tblptrh,c
  2214  00132A                     	endif
  2215  00132A                     	if	0	;There are less than 3 active tblptr bytes
  2216  00132A                     	endif
  2217  00132A  0008               	tblrd		*
  2218  00132C  CFF5 F009          	movff	tablat,glcdDrawRectangle@YE
  2219  001330  0E25               	movlw	low _BLACK
  2220  001332  6EF6               	movwf	tblptrl,c
  2221  001334                     	if	1	;There is more than 1 active tblptr byte
  2222  001334  0E10               	movlw	high _BLACK
  2223  001336  6EF7               	movwf	tblptrh,c
  2224  001338                     	endif
  2225  001338                     	if	0	;There are less than 3 active tblptr bytes
  2226  001338                     	endif
  2227  001338  0009               	tblrd		*+
  2228  00133A  CFF5 F00A          	movff	tablat,glcdDrawRectangle@color
  2229  00133E  0009               	tblrd		*+
  2230  001340  CFF5 F00B          	movff	tablat,glcdDrawRectangle@color+1
  2231  001344  0009               	tblrd		*+
  2232  001346  CFF5 F00C          	movff	tablat,glcdDrawRectangle@color+2
  2233  00134A  000A               	tblrd		*-
  2234  00134C  CFF5 F00D          	movff	tablat,glcdDrawRectangle@color+3
  2235  001350  0E00               	movlw	0
  2236  001352  ECBE  F00A         	call	_glcdDrawRectangle
  2237                           
  2238                           ;GLCD_PIC_V1.1.c: 354: glcdTransfer(INST_DISPON, 1);
  2239  001356  0E01               	movlw	1
  2240  001358  6E04               	movwf	glcdTransfer@cmd,c
  2241  00135A  0E3E               	movlw	low GLCD_PIC@INST_DISPON
  2242  00135C  6EF6               	movwf	tblptrl,c
  2243  00135E                     	if	1	;There is more than 1 active tblptr byte
  2244  00135E  0E10               	movlw	high GLCD_PIC@INST_DISPON
  2245  001360  6EF7               	movwf	tblptrh,c
  2246  001362                     	endif
  2247  001362                     	if	0	;There are less than 3 active tblptr bytes
  2248  001362                     	endif
  2249  001362  0008               	tblrd		*
  2250  001364  50F5               	movf	tablat,w,c
  2251  001366  EC43  F00D         	call	_glcdTransfer
  2252                           
  2253                           ;GLCD_PIC_V1.1.c: 355: _delay((unsigned long)((10)*(40000000/4000.0)));
  2254  00136A  0E82               	movlw	130
  2255  00136C  6E1A               	movwf	??_initGLCD& (0+255),c
  2256  00136E  0EDE               	movlw	222
  2257  001370                     u667:
  2258  001370  2EE8               	decfsz	wreg,f,c
  2259  001372  D7FE               	bra	u667
  2260  001374  2E1A               	decfsz	??_initGLCD& (0+255),f,c
  2261  001376  D7FC               	bra	u667
  2262  001378  0012               	return		;funcret
  2263  00137A                     __end_of_initGLCD:
  2264                           	opt stack 0
  2265                           tblptru	equ	0xFF8
  2266                           tblptrh	equ	0xFF7
  2267                           tblptrl	equ	0xFF6
  2268                           tablat	equ	0xFF5
  2269                           plusw0	equ	0xFEB
  2270                           wreg	equ	0xFE8
  2271                           plusw2	equ	0xFDB
  2272                           status	equ	0xFD8
  2273                           
  2274 ;; *************** function _spiInit *****************
  2275 ;; Defined at:
  2276 ;;		line 54 in file "SPI_PIC.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;  divider         1    wreg     unsigned char 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  divider         1    0[COMRAM] unsigned char 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      void 
  2283 ;; Registers used:
  2284 ;;		wreg, status,2, status,0
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2294 ;;Total ram usage:        1 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; This function calls:
  2297 ;;		Nothing
  2298 ;; This function is called by:
  2299 ;;		_initGLCD
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           	psect	text8
  2304  0019E8                     __ptext8:
  2305                           	opt stack 0
  2306  0019E8                     _spiInit:
  2307                           	opt stack 28
  2308                           
  2309                           ;incstack = 0
  2310                           ;spiInit@divider stored from wreg
  2311  0019E8  6E01               	movwf	spiInit@divider,c
  2312                           
  2313                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
  2314  0019EA  9AC6               	bcf	4038,5,c	;volatile
  2315                           
  2316                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
  2317  0019EC  0E00               	movlw	0
  2318  0019EE  6EC7               	movwf	4039,c	;volatile
  2319                           
  2320                           ;SPI_PIC.c: 71: switch(divider){
  2321  0019F0  D007               	goto	l172
  2322  0019F2                     
  2323                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
  2324  0019F2  0E11               	movlw	17
  2325  0019F4  D003               	goto	L4
  2326  0019F6                     
  2327                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
  2328  0019F6  0E12               	movlw	18
  2329  0019F8  D001               	goto	L4
  2330  0019FA                     
  2331                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
  2332  0019FA  0E10               	movlw	16
  2333  0019FC                     L4:
  2334  0019FC  6EC6               	movwf	4038,c	;volatile
  2335                           
  2336                           ;SPI_PIC.c: 83: }
  2337  0019FE  D00B               	goto	l174
  2338  001A00                     l172:
  2339  001A00  5001               	movf	spiInit@divider,w,c
  2340                           
  2341                           ; Switch size 1, requested type "space"
  2342                           ; Number of cases is 3, Range of values is 4 to 64
  2343                           ; switch strategies available:
  2344                           ; Name         Instructions Cycles
  2345                           ; simple_byte           10     6 (average)
  2346                           ;	Chosen strategy is simple_byte
  2347  001A02  0A04               	xorlw	4	; case 4
  2348  001A04  B4D8               	btfsc	status,2,c
  2349  001A06  D7F9               	goto	l177
  2350  001A08  0A14               	xorlw	20	; case 16
  2351  001A0A  B4D8               	btfsc	status,2,c
  2352  001A0C  D7F2               	goto	l175
  2353  001A0E  0A50               	xorlw	80	; case 64
  2354  001A10  B4D8               	btfsc	status,2,c
  2355  001A12  D7F1               	goto	l176
  2356  001A14  D7F2               	goto	l177
  2357  001A16                     l174:
  2358                           
  2359                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
  2360  001A16  9A94               	bcf	3988,5,c	;volatile
  2361                           
  2362                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
  2363  001A18  8894               	bsf	3988,4,c	;volatile
  2364                           
  2365                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
  2366  001A1A  9694               	bcf	3988,3,c	;volatile
  2367                           
  2368                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
  2369  001A1C  8AC6               	bsf	4038,5,c	;volatile
  2370  001A1E  0012               	return		;funcret
  2371  001A20                     __end_of_spiInit:
  2372                           	opt stack 0
  2373                           tblptru	equ	0xFF8
  2374                           tblptrh	equ	0xFF7
  2375                           tblptrl	equ	0xFF6
  2376                           tablat	equ	0xFF5
  2377                           plusw0	equ	0xFEB
  2378                           wreg	equ	0xFE8
  2379                           plusw2	equ	0xFDB
  2380                           status	equ	0xFD8
  2381                           
  2382 ;; *************** function _glcdSetCOLMOD *****************
  2383 ;; Defined at:
  2384 ;;		line 167 in file "GLCD_PIC_V1.1.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;  numBitsPerPi    1    wreg     unsigned char 
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;  numBitsPerPi    1    6[COMRAM] unsigned char 
  2389 ;;  rawData         2    7[COMRAM] unsigned short 
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  1    wreg      void 
  2392 ;; Registers used:
  2393 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;Total ram usage:        3 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; Hardware stack levels required when called:    3
  2406 ;; This function calls:
  2407 ;;		_glcdTransfer
  2408 ;; This function is called by:
  2409 ;;		_initGLCD
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text9
  2414  001998                     __ptext9:
  2415                           	opt stack 0
  2416  001998                     _glcdSetCOLMOD:
  2417                           	opt stack 25
  2418                           
  2419                           ;incstack = 0
  2420                           ;glcdSetCOLMOD@numBitsPerPixel stored from wreg
  2421  001998  6E07               	movwf	glcdSetCOLMOD@numBitsPerPixel,c
  2422                           
  2423                           ;GLCD_PIC_V1.1.c: 176: unsigned short rawData;
  2424                           ;GLCD_PIC_V1.1.c: 177: switch(numBitsPerPixel){
  2425  00199A  D00D               	goto	l307
  2426  00199C                     
  2427                           ;GLCD_PIC_V1.1.c: 179: rawData = 0b00000011;
  2428  00199C  0E00               	movlw	0
  2429  00199E  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2430  0019A0  0E03               	movlw	3
  2431  0019A2  D003               	goto	L6
  2432  0019A4                     
  2433                           ;GLCD_PIC_V1.1.c: 182: rawData = 0b00000101;
  2434  0019A4  0E00               	movlw	0
  2435  0019A6  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2436  0019A8  0E05               	movlw	5
  2437  0019AA                     L6:
  2438  0019AA  6E08               	movwf	glcdSetCOLMOD@rawData,c
  2439                           
  2440                           ;GLCD_PIC_V1.1.c: 186: break;
  2441  0019AC  D00D               	goto	l309
  2442  0019AE                     
  2443                           ;GLCD_PIC_V1.1.c: 188: rawData = 0b00000110;
  2444  0019AE  0E00               	movlw	0
  2445  0019B0  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  2446  0019B2  0E06               	movlw	6
  2447  0019B4  D7FA               	goto	L6
  2448  0019B6                     l307:
  2449  0019B6  5007               	movf	glcdSetCOLMOD@numBitsPerPixel,w,c
  2450                           
  2451                           ; Switch size 1, requested type "space"
  2452                           ; Number of cases is 3, Range of values is 12 to 18
  2453                           ; switch strategies available:
  2454                           ; Name         Instructions Cycles
  2455                           ; simple_byte           10     6 (average)
  2456                           ;	Chosen strategy is simple_byte
  2457  0019B8  0A0C               	xorlw	12	; case 12
  2458  0019BA  B4D8               	btfsc	status,2,c
  2459  0019BC  D7EF               	goto	l308
  2460  0019BE  0A1C               	xorlw	28	; case 16
  2461  0019C0  B4D8               	btfsc	status,2,c
  2462  0019C2  D7F0               	goto	l310
  2463  0019C4  0A02               	xorlw	2	; case 18
  2464  0019C6  D7F3               	goto	l312
  2465  0019C8                     l309:
  2466                           
  2467                           ;GLCD_PIC_V1.1.c: 191: glcdTransfer(INST_COLMOD, 1);
  2468  0019C8  0E01               	movlw	1
  2469  0019CA  6E04               	movwf	glcdTransfer@cmd,c
  2470  0019CC  0E34               	movlw	low GLCD_PIC@INST_COLMOD
  2471  0019CE  6EF6               	movwf	tblptrl,c
  2472  0019D0                     	if	1	;There is more than 1 active tblptr byte
  2473  0019D0  0E10               	movlw	high GLCD_PIC@INST_COLMOD
  2474  0019D2  6EF7               	movwf	tblptrh,c
  2475  0019D4                     	endif
  2476  0019D4                     	if	0	;There are less than 3 active tblptr bytes
  2477  0019D4                     	endif
  2478  0019D4  0008               	tblrd		*
  2479  0019D6  50F5               	movf	tablat,w,c
  2480  0019D8  EC43  F00D         	call	_glcdTransfer
  2481                           
  2482                           ;GLCD_PIC_V1.1.c: 192: glcdTransfer(rawData, 0);
  2483  0019DC  0E00               	movlw	0
  2484  0019DE  6E04               	movwf	glcdTransfer@cmd,c
  2485  0019E0  5008               	movf	glcdSetCOLMOD@rawData,w,c
  2486  0019E2  EC43  F00D         	call	_glcdTransfer
  2487  0019E6  0012               	return		;funcret
  2488  0019E8                     __end_of_glcdSetCOLMOD:
  2489                           	opt stack 0
  2490                           tblptru	equ	0xFF8
  2491                           tblptrh	equ	0xFF7
  2492                           tblptrl	equ	0xFF6
  2493                           tablat	equ	0xFF5
  2494                           plusw0	equ	0xFEB
  2495                           wreg	equ	0xFE8
  2496                           plusw2	equ	0xFDB
  2497                           status	equ	0xFD8
  2498                           
  2499 ;; *************** function _glcdDrawRectangle *****************
  2500 ;; Defined at:
  2501 ;;		line 38 in file "GLCD_PIC_V1.1.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  XS              1    wreg     unsigned char 
  2504 ;;  XE              1    6[COMRAM] unsigned char 
  2505 ;;  YS              1    7[COMRAM] unsigned char 
  2506 ;;  YE              1    8[COMRAM] unsigned char 
  2507 ;;  color           4    9[COMRAM] unsigned long 
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  XS              1   24[COMRAM] unsigned char 
  2510 ;;  i               2   19[COMRAM] unsigned short 
  2511 ;;  colorData       3   21[COMRAM] unsigned char [3]
  2512 ;;  numLoops        2   17[COMRAM] unsigned short 
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      void 
  2515 ;; Registers used:
  2516 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2522 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2526 ;;Total ram usage:       19 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    3
  2529 ;; This function calls:
  2530 ;;		___wmul
  2531 ;;		_glcdTransfer
  2532 ;;		_spiSend
  2533 ;; This function is called by:
  2534 ;;		_main
  2535 ;;		_glcdDrawPixel
  2536 ;;		_initGLCD
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text10
  2541  00157C                     __ptext10:
  2542                           	opt stack 0
  2543  00157C                     _glcdDrawRectangle:
  2544                           	opt stack 25
  2545                           
  2546                           ;incstack = 0
  2547                           ;glcdDrawRectangle@XS stored from wreg
  2548  00157C  6E19               	movwf	glcdDrawRectangle@XS,c
  2549                           
  2550                           ;GLCD_PIC_V1.1.c: 58: if(MADCTLbits.MX == 1 && MADCTLbits.MV ==1){
  2551  00157E  BC3F               	btfsc	_MADCTLbits,6,c
  2552  001580  AA3F               	btfss	_MADCTLbits,5,c
  2553  001582  D005               	goto	l288
  2554                           
  2555                           ;GLCD_PIC_V1.1.c: 60: YS += 3;
  2556  001584  0E03               	movlw	3
  2557  001586  2608               	addwf	glcdDrawRectangle@YS,f,c
  2558                           
  2559                           ;GLCD_PIC_V1.1.c: 61: YE += 3;
  2560  001588  0E03               	movlw	3
  2561  00158A  2609               	addwf	glcdDrawRectangle@YE,f,c
  2562  00158C  D015               	goto	l1354
  2563  00158E                     l288:
  2564                           
  2565                           ;GLCD_PIC_V1.1.c: 65: else if(MADCTLbits.MY == 1){
  2566  00158E  AE3F               	btfss	_MADCTLbits,7,c
  2567  001590  D008               	goto	l290
  2568                           
  2569                           ;GLCD_PIC_V1.1.c: 67: YS += 2;
  2570  001592  0E02               	movlw	2
  2571  001594  2608               	addwf	glcdDrawRectangle@YS,f,c
  2572                           
  2573                           ;GLCD_PIC_V1.1.c: 68: YE += 2;
  2574  001596  0E02               	movlw	2
  2575  001598  2609               	addwf	glcdDrawRectangle@YE,f,c
  2576                           
  2577                           ;GLCD_PIC_V1.1.c: 69: XS += 3;
  2578  00159A  0E03               	movlw	3
  2579  00159C  2619               	addwf	glcdDrawRectangle@XS,f,c
  2580                           
  2581                           ;GLCD_PIC_V1.1.c: 70: XE += 3;
  2582  00159E  0E03               	movlw	3
  2583  0015A0  D00E               	goto	L8
  2584  0015A2                     l290:
  2585                           
  2586                           ;GLCD_PIC_V1.1.c: 72: else if(MADCTLbits.MX == 1){
  2587  0015A2  AC3F               	btfss	_MADCTLbits,6,c
  2588  0015A4  D007               	goto	l292
  2589                           
  2590                           ;GLCD_PIC_V1.1.c: 74: YS += 2;
  2591  0015A6  0E02               	movlw	2
  2592  0015A8  2608               	addwf	glcdDrawRectangle@YS,f,c
  2593                           
  2594                           ;GLCD_PIC_V1.1.c: 75: YE += 2;
  2595  0015AA  0E02               	movlw	2
  2596  0015AC  2609               	addwf	glcdDrawRectangle@YE,f,c
  2597                           
  2598                           ;GLCD_PIC_V1.1.c: 76: XS += 1;
  2599  0015AE  2A19               	incf	glcdDrawRectangle@XS,f,c
  2600                           
  2601                           ;GLCD_PIC_V1.1.c: 77: XE += 1;
  2602  0015B0  2A07               	incf	glcdDrawRectangle@XE,f,c
  2603                           
  2604                           ;GLCD_PIC_V1.1.c: 78: }
  2605  0015B2  D006               	goto	l293
  2606  0015B4                     l292:
  2607                           
  2608                           ;GLCD_PIC_V1.1.c: 79: else{
  2609                           ;GLCD_PIC_V1.1.c: 81: YS += 1;
  2610  0015B4  2A08               	incf	glcdDrawRectangle@YS,f,c
  2611                           
  2612                           ;GLCD_PIC_V1.1.c: 82: YE += 1;
  2613  0015B6  2A09               	incf	glcdDrawRectangle@YE,f,c
  2614  0015B8                     l1354:
  2615                           
  2616                           ;GLCD_PIC_V1.1.c: 83: XS += 2;
  2617  0015B8  0E02               	movlw	2
  2618  0015BA  2619               	addwf	glcdDrawRectangle@XS,f,c
  2619                           
  2620                           ;GLCD_PIC_V1.1.c: 84: XE += 2;
  2621  0015BC  0E02               	movlw	2
  2622  0015BE                     L8:
  2623  0015BE  2607               	addwf	glcdDrawRectangle@XE,f,c
  2624  0015C0                     l293:
  2625                           
  2626                           ;GLCD_PIC_V1.1.c: 85: }
  2627                           ;GLCD_PIC_V1.1.c: 89: glcdTransfer(INST_RASET, 1);
  2628  0015C0  0E01               	movlw	1
  2629  0015C2  6E04               	movwf	glcdTransfer@cmd,c
  2630  0015C4  0E3C               	movlw	low GLCD_PIC@INST_RASET
  2631  0015C6  6EF6               	movwf	tblptrl,c
  2632  0015C8                     	if	1	;There is more than 1 active tblptr byte
  2633  0015C8  0E10               	movlw	high GLCD_PIC@INST_RASET
  2634  0015CA  6EF7               	movwf	tblptrh,c
  2635  0015CC                     	endif
  2636  0015CC                     	if	0	;There are less than 3 active tblptr bytes
  2637  0015CC                     	endif
  2638  0015CC  0008               	tblrd		*
  2639  0015CE  50F5               	movf	tablat,w,c
  2640  0015D0  EC43  F00D         	call	_glcdTransfer
  2641                           
  2642                           ;GLCD_PIC_V1.1.c: 90: glcdTransfer(0x00, 0);
  2643  0015D4  0E00               	movlw	0
  2644  0015D6  6E04               	movwf	glcdTransfer@cmd,c
  2645  0015D8  0E00               	movlw	0
  2646  0015DA  EC43  F00D         	call	_glcdTransfer
  2647                           
  2648                           ;GLCD_PIC_V1.1.c: 91: glcdTransfer(XS, 0);
  2649  0015DE  0E00               	movlw	0
  2650  0015E0  6E04               	movwf	glcdTransfer@cmd,c
  2651  0015E2  5019               	movf	glcdDrawRectangle@XS,w,c
  2652  0015E4  EC43  F00D         	call	_glcdTransfer
  2653                           
  2654                           ;GLCD_PIC_V1.1.c: 92: glcdTransfer(0x00, 0);
  2655  0015E8  0E00               	movlw	0
  2656  0015EA  6E04               	movwf	glcdTransfer@cmd,c
  2657  0015EC  0E00               	movlw	0
  2658  0015EE  EC43  F00D         	call	_glcdTransfer
  2659                           
  2660                           ;GLCD_PIC_V1.1.c: 93: glcdTransfer(XE - 1, 0);
  2661  0015F2  0E00               	movlw	0
  2662  0015F4  6E04               	movwf	glcdTransfer@cmd,c
  2663  0015F6  0407               	decf	glcdDrawRectangle@XE,w,c
  2664  0015F8  EC43  F00D         	call	_glcdTransfer
  2665                           
  2666                           ;GLCD_PIC_V1.1.c: 97: glcdTransfer(INST_CASET, 1);
  2667  0015FC  0E01               	movlw	1
  2668  0015FE  6E04               	movwf	glcdTransfer@cmd,c
  2669  001600  0E3D               	movlw	low GLCD_PIC@INST_CASET
  2670  001602  6EF6               	movwf	tblptrl,c
  2671  001604                     	if	1	;There is more than 1 active tblptr byte
  2672  001604  0E10               	movlw	high GLCD_PIC@INST_CASET
  2673  001606  6EF7               	movwf	tblptrh,c
  2674  001608                     	endif
  2675  001608                     	if	0	;There are less than 3 active tblptr bytes
  2676  001608                     	endif
  2677  001608  0008               	tblrd		*
  2678  00160A  50F5               	movf	tablat,w,c
  2679  00160C  EC43  F00D         	call	_glcdTransfer
  2680                           
  2681                           ;GLCD_PIC_V1.1.c: 98: glcdTransfer(0x00, 0);
  2682  001610  0E00               	movlw	0
  2683  001612  6E04               	movwf	glcdTransfer@cmd,c
  2684  001614  0E00               	movlw	0
  2685  001616  EC43  F00D         	call	_glcdTransfer
  2686                           
  2687                           ;GLCD_PIC_V1.1.c: 99: glcdTransfer(YS, 0);
  2688  00161A  0E00               	movlw	0
  2689  00161C  6E04               	movwf	glcdTransfer@cmd,c
  2690  00161E  5008               	movf	glcdDrawRectangle@YS,w,c
  2691  001620  EC43  F00D         	call	_glcdTransfer
  2692                           
  2693                           ;GLCD_PIC_V1.1.c: 100: glcdTransfer(0x00, 0);
  2694  001624  0E00               	movlw	0
  2695  001626  6E04               	movwf	glcdTransfer@cmd,c
  2696  001628  0E00               	movlw	0
  2697  00162A  EC43  F00D         	call	_glcdTransfer
  2698                           
  2699                           ;GLCD_PIC_V1.1.c: 101: glcdTransfer(YE - 1, 0);
  2700  00162E  0E00               	movlw	0
  2701  001630  6E04               	movwf	glcdTransfer@cmd,c
  2702  001632  0409               	decf	glcdDrawRectangle@YE,w,c
  2703  001634  EC43  F00D         	call	_glcdTransfer
  2704                           
  2705                           ;GLCD_PIC_V1.1.c: 103: glcdTransfer(INST_RAMWR, 1);
  2706  001638  0E01               	movlw	1
  2707  00163A  6E04               	movwf	glcdTransfer@cmd,c
  2708  00163C  0E3B               	movlw	low GLCD_PIC@INST_RAMWR
  2709  00163E  6EF6               	movwf	tblptrl,c
  2710  001640                     	if	1	;There is more than 1 active tblptr byte
  2711  001640  0E10               	movlw	high GLCD_PIC@INST_RAMWR
  2712  001642  6EF7               	movwf	tblptrh,c
  2713  001644                     	endif
  2714  001644                     	if	0	;There are less than 3 active tblptr bytes
  2715  001644                     	endif
  2716  001644  0008               	tblrd		*
  2717  001646  50F5               	movf	tablat,w,c
  2718  001648  EC43  F00D         	call	_glcdTransfer
  2719                           
  2720                           ;GLCD_PIC_V1.1.c: 107: if((XE == XS) && (YE == YS)){
  2721  00164C  5019               	movf	glcdDrawRectangle@XS,w,c
  2722  00164E  1807               	xorwf	glcdDrawRectangle@XE,w,c
  2723  001650  A4D8               	btfss	status,2,c
  2724  001652  D014               	goto	l294
  2725  001654  5008               	movf	glcdDrawRectangle@YS,w,c
  2726  001656  1809               	xorwf	glcdDrawRectangle@YE,w,c
  2727  001658  A4D8               	btfss	status,2,c
  2728  00165A  D010               	goto	l294
  2729                           
  2730                           ;GLCD_PIC_V1.1.c: 114: glcdTransfer(color & 0xFF, 0);
  2731  00165C  0E00               	movlw	0
  2732  00165E  6E04               	movwf	glcdTransfer@cmd,c
  2733  001660  500A               	movf	glcdDrawRectangle@color,w,c
  2734  001662  EC43  F00D         	call	_glcdTransfer
  2735                           
  2736                           ;GLCD_PIC_V1.1.c: 115: glcdTransfer((color >> 8) & 0xFF, 0);
  2737  001666  0E00               	movlw	0
  2738  001668  6E04               	movwf	glcdTransfer@cmd,c
  2739  00166A  500B               	movf	glcdDrawRectangle@color+1,w,c
  2740  00166C  EC43  F00D         	call	_glcdTransfer
  2741                           
  2742                           ;GLCD_PIC_V1.1.c: 116: glcdTransfer((color >> 16) & 0xFF, 0);
  2743  001670  0E00               	movlw	0
  2744  001672  6E04               	movwf	glcdTransfer@cmd,c
  2745  001674  500C               	movf	glcdDrawRectangle@color+2,w,c
  2746  001676  EC43  F00D         	call	_glcdTransfer
  2747                           
  2748                           ;GLCD_PIC_V1.1.c: 117: }
  2749  00167A  0012               	return	
  2750  00167C                     l294:
  2751                           
  2752                           ;GLCD_PIC_V1.1.c: 118: else{
  2753                           ;GLCD_PIC_V1.1.c: 130: unsigned short numLoops = (XE - XS) * (YE - YS);
  2754  00167C  5019               	movf	glcdDrawRectangle@XS,w,c
  2755  00167E  6E0E               	movwf	??_glcdDrawRectangle& (0+255),c
  2756  001680  6A0F               	clrf	(??_glcdDrawRectangle+1)& (0+255),c
  2757  001682  1E0E               	comf	??_glcdDrawRectangle,f,c
  2758  001684  1E0F               	comf	??_glcdDrawRectangle+1,f,c
  2759  001686  4A0E               	infsnz	??_glcdDrawRectangle,f,c
  2760  001688  2A0F               	incf	??_glcdDrawRectangle+1,f,c
  2761  00168A  5007               	movf	glcdDrawRectangle@XE,w,c
  2762  00168C  240E               	addwf	??_glcdDrawRectangle,w,c
  2763  00168E  6E01               	movwf	___wmul@multiplier,c
  2764  001690  0E00               	movlw	0
  2765  001692  200F               	addwfc	??_glcdDrawRectangle+1,w,c
  2766  001694  6E02               	movwf	___wmul@multiplier+1,c
  2767  001696  5008               	movf	glcdDrawRectangle@YS,w,c
  2768  001698  6E10               	movwf	(??_glcdDrawRectangle+2)& (0+255),c
  2769  00169A  6A11               	clrf	(??_glcdDrawRectangle+3)& (0+255),c
  2770  00169C  1E10               	comf	??_glcdDrawRectangle+2,f,c
  2771  00169E  1E11               	comf	??_glcdDrawRectangle+3,f,c
  2772  0016A0  4A10               	infsnz	??_glcdDrawRectangle+2,f,c
  2773  0016A2  2A11               	incf	??_glcdDrawRectangle+3,f,c
  2774  0016A4  5009               	movf	glcdDrawRectangle@YE,w,c
  2775  0016A6  2410               	addwf	??_glcdDrawRectangle+2,w,c
  2776  0016A8  6E03               	movwf	___wmul@multiplicand,c
  2777  0016AA  0E00               	movlw	0
  2778  0016AC  2011               	addwfc	??_glcdDrawRectangle+3,w,c
  2779  0016AE  6E04               	movwf	___wmul@multiplicand+1,c
  2780  0016B0  EC57  F00D         	call	___wmul	;wreg free
  2781  0016B4  C001  F012         	movff	?___wmul,glcdDrawRectangle@numLoops
  2782  0016B8  C002  F013         	movff	?___wmul+1,glcdDrawRectangle@numLoops+1
  2783                           
  2784                           ;GLCD_PIC_V1.1.c: 131: unsigned char colorData[3];
  2785                           ;GLCD_PIC_V1.1.c: 132: colorData[0] = color & 0xFF;
  2786  0016BC  C00A  F016         	movff	glcdDrawRectangle@color,glcdDrawRectangle@colorData
  2787                           
  2788                           ;GLCD_PIC_V1.1.c: 133: colorData[1] = (color >> 8) & 0xFF;
  2789  0016C0  C00B  F017         	movff	glcdDrawRectangle@color+1,glcdDrawRectangle@colorData+1
  2790                           
  2791                           ;GLCD_PIC_V1.1.c: 134: colorData[2] = (color >> 16) & 0xFF;
  2792  0016C4  C00C  F018         	movff	glcdDrawRectangle@color+2,glcdDrawRectangle@colorData+2
  2793                           
  2794                           ;GLCD_PIC_V1.1.c: 136: LATDbits.LATD0 = 0;
  2795  0016C8  908C               	bcf	3980,0,c	;volatile
  2796                           
  2797                           ;GLCD_PIC_V1.1.c: 137: LATDbits.LATD1 = 1;
  2798  0016CA  828C               	bsf	3980,1,c	;volatile
  2799                           
  2800                           ;GLCD_PIC_V1.1.c: 138: for(unsigned short i = 0; i < numLoops; i++){
  2801  0016CC  0E00               	movlw	0
  2802  0016CE  6E15               	movwf	glcdDrawRectangle@i+1,c
  2803  0016D0  0E00               	movlw	0
  2804  0016D2  6E14               	movwf	glcdDrawRectangle@i,c
  2805  0016D4  D00B               	goto	l296
  2806  0016D6                     
  2807                           ;GLCD_PIC_V1.1.c: 139: spiSend(colorData[0]);
  2808  0016D6  5016               	movf	glcdDrawRectangle@colorData,w,c
  2809  0016D8  EC82  F00D         	call	_spiSend
  2810                           
  2811                           ;GLCD_PIC_V1.1.c: 140: spiSend(colorData[1]);
  2812  0016DC  5017               	movf	glcdDrawRectangle@colorData+1,w,c
  2813  0016DE  EC82  F00D         	call	_spiSend
  2814                           
  2815                           ;GLCD_PIC_V1.1.c: 141: spiSend(colorData[2]);
  2816  0016E2  5018               	movf	glcdDrawRectangle@colorData+2,w,c
  2817  0016E4  EC82  F00D         	call	_spiSend
  2818  0016E8  4A14               	infsnz	glcdDrawRectangle@i,f,c
  2819  0016EA  2A15               	incf	glcdDrawRectangle@i+1,f,c
  2820  0016EC                     l296:
  2821  0016EC  5012               	movf	glcdDrawRectangle@numLoops,w,c
  2822  0016EE  5C14               	subwf	glcdDrawRectangle@i,w,c
  2823  0016F0  5013               	movf	glcdDrawRectangle@numLoops+1,w,c
  2824  0016F2  5815               	subwfb	glcdDrawRectangle@i+1,w,c
  2825  0016F4  A0D8               	btfss	status,0,c
  2826  0016F6  D7EF               	goto	l297
  2827                           
  2828                           ;GLCD_PIC_V1.1.c: 142: }
  2829                           ;GLCD_PIC_V1.1.c: 143: LATDbits.LATD0 = 1;
  2830  0016F8  808C               	bsf	3980,0,c	;volatile
  2831  0016FA  0012               	return	
  2832  0016FC                     __end_of_glcdDrawRectangle:
  2833                           	opt stack 0
  2834                           tblptru	equ	0xFF8
  2835                           tblptrh	equ	0xFF7
  2836                           tblptrl	equ	0xFF6
  2837                           tablat	equ	0xFF5
  2838                           plusw0	equ	0xFEB
  2839                           wreg	equ	0xFE8
  2840                           plusw2	equ	0xFDB
  2841                           status	equ	0xFD8
  2842                           
  2843 ;; *************** function _glcdTransfer *****************
  2844 ;; Defined at:
  2845 ;;		line 18 in file "GLCD_PIC_V1.1.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;  byte            1    wreg     unsigned char 
  2848 ;;  cmd             1    3[COMRAM] unsigned char 
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;  byte            1    5[COMRAM] unsigned char 
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, status,0, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2860 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;Total ram usage:        3 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    2
  2867 ;; This function calls:
  2868 ;;		_spiSend
  2869 ;; This function is called by:
  2870 ;;		_glcdDrawRectangle
  2871 ;;		_glcdSetCOLMOD
  2872 ;;		_initGLCD
  2873 ;;		_glcdSetOrigin
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text11
  2878  001A86                     __ptext11:
  2879                           	opt stack 0
  2880  001A86                     _glcdTransfer:
  2881                           	opt stack 25
  2882                           
  2883                           ;incstack = 0
  2884                           ;glcdTransfer@byte stored from wreg
  2885  001A86  6E06               	movwf	glcdTransfer@byte,c
  2886                           
  2887                           ;GLCD_PIC_V1.1.c: 27: LATDbits.LATD1 = (cmd == 1) ? 0 : 1;
  2888  001A88  0404               	decf	glcdTransfer@cmd,w,c
  2889  001A8A  B4D8               	btfsc	status,2,c
  2890  001A8C  D003               	goto	u330
  2891  001A8E  6A05               	clrf	??_glcdTransfer& (0+255),c
  2892  001A90  2A05               	incf	??_glcdTransfer& (0+255),f,c
  2893  001A92  D001               	goto	u348
  2894  001A94                     u330:
  2895  001A94  6A05               	clrf	??_glcdTransfer& (0+255),c
  2896  001A96                     u348:
  2897  001A96  4605               	rlncf	??_glcdTransfer,f,c
  2898  001A98  508C               	movf	3980,w,c	;volatile
  2899  001A9A  1805               	xorwf	??_glcdTransfer,w,c
  2900  001A9C  0BFD               	andlw	-3
  2901  001A9E  1805               	xorwf	??_glcdTransfer,w,c
  2902  001AA0  6E8C               	movwf	3980,c	;volatile
  2903                           
  2904                           ;GLCD_PIC_V1.1.c: 31: LATDbits.LATD0 = 0;
  2905  001AA2  908C               	bcf	3980,0,c	;volatile
  2906                           
  2907                           ;GLCD_PIC_V1.1.c: 33: spiSend(byte);
  2908  001AA4  5006               	movf	glcdTransfer@byte,w,c
  2909  001AA6  EC82  F00D         	call	_spiSend
  2910                           
  2911                           ;GLCD_PIC_V1.1.c: 35: LATDbits.LATD0 = 1;
  2912  001AAA  808C               	bsf	3980,0,c	;volatile
  2913  001AAC  0012               	return		;funcret
  2914  001AAE                     __end_of_glcdTransfer:
  2915                           	opt stack 0
  2916                           tblptru	equ	0xFF8
  2917                           tblptrh	equ	0xFF7
  2918                           tblptrl	equ	0xFF6
  2919                           tablat	equ	0xFF5
  2920                           plusw0	equ	0xFEB
  2921                           wreg	equ	0xFE8
  2922                           plusw2	equ	0xFDB
  2923                           status	equ	0xFD8
  2924                           
  2925 ;; *************** function _spiSend *****************
  2926 ;; Defined at:
  2927 ;;		line 33 in file "SPI_PIC.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;  val             1    wreg     unsigned char 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;  val             1    2[COMRAM] unsigned char 
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  1    wreg      void 
  2934 ;; Registers used:
  2935 ;;		wreg, status,2, cstack
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;Total ram usage:        1 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    1
  2948 ;; This function calls:
  2949 ;;		_spiTransfer
  2950 ;; This function is called by:
  2951 ;;		_glcdTransfer
  2952 ;;		_glcdDrawRectangle
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text12
  2957  001B04                     __ptext12:
  2958                           	opt stack 0
  2959  001B04                     _spiSend:
  2960                           	opt stack 26
  2961                           
  2962                           ;incstack = 0
  2963                           ;spiSend@val stored from wreg
  2964  001B04  6E03               	movwf	spiSend@val,c
  2965                           
  2966                           ;SPI_PIC.c: 41: spiTransfer(val);
  2967  001B06  5003               	movf	spiSend@val,w,c
  2968  001B08  EC6A  F00D         	call	_spiTransfer
  2969  001B0C  0012               	return		;funcret
  2970  001B0E                     __end_of_spiSend:
  2971                           	opt stack 0
  2972                           tblptru	equ	0xFF8
  2973                           tblptrh	equ	0xFF7
  2974                           tblptrl	equ	0xFF6
  2975                           tablat	equ	0xFF5
  2976                           plusw0	equ	0xFEB
  2977                           wreg	equ	0xFE8
  2978                           plusw2	equ	0xFDB
  2979                           status	equ	0xFD8
  2980                           
  2981 ;; *************** function _spiTransfer *****************
  2982 ;; Defined at:
  2983 ;;		line 12 in file "SPI_PIC.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  byteToTransf    1    wreg     unsigned char 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      unsigned char 
  2990 ;; Registers used:
  2991 ;;		wreg, status,2
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;Total ram usage:        2 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; This function calls:
  3004 ;;		Nothing
  3005 ;; This function is called by:
  3006 ;;		_spiSend
  3007 ;;		_spiReceive
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text13
  3012  001AD4                     __ptext13:
  3013                           	opt stack 0
  3014  001AD4                     _spiTransfer:
  3015                           	opt stack 26
  3016                           
  3017                           ;incstack = 0
  3018                           ;spiTransfer@byteToTransfer stored from wreg
  3019  001AD4  6E02               	movwf	spiTransfer@byteToTransfer,c
  3020                           
  3021                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
  3022  001AD6  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  3023  001ADA                     l950:
  3024  001ADA  B69E               	btfsc	3998,3,c	;volatile
  3025  001ADC  D002               	goto	u10
  3026  001ADE  0E01               	movlw	1
  3027  001AE0  D001               	goto	u12
  3028  001AE2                     u10:
  3029  001AE2  0E00               	movlw	0
  3030  001AE4                     u12:
  3031  001AE4  6E01               	movwf	??_spiTransfer& (0+255),c
  3032  001AE6  B0C7               	btfsc	4039,0,c	;volatile
  3033  001AE8  D002               	goto	u20
  3034  001AEA  0E01               	movlw	1
  3035  001AEC  D001               	goto	u22
  3036  001AEE                     u20:
  3037  001AEE  0E00               	movlw	0
  3038  001AF0                     u22:
  3039  001AF0  1001               	iorwf	??_spiTransfer,w,c
  3040  001AF2  E1F3               	bnz	l950
  3041                           
  3042                           ;SPI_PIC.c: 30: return SSPBUF;
  3043  001AF4  50C9               	movf	4041,w,c	;volatile
  3044  001AF6  0012               	return	
  3045  001AF8                     __end_of_spiTransfer:
  3046                           	opt stack 0
  3047                           tblptru	equ	0xFF8
  3048                           tblptrh	equ	0xFF7
  3049                           tblptrl	equ	0xFF6
  3050                           tablat	equ	0xFF5
  3051                           plusw0	equ	0xFEB
  3052                           wreg	equ	0xFE8
  3053                           plusw2	equ	0xFDB
  3054                           status	equ	0xFD8
  3055                           
  3056 ;; *************** function ___wmul *****************
  3057 ;; Defined at:
  3058 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;  multiplier      2    0[COMRAM] unsigned int 
  3061 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  product         2    4[COMRAM] unsigned int 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  2    0[COMRAM] unsigned int 
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0, prodl, prodh
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3073 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;Total ram usage:        6 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; This function calls:
  3080 ;;		Nothing
  3081 ;; This function is called by:
  3082 ;;		_glcdDrawRectangle
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           	psect	text14
  3087  001AAE                     __ptext14:
  3088                           	opt stack 0
  3089  001AAE                     ___wmul:
  3090                           	opt stack 27
  3091                           
  3092                           ;incstack = 0
  3093  001AAE  5001               	movf	___wmul@multiplier,w,c
  3094  001AB0  0203               	mulwf	___wmul@multiplicand,c
  3095  001AB2  CFF3 F005          	movff	prodl,___wmul@product
  3096  001AB6  CFF4 F006          	movff	prodh,___wmul@product+1
  3097  001ABA  5001               	movf	___wmul@multiplier,w,c
  3098  001ABC  0204               	mulwf	___wmul@multiplicand+1,c
  3099  001ABE  50F3               	movf	prodl,w,c
  3100  001AC0  2606               	addwf	___wmul@product+1,f,c
  3101  001AC2  5002               	movf	___wmul@multiplier+1,w,c
  3102  001AC4  0203               	mulwf	___wmul@multiplicand,c
  3103  001AC6  50F3               	movf	prodl,w,c
  3104  001AC8  2606               	addwf	___wmul@product+1,f,c
  3105  001ACA  C005  F001         	movff	___wmul@product,?___wmul
  3106  001ACE  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3107  001AD2  0012               	return	
  3108  001AD4                     __end_of___wmul:
  3109                           	opt stack 0
  3110                           tblptru	equ	0xFF8
  3111                           tblptrh	equ	0xFF7
  3112                           tblptrl	equ	0xFF6
  3113                           tablat	equ	0xFF5
  3114                           prodh	equ	0xFF4
  3115                           prodl	equ	0xFF3
  3116                           plusw0	equ	0xFEB
  3117                           wreg	equ	0xFE8
  3118                           plusw2	equ	0xFDB
  3119                           status	equ	0xFD8
  3120                           tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           prodh	equ	0xFF4
  3125                           prodl	equ	0xFF3
  3126                           plusw0	equ	0xFEB
  3127                           wreg	equ	0xFE8
  3128                           plusw2	equ	0xFDB
  3129                           status	equ	0xFD8
  3130                           
  3131                           	psect	rparam
  3132  0000                     tblptru	equ	0xFF8
  3133                           tblptrh	equ	0xFF7
  3134                           tblptrl	equ	0xFF6
  3135                           tablat	equ	0xFF5
  3136                           prodh	equ	0xFF4
  3137                           prodl	equ	0xFF3
  3138                           plusw0	equ	0xFEB
  3139                           wreg	equ	0xFE8
  3140                           plusw2	equ	0xFDB
  3141                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     62      63
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_print_px_char
    _print_px_char->_glcdDrawPixel
    _glcdDrawPixel->_glcdDrawRectangle
    _init->_initGLCD
    _initGLCD->_glcdDrawRectangle
    _glcdSetCOLMOD->_glcdTransfer
    _glcdDrawRectangle->___wmul
    _glcdDrawRectangle->_glcdTransfer
    _glcdTransfer->_spiSend
    _spiSend->_spiTransfer

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   36195
                                             54 COMRAM     8     8      0
                  _glcdDrawRectangle
                               _init
                        _new_px_char
                      _print_px_char
 ---------------------------------------------------------------------------------
 (1) _print_px_char                                       22    10     12   10328
                                             32 COMRAM    22    10     12
                            ___awdiv
                            ___awmod
                      _glcdDrawPixel
 ---------------------------------------------------------------------------------
 (2) _glcdDrawPixel                                        7     2      5    8671
                                             25 COMRAM     7     2      5
                            ___awdiv (ARG)
                            ___awmod (ARG)
                  _glcdDrawRectangle
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _new_px_char                                         16     8      8     243
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   17390
                           _initGLCD
 ---------------------------------------------------------------------------------
 (2) _initGLCD                                             2     2      0   17390
                                             25 COMRAM     2     2      0
                  _glcdDrawRectangle
                      _glcdSetCOLMOD
                       _glcdTransfer
                            _spiInit
 ---------------------------------------------------------------------------------
 (3) _spiInit                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _glcdSetCOLMOD                                        3     3      0    4606
                                              6 COMRAM     3     3      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (3) _glcdDrawRectangle                                   19    12      7    8211
                                              6 COMRAM    19    12      7
                             ___wmul
                       _glcdTransfer
                            _spiSend
 ---------------------------------------------------------------------------------
 (4) _glcdTransfer                                         3     2      1    4558
                                              3 COMRAM     3     2      1
                            _spiSend
 ---------------------------------------------------------------------------------
 (4) _spiSend                                              1     1      0      30
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (5) _spiTransfer                                          2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _glcdDrawRectangle
     ___wmul
     _glcdTransfer
       _spiSend
         _spiTransfer
     _spiSend
       _spiTransfer
   _init
     _initGLCD
       _glcdDrawRectangle
         ___wmul
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer
       _glcdSetCOLMOD
         _glcdTransfer
           _spiSend
             _spiTransfer
       _glcdTransfer
         _spiSend
           _spiTransfer
       _spiInit
   _new_px_char
   _print_px_char
     ___awdiv
     ___awmod
     _glcdDrawPixel
       ___awdiv (ARG)
       ___awmod (ARG)
       _glcdDrawRectangle (ARG)
         ___wmul
         _glcdTransfer
           _spiSend
             _spiTransfer
         _spiSend
           _spiTransfer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3E      3F       1       49.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3F      34        0.0%
DATA                 0      0      3F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jan 28 23:29:34 2018

                    ?_print_px_char 0021                         _SSPSTATbits 000FC7  
                    ??_glcdTransfer 0005                                  u10 1AE2  
                                u20 1AEE                                  u12 1AE4  
                                u22 1AF0                         __CFG_CPD$ON 000000  
                      ___awdiv@sign 0006                 ___wmul@multiplicand 0003  
                       __CFG_BORV$3 000000                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                                 l131 1728  
                               l140 1554                                 l133 179E  
                               l310 19A4                                 l302 1950  
                               l134 181C                                 l303 1974  
                               l135 1834                                 l312 19AE  
                               l307 19B6                                 l308 199C  
                               l172 1A00                                 l309 19C8  
                               l501 1898                                 l174 1A16  
                               l502 18A2                                 l510 18F0  
                               l175 19F2                                 l503 18B0  
                               l511 18E8                                 l176 19F6  
                               l177 19FA                                 l290 15A2  
                               l514 1908                                 l515 1912  
                               l507 18CE                                 l292 15B4  
                               l516 1920                                 l508 18DA  
                               l293 15C0                                 l294 167C  
                               l296 16EC                                 l288 158E  
                               l297 16D6                                 l494 184A  
                               l495 185A                                 l497 1878  
                               l498 1870                                 l950 1ADA  
                      __CFG_CPB$OFF 000000                                 u330 1A94  
                               _RED 1019                                 u530 18F4  
                               u611 154C                                 u348 1A96  
                               u621 156E                                 u470 187C  
                               u561 1A4A                                 u570 1726  
                               u637 1086                                 u647 10B2  
                               u657 10DE                                 u667 1370  
         __end_ofGLCD_PIC@INST_TEON 1039                        ___awmod@sign 0006  
                               wreg 000FE8                        __CFG_LVP$OFF 000000  
                      __CFG_WDT$OFF 000000                                l1354 15B8  
                              _BLUE 1009                                _LATA 000F89  
                              _LATB 000F8A                                _LATC 000F8B  
                              _LATD 000F8C                                _LATE 000F8D  
                              _GREY 1021                                _main 137A  
                              _init 1A54                                prodh 000FF4  
                              prodl 000FF3                                start 0000  
                     __CFG_IESO$OFF 000000                       __CFG_MCLRE$ON 000000  
                      ___param_bank 000000                               ?_main 0001  
                             ?_init 0001                     __end_of___awdiv 18BA  
                             _BLACK 1025                     __end_of___awmod 192A  
                  __end_of_INST_NOP 1069                     ___awdiv@divisor 0003  
                             _GREEN 100D                     ___awdiv@counter 0005  
                             _WHITE 101D                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _SSPIF 007CF3                       __CFG_PWRT$OFF 000000  
                     __CFG_WRT0$OFF 000000                       __CFG_WRT1$OFF 000000  
                     __CFG_WRT2$OFF 000000                       __CFG_WRT3$OFF 000000  
                    __CFG_EBTR0$OFF 000000                      __CFG_FCMEN$OFF 000000  
                    __CFG_EBTR1$OFF 000000                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                       __CFG_WRTB$OFF 000000  
                     __CFG_WRTC$OFF 000000                       __CFG_WRTD$OFF 000000  
     __end_ofGLCD_PIC@INST_VMOFCTR2 102A                      __CFG_EBTRB$OFF 000000  
                   __end_of_spiInit 1A20                               tablat 000FF5  
                   __end_of_spiSend 1B0E                               plusw0 000FEB  
                             plusw2 000FDB                               status 000FD8  
                    __CFG_PBADEN$ON 000000                        __end_of_BLUE 100D  
                      __end_of_GREY 1025                     ??_print_px_char 002D  
                   __initialization 1AF8                        ?_new_px_char 0001  
                      __end_of_main 157C                        __end_of_init 1A86  
      glcdSetCOLMOD@numBitsPerPixel 0007                      __CFG_OSC$HSPLL 000000  
                            ??_main 0037                              ??_init 001C  
                     __activetblptr 000002                              _ADCON0 000FC2  
                            _ADCON1 000FC1                     glcdDrawPixel@XS 0020  
                   glcdDrawPixel@YS 001A                    ___awdiv@dividend 0001  
                 _glcdDrawRectangle 157C                   __end_of_INST_TEON 1059  
                            _INDIGO 1005                __end_of_glcdTransfer 1AAE  
                            _ORANGE 1015                  ?_glcdDrawRectangle 0007  
                            _VIOLET 1001                              _YELLOW 1011  
                            _SSPBUF 000FC9                      __CFG_XINST$OFF 000000  
         glcdDrawRectangle@numLoops 0012                 ??_glcdDrawRectangle 000E  
                            ___wmul 1AAE                    __end_of_initGLCD 137A  
                         ??___awdiv 0005                      __CFG_STVREN$ON 000000  
                         ??___awmod 0005                    ___awdiv@quotient 0007  
                   ___awmod@divisor 0003            __end_ofGLCD_PIC@INST_NOP 1049  
                   ___awmod@counter 0005                        ?_spiTransfer 0001  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                         ??_spiInit 0001                           ??_spiSend 0003  
         __end_of_glcdDrawRectangle 16FC                          __accesstop 0080  
           __end_of__initialization 1AFA                       __end_of_BLACK 1029  
                     ___rparam_used 000001                       __end_of_GREEN 1011  
                     __end_of_WHITE 1021         __end_ofGLCD_PIC@INST_GAMSET 1041  
       __end_ofGLCD_PIC@INST_COLMOD 1035         __end_ofGLCD_PIC@INST_MADCTL 1038  
       __end_ofGLCD_PIC@INST_DISPON 103F         __end_ofGLCD_PIC@INST_IDMOFF 1037  
                    __pcstackCOMRAM 0001         __end_ofGLCD_PIC@INST_INVCTR 1031  
       __end_ofGLCD_PIC@INST_INVOFF 1043         __end_ofGLCD_PIC@INST_PWCTR1 1030  
       __end_ofGLCD_PIC@INST_PWCTR2 102F         __end_ofGLCD_PIC@INST_PWCTR3 102E  
       __end_ofGLCD_PIC@INST_PWCTR4 102D         __end_ofGLCD_PIC@INST_PWCTR5 102C  
       __end_ofGLCD_PIC@INST_VMCTR1 102B         __end_ofGLCD_PIC@INST_SLPOUT 1046  
             __end_of_glcdDrawPixel 1998                      print_px_char@i 0035  
                    print_px_char@m 0031                      print_px_char@p 0025  
                    print_px_char@x 0021                      print_px_char@y 0023  
                     _INST_VMOFCTR2 1049               __end_of_glcdSetCOLMOD 19E8  
                           ?___wmul 0001                __size_of_new_px_char 0034  
                glcdDrawRectangle@i 0014                  __end_of_INST_CASET 105E  
                __end_of_INST_IDMON 1056                  __end_of_INST_INVON 1062  
                __end_of_INST_RASET 105D                  __end_of_INST_RAMWR 105C  
                __end_of_INST_TEOFF 105A                  __end_of_INST_NORON 1064  
                __end_of_INST_PTLAR 105B                  __end_of_INST_SLPIN 1067  
                __end_of_INST_PTLON 1065               __size_of_glcdTransfer 0028  
        __size_of_glcdDrawRectangle 0180           spiTransfer@byteToTransfer 0002  
                           _SSPCON1 000FC6                             _SSPSTAT 000FC7  
                         ?_initGLCD 0001                  glcdDrawPixel@color 001B  
                           __Hparam 0000                      _GLCD_SIZE_HORZ 106A  
                           __Lparam 0000                      _GLCD_SIZE_VERT 1069  
              __end_of_INST_DISPOFF 1060                __end_of_INST_FRMCTR1 1054  
              __end_of_INST_FRMCTR2 1053                __end_of_INST_FRMCTR3 1052  
                           ___awdiv 1836                             ___awmod 18BA  
                   __size_of___wmul 0026                        __psmallconst 1000  
                           __pcinit 1AF8                        _glcdTransfer 1A86  
                           __ramtop 1000                             __ptext0 137A  
                           __ptext1 16FC                             __ptext2 192A  
                           __ptext3 18BA                             __ptext4 1836  
                           __ptext5 1A20                             __ptext6 1A54  
                           __ptext7 106E                             __ptext8 19E8  
                           __ptext9 1998                __end_of_INST_SWRESET 1068  
                  ___awmod@dividend 0001                             _spiInit 19E8  
                           _spiSend 1B04                __size_of_spiTransfer 0024  
              end_of_initialization 1AFA               GLCD_PIC@INST_VMOFCTR2 1029  
                        ??_initGLCD 001A                       __Lmediumconst 0000  
            __end_of_GLCD_SIZE_HORZ 106B                           _INST_TEON 1058  
            __end_of_GLCD_SIZE_VERT 106A               __end_of_print_px_char 1836  
                  glcdTransfer@byte 0006                      spiInit@divider 0001  
                         _TRISCbits 000F94                           _TRISDbits 000F95  
                    __end_of_INDIGO 1009                      __end_of_ORANGE 1019  
                        main@letter 0037                      __end_of_VIOLET 1005  
                    __end_of_YELLOW 1015        __end_ofGLCD_PIC@INST_DISPOFF 1040  
      __end_ofGLCD_PIC@INST_FRMCTR1 1034        __end_ofGLCD_PIC@INST_FRMCTR2 1033  
      __end_ofGLCD_PIC@INST_FRMCTR3 1032                      __end_of___wmul 1AD4  
      __end_ofGLCD_PIC@INST_SWRESET 1048                 start_initialization 1AF8  
                       __end_of_RED 101D              glcdDrawRectangle@color 000A  
                          ??___wmul 0005                    __CFG_LPT1OSC$OFF 000000  
                      new_px_char@a 0001                        new_px_char@b 0005  
                      new_px_char@p 0009  __end_of_GLCD_ADDRESSABLE_SIZE_HORZ 106D  
        _GLCD_ADDRESSABLE_SIZE_HORZ 106C  __end_of_GLCD_ADDRESSABLE_SIZE_VERT 106C  
        _GLCD_ADDRESSABLE_SIZE_VERT 106B                         __pbssCOMRAM 003F  
        __end_ofGLCD_PIC@INST_CASET 103E          __end_ofGLCD_PIC@INST_IDMON 1036  
        __end_ofGLCD_PIC@INST_INVON 1042          __end_ofGLCD_PIC@INST_RASET 103D  
        __end_ofGLCD_PIC@INST_RAMWR 103C                        _INST_DISPOFF 105F  
        __end_ofGLCD_PIC@INST_TEOFF 103A          __end_ofGLCD_PIC@INST_NORON 1044  
        __end_ofGLCD_PIC@INST_PTLAR 103B          __end_ofGLCD_PIC@INST_SLPIN 1047  
        __end_ofGLCD_PIC@INST_PTLON 1045                        _INST_FRMCTR1 1053  
                      _INST_FRMCTR2 1052                        _INST_FRMCTR3 1051  
                 __size_of_initGLCD 030C                        _INST_SWRESET 1067  
            __size_of_glcdDrawPixel 006E                   __CFG_CCP2MX$PORTC 000000  
                     ??_new_px_char 0009                            ?___awdiv 0001  
                          ?___awmod 0001              __size_of_glcdSetCOLMOD 0050  
                       __smallconst 1000                 glcdDrawRectangle@XE 0007  
               glcdDrawRectangle@YE 0009                 glcdDrawRectangle@XS 0019  
               glcdDrawRectangle@YS 0008                 __end_of_INST_GAMSET 1061  
                          ?_spiInit 0001                 __end_of_INST_COLMOD 1055  
                          ?_spiSend 0001                 __end_of_INST_MADCTL 1058  
               __end_of_INST_DISPON 105F                 __end_of_INST_IDMOFF 1057  
              GLCD_PIC@INST_DISPOFF 103F                 __end_of_INST_INVCTR 1051  
               __end_of_INST_INVOFF 1063                GLCD_PIC@INST_FRMCTR1 1033  
              GLCD_PIC@INST_FRMCTR2 1032                GLCD_PIC@INST_FRMCTR3 1031  
               __end_of_INST_PWCTR1 1050                 __end_of_INST_PWCTR2 104F  
               __end_of_INST_PWCTR3 104E                 __end_of_INST_PWCTR4 104D  
               __end_of_INST_PWCTR5 104C                 __end_of_INST_VMCTR1 104B  
               __end_of_INST_SLPOUT 1066                      ___wmul@product 0005  
                          _LATDbits 000F8C                GLCD_PIC@INST_SWRESET 1047  
                          _INST_NOP 1068                          spiSend@val 0003  
                  __CFG_WDTPS$32768 000000                     glcdTransfer@cmd 0004  
               __end_of_new_px_char 1A54                   ___wmul@multiplier 0001  
                     ??_spiTransfer 0001                glcdSetCOLMOD@rawData 0008  
                     _glcdDrawPixel 192A                       _glcdSetCOLMOD 1998  
                          __Hrparam 0000                            __Lrparam 0000  
                __CFG_BOREN$SBORDIS 000000                    __size_of___awdiv 0084  
                  __size_of___awmod 0070                         _INST_GAMSET 1060  
                       _INST_COLMOD 1054                         _INST_MADCTL 1057  
                       _INST_DISPON 105E                         _INST_IDMOFF 1056  
                       _INST_INVCTR 1050                         _INST_INVOFF 1062  
                    ?_glcdDrawPixel 001A                         _INST_PWCTR1 104F  
                       _INST_PWCTR2 104E                         _INST_PWCTR3 104D  
                       _INST_PWCTR4 104C                         _INST_PWCTR5 104B  
                       _INST_VMCTR1 104A                         _INST_SLPOUT 1065  
                          __ptext10 157C                            __ptext11 1A86  
                          __ptext12 1B04                            __ptext13 1AD4  
                          __ptext14 1AAE                    __size_of_spiInit 0038  
                  __size_of_spiSend 000A               __end_of_INST_VMOFCTR2 104A  
                        _MADCTLbits 003F              __size_of_print_px_char 013A  
               __end_of_spiTransfer 1AF8                      ?_glcdSetCOLMOD 0001  
                          _initGLCD 106E                 GLCD_PIC@INST_GAMSET 1040  
               GLCD_PIC@INST_COLMOD 1034                 GLCD_PIC@INST_MADCTL 1037  
               GLCD_PIC@INST_DISPON 103E                 GLCD_PIC@INST_IDMOFF 1036  
                     __size_of_main 0202                       __size_of_init 0032  
               GLCD_PIC@INST_INVCTR 1030                 GLCD_PIC@INST_INVOFF 1042  
               GLCD_PIC@INST_PWCTR1 102F                 GLCD_PIC@INST_PWCTR2 102E  
               GLCD_PIC@INST_PWCTR3 102D                 GLCD_PIC@INST_PWCTR4 102C  
               GLCD_PIC@INST_PWCTR5 102B                 GLCD_PIC@INST_VMCTR1 102A  
               GLCD_PIC@INST_SLPOUT 1045                         _new_px_char 1A20  
                        _INST_CASET 105D                          _INST_IDMON 1055  
                        _INST_INVON 1061                          _INST_RASET 105C  
                        _INST_RAMWR 105B                          _INST_TEOFF 1059  
                        _INST_NORON 1063                          _INST_PTLAR 105A  
                        _INST_SLPIN 1066                          _INST_PTLON 1064  
                GLCD_PIC@INST_CASET 103D                  GLCD_PIC@INST_IDMON 1035  
                GLCD_PIC@INST_INVON 1041                  GLCD_PIC@INST_RASET 103C  
                GLCD_PIC@INST_RAMWR 103B                  GLCD_PIC@INST_TEOFF 1039  
                GLCD_PIC@INST_NORON 1043                  GLCD_PIC@INST_PTLAR 103A  
                GLCD_PIC@INST_SLPIN 1046                  GLCD_PIC@INST_PTLON 1044  
        glcdDrawRectangle@colorData 0016                       _print_px_char 16FC  
                     ?_glcdTransfer 0004                     ??_glcdDrawPixel 001F  
                       _spiTransfer 1AD4                   GLCD_PIC@INST_TEON 1038  
                       _SSPCON1bits 000FC6                     ??_glcdSetCOLMOD 0007  
                  GLCD_PIC@INST_NOP 1048  
